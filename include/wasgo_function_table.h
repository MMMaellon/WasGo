#include "wasm_export.h"
static NativeSymbol native_symbols[] = 
{
	EXPORT_WASM_API_WITH_SIG("ARVRAnchor::get_anchor_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRAnchor::get_anchor_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRAnchor::get_is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRAnchor::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRAnchor::get_plane", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRAnchor::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRAnchor::set_anchor_id", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_controller_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_controller_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_hand", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_joystick_axis", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_joystick_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::get_rumble", "()f"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::is_button_pressed", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::set_controller_id", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ARVRController::set_rumble", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::get_anchor_detection_is_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::get_camera_feed_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::get_capabilities", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::get_render_targetsize", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::get_tracking_status", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::initialize", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::is_initialized", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::is_primary", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::is_stereo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::set_anchor_detection_is_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::set_is_initialized", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::set_is_primary", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRInterface::uninitialize", "()"),
	EXPORT_WASM_API_WITH_SIG("ARVROrigin::get_world_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("ARVROrigin::set_world_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::_set_joy_id", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::_set_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::_set_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::_set_orientation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::_set_rw_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::_set_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_hand", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_joy_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_orientation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_rumble", "()f"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_tracks_orientation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_tracks_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_transform", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::get_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRPositionalTracker::set_rumble", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::center_on_hmd", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::find_interface", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_hmd_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_interface", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_interface_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_interfaces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_last_commit_usec", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_last_frame_usec", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_last_process_usec", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_primary_interface", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_reference_frame", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_tracker", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_tracker_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::get_world_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::set_primary_interface", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ARVRServer::set_world_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AStar::_compute_cost", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("AStar::_estimate_cost", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("AStar::add_point", "(I*~f)"),
	EXPORT_WASM_API_WITH_SIG("AStar::are_points_connected", "(II*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("AStar::connect_points", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("AStar::disconnect_points", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_available_point_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_closest_point", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_closest_position_in_segment", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_id_path", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_point_capacity", "()I"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_point_connections", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_point_path", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_point_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_point_weight_scale", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AStar::get_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::has_point", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::is_point_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar::remove_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AStar::reserve_space", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AStar::set_point_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AStar::set_point_position", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AStar::set_point_weight_scale", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::add_point", "(I*~f)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::are_points_connected", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::connect_points", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::disconnect_points", "(II)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_available_point_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_closest_point", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_closest_position_in_segment", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_id_path", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_point_capacity", "()I"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_point_connections", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_point_path", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_point_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_point_weight_scale", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::get_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::has_point", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::is_point_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::remove_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::reserve_space", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::set_point_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::set_point_position", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AStar2D::set_point_weight_scale", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::_builtin_text_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::_custom_action", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::_ok", "()"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::add_button", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::add_cancel", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::get_hide_on_ok", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::get_label", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::get_ok", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::has_autowrap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::register_text_enter", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::set_autowrap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::set_hide_on_ok", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AcceptDialog::set_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::_is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::_res_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::_set_playing", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::get_animation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::get_frame", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::get_speed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::get_sprite_frames", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::is_centered", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::is_flipped_h", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::is_flipped_v", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::play", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_centered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_flip_h", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_flip_v", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_frame", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_speed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::set_sprite_frames", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::_is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::_res_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::_set_playing", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::get_animation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::get_frame", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::get_sprite_frames", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::play", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::set_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::set_frame", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::set_sprite_frames", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedSprite3D::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::_update_proxy", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::get_fps", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::get_frame_delay", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::get_frame_texture", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::get_frames", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::set_fps", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::set_frame_delay", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::set_frame_texture", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimatedTexture::set_frames", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Animation::add_track", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::animation_track_get_key_animation", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::animation_track_insert_key", "(If*~)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::animation_track_set_key_animation", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::audio_track_get_key_end_offset", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("Animation::audio_track_get_key_start_offset", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("Animation::audio_track_get_key_stream", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::audio_track_insert_key", "(If*~ff)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::audio_track_set_key_end_offset", "(IIf)"),
	EXPORT_WASM_API_WITH_SIG("Animation::audio_track_set_key_start_offset", "(IIf)"),
	EXPORT_WASM_API_WITH_SIG("Animation::audio_track_set_key_stream", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_get_key_in_handle", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_get_key_out_handle", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_get_key_value", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_insert_key", "(Iff*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_interpolate", "(If)f"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_set_key_in_handle", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_set_key_out_handle", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::bezier_track_set_key_value", "(IIf)"),
	EXPORT_WASM_API_WITH_SIG("Animation::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("Animation::copy_track", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::find_track", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::get_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("Animation::get_step", "()f"),
	EXPORT_WASM_API_WITH_SIG("Animation::get_track_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Animation::has_loop", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::method_track_get_key_indices", "(Iff)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::method_track_get_name", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::method_track_get_params", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::remove_track", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Animation::set_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Animation::set_loop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::set_step", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_find_key", "(If*~)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_interpolation_loop_wrap", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_interpolation_type", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_key_count", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_key_time", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_key_transition", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_key_value", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_path", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_get_type", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_insert_key", "(If*~f)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_is_enabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_is_imported", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_move_down", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_move_to", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_move_up", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_remove_key", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_remove_key_at_position", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_enabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_imported", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_interpolation_loop_wrap", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_interpolation_type", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_key_time", "(IIf)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_key_transition", "(IIf)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_key_value", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_set_path", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Animation::track_swap", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Animation::transform_track_insert_key", "(If*~*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("Animation::transform_track_interpolate", "(If)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::value_track_get_key_indices", "(Iff)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::value_track_get_update_mode", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Animation::value_track_set_update_mode", "(II)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::_get_filters", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::_set_filters", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::add_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::blend_animation", "(*~ff*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::blend_input", "(If*~fI*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::blend_node", "(*~*~f*~fI*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_caption", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_child_by_name", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_child_nodes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_input_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_input_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_parameter", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_parameter_default_value", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::get_parameter_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::has_filter", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::is_filter_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::is_path_filtered", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::process", "(f*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::remove_input", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::set_filter_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::set_filter_path", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNode::set_parameter", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeAdd2::is_using_sync", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeAdd2::set_use_sync", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeAdd3::is_using_sync", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeAdd3::set_use_sync", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeAnimation::get_animation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeAnimation::set_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlend2::is_using_sync", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlend2::set_use_sync", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlend3::is_using_sync", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlend3::set_use_sync", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::_add_blend_point", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::_tree_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::add_blend_point", "(*~fI)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::get_blend_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::get_blend_point_node", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::get_blend_point_position", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::get_max_space", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::get_min_space", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::get_snap", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::get_value_label", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::remove_blend_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::set_blend_point_node", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::set_blend_point_position", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::set_max_space", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::set_min_space", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::set_snap", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace1D::set_value_label", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::_add_blend_point", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::_get_triangles", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::_set_triangles", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::_tree_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::_update_triangles", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::add_blend_point", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::add_triangle", "(IIII)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_auto_triangles", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_blend_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_blend_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_blend_point_node", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_blend_point_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_max_space", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_min_space", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_snap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_triangle_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_triangle_point", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_x_label", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::get_y_label", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::remove_blend_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::remove_triangle", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_auto_triangles", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_blend_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_blend_point_node", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_blend_point_position", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_max_space", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_min_space", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_snap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_x_label", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendSpace2D::set_y_label", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::_node_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::_tree_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::add_node", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::connect_node", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::disconnect_node", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::get_graph_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::get_node", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::get_node_position", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::has_node", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::remove_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::rename_node", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::set_graph_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeBlendTree::set_node_position", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::get_autorestart_delay", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::get_autorestart_random_delay", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::get_fadein_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::get_fadeout_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::get_mix_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::has_autorestart", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::is_using_sync", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::set_autorestart", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::set_autorestart_delay", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::set_autorestart_random_delay", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::set_fadein_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::set_fadeout_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::set_mix_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeOneShot::set_use_sync", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::_tree_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::add_node", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::add_transition", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_end_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_graph_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_node", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_node_name", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_node_position", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_start_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_transition", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_transition_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_transition_from", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::get_transition_to", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::has_node", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::has_transition", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::remove_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::remove_transition", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::remove_transition_by_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::rename_node", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::set_end_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::set_graph_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::set_node_position", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachine::set_start_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachinePlayback::get_current_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachinePlayback::get_travel_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachinePlayback::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachinePlayback::start", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachinePlayback::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachinePlayback::travel", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::get_advance_condition", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::get_priority", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::get_switch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::get_xfade_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::has_auto_advance", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::is_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::set_advance_condition", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::set_auto_advance", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::set_disabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::set_priority", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::set_switch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeStateMachineTransition::set_xfade_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::get_cross_fade_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::get_enabled_inputs", "()I"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::get_input_caption", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::is_input_set_as_auto_advance", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::set_cross_fade_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::set_enabled_inputs", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::set_input_as_auto_advance", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationNodeTransition::set_input_caption", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::_animation_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::_node_removed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::add_animation", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::advance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::animation_get_next", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::animation_set_next", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::clear_caches", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::clear_queue", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::find_animation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_animation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_animation_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_animation_process_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_assigned_animation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_autoplay", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_blend_time", "(*~*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_current_animation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_current_animation_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_current_animation_position", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_default_blend_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_method_call_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_playing_speed", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_queue", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_root", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::get_speed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::has_animation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::play", "(*~ff*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::play_backwards", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::queue", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::remove_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::rename_animation", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::seek", "(f*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_animation_process_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_assigned_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_autoplay", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_blend_time", "(*~*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_current_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_default_blend_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_method_call_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_root", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::set_speed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationPlayer::stop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::_clear_caches", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::_node_removed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::_tree_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::_update_properties", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::advance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::get_animation_player", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::get_process_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::get_root_motion_track", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::get_root_motion_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::get_tree_root", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::rename_parameter", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::set_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::set_animation_player", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::set_process_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::set_root_motion_track", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTree::set_tree_root", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::add_node", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::advance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::animation_node_get_animation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::animation_node_get_master_animation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::animation_node_get_position", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::animation_node_set_animation", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::animation_node_set_filter_path", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::animation_node_set_master_animation", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::are_nodes_connected", "(*~*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::blend2_node_get_amount", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::blend2_node_set_amount", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::blend2_node_set_filter_path", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::blend3_node_get_amount", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::blend3_node_set_amount", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::blend4_node_get_amount", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::blend4_node_set_amount", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::connect_nodes", "(*~*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::disconnect_nodes", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::get_animation_process_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::get_base_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::get_master_player", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::get_node_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::mix_node_get_amount", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::mix_node_set_amount", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::node_exists", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::node_get_input_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::node_get_input_source", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::node_get_position", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::node_get_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::node_rename", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::node_set_position", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_get_autorestart_delay", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_get_autorestart_random_delay", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_get_fadein_time", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_get_fadeout_time", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_has_autorestart", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_is_active", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_set_autorestart", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_set_autorestart_delay", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_set_autorestart_random_delay", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_set_fadein_time", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_set_fadeout_time", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_set_filter_path", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_start", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::oneshot_node_stop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::recompute_caches", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::remove_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::reset", "()"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::set_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::set_animation_process_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::set_base_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::set_master_player", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::timescale_node_get_scale", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::timescale_node_set_scale", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::timeseek_node_seek", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_delete_input", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_get_current", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_get_input_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_get_xfade_time", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_has_input_auto_advance", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_set_current", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_set_input_auto_advance", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_set_input_count", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("AnimationTreePlayer::transition_node_set_xfade_time", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Area::_area_enter_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area::_area_exit_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area::_area_inout", "(I*~III)"),
	EXPORT_WASM_API_WITH_SIG("Area::_body_enter_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area::_body_exit_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area::_body_inout", "(I*~III)"),
	EXPORT_WASM_API_WITH_SIG("Area::get_angular_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area::get_audio_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("Area::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Area::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("Area::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Area::get_gravity", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area::get_gravity_distance_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area::get_gravity_vector", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::get_linear_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area::get_overlapping_areas", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::get_overlapping_bodies", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::get_priority", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area::get_reverb_amount", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area::get_reverb_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::get_reverb_uniformity", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area::get_space_override_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::is_gravity_a_point", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::is_monitorable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::is_monitoring", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::is_overriding_audio_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::is_using_reverb_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area::overlaps_area", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Area::overlaps_body", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Area::set_angular_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_audio_bus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_audio_bus_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_gravity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_gravity_distance_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_gravity_is_point", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_gravity_vector", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_linear_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_monitorable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_monitoring", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_priority", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_reverb_amount", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_reverb_bus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_reverb_uniformity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_space_override_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area::set_use_reverb_bus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::_area_enter_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::_area_exit_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::_area_inout", "(I*~III)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::_body_enter_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::_body_exit_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::_body_inout", "(I*~III)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_angular_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_audio_bus_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_gravity", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_gravity_distance_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_gravity_vector", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_linear_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_overlapping_areas", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_overlapping_bodies", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_priority", "()f"),
	EXPORT_WASM_API_WITH_SIG("Area2D::get_space_override_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::is_gravity_a_point", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::is_monitorable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::is_monitoring", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::is_overriding_audio_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::overlaps_area", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::overlaps_body", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_angular_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_audio_bus_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_audio_bus_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_gravity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_gravity_distance_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_gravity_is_point", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_gravity_vector", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_linear_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_monitorable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_monitoring", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_priority", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Area2D::set_space_override_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::add_blend_shape", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::add_surface_from_arrays", "(I*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::clear_blend_shapes", "()"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::get_blend_shape_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::get_blend_shape_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::get_blend_shape_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::get_custom_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::lightmap_unwrap", "(*~f)*~"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::regen_normalmaps", "()"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::set_blend_shape_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::set_custom_aabb", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_find_by_name", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_get_array_index_len", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_get_array_len", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_get_format", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_get_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_get_primitive_type", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_remove", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_set_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ArrayMesh::surface_update_region", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::get_atlas", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::get_margin", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::get_region", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::has_filter_clip", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::set_atlas", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::set_filter_clip", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::set_margin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AtlasTexture::set_region", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectAmplify::get_volume_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectAmplify::set_volume_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_dry", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_voice_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_voice_cutoff_hz", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_voice_delay_ms", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_voice_depth_ms", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_voice_level_db", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_voice_pan", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_voice_rate_hz", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::get_wet", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_dry", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_voice_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_voice_cutoff_hz", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_voice_delay_ms", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_voice_depth_ms", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_voice_level_db", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_voice_pan", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_voice_rate_hz", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectChorus::set_wet", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::get_attack_us", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::get_gain", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::get_mix", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::get_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::get_release_ms", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::get_sidechain", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::get_threshold", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::set_attack_us", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::set_gain", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::set_mix", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::set_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::set_release_ms", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::set_sidechain", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectCompressor::set_threshold", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_dry", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_feedback_delay_ms", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_feedback_level_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_feedback_lowpass", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_tap1_delay_ms", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_tap1_level_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_tap1_pan", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_tap2_delay_ms", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_tap2_level_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::get_tap2_pan", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::is_feedback_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::is_tap1_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::is_tap2_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_dry", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_feedback_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_feedback_delay_ms", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_feedback_level_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_feedback_lowpass", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap1_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap1_delay_ms", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap1_level_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap1_pan", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap2_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap2_delay_ms", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap2_level_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDelay::set_tap2_pan", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::get_drive", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::get_keep_hf_hz", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::get_post_gain", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::get_pre_gain", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::set_drive", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::set_keep_hf_hz", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::set_post_gain", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectDistortion::set_pre_gain", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectEQ::get_band_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectEQ::get_band_gain_db", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectEQ::set_band_gain_db", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::get_cutoff", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::get_db", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::get_gain", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::get_resonance", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::set_cutoff", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::set_db", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::set_gain", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectFilter::set_resonance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::get_ceiling_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::get_soft_clip_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::get_soft_clip_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::get_threshold_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::set_ceiling_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::set_soft_clip_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::set_soft_clip_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectLimiter::set_threshold_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPanner::get_pan", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPanner::set_pan", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::get_depth", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::get_feedback", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::get_range_max_hz", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::get_range_min_hz", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::get_rate_hz", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::set_depth", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::set_feedback", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::set_range_max_hz", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::set_range_min_hz", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPhaser::set_rate_hz", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPitchShift::get_fft_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPitchShift::get_oversampling", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPitchShift::get_pitch_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPitchShift::set_fft_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPitchShift::set_oversampling", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectPitchShift::set_pitch_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectRecord::get_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectRecord::get_recording", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectRecord::is_recording_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectRecord::set_format", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectRecord::set_recording_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_damping", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_dry", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_hpf", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_predelay_feedback", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_predelay_msec", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_room_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_spread", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::get_wet", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_damping", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_dry", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_hpf", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_predelay_feedback", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_predelay_msec", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_room_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_spread", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectReverb::set_wet", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectSpectrumAnalyzer::get_buffer_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectSpectrumAnalyzer::get_fft_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectSpectrumAnalyzer::get_tap_back_pos", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectSpectrumAnalyzer::set_buffer_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectSpectrumAnalyzer::set_fft_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectSpectrumAnalyzer::set_tap_back_pos", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectSpectrumAnalyzerInstance::get_magnitude_for_frequency_range", "(ffI)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectStereoEnhance::get_pan_pullout", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectStereoEnhance::get_surround", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectStereoEnhance::get_time_pullout", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectStereoEnhance::set_pan_pullout", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectStereoEnhance::set_surround", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioEffectStereoEnhance::set_time_pullout", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::add_bus", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::add_bus_effect", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::capture_get_device", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::capture_get_device_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::capture_set_device", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::generate_bus_layout", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_channels", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_effect", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_effect_count", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_effect_instance", "(III)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_index", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_peak_volume_left_db", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_peak_volume_right_db", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_send", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_bus_volume_db", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_device", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_device_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_global_rate_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_mix_rate", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_output_latency", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_speaker_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_time_since_last_mix", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::get_time_to_next_mix", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::is_bus_bypassing_effects", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::is_bus_effect_enabled", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::is_bus_mute", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::is_bus_solo", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::lock", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::move_bus", "(II)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::remove_bus", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::remove_bus_effect", "(II)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_bypass_effects", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_effect_enabled", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_layout", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_mute", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_send", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_solo", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_bus_volume_db", "(If)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_device", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::set_global_rate_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::swap_bus_effects", "(III)"),
	EXPORT_WASM_API_WITH_SIG("AudioServer::unlock", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStream::get_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGenerator::get_buffer_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGenerator::get_mix_rate", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGenerator::set_buffer_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGenerator::set_mix_rate", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGeneratorPlayback::can_push_buffer", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGeneratorPlayback::clear_buffer", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGeneratorPlayback::get_frames_available", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGeneratorPlayback::get_skips", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGeneratorPlayback::push_buffer", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamGeneratorPlayback::push_frame", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamOGGVorbis::get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamOGGVorbis::get_loop_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamOGGVorbis::has_loop", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamOGGVorbis::set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamOGGVorbis::set_loop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamOGGVorbis::set_loop_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::_bus_layout_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::_is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::_set_playing", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_mix_target", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_pitch_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_playback_position", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_stream", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_stream_paused", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_stream_playback", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::get_volume_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::is_autoplay_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::play", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::seek", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::set_autoplay", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::set_bus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::set_mix_target", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::set_pitch_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::set_stream", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::set_stream_paused", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::set_volume_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::_bus_layout_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::_is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::_set_playing", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_area_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_attenuation", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_max_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_pitch_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_playback_position", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_stream", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_stream_paused", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_stream_playback", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::get_volume_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::is_autoplay_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::play", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::seek", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_area_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_attenuation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_autoplay", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_bus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_max_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_pitch_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_stream", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_stream_paused", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::set_volume_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer2D::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::_bus_layout_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::_is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::_set_playing", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_area_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_attenuation_filter_cutoff_hz", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_attenuation_filter_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_attenuation_model", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_doppler_tracking", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_emission_angle", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_emission_angle_filter_attenuation_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_max_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_max_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_out_of_range_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_pitch_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_playback_position", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_stream", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_stream_paused", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_stream_playback", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_unit_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::get_unit_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::is_autoplay_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::is_emission_angle_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::play", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::seek", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_area_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_attenuation_filter_cutoff_hz", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_attenuation_filter_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_attenuation_model", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_autoplay", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_bus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_doppler_tracking", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_emission_angle", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_emission_angle_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_emission_angle_filter_attenuation_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_max_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_max_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_out_of_range_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_pitch_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_stream", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_stream_paused", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_unit_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::set_unit_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamPlayer3D::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamRandomPitch::get_audio_stream", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamRandomPitch::get_random_pitch", "()f"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamRandomPitch::set_audio_stream", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamRandomPitch::set_random_pitch", "(f)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::get_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::get_loop_begin", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::get_loop_end", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::get_loop_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::get_mix_rate", "()I"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::is_stereo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::save_to_wav", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::set_format", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::set_loop_begin", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::set_loop_end", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::set_loop_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::set_mix_rate", "(I)"),
	EXPORT_WASM_API_WITH_SIG("AudioStreamSample::set_stereo", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BackBufferCopy::get_copy_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BackBufferCopy::get_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BackBufferCopy::set_copy_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BackBufferCopy::set_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::bake", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::debug_bake", "()"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_bake_cell_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_bake_default_texels_per_unit", "()f"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_bake_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_bake_quality", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_capture_cell_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_image_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_light_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::get_propagation", "()f"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::is_hdr", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_bake_cell_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_bake_default_texels_per_unit", "(f)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_bake_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_bake_quality", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_capture_cell_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_hdr", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_image_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_light_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmap::set_propagation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::_get_user_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::_set_user_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::add_user", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::clear_users", "()"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_bounds", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_cell_space_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_cell_subdiv", "()I"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_octree", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_user_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_user_lightmap", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::get_user_path", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::set_bounds", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::set_cell_space_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::set_cell_subdiv", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::set_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("BakedLightmapData::set_octree", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::_toggled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::get_action_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::get_button_group", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::get_button_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::get_draw_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::get_enabled_focus_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::get_shortcut", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::is_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::is_hovered", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::is_keep_pressed_outside", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::is_pressed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::is_shortcut_in_tooltip_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::is_toggle_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_action_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_button_group", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_button_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_disabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_enabled_focus_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_keep_pressed_outside", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_pressed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_shortcut", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_shortcut_in_tooltip", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BaseButton::set_toggle_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitMap::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BitMap::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitMap::create", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitMap::create_from_image_alpha", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("BitMap::get_bit", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("BitMap::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BitMap::get_true_bit_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("BitMap::grow_mask", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("BitMap::opaque_to_polygons", "(*~f)*~"),
	EXPORT_WASM_API_WITH_SIG("BitMap::set_bit", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("BitMap::set_bit_rect", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::_get_chars", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::_get_kernings", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::_get_textures", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::_set_chars", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::_set_kernings", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::_set_textures", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::add_char", "(II*~*~f)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::add_kerning_pair", "(III)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::add_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::create_from_fnt", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::get_char_size", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::get_fallback", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::get_kerning_pair", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::get_texture", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::get_texture_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::set_ascent", "(f)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::set_distance_field_hint", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::set_fallback", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BitmapFont::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Bone2D::apply_rest", "()"),
	EXPORT_WASM_API_WITH_SIG("Bone2D::get_default_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("Bone2D::get_index_in_skeleton", "()I"),
	EXPORT_WASM_API_WITH_SIG("Bone2D::get_rest", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Bone2D::get_skeleton_rest", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Bone2D::set_default_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Bone2D::set_rest", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BoneAttachment::get_bone_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BoneAttachment::set_bone_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BoxContainer::add_spacer", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("BoxContainer::get_alignment", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BoxContainer::set_alignment", "(I)"),
	EXPORT_WASM_API_WITH_SIG("BoxShape::get_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("BoxShape::set_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Button::get_button_icon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Button::get_clip_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Button::get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Button::get_text_align", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Button::is_expand_icon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Button::is_flat", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Button::set_button_icon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Button::set_clip_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Button::set_expand_icon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Button::set_flat", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Button::set_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Button::set_text_align", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ButtonGroup::get_buttons", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ButtonGroup::get_pressed_button", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::_update_render_thread", "()"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::convert_from_particles", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_amount", "()I"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_color_ramp", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_direction", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_draw_order", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_emission_box_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_emission_colors", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_emission_normals", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_emission_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_emission_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_emission_sphere_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_explosiveness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_fixed_fps", "()I"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_flatness", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_fractional_delta", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_gravity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_lifetime", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_lifetime_randomness", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_one_shot", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_param_curve", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_param_randomness", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_particle_flag", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_pre_process_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_randomness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_speed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_spread", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::get_use_local_coordinates", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::is_emitting", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::restart", "()"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_amount", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_color_ramp", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_direction", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_draw_order", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_emission_box_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_emission_colors", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_emission_normals", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_emission_points", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_emission_shape", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_emission_sphere_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_emitting", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_explosiveness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_fixed_fps", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_flatness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_fractional_delta", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_gravity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_lifetime", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_lifetime_randomness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_one_shot", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_param_curve", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_param_randomness", "(If)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_particle_flag", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_pre_process_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_randomness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_speed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_spread", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles::set_use_local_coordinates", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::_update_render_thread", "()"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::convert_from_particles", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_amount", "()I"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_color_ramp", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_direction", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_draw_order", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_emission_colors", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_emission_normals", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_emission_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_emission_rect_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_emission_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_emission_sphere_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_explosiveness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_fixed_fps", "()I"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_fractional_delta", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_gravity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_lifetime", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_lifetime_randomness", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_normalmap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_one_shot", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_param_curve", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_param_randomness", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_particle_flag", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_pre_process_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_randomness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_speed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_spread", "()f"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::get_use_local_coordinates", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::is_emitting", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::restart", "()"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_amount", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_color_ramp", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_direction", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_draw_order", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_emission_colors", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_emission_normals", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_emission_points", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_emission_rect_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_emission_shape", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_emission_sphere_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_emitting", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_explosiveness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_fixed_fps", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_fractional_delta", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_gravity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_lifetime", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_lifetime_randomness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_normalmap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_one_shot", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_param_curve", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_param_randomness", "(If)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_particle_flag", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_pre_process_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_randomness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_speed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_spread", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CPUParticles2D::set_use_local_coordinates", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::get_depth", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::get_width", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::set_depth", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGBox::set_width", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::get_sides", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::get_smooth_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::is_cone", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::set_cone", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::set_sides", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGCylinder::set_smooth_faces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGMesh::_mesh_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("CSGMesh::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGMesh::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGMesh::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGMesh::set_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::_has_editable_3d_polygon_no_depth", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::_is_editable_3d_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::_path_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::_path_exited", "()"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_depth", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_path_interval", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_path_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_path_rotation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_smooth_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_spin_degrees", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::get_spin_sides", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::is_path_continuous_u", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::is_path_joined", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::is_path_local", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_depth", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_path_continuous_u", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_path_interval", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_path_joined", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_path_local", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_path_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_path_rotation", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_smooth_faces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_spin_degrees", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGPolygon::set_spin_sides", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGPrimitive::is_inverting_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGPrimitive::set_invert_faces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::_update_shape", "()"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::get_meshes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::get_operation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::get_snap", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::is_calculating_tangents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::is_root_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::is_using_collision", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_calculate_tangents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_operation", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_snap", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGShape::set_use_collision", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::get_radial_segments", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::get_rings", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::get_smooth_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::set_radial_segments", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::set_rings", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGSphere::set_smooth_faces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::get_inner_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::get_outer_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::get_ring_sides", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::get_sides", "()I"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::get_smooth_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::set_inner_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::set_outer_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::set_ring_sides", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::set_sides", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CSGTorus::set_smooth_faces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera::clear_current", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_camera_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_camera_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_cull_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_cull_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_doppler_tracking", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_environment", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_fov", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_frustum", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_frustum_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_h_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_keep_aspect_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_projection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_v_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_zfar", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera::get_znear", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera::is_current", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::is_position_behind", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::make_current", "()"),
	EXPORT_WASM_API_WITH_SIG("Camera::project_local_ray_normal", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::project_position", "(*~f)*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::project_ray_normal", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::project_ray_origin", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_cull_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_cull_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_current", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_doppler_tracking", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_environment", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_fov", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_frustum", "(f*~ff)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_frustum_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_h_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_keep_aspect_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_orthogonal", "(fff)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_perspective", "(fff)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_projection", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_v_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_zfar", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera::set_znear", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera::unproject_position", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::_make_current", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::_set_current", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::_set_old_smoothing", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::_update_scroll", "()"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::align", "()"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::clear_current", "()"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::force_update_scroll", "()"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_anchor_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_camera_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_camera_screen_center", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_custom_viewport", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_drag_margin", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_follow_smoothing", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_h_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_limit", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_process_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_v_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::get_zoom", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_current", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_follow_smoothing_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_h_drag_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_limit_drawing_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_limit_smoothing_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_margin_drawing_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_rotating", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_screen_drawing_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::is_v_drag_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::make_current", "()"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::reset_smoothing", "()"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_anchor_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_custom_viewport", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_drag_margin", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_enable_follow_smoothing", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_follow_smoothing", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_h_drag_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_h_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_limit", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_limit_drawing_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_limit_smoothing_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_margin_drawing_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_process_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_rotating", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_screen_drawing_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_v_drag_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_v_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Camera2D::set_zoom", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::_allocate_texture", "(IIIII)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::_set_RGB_img", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::_set_YCbCr_img", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::_set_YCbCr_imgs", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::_set_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::_set_position", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::get_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::set_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraFeed::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraServer::add_feed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraServer::feeds", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CameraServer::get_feed", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CameraServer::get_feed_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("CameraServer::remove_feed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraTexture::get_camera_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CameraTexture::get_camera_feed_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("CameraTexture::get_which_feed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CameraTexture::set_camera_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CameraTexture::set_camera_feed_id", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CameraTexture::set_which_feed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_draw", "()"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_get_pivot", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_get_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_get_rotation", "()f"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_get_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_get_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_set_pivot", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_set_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_set_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_set_rotation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_set_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_set_state", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_use_pivot", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_use_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_edit_use_rotation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_is_on_top", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_set_on_top", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_toplevel_raise_self", "()"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::_update_callback", "()"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_arc", "(*~fffI*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_char", "(*~*~*~*~*~)f"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_circle", "(*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_colored_polygon", "(*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_line", "(*~*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_mesh", "(*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_multiline", "(*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_multiline_colors", "(*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_multimesh", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_polygon", "(*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_polyline", "(*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_polyline_colors", "(*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_primitive", "(*~*~*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_rect", "(*~*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_set_transform", "(*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_set_transform_matrix", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_string", "(*~*~*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_style_box", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_texture", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_texture_rect", "(*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::draw_texture_rect_region", "(*~*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::force_update_transform", "()"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_canvas", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_canvas_item", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_canvas_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_global_mouse_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_global_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_global_transform_with_canvas", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_light_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_local_mouse_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_modulate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_self_modulate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_use_parent_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_viewport_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_viewport_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::get_world_2d", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::hide", "()"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::is_draw_behind_parent_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::is_local_transform_notification_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::is_set_as_toplevel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::is_transform_notification_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::is_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::is_visible_in_tree", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::make_canvas_position_local", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::make_input_local", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_as_toplevel", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_draw_behind_parent", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_light_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_modulate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_notify_local_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_notify_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_self_modulate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_use_parent_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::set_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::show", "()"),
	EXPORT_WASM_API_WITH_SIG("CanvasItem::update", "()"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::get_blend_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::get_light_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::get_particles_anim_h_frames", "()I"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::get_particles_anim_loop", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::get_particles_anim_v_frames", "()I"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::get_particles_animation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::set_blend_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::set_light_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::set_particles_anim_h_frames", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::set_particles_anim_loop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::set_particles_anim_v_frames", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasItemMaterial::set_particles_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_canvas", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_custom_viewport", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_follow_viewport_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_rotation", "()f"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_rotation_degrees", "()f"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::is_following_viewport", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_custom_viewport", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_follow_viewport", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_follow_viewport_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_rotation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_rotation_degrees", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasLayer::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CanvasModulate::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CanvasModulate::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::get_mid_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::get_radial_segments", "()I"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::get_rings", "()I"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::set_mid_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::set_radial_segments", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleMesh::set_rings", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape2D::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape2D::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape2D::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CapsuleShape2D::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CenterContainer::is_using_top_left", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CenterContainer::set_use_top_left", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::get_absolute_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::get_character", "()I"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::get_elapsed_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::get_environment", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::get_relative_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::is_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_absolute_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_character", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_elapsed_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_environment", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_relative_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CharFXTransform::set_visibility", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CircleShape2D::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CircleShape2D::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::add_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::add_exception_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::clear_exceptions", "()"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::get_clip_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::get_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::get_process_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::is_clip_to_areas_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::is_clip_to_bodies_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::remove_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::remove_exception_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::set_clip_to_areas", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::set_clip_to_bodies", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::set_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ClippedCamera::set_process_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::_input_event", "(*~*~*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::create_shape_owner", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::get_capture_input_on_drag", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::get_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::get_shape_owners", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::is_ray_pickable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::is_shape_owner_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::remove_shape_owner", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::set_capture_input_on_drag", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::set_ray_pickable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_find_owner", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_add_shape", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_clear_shapes", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_get_owner", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_get_shape", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_get_shape_count", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_get_shape_index", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_get_transform", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_remove_shape", "(II)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_set_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject::shape_owner_set_transform", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::_input_event", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::create_shape_owner", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::get_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::get_shape_owner_one_way_collision_margin", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::get_shape_owners", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::is_pickable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::is_shape_owner_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::is_shape_owner_one_way_collision_enabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::remove_shape_owner", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::set_pickable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_find_owner", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_add_shape", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_clear_shapes", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_get_owner", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_get_shape", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_get_shape_count", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_get_shape_index", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_get_transform", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_remove_shape", "(II)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_set_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_set_one_way_collision", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_set_one_way_collision_margin", "(If)"),
	EXPORT_WASM_API_WITH_SIG("CollisionObject2D::shape_owner_set_transform", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon::_is_editable_3d_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon::get_depth", "()f"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon::get_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon::is_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon::set_depth", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon::set_disabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon::set_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::get_build_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::get_one_way_collision_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::get_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::is_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::is_one_way_collision_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::set_build_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::set_disabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::set_one_way_collision", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::set_one_way_collision_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CollisionPolygon2D::set_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::_shape_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::_update_debug_shape", "()"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::get_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::is_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::make_convex_from_brothers", "()"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::resource_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::set_disabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape::set_shape", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::_shape_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::get_one_way_collision_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::get_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::is_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::is_one_way_collision_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::set_disabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::set_one_way_collision", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::set_one_way_collision_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CollisionShape2D::set_shape", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_add_preset_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_focus_enter", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_focus_exit", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_hsv_draw", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_html_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_html_focus_exit", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_preset_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_sample_draw", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_screen_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_screen_pick_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_text_type_toggled", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_update_presets", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_uv_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_value_changed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::_w_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::add_preset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::are_presets_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::are_presets_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::erase_preset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::get_pick_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::get_presets", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::is_deferred_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::is_editing_alpha", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::is_hsv_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::is_raw_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::set_deferred_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::set_edit_alpha", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::set_hsv_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::set_pick_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::set_presets_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::set_presets_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPicker::set_raw_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::_color_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::_modal_closed", "()"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::get_pick_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::get_picker", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::get_popup", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::is_editing_alpha", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::set_edit_alpha", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorPickerButton::set_pick_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ColorRect::get_frame_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ColorRect::set_frame_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ConcavePolygonShape::get_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ConcavePolygonShape::set_faces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ConcavePolygonShape2D::get_segments", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ConcavePolygonShape2D::set_segments", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ConeTwistJoint::_get_swing_span", "()f"),
	EXPORT_WASM_API_WITH_SIG("ConeTwistJoint::_get_twist_span", "()f"),
	EXPORT_WASM_API_WITH_SIG("ConeTwistJoint::_set_swing_span", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ConeTwistJoint::_set_twist_span", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ConeTwistJoint::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("ConeTwistJoint::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::erase_section", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::erase_section_key", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::get_section_keys", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::get_sections", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::get_value", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::has_section", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::has_section_key", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::load", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::load_encrypted", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::load_encrypted_pass", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::save", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::save_encrypted", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::save_encrypted_pass", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ConfigFile::set_value", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ConfirmationDialog::get_cancel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Container::_child_minsize_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Container::_sort_children", "()"),
	EXPORT_WASM_API_WITH_SIG("Container::fit_child_in_rect", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Container::queue_sort", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::_clips_input", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::_get_minimum_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::_get_tooltip", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::_make_custom_tooltip", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::_override_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::_set_anchor", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Control::_set_global_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::_set_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::_set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::_size_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::_theme_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::_update_minimum_size", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::accept_event", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::add_color_override", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::add_constant_override", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Control::add_font_override", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::add_icon_override", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::add_shader_override", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::add_stylebox_override", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::can_drop_data", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::drop_data", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::force_drag", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::get_anchor", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Control::get_begin", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_color", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_combined_minimum_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_constant", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("Control::get_cursor_shape", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_custom_minimum_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_default_cursor_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_drag_data", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_end", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_focus_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_focus_neighbour", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_focus_next", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_focus_owner", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_focus_previous", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_font", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_global_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_global_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_h_grow_direction", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_h_size_flags", "()I"),
	EXPORT_WASM_API_WITH_SIG("Control::get_icon", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_margin", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Control::get_minimum_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_mouse_filter", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_parent_area_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_parent_control", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_pivot_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_rotation", "()f"),
	EXPORT_WASM_API_WITH_SIG("Control::get_rotation_degrees", "()f"),
	EXPORT_WASM_API_WITH_SIG("Control::get_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_stretch_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("Control::get_stylebox", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_theme", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_tooltip", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_v_grow_direction", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::get_v_size_flags", "()I"),
	EXPORT_WASM_API_WITH_SIG("Control::grab_click_focus", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::grab_focus", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::has_color", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_color_override", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_constant", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_constant_override", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_focus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_font", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_font_override", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_icon", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_icon_override", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_point", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_shader_override", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_stylebox", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::has_stylebox_override", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Control::is_clipping_contents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Control::minimum_size_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::release_focus", "()"),
	EXPORT_WASM_API_WITH_SIG("Control::set_anchor", "(If*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_anchor_and_margin", "(Iff*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_anchors_and_margins_preset", "(III)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_anchors_preset", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_begin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_clip_contents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_custom_minimum_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_default_cursor_shape", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_drag_forwarding", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_drag_preview", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_end", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_focus_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_focus_neighbour", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_focus_next", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_focus_previous", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_global_position", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_h_grow_direction", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_h_size_flags", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_margin", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_margins_preset", "(III)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_mouse_filter", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_pivot_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_position", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_rotation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_rotation_degrees", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_size", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_stretch_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_theme", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_tooltip", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_v_grow_direction", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Control::set_v_size_flags", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Control::show_modal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Control::warp_mouse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ConvexPolygonShape::get_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ConvexPolygonShape::set_points", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ConvexPolygonShape2D::get_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ConvexPolygonShape2D::set_point_cloud", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ConvexPolygonShape2D::set_points", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Crypto::generate_random_bytes", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Crypto::generate_rsa", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Crypto::generate_self_signed_certificate", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("CryptoKey::load", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("CryptoKey::save", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::get_flags", "()I"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::get_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::get_lossy_storage_quality", "()f"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::get_side", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::get_storage", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::get_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::set_flags", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::set_lossy_storage_quality", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::set_side", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("CubeMap::set_storage", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::get_subdivide_depth", "()I"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::get_subdivide_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::get_subdivide_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::set_subdivide_depth", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::set_subdivide_height", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CubeMesh::set_subdivide_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Curve::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve::add_point", "(*~ffII)I"),
	EXPORT_WASM_API_WITH_SIG("Curve::bake", "()"),
	EXPORT_WASM_API_WITH_SIG("Curve::clean_dupes", "()"),
	EXPORT_WASM_API_WITH_SIG("Curve::clear_points", "()"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_bake_resolution", "()I"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_max_value", "()f"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_min_value", "()f"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_point_left_mode", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_point_left_tangent", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_point_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_point_right_mode", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve::get_point_right_tangent", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Curve::interpolate", "(f)f"),
	EXPORT_WASM_API_WITH_SIG("Curve::interpolate_baked", "(f)f"),
	EXPORT_WASM_API_WITH_SIG("Curve::remove_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_bake_resolution", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_max_value", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_min_value", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_point_left_mode", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_point_left_tangent", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_point_offset", "(If)I"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_point_right_mode", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_point_right_tangent", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Curve::set_point_value", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::add_point", "(*~*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::clear_points", "()"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_bake_interval", "()f"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_baked_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_baked_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_closest_offset", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_closest_point", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_point_in", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_point_out", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::get_point_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::interpolate", "(If)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::interpolate_baked", "(f*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::interpolatef", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::remove_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::set_bake_interval", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::set_point_in", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::set_point_out", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::set_point_position", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve2D::tessellate", "(If)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::add_point", "(*~*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::clear_points", "()"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_bake_interval", "()f"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_baked_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_baked_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_baked_tilts", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_baked_up_vectors", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_closest_offset", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_closest_point", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_point_in", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_point_out", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_point_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::get_point_tilt", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::interpolate", "(If)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::interpolate_baked", "(f*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::interpolate_baked_up_vector", "(f*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::interpolatef", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::is_up_vector_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::remove_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::set_bake_interval", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::set_point_in", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::set_point_out", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::set_point_position", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::set_point_tilt", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::set_up_vector_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Curve3D::tessellate", "(If)*~"),
	EXPORT_WASM_API_WITH_SIG("CurveTexture::_update", "()"),
	EXPORT_WASM_API_WITH_SIG("CurveTexture::get_curve", "()*~"),
	EXPORT_WASM_API_WITH_SIG("CurveTexture::set_curve", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("CurveTexture::set_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::get_bottom_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::get_radial_segments", "()I"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::get_rings", "()I"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::get_top_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::set_bottom_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::set_radial_segments", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::set_rings", "(I)"),
	EXPORT_WASM_API_WITH_SIG("CylinderMesh::set_top_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CylinderShape::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("CylinderShape::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("CylinderShape::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("CylinderShape::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::get_damping", "()f"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::get_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::get_rest_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::get_stiffness", "()f"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::set_damping", "(f)"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::set_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::set_rest_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("DampedSpringJoint2D::set_stiffness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("DirectionalLight::get_shadow_depth_range", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DirectionalLight::get_shadow_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DirectionalLight::is_blend_splits_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DirectionalLight::set_blend_splits", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DirectionalLight::set_shadow_depth_range", "(I)"),
	EXPORT_WASM_API_WITH_SIG("DirectionalLight::set_shadow_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::add_fallback", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_fallback", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_fallback_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_font_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_outline_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_outline_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_spacing", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_use_filter", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::get_use_mipmaps", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::remove_fallback", "(I)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_fallback", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_font_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_outline_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_outline_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_spacing", "(II)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_use_filter", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFont::set_use_mipmaps", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFontData::get_font_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFontData::get_hinting", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFontData::is_antialiased", "()*~"),
	EXPORT_WASM_API_WITH_SIG("DynamicFontData::set_antialiased", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFontData::set_font_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("DynamicFontData::set_hinting", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::_export_begin", "(*~*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::_export_end", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::_export_file", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::add_file", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::add_ios_bundle_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::add_ios_cpp_code", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::add_ios_framework", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::add_ios_linker_flags", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::add_ios_plist_content", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::add_shared_object", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorExportPlugin::skip", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::get_feature_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::is_class_disabled", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::is_class_editor_disabled", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::is_class_property_disabled", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::is_feature_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::load_from_file", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::save_to_file", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::set_disable_class", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::set_disable_class_editor", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::set_disable_class_property", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFeatureProfile::set_disable_feature", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_action_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_cancel_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_dir_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_favorite_move_down", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_favorite_move_up", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_favorite_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_favorite_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_file_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_filter_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_go_back", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_go_forward", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_go_up", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_item_db_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_item_list_item_rmb_selected", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_item_list_rmb_clicked", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_item_menu_id_pressed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_item_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_items_clear_selection", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_make_dir", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_make_dir_confirm", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_multi_selected", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_recent_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_save_confirm_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_select_drive", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_thumbnail_done", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_thumbnail_result", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_update_dir", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_update_file_list", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::_update_file_name", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::add_filter", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::clear_filters", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::get_access", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::get_current_dir", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::get_current_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::get_current_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::get_display_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::get_vbox", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::invalidate", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::is_overwrite_warning_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::is_showing_hidden_files", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_access", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_current_dir", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_current_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_current_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_disable_overwrite_warning", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_display_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileDialog::set_show_hidden_files", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::get_file_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::get_filesystem", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::get_filesystem_path", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::get_scanning_progress", "()f"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::is_scanning", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::scan", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::scan_sources", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::update_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystem::update_script_classes", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::find_dir_index", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::find_file_index", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_file", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_file_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_file_import_is_valid", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_file_path", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_file_script_class_extends", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_file_script_class_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_file_type", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_parent", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_subdir", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorFileSystemDirectory::get_subdir_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_import_options", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_import_order", "()I"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_importer_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_option_visibility", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_preset_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_preset_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_priority", "()f"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_recognized_extensions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_resource_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_save_extension", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::get_visible_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorImportPlugin::import", "(*~*~*~*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_edit_request_change", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_feature_profile_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_filter_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_multiple_properties_changed", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_node_removed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_object_id_selected", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_property_changed", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_property_changed_update_all", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_property_checked", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_property_keyed", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_property_keyed_with_value", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_property_selected", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_resource_selected", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::_vscroll_changed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspector::refresh", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::add_custom_control", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::add_property_editor", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::add_property_editor_for_multiple_properties", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::can_handle", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::parse_begin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::parse_category", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::parse_end", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorInspectorPlugin::parse_property", "(*~I*~I*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::edit_resource", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_base_control", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_current_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_edited_scene_root", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_editor_settings", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_editor_viewport", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_inspector", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_open_scenes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_resource_filesystem", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_resource_previewer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_script_editor", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_selected_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::get_selection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::inspect_object", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::is_plugin_enabled", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::make_mesh_previews", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::open_scene_from_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::reload_scene_from_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::save_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::save_scene_as", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::select_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::set_distraction_free_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::set_main_screen_editor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorInterface::set_plugin_enabled", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorNavigationMeshGenerator::bake", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorNavigationMeshGenerator::clear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_autoload_singleton", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_control_to_bottom_panel", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_control_to_container", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_control_to_dock", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_custom_type", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_export_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_import_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_inspector_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_scene_import_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_spatial_gizmo_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_tool_menu_item", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::add_tool_submenu_item", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::apply_changes", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::build", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::disable_plugin", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::edit", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::enable_plugin", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::forward_canvas_draw_over_viewport", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::forward_canvas_force_draw_over_viewport", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::forward_canvas_gui_input", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::forward_spatial_gui_input", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_breakpoints", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_editor_interface", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_plugin_icon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_plugin_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_script_create_dialog", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_undo_redo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::get_window_layout", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::handles", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::has_main_screen", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::hide_bottom_panel", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::make_bottom_panel_item_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::make_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::queue_save_layout", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_autoload_singleton", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_control_from_bottom_panel", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_control_from_container", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_control_from_docks", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_custom_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_export_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_import_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_inspector_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_scene_import_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_spatial_gizmo_plugin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::remove_tool_menu_item", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::save_external_data", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::set_force_draw_over_forwarding_enabled", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::set_input_event_forwarding_always_enabled", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::set_state", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::set_window_layout", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorPlugin::update_overlays", "()I"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::_focusable_focused", "(I)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::add_focusable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::emit_changed", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::get_edited_object", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::get_edited_property", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::get_label", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::get_tooltip_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::is_checkable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::is_checked", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::is_draw_red", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::is_keying", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::is_read_only", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::set_bottom_editor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::set_checkable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::set_checked", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::set_draw_red", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::set_keying", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::set_label", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::set_read_only", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorProperty::update_property", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorResourceConversionPlugin::_convert", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorResourceConversionPlugin::_converts_to", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreview::_preview_ready", "(*~*~*~I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreview::add_preview_generator", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreview::check_for_invalidation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreview::queue_edited_resource_preview", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreview::queue_resource_preview", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreview::remove_preview_generator", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreviewGenerator::can_generate_small_preview", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreviewGenerator::generate", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreviewGenerator::generate_from_path", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreviewGenerator::generate_small_preview_automatically", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorResourcePreviewGenerator::handles", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSceneImporter::_get_extensions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSceneImporter::_get_import_flags", "()I"),
	EXPORT_WASM_API_WITH_SIG("EditorSceneImporter::_import_animation", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSceneImporter::_import_scene", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSceneImporter::import_animation_from_other_importer", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSceneImporter::import_scene_from_other_importer", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorScenePostImport::get_source_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorScenePostImport::get_source_folder", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorScenePostImport::post_import", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorScript::_run", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorScript::add_root_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorScript::get_editor_interface", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorScript::get_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSelection::_emit_change", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSelection::_node_removed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSelection::add_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSelection::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSelection::get_selected_nodes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSelection::get_transformable_selected_nodes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSelection::remove_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::add_property_info", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::erase", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::get_favorites", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::get_project_metadata", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::get_project_settings_dir", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::get_recent_dirs", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::get_setting", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::get_settings_dir", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::has_setting", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::property_can_revert", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::property_get_revert", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::set_favorites", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::set_initial_value", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::set_project_metadata", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::set_recent_dirs", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSettings::set_setting", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::add_collision_segments", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::add_collision_triangles", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::add_handles", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::add_lines", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::add_mesh", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::add_unscaled_billboard", "(*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::commit_handle", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::get_handle_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::get_handle_value", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::get_plugin", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::get_spatial_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::is_handle_highlighted", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::redraw", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::set_handle", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::set_hidden", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmo::set_spatial_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::add_material", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::can_be_hidden", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::commit_handle", "(*~I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::create_gizmo", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::create_handle_material", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::create_icon_material", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::create_material", "(*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::get_handle_name", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::get_handle_value", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::get_material", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::get_priority", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::has_gizmo", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::is_handle_highlighted", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::is_selectable_when_hidden", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::redraw", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpatialGizmoPlugin::set_handle", "(*~I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::_grabber_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::_grabber_mouse_entered", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::_grabber_mouse_exited", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::_value_focus_exited", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::_value_input_closed", "()"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::_value_input_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::get_label", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::is_flat", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::is_read_only", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::set_flat", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::set_label", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorSpinSlider::set_read_only", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_commit", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_get_file_diff", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_get_modified_files_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_get_project_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_get_vcs_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_initialize", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_is_vcs_initialized", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_shut_down", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_stage_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::_unstage_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::commit", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::get_file_diff", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::get_modified_files_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::get_project_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::get_vcs_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::initialize", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::is_addon_ready", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::is_vcs_initialized", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::shut_down", "()*~"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::stage_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EditorVCSInterface::unstage_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("EncodedObjectAsID::get_object_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("EncodedObjectAsID::set_object_id", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_adjustment_brightness", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_adjustment_color_correction", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_adjustment_contrast", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_adjustment_saturation", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ambient_light_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ambient_light_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ambient_light_sky_contribution", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_background", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_bg_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_bg_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_camera_feed_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_canvas_max_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_far_amount", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_far_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_far_quality", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_far_transition", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_near_amount", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_near_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_near_quality", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_dof_blur_near_transition", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_depth_begin", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_depth_curve", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_depth_end", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_height_curve", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_height_max", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_height_min", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_sun_amount", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_sun_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_fog_transmit_curve", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_glow_blend_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_glow_bloom", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_glow_hdr_bleed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_glow_hdr_bleed_threshold", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_glow_hdr_luminance_cap", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_glow_intensity", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_glow_strength", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_sky", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_sky_custom_fov", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_sky_orientation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_sky_rotation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_sky_rotation_degrees", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_ao_channel_affect", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_bias", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_blur", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_direct_light_affect", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_edge_sharpness", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_intensity", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_intensity2", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_quality", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssao_radius2", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssr_depth_tolerance", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssr_fade_in", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssr_fade_out", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_ssr_max_steps", "()I"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemap_auto_exposure", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemap_auto_exposure_grey", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemap_auto_exposure_max", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemap_auto_exposure_min", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemap_auto_exposure_speed", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemap_exposure", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemap_white", "()f"),
	EXPORT_WASM_API_WITH_SIG("Environment::get_tonemapper", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_adjustment_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_dof_blur_far_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_dof_blur_near_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_fog_depth_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_fog_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_fog_height_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_fog_transmit_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_glow_bicubic_upscale_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_glow_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_glow_level_enabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_ssao_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_ssr_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::is_ssr_rough", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_adjustment_brightness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_adjustment_color_correction", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_adjustment_contrast", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_adjustment_enable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_adjustment_saturation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ambient_light_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ambient_light_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ambient_light_sky_contribution", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_background", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_bg_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_bg_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_camera_feed_id", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_canvas_max_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_far_amount", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_far_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_far_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_far_quality", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_far_transition", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_near_amount", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_near_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_near_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_near_quality", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_dof_blur_near_transition", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_depth_begin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_depth_curve", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_depth_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_depth_end", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_height_curve", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_height_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_height_max", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_height_min", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_sun_amount", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_sun_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_transmit_curve", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_fog_transmit_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_bicubic_upscale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_blend_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_bloom", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_hdr_bleed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_hdr_bleed_threshold", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_hdr_luminance_cap", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_intensity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_level", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_glow_strength", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_sky", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_sky_custom_fov", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_sky_orientation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_sky_rotation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_sky_rotation_degrees", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_ao_channel_affect", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_bias", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_blur", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_direct_light_affect", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_edge_sharpness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_intensity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_intensity2", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_quality", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssao_radius2", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssr_depth_tolerance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssr_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssr_fade_in", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssr_fade_out", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssr_max_steps", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_ssr_rough", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemap_auto_exposure", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemap_auto_exposure_grey", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemap_auto_exposure_max", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemap_auto_exposure_min", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemap_auto_exposure_speed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemap_exposure", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemap_white", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Environment::set_tonemapper", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Expression::execute", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Expression::get_error_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Expression::has_execute_failed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Expression::parse", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_action_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_cancel_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_dir_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_file_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_filter_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_go_up", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_make_dir", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_make_dir_confirm", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_save_confirm_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_select_drive", "(I)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_tree_item_activated", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_tree_multi_selected", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_tree_selected", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_update_dir", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_update_file_list", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::_update_file_name", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::add_filter", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::clear_filters", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::deselect_items", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_access", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_current_dir", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_current_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_current_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_filters", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_line_edit", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::get_vbox", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::invalidate", "()"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::is_mode_overriding_title", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::is_showing_hidden_files", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_access", "(I)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_current_dir", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_current_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_current_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_filters", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_mode_overrides_title", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FileDialog::set_show_hidden_files", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Font::draw", "(*~*~*~*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Font::draw_char", "(*~*~II*~*~)f"),
	EXPORT_WASM_API_WITH_SIG("Font::get_ascent", "()f"),
	EXPORT_WASM_API_WITH_SIG("Font::get_descent", "()f"),
	EXPORT_WASM_API_WITH_SIG("Font::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("Font::get_string_size", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Font::get_wordwrap_string_size", "(*~f)*~"),
	EXPORT_WASM_API_WITH_SIG("Font::has_outline", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Font::is_distance_field_hint", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Font::update_changes", "()"),
	EXPORT_WASM_API_WITH_SIG("FuncRef::call_func", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FuncRef::call_funcv", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("FuncRef::is_valid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("FuncRef::set_function", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("FuncRef::set_instance", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GDNative::call_native", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("GDNative::get_library", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNative::initialize", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNative::set_library", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GDNative::terminate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::get_config_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::get_current_dependencies", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::get_current_library_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::get_symbol_prefix", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::is_reloadable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::is_singleton", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::set_config_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::set_load_once", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::set_reloadable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::set_singleton", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::set_symbol_prefix", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GDNativeLibrary::should_load_once", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDScript::get_as_byte_code", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDScript::new", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDScriptFunctionState::_signal_callback", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GDScriptFunctionState::is_valid", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("GDScriptFunctionState::resume", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::bake", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::debug_bake", "()"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_bias", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_dynamic_range", "()I"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_normal_bias", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_probe_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_propagation", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::get_subdiv", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::is_compressed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::is_interior", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_bias", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_compress", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_dynamic_range", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_interior", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_normal_bias", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_probe_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_propagation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbe::set_subdiv", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_bias", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_bounds", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_cell_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_dynamic_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_dynamic_range", "()I"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_normal_bias", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_propagation", "()f"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::get_to_cell_xform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::is_compressed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::is_interior", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_bias", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_bounds", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_cell_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_compress", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_dynamic_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_dynamic_range", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_interior", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_normal_bias", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_propagation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GIProbeData::set_to_cell_xform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_get_angular_hi_limit_x", "()f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_get_angular_hi_limit_y", "()f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_get_angular_hi_limit_z", "()f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_get_angular_lo_limit_x", "()f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_get_angular_lo_limit_y", "()f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_get_angular_lo_limit_z", "()f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_set_angular_hi_limit_x", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_set_angular_hi_limit_y", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_set_angular_hi_limit_z", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_set_angular_lo_limit_x", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_set_angular_lo_limit_y", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::_set_angular_lo_limit_z", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::get_flag_x", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::get_flag_y", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::get_flag_z", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::get_param_x", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::get_param_y", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::get_param_z", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::get_precision", "()I"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::set_flag_x", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::set_flag_y", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::set_flag_z", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::set_param_x", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::set_param_y", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::set_param_z", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Generic6DOFJoint::set_precision", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_cast_shadows_setting", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_extra_cull_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_flag", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_lod_max_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_lod_max_hysteresis", "()f"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_lod_min_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_lod_min_hysteresis", "()f"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::get_material_override", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_cast_shadows_setting", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_custom_aabb", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_extra_cull_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_flag", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_lod_max_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_lod_max_hysteresis", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_lod_min_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_lod_min_hysteresis", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GeometryInstance::set_material_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Gradient::add_point", "(f*~)"),
	EXPORT_WASM_API_WITH_SIG("Gradient::get_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Gradient::get_colors", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Gradient::get_offset", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Gradient::get_offsets", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Gradient::get_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Gradient::interpolate", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("Gradient::remove_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Gradient::set_color", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Gradient::set_colors", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Gradient::set_offset", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Gradient::set_offsets", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GradientTexture::_update", "()"),
	EXPORT_WASM_API_WITH_SIG("GradientTexture::get_gradient", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GradientTexture::set_gradient", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GradientTexture::set_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_connections_layer_draw", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_graph_node_moved", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_graph_node_raised", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_scroll_moved", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_snap_toggled", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_snap_value_changed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_top_layer_draw", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_top_layer_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_update_scroll_offset", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_zoom_minus", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_zoom_plus", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::_zoom_reset", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::add_valid_connection_type", "(II)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::add_valid_left_disconnect_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::add_valid_right_disconnect_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::clear_connections", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::connect_node", "(*~I*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::disconnect_node", "(*~I*~I)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::get_connection_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::get_scroll_ofs", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::get_snap", "()I"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::get_zoom", "()f"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::get_zoom_hbox", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::is_node_connected", "(*~I*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::is_right_disconnects_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::is_using_snap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::is_valid_connection_type", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::remove_valid_connection_type", "(II)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::remove_valid_left_disconnect_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::remove_valid_right_disconnect_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::set_connection_activity", "(*~I*~If)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::set_right_disconnects", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::set_scroll_ofs", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::set_selected", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::set_snap", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::set_use_snap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphEdit::set_zoom", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::clear_all_slots", "()"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::clear_slot", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_input_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_input_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_input_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_input_type", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_output_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_output_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_output_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_connection_output_type", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_overlay", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_slot_color_left", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_slot_color_right", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_slot_type_left", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_slot_type_right", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::get_title", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::is_close_button_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::is_comment", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::is_resizable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::is_selected", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::is_slot_enabled_left", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::is_slot_enabled_right", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_comment", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_overlay", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_resizable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_selected", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_show_close_button", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_slot", "(I*~I*~*~I*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("GraphNode::set_title", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GridContainer::get_columns", "()I"),
	EXPORT_WASM_API_WITH_SIG("GridContainer::set_columns", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::_update_octants_callback", "()"),
	EXPORT_WASM_API_WITH_SIG("GridMap::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("GridMap::clear_baked_meshes", "()"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_bake_mesh_instance", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_bake_meshes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_cell_item", "(III)I"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_cell_item_orientation", "(III)I"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_cell_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_cell_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_center_x", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_center_y", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_center_z", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_mesh_library", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_meshes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_octant_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("GridMap::get_used_cells", "()*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::make_baked_meshes", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::map_to_world", "(III)*~"),
	EXPORT_WASM_API_WITH_SIG("GridMap::resource_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_cell_item", "(IIIII)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_cell_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_cell_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_center_x", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_center_y", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_center_z", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_clip", "(*~*~II)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_mesh_library", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::set_octant_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("GridMap::world_to_map", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("GrooveJoint2D::get_initial_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("GrooveJoint2D::get_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("GrooveJoint2D::set_initial_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("GrooveJoint2D::set_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::close", "()"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::connect_to_host", "(*~I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::get_connection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::get_read_chunk_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::get_response_body_length", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::get_response_code", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::get_response_headers", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::get_response_headers_as_dictionary", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::get_status", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::has_response", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::is_blocking_mode_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::is_response_chunked", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::poll", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::query_string_from_dict", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::read_response_body_chunk", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::request", "(I*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::request_raw", "(I*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::set_blocking_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::set_connection", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("HTTPClient::set_read_chunk_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::_redirect_request", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::_request_done", "(II*~*~)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::_timeout", "()"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::cancel_request", "()"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_body_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_body_size_limit", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_download_chunk_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_download_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_downloaded_bytes", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_http_client_status", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_max_redirects", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::get_timeout", "()I"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::is_using_threads", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::request", "(*~*~*~I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::set_body_size_limit", "(I)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::set_download_chunk_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::set_download_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::set_max_redirects", "(I)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::set_timeout", "(I)"),
	EXPORT_WASM_API_WITH_SIG("HTTPRequest::set_use_threads", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("HashingContext::finish", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HashingContext::start", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("HashingContext::update", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("HeightMapShape::get_map_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("HeightMapShape::get_map_depth", "()I"),
	EXPORT_WASM_API_WITH_SIG("HeightMapShape::get_map_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("HeightMapShape::set_map_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("HeightMapShape::set_map_depth", "(I)"),
	EXPORT_WASM_API_WITH_SIG("HeightMapShape::set_map_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::_get_lower_limit", "()f"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::_get_upper_limit", "()f"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::_set_lower_limit", "(f)"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::_set_upper_limit", "(f)"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::get_flag", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::set_flag", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("HingeJoint::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("IP::clear_cache", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("IP::erase_resolve_item", "(I)"),
	EXPORT_WASM_API_WITH_SIG("IP::get_local_addresses", "()*~"),
	EXPORT_WASM_API_WITH_SIG("IP::get_local_interfaces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("IP::get_resolve_item_address", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("IP::get_resolve_item_status", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("IP::resolve_hostname", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("IP::resolve_hostname_queue_item", "(*~I)I"),
	EXPORT_WASM_API_WITH_SIG("Image::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::blend_rect", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::blend_rect_mask", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::blit_rect", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::blit_rect_mask", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::bumpmap_to_normalmap", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Image::clear_mipmaps", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::compress", "(IIf)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::convert", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Image::copy_from", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::create", "(II*~I)"),
	EXPORT_WASM_API_WITH_SIG("Image::create_from_data", "(II*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::crop", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Image::decompress", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::detect_alpha", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::expand_x2_hq2x", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::fill", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::fix_alpha_edges", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::flip_x", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::flip_y", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::generate_mipmaps", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("Image::get_mipmap_offset", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Image::get_pixel", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_pixelv", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_rect", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_used_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::get_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("Image::has_mipmaps", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::is_compressed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::is_empty", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::is_invisible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::load", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::load_jpg_from_buffer", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::load_png_from_buffer", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::load_webp_from_buffer", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::lock", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::normalmap_to_xy", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::premultiply_alpha", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::resize", "(III)"),
	EXPORT_WASM_API_WITH_SIG("Image::resize_to_po2", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::rgbe_to_srgb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Image::save_exr", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::save_png", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Image::set_pixel", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::set_pixelv", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Image::shrink_x2", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::srgb_to_linear", "()"),
	EXPORT_WASM_API_WITH_SIG("Image::unlock", "()"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::_reload_hook", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::create", "(IIII)"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::create_from_image", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::get_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::get_lossy_storage_quality", "()f"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::get_storage", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::load", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::set_lossy_storage_quality", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::set_size_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImageTexture::set_storage", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::add_sphere", "(IIf*~)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::add_vertex", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::begin", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::end", "()"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::set_normal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::set_tangent", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::set_uv", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ImmediateGeometry::set_uv2", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::action_press", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Input::action_release", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::add_joy_mapping", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::get_accelerometer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_action_strength", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("Input::get_connected_joypads", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_current_cursor_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_gravity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_gyroscope", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_axis", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_axis_index_from_string", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_axis_string", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_button_index_from_string", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_button_string", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_guid", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_vibration_duration", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Input::get_joy_vibration_strength", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_last_mouse_speed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_magnetometer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::get_mouse_button_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("Input::get_mouse_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Input::is_action_just_pressed", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::is_action_just_released", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::is_action_pressed", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::is_joy_button_pressed", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::is_joy_known", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::is_key_pressed", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::is_mouse_button_pressed", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Input::joy_connection_changed", "(I*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::parse_input_event", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::remove_joy_mapping", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::set_custom_mouse_cursor", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::set_default_cursor_shape", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Input::set_mouse_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Input::set_use_accumulated_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Input::start_joy_vibration", "(Ifff)"),
	EXPORT_WASM_API_WITH_SIG("Input::stop_joy_vibration", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Input::vibrate_handheld", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Input::warp_mouse_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::accumulate", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::as_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::get_action_strength", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::get_device", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::is_action", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::is_action_pressed", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::is_action_released", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::is_action_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::is_echo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::is_pressed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::set_device", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::shortcut_match", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputEvent::xformed_by", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventAction::get_action", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventAction::get_strength", "()f"),
	EXPORT_WASM_API_WITH_SIG("InputEventAction::set_action", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventAction::set_pressed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventAction::set_strength", "(f)"),
	EXPORT_WASM_API_WITH_SIG("InputEventGesture::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventGesture::set_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadButton::get_button_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadButton::get_pressure", "()f"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadButton::set_button_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadButton::set_pressed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadButton::set_pressure", "(f)"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadMotion::get_axis", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadMotion::get_axis_value", "()f"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadMotion::set_axis", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventJoypadMotion::set_axis_value", "(f)"),
	EXPORT_WASM_API_WITH_SIG("InputEventKey::get_scancode", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventKey::get_scancode_with_modifiers", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventKey::get_unicode", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventKey::set_echo", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventKey::set_pressed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventKey::set_scancode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventKey::set_unicode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_channel", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_controller_number", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_controller_value", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_instrument", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_message", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_pitch", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_pressure", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::get_velocity", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_channel", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_controller_number", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_controller_value", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_instrument", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_message", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_pitch", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_pressure", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMIDI::set_velocity", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMagnifyGesture::get_factor", "()f"),
	EXPORT_WASM_API_WITH_SIG("InputEventMagnifyGesture::set_factor", "(f)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouse::get_button_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouse::get_global_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouse::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouse::set_button_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouse::set_global_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouse::set_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseButton::get_button_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseButton::get_factor", "()f"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseButton::is_doubleclick", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseButton::set_button_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseButton::set_doubleclick", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseButton::set_factor", "(f)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseButton::set_pressed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::get_pressure", "()f"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::get_relative", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::get_speed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::get_tilt", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::set_pressure", "(f)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::set_relative", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::set_speed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventMouseMotion::set_tilt", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventPanGesture::get_delta", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventPanGesture::set_delta", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::get_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::get_relative", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::get_speed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::set_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::set_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::set_relative", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenDrag::set_speed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenTouch::get_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenTouch::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenTouch::set_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenTouch::set_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventScreenTouch::set_pressed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::get_alt", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::get_command", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::get_control", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::get_metakey", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::get_shift", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::set_alt", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::set_command", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::set_control", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::set_metakey", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputEventWithModifiers::set_shift", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputMap::action_add_event", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("InputMap::action_erase_event", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("InputMap::action_erase_events", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputMap::action_has_event", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputMap::action_set_deadzone", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("InputMap::add_action", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("InputMap::erase_action", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InputMap::event_is_action", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputMap::get_action_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputMap::get_actions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InputMap::has_action", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InputMap::load_from_globals", "()"),
	EXPORT_WASM_API_WITH_SIG("InstancePlaceholder::create_instance", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InstancePlaceholder::get_instance_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InstancePlaceholder::get_stored_values", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("InstancePlaceholder::replace_by_instance", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InterpolatedCamera::get_speed", "()f"),
	EXPORT_WASM_API_WITH_SIG("InterpolatedCamera::get_target_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InterpolatedCamera::is_interpolation_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("InterpolatedCamera::set_interpolation_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InterpolatedCamera::set_speed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("InterpolatedCamera::set_target", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("InterpolatedCamera::set_target_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::_get_items", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::_scroll_changed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::_set_items", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::add_icon_item", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::add_item", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("ItemList::ensure_current_is_visible", "()"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_allow_reselect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_allow_rmb_select", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_fixed_column_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_fixed_icon_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_icon_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_icon_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_at_position", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_custom_bg_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_custom_fg_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_icon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_icon_modulate", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_icon_region", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_metadata", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_text", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_item_tooltip", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_max_columns", "()I"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_max_text_lines", "()I"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_select_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_selected_items", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::get_v_scroll", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::has_auto_height", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::is_anything_selected", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::is_item_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::is_item_icon_transposed", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::is_item_selectable", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::is_item_tooltip_enabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::is_same_column_width", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::is_selected", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ItemList::move_item", "(II)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::remove_item", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::select", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_allow_reselect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_allow_rmb_select", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_auto_height", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_fixed_column_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_fixed_icon_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_icon_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_icon_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_custom_bg_color", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_custom_fg_color", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_icon", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_icon_modulate", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_icon_region", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_icon_transposed", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_metadata", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_selectable", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_text", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_tooltip", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_item_tooltip_enabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_max_columns", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_max_text_lines", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_same_column_width", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::set_select_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::sort_items_by_text", "()"),
	EXPORT_WASM_API_WITH_SIG("ItemList::unselect", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ItemList::unselect_all", "()"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::get_error", "()*~"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::get_error_line", "()I"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::get_error_string", "()*~"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::get_result", "()*~"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::set_error", "(I)"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::set_error_line", "(I)"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::set_error_string", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("JSONParseResult::set_result", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("JSONRPC::make_notification", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("JSONRPC::make_request", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("JSONRPC::make_response", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("JSONRPC::make_response_error", "(I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("JSONRPC::process_action", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("JSONRPC::process_string", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("JSONRPC::set_scope", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("JavaClassWrapper::wrap", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("JavaScript::eval", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Joint::get_exclude_nodes_from_collision", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Joint::get_node_a", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Joint::get_node_b", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Joint::get_solver_priority", "()I"),
	EXPORT_WASM_API_WITH_SIG("Joint::set_exclude_nodes_from_collision", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Joint::set_node_a", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Joint::set_node_b", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Joint::set_solver_priority", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::get_bias", "()f"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::get_exclude_nodes_from_collision", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::get_node_a", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::get_node_b", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::set_bias", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::set_exclude_nodes_from_collision", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::set_node_a", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Joint2D::set_node_b", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::get_axis_lock", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::get_floor_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::get_floor_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::get_safe_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::get_slide_collision", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::get_slide_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::is_on_ceiling", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::is_on_floor", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::is_on_wall", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::move_and_collide", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::move_and_slide", "(*~*~*~If*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::move_and_slide_with_snap", "(*~*~*~*~If*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::set_axis_lock", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::set_safe_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody::test_move", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::_direct_state_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::get_floor_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::get_floor_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::get_safe_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::get_slide_collision", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::get_slide_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::is_on_ceiling", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::is_on_floor", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::is_on_wall", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::is_sync_to_physics_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::move_and_collide", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::move_and_slide", "(*~*~*~If*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::move_and_slide_with_snap", "(*~*~*~*~If*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::set_safe_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::set_sync_to_physics", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("KinematicBody2D::test_move", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_collider", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_collider_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_collider_metadata", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_collider_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_collider_shape_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_collider_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_local_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_remainder", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision::get_travel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_collider", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_collider_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_collider_metadata", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_collider_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_collider_shape_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_collider_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_local_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_remainder", "()*~"),
	EXPORT_WASM_API_WITH_SIG("KinematicCollision2D::get_travel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Label::get_align", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Label::get_line_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Label::get_line_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("Label::get_lines_skipped", "()I"),
	EXPORT_WASM_API_WITH_SIG("Label::get_max_lines_visible", "()I"),
	EXPORT_WASM_API_WITH_SIG("Label::get_percent_visible", "()f"),
	EXPORT_WASM_API_WITH_SIG("Label::get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Label::get_total_character_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Label::get_valign", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Label::get_visible_characters", "()I"),
	EXPORT_WASM_API_WITH_SIG("Label::get_visible_line_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Label::has_autowrap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Label::is_clipping_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Label::is_uppercase", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Label::set_align", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_autowrap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_clip_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_lines_skipped", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_max_lines_visible", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_percent_visible", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_uppercase", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_valign", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Label::set_visible_characters", "(I)"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::add_piece", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::get_piece_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::get_piece_offset", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::get_piece_texture", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::set_piece_offset", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::set_piece_texture", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("LargeTexture::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light::get_bake_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light::get_cull_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("Light::get_shadow_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light::get_shadow_reverse_cull_face", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light::has_shadow", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light::is_editor_only", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light::is_negative", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light::set_bake_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_cull_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_editor_only", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_negative", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_shadow", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_shadow_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light::set_shadow_reverse_cull_face", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_item_cull_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_item_shadow_cull_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_layer_range_max", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_layer_range_min", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_shadow_buffer_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_shadow_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_shadow_filter", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_shadow_gradient_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_shadow_smooth", "()f"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_texture_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_texture_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_z_range_max", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light2D::get_z_range_min", "()I"),
	EXPORT_WASM_API_WITH_SIG("Light2D::is_editor_only", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::is_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::is_shadow_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_editor_only", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_item_cull_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_item_shadow_cull_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_layer_range_max", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_layer_range_min", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_shadow_buffer_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_shadow_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_shadow_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_shadow_filter", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_shadow_gradient_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_shadow_smooth", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_texture_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_texture_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_z_range_max", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Light2D::set_z_range_min", "(I)"),
	EXPORT_WASM_API_WITH_SIG("LightOccluder2D::_poly_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("LightOccluder2D::get_occluder_light_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("LightOccluder2D::get_occluder_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LightOccluder2D::set_occluder_light_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("LightOccluder2D::set_occluder_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::_curve_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Line2D::_gradient_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Line2D::add_point", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::clear_points", "()"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_antialiased", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_begin_cap_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_curve", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_default_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_end_cap_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_gradient", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_joint_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_point_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_points", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_round_precision", "()I"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_sharp_limit", "()f"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_texture_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Line2D::get_width", "()f"),
	EXPORT_WASM_API_WITH_SIG("Line2D::remove_point", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_antialiased", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_begin_cap_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_curve", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_default_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_end_cap_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_gradient", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_joint_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_point_position", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_points", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_round_precision", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_sharp_limit", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_texture_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Line2D::set_width", "(f)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::_editor_settings_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::_text_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::_toggle_draw_caret", "()"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::append_at_cursor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::cursor_get_blink_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::cursor_get_blink_speed", "()f"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::cursor_set_blink_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::cursor_set_blink_speed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::deselect", "()"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_align", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_cursor_position", "()I"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_expand_to_text_length", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_max_length", "()I"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_menu", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_placeholder", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_placeholder_alpha", "()f"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_right_icon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_secret_character", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::is_clear_button_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::is_context_menu_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::is_editable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::is_secret", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::is_selecting_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::is_shortcut_keys_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::menu_option", "(I)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::select", "(II)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::select_all", "()"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_align", "(I)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_clear_button_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_context_menu_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_cursor_position", "(I)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_editable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_expand_to_text_length", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_max_length", "(I)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_placeholder", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_placeholder_alpha", "(f)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_right_icon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_secret", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_secret_character", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_selecting_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_shortcut_keys_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineEdit::set_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LineShape2D::get_d", "()f"),
	EXPORT_WASM_API_WITH_SIG("LineShape2D::get_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LineShape2D::set_d", "(f)"),
	EXPORT_WASM_API_WITH_SIG("LineShape2D::set_normal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LinkButton::get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LinkButton::get_underline_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("LinkButton::set_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("LinkButton::set_underline_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Listener::clear_current", "()"),
	EXPORT_WASM_API_WITH_SIG("Listener::get_listener_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Listener::is_current", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Listener::make_current", "()"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_drop_files", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_finalize", "()"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_global_menu_action", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_idle", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_initialize", "()"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_input_event", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_input_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::_iteration", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::finish", "()"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::idle", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::init", "()"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::input_event", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::input_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MainLoop::iteration", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("Material::get_next_pass", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Material::get_render_priority", "()I"),
	EXPORT_WASM_API_WITH_SIG("Material::set_next_pass", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Material::set_render_priority", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MenuButton::_get_items", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MenuButton::_set_items", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MenuButton::_unhandled_key_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MenuButton::get_popup", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MenuButton::is_switch_on_hover", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MenuButton::set_disable_shortcuts", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MenuButton::set_switch_on_hover", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Mesh::create_convex_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::create_outline", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::create_trimesh_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::generate_triangle_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::get_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::get_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::get_lightmap_size_hint", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::get_surface_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Mesh::set_lightmap_size_hint", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Mesh::surface_get_arrays", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::surface_get_blend_shape_arrays", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::surface_get_material", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Mesh::surface_set_material", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::commit_to_surface", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::create_from_surface", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_edge_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_edge_faces", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_edge_meta", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_edge_vertex", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_face_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_face_edge", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_face_meta", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_face_normal", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_face_vertex", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_format", "()I"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_bones", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_edges", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_faces", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_meta", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_normal", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_tangent", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_uv", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_uv2", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::get_vertex_weights", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_edge_meta", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_face_meta", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_bones", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_color", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_meta", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_normal", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_tangent", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_uv", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_uv2", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshDataTool::set_vertex_weights", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::_mesh_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::create_convex_collision", "()"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::create_debug_tangents", "()"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::create_trimesh_collision", "()"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::get_skeleton_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::get_skin", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::get_surface_material", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::get_surface_material_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::set_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::set_skeleton_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::set_skin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance::set_surface_material", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance2D::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance2D::get_normal_map", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance2D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance2D::set_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance2D::set_normal_map", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshInstance2D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::create_item", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::find_item_by_name", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_item_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_item_mesh", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_item_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_item_navmesh", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_item_navmesh_transform", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_item_preview", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_item_shapes", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::get_last_unused_item_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::remove_item", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::set_item_mesh", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::set_item_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::set_item_navmesh", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::set_item_navmesh_transform", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::set_item_preview", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshLibrary::set_item_shapes", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshTexture::get_base_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshTexture::get_image_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshTexture::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MeshTexture::set_base_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshTexture::set_image_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MeshTexture::set_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::get_display_to_lens", "()f"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::get_display_width", "()f"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::get_eye_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::get_iod", "()f"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::get_k1", "()f"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::get_k2", "()f"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::get_oversample", "()f"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::set_display_to_lens", "(f)"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::set_display_width", "(f)"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::set_eye_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::set_iod", "(f)"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::set_k1", "(f)"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::set_k2", "(f)"),
	EXPORT_WASM_API_WITH_SIG("MobileVRInterface::set_oversample", "(f)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_get_color_array", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_get_custom_data_array", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_get_transform_2d_array", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_get_transform_array", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_set_color_array", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_set_custom_data_array", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_set_transform_2d_array", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::_set_transform_array", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_color_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_custom_data_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_instance_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_instance_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_instance_custom_data", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_instance_transform", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_instance_transform_2d", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_transform_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::get_visible_instance_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_as_bulk_array", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_color_format", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_custom_data_format", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_instance_color", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_instance_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_instance_custom_data", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_instance_transform", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_instance_transform_2d", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_transform_format", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MultiMesh::set_visible_instance_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance::get_multimesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance::set_multimesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance2D::get_multimesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance2D::get_normal_map", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance2D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance2D::set_multimesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance2D::set_normal_map", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiMeshInstance2D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::_add_peer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::_connected_to_server", "()"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::_connection_failed", "()"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::_del_peer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::_server_disconnected", "()"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::get_network_connected_peers", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::get_network_peer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::get_network_unique_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::get_rpc_sender_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::has_network_peer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::is_network_server", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::is_object_decoding_allowed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::is_refusing_new_network_connections", "()*~"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::poll", "()"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::send_bytes", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::set_allow_object_decoding", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::set_network_peer", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::set_refuse_new_network_connections", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("MultiplayerAPI::set_root_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_class_documentation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_class_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_library", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_method_documentation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_property_documentation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_script_class_icon_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_script_class_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::get_signal_documentation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::new", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::set_class_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::set_library", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::set_script_class_icon_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NativeScript::set_script_class_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Navigation::get_closest_point", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation::get_closest_point_normal", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation::get_closest_point_owner", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation::get_closest_point_to_segment", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation::get_simple_path", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation::get_up_vector", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation::navmesh_add", "(*~*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("Navigation::navmesh_remove", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Navigation::navmesh_set_transform", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Navigation::set_up_vector", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Navigation2D::get_closest_point", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation2D::get_closest_point_owner", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation2D::get_simple_path", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Navigation2D::navpoly_add", "(*~*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("Navigation2D::navpoly_remove", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Navigation2D::navpoly_set_transform", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::_get_polygons", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::_set_polygons", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::add_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::clear_polygons", "()"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::create_from_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_agent_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_agent_max_climb", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_agent_max_slope", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_agent_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_cell_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_cell_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_detail_sample_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_detail_sample_max_error", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_edge_max_error", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_edge_max_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_filter_ledge_spans", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_filter_low_hanging_obstacles", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_filter_walkable_low_height_spans", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_parsed_geometry_type", "()I"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_polygon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_polygon_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_region_merge_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_region_min_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_sample_partition_type", "()I"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_source_geometry_mode", "()I"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_source_group_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_vertices", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::get_verts_per_poly", "()f"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_agent_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_agent_max_climb", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_agent_max_slope", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_agent_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_cell_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_cell_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_detail_sample_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_detail_sample_max_error", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_edge_max_error", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_edge_max_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_filter_ledge_spans", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_filter_low_hanging_obstacles", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_filter_walkable_low_height_spans", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_parsed_geometry_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_region_merge_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_region_min_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_sample_partition_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_source_geometry_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_source_group_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_vertices", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMesh::set_verts_per_poly", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMeshInstance::get_navigation_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMeshInstance::is_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationMeshInstance::set_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationMeshInstance::set_navigation_mesh", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::_get_outlines", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::_get_polygons", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::_set_outlines", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::_set_polygons", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::add_outline", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::add_outline_at_index", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::add_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::clear_outlines", "()"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::clear_polygons", "()"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::get_outline", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::get_outline_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::get_polygon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::get_polygon_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::get_vertices", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::make_polygons_from_outlines", "()"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::remove_outline", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::set_outline", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygon::set_vertices", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygonInstance::_navpoly_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygonInstance::get_navigation_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygonInstance::is_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygonInstance::set_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NavigationPolygonInstance::set_navigation_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::close_connection", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::create_client", "(*~IIII)*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::create_server", "(IIII)*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::disconnect_peer", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::get_channel_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::get_compression_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::get_last_packet_channel", "()I"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::get_packet_channel", "()I"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::get_peer_address", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::get_peer_port", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::get_transfer_channel", "()I"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::is_always_ordered", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::is_server_relay_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::set_always_ordered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::set_bind_ip", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::set_channel_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::set_compression_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::set_server_relay_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerENet::set_transfer_channel", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::get_connection_status", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::get_packet_peer", "()I"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::get_transfer_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::get_unique_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::is_refusing_new_connections", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::poll", "()"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::set_refuse_new_connections", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::set_target_peer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NetworkedMultiplayerPeer::set_transfer_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::get_h_axis_stretch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::get_patch_margin", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::get_region_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::get_v_axis_stretch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::is_draw_center_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::set_draw_center", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::set_h_axis_stretch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::set_patch_margin", "(II)"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::set_region_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NinePatchRect::set_v_axis_stretch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Node::_enter_tree", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::_exit_tree", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::_get_configuration_warning", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::_get_editor_description", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::_get_import_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::_physics_process", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Node::_process", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Node::_ready", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::_set_editor_description", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::_set_import_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::_unhandled_key_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::add_child", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::add_child_below_node", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::add_to_group", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::can_process", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::duplicate", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::find_node", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::find_parent", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_child", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_child_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Node::get_children", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_custom_multiplayer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_filename", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_groups", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("Node::get_multiplayer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_network_master", "()I"),
	EXPORT_WASM_API_WITH_SIG("Node::get_node", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_node_and_resource", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_node_or_null", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_owner", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_parent", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_path_to", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_pause_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_physics_process_delta_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("Node::get_position_in_parent", "()I"),
	EXPORT_WASM_API_WITH_SIG("Node::get_process_delta_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("Node::get_process_priority", "()I"),
	EXPORT_WASM_API_WITH_SIG("Node::get_scene_instance_load_placeholder", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_tree", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::get_viewport", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::has_node", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::has_node_and_resource", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_a_parent_of", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_displayed_folded", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_greater_than", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_in_group", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_inside_tree", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_network_master", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_physics_processing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_physics_processing_internal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_processing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_processing_input", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_processing_internal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_processing_unhandled_input", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::is_processing_unhandled_key_input", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node::move_child", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Node::print_stray_nodes", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::print_tree", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::print_tree_pretty", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::propagate_call", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::propagate_notification", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Node::queue_free", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::raise", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::remove_and_skip", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::remove_child", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::remove_from_group", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::replace_by", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::request_ready", "()"),
	EXPORT_WASM_API_WITH_SIG("Node::rpc", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::rpc_config", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Node::rpc_id", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::rpc_unreliable", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::rpc_unreliable_id", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node::rset", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::rset_config", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Node::rset_id", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::rset_unreliable", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::rset_unreliable_id", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_custom_multiplayer", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_display_folded", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_filename", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_network_master", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_owner", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_pause_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_physics_process", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_physics_process_internal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_process", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_process_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_process_internal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_process_priority", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_process_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_process_unhandled_key_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::set_scene_instance_load_placeholder", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node::update_configuration_warning", "()"),
	EXPORT_WASM_API_WITH_SIG("Node2D::apply_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_angle_to", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_global_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_global_rotation", "()f"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_global_rotation_degrees", "()f"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_global_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_relative_transform_to_parent", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_rotation", "()f"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_rotation_degrees", "()f"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::get_z_index", "()I"),
	EXPORT_WASM_API_WITH_SIG("Node2D::global_translate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::is_z_relative", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::look_at", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::move_local_x", "(f*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::move_local_y", "(f*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::rotate", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_global_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_global_rotation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_global_rotation_degrees", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_global_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_global_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_rotation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_rotation_degrees", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_z_as_relative", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::set_z_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Node2D::to_global", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::to_local", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Node2D::translate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::_generate_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::_queue_update", "()"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::_thread_done", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::_update_texture", "()"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::get_bump_strength", "()f"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::get_noise", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::get_seamless", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::is_normalmap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::set_as_normalmap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::set_bump_strength", "(f)"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::set_height", "(I)"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::set_noise", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::set_seamless", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("NoiseTexture::set_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Object::_get", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::_get_property_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::_init", "()"),
	EXPORT_WASM_API_WITH_SIG("Object::_notification", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Object::_set", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::_to_string", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::add_user_signal", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::call", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::call_deferred", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::callv", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::can_translate_messages", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::connect", "(*~*~*~*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::disconnect", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::emit_signal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::free", "()"),
	EXPORT_WASM_API_WITH_SIG("Object::get", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_class", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_incoming_connections", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_indexed", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_instance_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("Object::get_meta", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_meta_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_method_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_property_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_signal_connection_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::get_signal_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::has_meta", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::has_method", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::has_user_signal", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::is_blocking_signals", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::is_class", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::is_connected", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Object::is_queued_for_deletion", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::notification", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::property_list_changed_notify", "()"),
	EXPORT_WASM_API_WITH_SIG("Object::remove_meta", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::set", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::set_block_signals", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::set_deferred", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::set_indexed", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::set_message_translation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::set_meta", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::set_script", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Object::to_string", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Object::tr", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("OccluderPolygon2D::get_cull_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OccluderPolygon2D::get_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OccluderPolygon2D::is_closed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OccluderPolygon2D::set_closed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("OccluderPolygon2D::set_cull_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OccluderPolygon2D::set_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("OmniLight::get_shadow_detail", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OmniLight::get_shadow_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OmniLight::set_shadow_detail", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OmniLight::set_shadow_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_image", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_lacunarity", "()f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_noise_1d", "(f)f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_noise_2d", "(ff)f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_noise_2dv", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_noise_3d", "(fff)f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_noise_3dv", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_noise_4d", "(ffff)f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_octaves", "()I"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_period", "()f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_persistence", "()f"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_seamless_image", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::get_seed", "()I"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::set_lacunarity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::set_octaves", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::set_period", "(f)"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::set_persistence", "(f)"),
	EXPORT_WASM_API_WITH_SIG("OpenSimplexNoise::set_seed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::_focused", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::_get_items", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::_select_int", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::_set_items", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::add_icon_item", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::add_item", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::add_separator", "()"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_item_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_item_icon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_item_id", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_item_index", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_item_metadata", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_item_text", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_popup", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_selected", "()I"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_selected_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::get_selected_metadata", "()*~"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::is_item_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::remove_item", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::select", "(I)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::set_item_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::set_item_icon", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::set_item_id", "(II)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::set_item_metadata", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("OptionButton::set_item_text", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PCKPacker::add_file", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PCKPacker::flush", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PCKPacker::pck_start", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PHashTranslation::generate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainer::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainer::_iter_get", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainer::_iter_init", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainer::_iter_next", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainer::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainer::pack", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainer::size", "()I"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainerRef::_is_dictionary", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainerRef::_iter_get", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainerRef::_iter_init", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainerRef::_iter_next", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedDataContainerRef::size", "()I"),
	EXPORT_WASM_API_WITH_SIG("PackedScene::_get_bundled_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PackedScene::_set_bundled_scene", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PackedScene::can_instance", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PackedScene::get_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PackedScene::instance", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PackedScene::pack", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::get_available_packet_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::get_encode_buffer_max_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::get_packet", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::get_packet_error", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::get_var", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::is_object_decoding_allowed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::put_packet", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::put_var", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::set_allow_object_decoding", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PacketPeer::set_encode_buffer_max_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerStream::get_input_buffer_max_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerStream::get_output_buffer_max_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerStream::get_stream_peer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerStream::set_input_buffer_max_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerStream::set_output_buffer_max_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerStream::set_stream_peer", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::close", "()"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::get_packet_ip", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::get_packet_port", "()I"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::is_listening", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::join_multicast_group", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::leave_multicast_group", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::listen", "(I*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::set_broadcast_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::set_dest_address", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PacketPeerUDP::wait", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PanoramaSky::get_panorama", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PanoramaSky::set_panorama", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::_camera_moved", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::get_limit_begin", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::get_limit_end", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::get_scroll_base_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::get_scroll_base_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::get_scroll_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::is_ignore_camera_zoom", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::set_ignore_camera_zoom", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::set_limit_begin", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::set_limit_end", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::set_scroll_base_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::set_scroll_base_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxBackground::set_scroll_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxLayer::get_mirroring", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxLayer::get_motion_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxLayer::get_motion_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParallaxLayer::set_mirroring", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxLayer::set_motion_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParallaxLayer::set_motion_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles::capture_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_amount", "()I"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_draw_order", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_draw_pass_mesh", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_draw_passes", "()I"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_explosiveness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_fixed_fps", "()I"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_fractional_delta", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_lifetime", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_one_shot", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_pre_process_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_process_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_randomness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_speed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_use_local_coordinates", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::get_visibility_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::is_emitting", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles::restart", "()"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_amount", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_draw_order", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_draw_pass_mesh", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_draw_passes", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_emitting", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_explosiveness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_fixed_fps", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_fractional_delta", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_lifetime", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_one_shot", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_pre_process_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_process_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_randomness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_speed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_use_local_coordinates", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles::set_visibility_aabb", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::capture_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_amount", "()I"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_draw_order", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_explosiveness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_fixed_fps", "()I"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_fractional_delta", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_lifetime", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_normal_map", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_one_shot", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_pre_process_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_process_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_randomness_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_speed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_use_local_coordinates", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::get_visibility_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::is_emitting", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::restart", "()"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_amount", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_draw_order", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_emitting", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_explosiveness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_fixed_fps", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_fractional_delta", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_lifetime", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_normal_map", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_one_shot", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_pre_process_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_process_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_randomness_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_speed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_use_local_coordinates", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Particles2D::set_visibility_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_color_ramp", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_direction", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_emission_box_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_emission_color_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_emission_normal_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_emission_point_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_emission_point_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_emission_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_emission_sphere_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_flag", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_flatness", "()f"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_gravity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_lifetime_randomness", "()f"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_param_randomness", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_param_texture", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_spread", "()f"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_trail_color_modifier", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_trail_divisor", "()I"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::get_trail_size_modifier", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_color_ramp", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_direction", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_emission_box_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_emission_color_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_emission_normal_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_emission_point_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_emission_point_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_emission_shape", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_emission_sphere_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_flag", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_flatness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_gravity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_lifetime_randomness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_param_randomness", "(If)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_param_texture", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_spread", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_trail_color_modifier", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_trail_divisor", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ParticlesMaterial::set_trail_size_modifier", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Path::_curve_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Path::get_curve", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Path::set_curve", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Path2D::_curve_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Path2D::get_curve", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Path2D::set_curve", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::get_cubic_interpolation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::get_h_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::get_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::get_rotation_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::get_unit_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::get_v_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::has_loop", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::set_cubic_interpolation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::set_h_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::set_loop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::set_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::set_rotation_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::set_unit_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow::set_v_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::get_cubic_interpolation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::get_h_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::get_lookahead", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::get_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::get_unit_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::get_v_offset", "()f"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::has_loop", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::is_rotating", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_cubic_interpolation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_h_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_lookahead", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_loop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_rotate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_unit_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PathFollow2D::set_v_offset", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Performance::get_monitor", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::_direct_state_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::apply_central_impulse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::apply_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_body_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_bone_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_bounce", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_friction", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_gravity_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_joint_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_joint_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_mass", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_simulate_physics", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::get_weight", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::is_simulating_physics", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::is_static_body", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_body_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_bounce", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_friction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_gravity_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_joint_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_joint_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_mass", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicalBone::set_weight", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::add_central_force", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::add_force", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::add_torque", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::apply_central_impulse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::apply_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::apply_torque_impulse", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_angular_velocity", "()f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_collider", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_collider_id", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_collider_object", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_collider_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_collider_shape", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_collider_shape_metadata", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_collider_velocity_at_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_local_normal", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_local_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_contact_local_shape", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_inverse_inertia", "()f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_inverse_mass", "()f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_linear_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_space_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_step", "()f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_total_angular_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_total_gravity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_total_linear_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::integrate_forces", "()"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::is_sleeping", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::set_angular_velocity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::set_linear_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::set_sleep_state", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectBodyState::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectSpaceState::cast_motion", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectSpaceState::collide_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectSpaceState::get_rest_info", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectSpaceState::intersect_point", "(*~I*~I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectSpaceState::intersect_point_on_canvas", "(*~II*~I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectSpaceState::intersect_ray", "(*~*~*~I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DDirectSpaceState::intersect_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_add_shape", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_attach_canvas_instance_id", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_attach_object_instance_id", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_clear_shapes", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_canvas_instance_id", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_object_instance_id", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_param", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_shape_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_shape_transform", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_space", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_space_override_mode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_get_transform", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_remove_shape", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_area_monitor_callback", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_collision_layer", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_collision_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_monitor_callback", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_monitorable", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_param", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_shape", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_shape_disabled", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_shape_transform", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_space", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_space_override_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::area_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_add_central_force", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_add_collision_exception", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_add_force", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_add_shape", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_add_torque", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_apply_central_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_apply_impulse", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_apply_torque_impulse", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_attach_canvas_instance_id", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_attach_object_instance_id", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_clear_shapes", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_canvas_instance_id", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_collision_layer", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_collision_mask", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_continuous_collision_detection_mode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_direct_state", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_max_contacts_reported", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_mode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_object_instance_id", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_shape_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_shape_metadata", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_shape_transform", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_space", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_get_state", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_is_omitting_force_integration", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_remove_collision_exception", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_remove_shape", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_axis_velocity", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_collision_layer", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_collision_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_continuous_collision_detection_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_force_integration_callback", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_max_contacts_reported", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_omit_force_integration", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_shape", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_shape_as_one_way_collision", "(*~I*~f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_shape_disabled", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_shape_metadata", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_shape_transform", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_space", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_set_state", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::body_test_motion", "(*~*~*~*~f*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::capsule_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::circle_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::concave_polygon_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::convex_polygon_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::damped_spring_joint_create", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::damped_string_joint_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::damped_string_joint_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::free_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::get_process_info", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::groove_joint_create", "(*~*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::joint_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::joint_get_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::joint_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::line_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::pin_joint_create", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::ray_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::rectangle_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::segment_shape_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::set_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::shape_get_data", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::shape_get_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::shape_set_data", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::space_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::space_get_direct_state", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::space_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::space_is_active", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::space_set_active", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DServer::space_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::get_exclude", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::get_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::get_motion", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::get_shape_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::is_collide_with_areas_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::is_collide_with_bodies_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_collide_with_areas", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_collide_with_bodies", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_exclude", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_motion", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_shape", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_shape_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryParameters::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryResult::get_result_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryResult::get_result_object", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryResult::get_result_object_id", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryResult::get_result_object_shape", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DShapeQueryResult::get_result_rid", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_collider", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_collider_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_collider_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_collider_shape", "()I"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_collider_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_collision_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_collision_point", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_motion", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Physics2DTestMotionResult::get_motion_remainder", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::_get_layers", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::_set_layers", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::add_collision_exception_with", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::get_collision_exceptions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::remove_collision_exception_with", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::_get_layers", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::_set_layers", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::add_collision_exception_with", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::get_collision_exceptions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::remove_collision_exception_with", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsBody2D::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::add_central_force", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::add_force", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::add_torque", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::apply_central_impulse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::apply_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::apply_torque_impulse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_angular_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_center_of_mass", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_collider", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_collider_id", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_collider_object", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_collider_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_collider_shape", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_collider_velocity_at_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_impulse", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_local_normal", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_local_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_contact_local_shape", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_inverse_inertia", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_inverse_mass", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_linear_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_principal_inertia_axes", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_space_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_step", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_total_angular_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_total_gravity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_total_linear_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::integrate_forces", "()"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::is_sleeping", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::set_angular_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::set_linear_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::set_sleep_state", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectBodyState::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectSpaceState::cast_motion", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectSpaceState::collide_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectSpaceState::get_rest_info", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectSpaceState::intersect_ray", "(*~*~*~I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsDirectSpaceState::intersect_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::get_bounce", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::get_friction", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::is_absorbent", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::is_rough", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::set_absorbent", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::set_bounce", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::set_friction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsMaterial::set_rough", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_add_shape", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_attach_object_instance_id", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_clear_shapes", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_object_instance_id", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_param", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_shape_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_shape_transform", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_space", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_space_override_mode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_get_transform", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_is_ray_pickable", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_remove_shape", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_area_monitor_callback", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_collision_layer", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_collision_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_monitor_callback", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_monitorable", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_param", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_ray_pickable", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_shape", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_shape_disabled", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_shape_transform", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_space", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_space_override_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::area_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_add_central_force", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_add_collision_exception", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_add_force", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_add_shape", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_add_torque", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_apply_central_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_apply_impulse", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_apply_torque_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_attach_object_instance_id", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_clear_shapes", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_create", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_collision_layer", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_collision_mask", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_direct_state", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_kinematic_safe_margin", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_max_contacts_reported", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_mode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_object_instance_id", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_shape", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_shape_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_shape_transform", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_space", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_get_state", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_is_axis_locked", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_is_continuous_collision_detection_enabled", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_is_omitting_force_integration", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_is_ray_pickable", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_remove_collision_exception", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_remove_shape", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_axis_lock", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_axis_velocity", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_collision_layer", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_collision_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_enable_continuous_collision_detection", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_force_integration_callback", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_kinematic_safe_margin", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_max_contacts_reported", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_omit_force_integration", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_ray_pickable", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_shape", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_shape_disabled", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_shape_transform", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_space", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::body_set_state", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::cone_twist_joint_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::cone_twist_joint_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::free_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::generic_6dof_joint_get_flag", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::generic_6dof_joint_get_param", "(*~II)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::generic_6dof_joint_set_flag", "(*~II*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::generic_6dof_joint_set_param", "(*~IIf)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::get_process_info", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::hinge_joint_get_flag", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::hinge_joint_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::hinge_joint_set_flag", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::hinge_joint_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_create_cone_twist", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_create_generic_6dof", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_create_hinge", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_create_pin", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_create_slider", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_get_solver_priority", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_get_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::joint_set_solver_priority", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::pin_joint_get_local_a", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::pin_joint_get_local_b", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::pin_joint_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::pin_joint_set_local_a", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::pin_joint_set_local_b", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::pin_joint_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::set_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::shape_create", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::shape_get_data", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::shape_get_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::shape_set_data", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::slider_joint_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::slider_joint_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::space_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::space_get_direct_state", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::space_get_param", "(*~I)f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::space_is_active", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::space_set_active", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsServer::space_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::get_exclude", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::get_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::get_shape_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::is_collide_with_areas_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::is_collide_with_bodies_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_collide_with_areas", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_collide_with_bodies", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_exclude", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_shape", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_shape_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryParameters::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryResult::get_result_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryResult::get_result_object", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryResult::get_result_object_id", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryResult::get_result_object_shape", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PhysicsShapeQueryResult::get_result_rid", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PinJoint::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("PinJoint::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("PinJoint2D::get_softness", "()f"),
	EXPORT_WASM_API_WITH_SIG("PinJoint2D::set_softness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PlaneMesh::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PlaneMesh::get_subdivide_depth", "()I"),
	EXPORT_WASM_API_WITH_SIG("PlaneMesh::get_subdivide_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("PlaneMesh::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PlaneMesh::set_subdivide_depth", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PlaneMesh::set_subdivide_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PlaneShape::get_plane", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PlaneShape::set_plane", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PluginScript::new", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::_get_bones", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::_set_bones", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::_skeleton_bone_setup_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::add_bone", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::clear_bones", "()"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::erase_bone", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_antialiased", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_bone_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_bone_path", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_bone_weights", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_internal_vertex_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_invert", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_invert_border", "()f"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_polygon", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_polygons", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_skeleton", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_texture_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_texture_rotation", "()f"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_texture_rotation_degrees", "()f"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_texture_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_uv", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::get_vertex_colors", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_antialiased", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_bone_path", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_bone_weights", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_internal_vertex_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_invert", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_invert_border", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_polygon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_polygons", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_skeleton", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_texture_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_texture_rotation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_texture_rotation_degrees", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_texture_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_uv", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Polygon2D::set_vertex_colors", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::find_path", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::get_bounds", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::get_closest_point", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::get_intersections", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::get_point_penalty", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::is_point_inside", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::set_point_penalty", "(If)"),
	EXPORT_WASM_API_WITH_SIG("PolygonPathFinder::setup", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Popup::is_exclusive", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Popup::popup", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Popup::popup_centered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Popup::popup_centered_clamped", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Popup::popup_centered_minsize", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Popup::popup_centered_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Popup::set_as_minsize", "()"),
	EXPORT_WASM_API_WITH_SIG("Popup::set_exclusive", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::_get_items", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::_set_items", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::_submenu_timeout", "()"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_check_item", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_check_shortcut", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_icon_check_item", "(*~*~II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_icon_check_shortcut", "(*~*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_icon_item", "(*~*~II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_icon_radio_check_item", "(*~*~II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_icon_radio_check_shortcut", "(*~*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_icon_shortcut", "(*~*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_item", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_multistate_item", "(*~IIII)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_radio_check_item", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_radio_check_shortcut", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_separator", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_shortcut", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::add_submenu_item", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_allow_search", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_accelerator", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_icon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_id", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_index", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_metadata", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_shortcut", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_submenu", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_text", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_item_tooltip", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::get_submenu_popup_delay", "()f"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_hide_on_checkable_item_selection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_hide_on_item_selection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_hide_on_state_item_selection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_hide_on_window_lose_focus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_item_checkable", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_item_checked", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_item_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_item_radio_checkable", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_item_separator", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::is_item_shortcut_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::remove_item", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_allow_search", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_hide_on_checkable_item_selection", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_hide_on_item_selection", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_hide_on_state_item_selection", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_hide_on_window_lose_focus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_accelerator", "(II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_as_checkable", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_as_radio_checkable", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_as_separator", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_checked", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_icon", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_id", "(II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_metadata", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_multistate", "(II)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_shortcut", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_shortcut_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_submenu", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_text", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_item_tooltip", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::set_submenu_popup_delay", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::toggle_item_checked", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PopupMenu::toggle_item_multistate", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Position2D::_get_gizmo_extents", "()f"),
	EXPORT_WASM_API_WITH_SIG("Position2D::_set_gizmo_extents", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::_update", "()"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::get_custom_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::get_flip_faces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::get_material", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::get_mesh_arrays", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::set_custom_aabb", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::set_flip_faces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PrimitiveMesh::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::get_left_to_right", "()f"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::get_subdivide_depth", "()I"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::get_subdivide_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::get_subdivide_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::set_left_to_right", "(f)"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::set_subdivide_depth", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::set_subdivide_height", "(I)"),
	EXPORT_WASM_API_WITH_SIG("PrismMesh::set_subdivide_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::_thread_done", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::_update_sky", "()"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_ground_bottom_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_ground_curve", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_ground_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_ground_horizon_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sky_curve", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sky_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sky_horizon_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sky_top_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sun_angle_max", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sun_angle_min", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sun_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sun_curve", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sun_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sun_latitude", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_sun_longitude", "()f"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::get_texture_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_ground_bottom_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_ground_curve", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_ground_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_ground_horizon_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sky_curve", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sky_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sky_horizon_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sky_top_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sun_angle_max", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sun_angle_min", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sun_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sun_curve", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sun_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sun_latitude", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_sun_longitude", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ProceduralSky::set_texture_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ProgressBar::is_percent_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProgressBar::set_percent_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::add_property_info", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::clear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::get_order", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::get_setting", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::globalize_path", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::has_setting", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::load_resource_pack", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::localize_path", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::property_can_revert", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::property_get_revert", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::save", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::save_custom", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::set_initial_value", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::set_order", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("ProjectSettings::set_setting", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::_proximity_group_broadcast", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::broadcast", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::get_dispatch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::get_grid_radius", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::get_group_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::set_dispatch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::set_grid_radius", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProximityGroup::set_group_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ProxyTexture::get_base", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ProxyTexture::set_base", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("QuadMesh::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("QuadMesh::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::get_seed", "()I"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::randf", "()f"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::randf_range", "(ff)f"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::randfn", "(ff)f"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::randi", "()I"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::randi_range", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::randomize", "()"),
	EXPORT_WASM_API_WITH_SIG("RandomNumberGenerator::set_seed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Range::get_as_ratio", "()f"),
	EXPORT_WASM_API_WITH_SIG("Range::get_max", "()f"),
	EXPORT_WASM_API_WITH_SIG("Range::get_min", "()f"),
	EXPORT_WASM_API_WITH_SIG("Range::get_page", "()f"),
	EXPORT_WASM_API_WITH_SIG("Range::get_step", "()f"),
	EXPORT_WASM_API_WITH_SIG("Range::get_value", "()f"),
	EXPORT_WASM_API_WITH_SIG("Range::is_greater_allowed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Range::is_lesser_allowed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Range::is_ratio_exp", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Range::is_using_rounded_values", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Range::set_allow_greater", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_allow_lesser", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_as_ratio", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_exp_ratio", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_max", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_min", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_page", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_step", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_use_rounded_values", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Range::set_value", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Range::share", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Range::unshare", "()"),
	EXPORT_WASM_API_WITH_SIG("RayCast::add_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::add_exception_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::clear_exceptions", "()"),
	EXPORT_WASM_API_WITH_SIG("RayCast::force_raycast_update", "()"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_cast_to", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_collider", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_collider_shape", "()I"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_collision_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_collision_point", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::get_exclude_parent_body", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::is_collide_with_areas_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::is_collide_with_bodies_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::is_colliding", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::is_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast::remove_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::remove_exception_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::set_cast_to", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::set_collide_with_areas", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::set_collide_with_bodies", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::set_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast::set_exclude_parent_body", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::add_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::add_exception_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::clear_exceptions", "()"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::force_raycast_update", "()"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_cast_to", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_collider", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_collider_shape", "()I"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_collision_normal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_collision_point", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::get_exclude_parent_body", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::is_collide_with_areas_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::is_collide_with_bodies_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::is_colliding", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::is_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::remove_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::remove_exception_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::set_cast_to", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::set_collide_with_areas", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::set_collide_with_bodies", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::set_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayCast2D::set_exclude_parent_body", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayShape::get_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("RayShape::get_slips_on_slope", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayShape::set_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RayShape::set_slips_on_slope", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RayShape2D::get_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("RayShape2D::get_slips_on_slope", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RayShape2D::set_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RayShape2D::set_slips_on_slope", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RectangleShape2D::get_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RectangleShape2D::set_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Reference::init_ref", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Reference::reference", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Reference::unreference", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReferenceRect::get_border_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReferenceRect::get_editor_only", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReferenceRect::set_border_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReferenceRect::set_editor_only", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::are_shadows_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_cull_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_extents", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_intensity", "()f"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_interior_ambient", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_interior_ambient_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_interior_ambient_probe_contribution", "()f"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_max_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_origin_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::get_update_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::is_box_projection_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::is_set_as_interior", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_as_interior", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_cull_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_enable_box_projection", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_enable_shadows", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_extents", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_intensity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_interior_ambient", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_interior_ambient_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_interior_ambient_probe_contribution", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_max_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_origin_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ReflectionProbe::set_update_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RegEx::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("RegEx::compile", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("RegEx::get_group_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("RegEx::get_names", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RegEx::get_pattern", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RegEx::is_valid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RegEx::search", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("RegEx::search_all", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("RegEx::sub", "(*~*~*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("RegExMatch::get_end", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("RegExMatch::get_group_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("RegExMatch::get_names", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RegExMatch::get_start", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("RegExMatch::get_string", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("RegExMatch::get_strings", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RegExMatch::get_subject", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::force_update_cache", "()"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::get_remote_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::get_update_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::get_update_rotation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::get_update_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::get_use_global_coordinates", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::set_remote_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::set_update_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::set_update_rotation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::set_update_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform::set_use_global_coordinates", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::force_update_cache", "()"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::get_remote_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::get_update_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::get_update_rotation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::get_update_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::get_use_global_coordinates", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::set_remote_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::set_update_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::set_update_rotation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::set_update_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RemoteTransform2D::set_use_global_coordinates", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Resource::_setup_local_to_scene", "()"),
	EXPORT_WASM_API_WITH_SIG("Resource::duplicate", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Resource::get_local_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Resource::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Resource::get_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Resource::get_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Resource::is_local_to_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Resource::set_local_to_scene", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Resource::set_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Resource::set_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Resource::setup_local_to_scene", "()"),
	EXPORT_WASM_API_WITH_SIG("Resource::take_over_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatLoader::get_dependencies", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatLoader::get_recognized_extensions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatLoader::get_resource_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatLoader::handles_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatLoader::load", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatLoader::rename_dependencies", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatSaver::get_recognized_extensions", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatSaver::recognize", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceFormatSaver::save", "(*~*~I)I"),
	EXPORT_WASM_API_WITH_SIG("ResourceInteractiveLoader::get_resource", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceInteractiveLoader::get_stage", "()I"),
	EXPORT_WASM_API_WITH_SIG("ResourceInteractiveLoader::get_stage_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("ResourceInteractiveLoader::poll", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ResourceInteractiveLoader::wait", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::_get_resources", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::_set_resources", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::add_resource", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::get_resource", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::get_resource_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::has_resource", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::remove_resource", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ResourcePreloader::rename_resource", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextEffect::_process_custom_fx", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::_scroll_changed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::add_image", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::add_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::append_bbcode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_bbcode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_content_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_effects", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_line_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_percent_visible", "()f"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_tab_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_total_character_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_v_scroll", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_visible_characters", "()I"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::get_visible_line_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::install_effect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::is_meta_underlined", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::is_overriding_selected_font_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::is_scroll_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::is_scroll_following", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::is_selection_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::is_using_bbcode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::newline", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::parse_bbcode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::parse_expressions_for_values", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::pop", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_align", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_bold", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_bold_italics", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_cell", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_font", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_indent", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_italics", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_list", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_meta", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_mono", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_normal", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_strikethrough", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_table", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::push_underline", "()"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::remove_line", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::scroll_to_line", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_bbcode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_effects", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_meta_underline", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_override_selected_font_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_percent_visible", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_scroll_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_scroll_follow", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_selection_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_tab_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_table_column_expand", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_use_bbcode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RichTextLabel::set_visible_characters", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::_body_enter_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::_body_exit_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::_direct_state_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::_integrate_forces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::_reload_physics_characteristics", "()"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::add_central_force", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::add_force", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::add_torque", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::apply_central_impulse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::apply_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::apply_torque_impulse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_angular_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_angular_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_axis_lock", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_bounce", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_colliding_bodies", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_friction", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_gravity_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_linear_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_linear_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_mass", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_max_contacts_reported", "()I"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_physics_material_override", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::get_weight", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::is_able_to_sleep", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::is_contact_monitor_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::is_sleeping", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::is_using_continuous_collision_detection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::is_using_custom_integrator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_angular_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_angular_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_axis_lock", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_axis_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_bounce", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_can_sleep", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_contact_monitor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_friction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_gravity_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_linear_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_linear_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_mass", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_max_contacts_reported", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_physics_material_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_sleeping", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_use_continuous_collision_detection", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_use_custom_integrator", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody::set_weight", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::_body_enter_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::_body_exit_tree", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::_direct_state_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::_integrate_forces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::_reload_physics_characteristics", "()"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::add_central_force", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::add_force", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::add_torque", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::apply_central_impulse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::apply_impulse", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::apply_torque_impulse", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_angular_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_angular_velocity", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_applied_force", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_applied_torque", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_bounce", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_colliding_bodies", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_continuous_collision_detection_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_friction", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_gravity_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_inertia", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_linear_damp", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_linear_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_mass", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_max_contacts_reported", "()I"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_physics_material_override", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::get_weight", "()f"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::is_able_to_sleep", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::is_contact_monitor_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::is_sleeping", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::is_using_custom_integrator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_angular_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_angular_velocity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_applied_force", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_applied_torque", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_axis_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_bounce", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_can_sleep", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_contact_monitor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_continuous_collision_detection_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_friction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_gravity_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_inertia", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_linear_damp", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_linear_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_mass", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_max_contacts_reported", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_physics_material_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_sleeping", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_use_custom_integrator", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::set_weight", "(f)"),
	EXPORT_WASM_API_WITH_SIG("RigidBody2D::test_motion", "(*~*~f*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_connection_binds", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_connection_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_connection_flags", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_connection_method", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_connection_signal", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_connection_source", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_connection_target", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_groups", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_index", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_instance", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_instance_placeholder", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_owner_path", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_path", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_property_count", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_property_name", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_property_value", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::get_node_type", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneState::is_node_instance_placeholder", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::_change_scene", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::_connected_to_server", "()"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::_connection_failed", "()"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::_network_peer_connected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::_network_peer_disconnected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::_server_disconnected", "()"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::call_group", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::call_group_flags", "(I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::change_scene", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::change_scene_to", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::create_timer", "(f*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_current_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_edited_scene_root", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_frame", "()I"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_multiplayer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_network_connected_peers", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_network_peer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_network_unique_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_node_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_nodes_in_group", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_root", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::get_rpc_sender_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::has_group", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::has_network_peer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_debugging_collisions_hint", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_debugging_navigation_hint", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_input_handled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_multiplayer_poll_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_network_server", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_paused", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_refusing_new_network_connections", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::is_using_font_oversampling", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::notify_group", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::notify_group_flags", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::queue_delete", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::quit", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::reload_current_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_auto_accept_quit", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_current_scene", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_debug_collisions_hint", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_debug_navigation_hint", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_edited_scene_root", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_group", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_group_flags", "(I*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_input_as_handled", "()"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_multiplayer", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_multiplayer_poll_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_network_peer", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_pause", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_quit_on_go_back", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_refuse_new_network_connections", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_screen_stretch", "(II*~f)"),
	EXPORT_WASM_API_WITH_SIG("SceneTree::set_use_font_oversampling", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SceneTreeTimer::get_time_left", "()f"),
	EXPORT_WASM_API_WITH_SIG("SceneTreeTimer::set_time_left", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Script::can_instance", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_base_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_instance_base_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_property_default_value", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_script_constant_map", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_script_method_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_script_property_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_script_signal_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::get_source_code", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::has_script_signal", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Script::has_source_code", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::instance_has", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Script::is_tool", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Script::reload", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Script::set_source_code", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_browse_class_in_tree", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_browse_path", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_built_in_pressed", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_class_name_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_create", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_file_selected", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_lang_changed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_parent_name_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_path_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_path_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_path_hbox_sorted", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::_template_changed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptCreateDialog::config", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_add_callback", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_autosave_scripts", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_breaked", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_clear_execution", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_close_all_tabs", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_close_current_tab", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_close_discard_current_tab", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_close_docs_tab", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_close_other_tabs", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_copy_script_path", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_editor_pause", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_editor_play", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_editor_settings_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_editor_stop", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_file_dialog_action", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_filter_methods_text_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_filter_scripts_text_changed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_get_debug_tooltip", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_goto_script_line", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_goto_script_line2", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_help_class_goto", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_help_class_open", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_help_overview_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_help_search", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_history_back", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_history_forward", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_live_auto_reload_running_scripts", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_members_overview_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_menu_option", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_on_find_in_files_modified_files", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_on_find_in_files_requested", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_on_find_in_files_result_selected", "(*~III)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_open_recent_script", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_reload_scripts", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_request_help", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_res_saved_callback", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_resave_scripts", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_save_history", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_script_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_script_created", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_script_list_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_script_selected", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_script_split_dragged", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_set_execution", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_show_debugger", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_start_find_in_files", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_tab_changed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_theme_option", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_toggle_members_overview_alpha_sort", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_tree_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_update_autosave_timer", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_update_members_overview", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_update_recent_scripts", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_update_script_connections", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::_update_script_names", "()"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::can_drop_data_fw", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::drop_data_fw", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::get_current_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::get_drag_data_fw", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::get_open_scripts", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::goto_line", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScriptEditor::open_script_create_dialog", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollBar::_drag_node_exit", "()"),
	EXPORT_WASM_API_WITH_SIG("ScrollBar::_drag_node_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollBar::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollBar::get_custom_step", "()f"),
	EXPORT_WASM_API_WITH_SIG("ScrollBar::set_custom_step", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::_ensure_focused_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::_scroll_moved", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::_update_scrollbar_position", "()"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::get_deadzone", "()I"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::get_h_scroll", "()I"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::get_h_scrollbar", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::get_v_scroll", "()I"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::get_v_scrollbar", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::is_following_focus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::is_h_scroll_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::is_v_scroll_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::set_deadzone", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::set_enable_h_scroll", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::set_enable_v_scroll", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::set_follow_focus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::set_h_scroll", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ScrollContainer::set_v_scroll", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SegmentShape2D::get_a", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SegmentShape2D::get_b", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SegmentShape2D::set_a", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SegmentShape2D::set_b", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Shader::get_code", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Shader::get_default_texture_param", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Shader::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Shader::has_param", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Shader::set_code", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Shader::set_default_texture_param", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("ShaderMaterial::_shader_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("ShaderMaterial::get_shader", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ShaderMaterial::get_shader_param", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ShaderMaterial::property_can_revert", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ShaderMaterial::property_get_revert", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ShaderMaterial::set_shader", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ShaderMaterial::set_shader_param", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Shape::get_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("Shape::set_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Shape2D::collide", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Shape2D::collide_and_get_contacts", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Shape2D::collide_with_motion", "(*~*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Shape2D::collide_with_motion_and_get_contacts", "(*~*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Shape2D::get_custom_solver_bias", "()f"),
	EXPORT_WASM_API_WITH_SIG("Shape2D::set_custom_solver_bias", "(f)"),
	EXPORT_WASM_API_WITH_SIG("ShortCut::get_as_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ShortCut::get_shortcut", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ShortCut::is_shortcut", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("ShortCut::is_valid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ShortCut::set_shortcut", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::add_bone", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::bind_child_node_to_bone", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::clear_bones", "()"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::find_bone", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bone_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bone_custom_pose", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bone_global_pose", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bone_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bone_parent", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bone_pose", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bone_rest", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::get_bound_child_nodes_to_bone", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::is_bone_rest_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::localize_rests", "()"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::physical_bones_add_collision_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::physical_bones_remove_collision_exception", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::physical_bones_start_simulation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::physical_bones_stop_simulation", "()"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::register_skin", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::set_bone_custom_pose", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::set_bone_disable_rest", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::set_bone_global_pose_override", "(I*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::set_bone_parent", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::set_bone_pose", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::set_bone_rest", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::unbind_child_node_from_bone", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton::unparent_bone_and_rest", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Skeleton2D::_update_bone_setup", "()"),
	EXPORT_WASM_API_WITH_SIG("Skeleton2D::_update_transform", "()"),
	EXPORT_WASM_API_WITH_SIG("Skeleton2D::get_bone", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skeleton2D::get_bone_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Skeleton2D::get_skeleton", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_interpolation", "()f"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_magnet_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_max_iterations", "()I"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_min_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_parent_skeleton", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_root_bone", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_target_node", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_target_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::get_tip_bone", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::is_override_tip_basis", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::is_running", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::is_using_magnet", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_interpolation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_magnet_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_max_iterations", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_min_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_override_tip_basis", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_root_bone", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_target_node", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_target_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_tip_bone", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::set_use_magnet", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::start", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SkeletonIK::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("Skin::add_bind", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Skin::clear_binds", "()"),
	EXPORT_WASM_API_WITH_SIG("Skin::get_bind_bone", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Skin::get_bind_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Skin::get_bind_pose", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Skin::set_bind_bone", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Skin::set_bind_count", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Skin::set_bind_pose", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("SkinReference::_skin_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("SkinReference::get_skeleton", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SkinReference::get_skin", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sky::get_radiance_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sky::set_radiance_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Slider::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Slider::get_ticks", "()I"),
	EXPORT_WASM_API_WITH_SIG("Slider::get_ticks_on_borders", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Slider::is_editable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Slider::is_scrollable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Slider::set_editable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Slider::set_scrollable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Slider::set_ticks", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Slider::set_ticks_on_borders", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SliderJoint::_get_lower_limit_angular", "()f"),
	EXPORT_WASM_API_WITH_SIG("SliderJoint::_get_upper_limit_angular", "()f"),
	EXPORT_WASM_API_WITH_SIG("SliderJoint::_set_lower_limit_angular", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SliderJoint::_set_upper_limit_angular", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SliderJoint::get_param", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("SliderJoint::set_param", "(If)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::_draw_soft_mesh", "()"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::add_collision_exception_with", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_areaAngular_stiffness", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_collision_exceptions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_damping_coefficient", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_drag_coefficient", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_linear_stiffness", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_parent_collision_ignore", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_pose_matching_coefficient", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_pressure_coefficient", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_simulation_precision", "()I"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_total_mass", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::get_volume_stiffness", "()f"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::is_ray_pickable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::remove_collision_exception_with", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_areaAngular_stiffness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_damping_coefficient", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_drag_coefficient", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_linear_stiffness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_parent_collision_ignore", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_pose_matching_coefficient", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_pressure_coefficient", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_ray_pickable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_simulation_precision", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_total_mass", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SoftBody::set_volume_stiffness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::_update_gizmo", "()"),
	EXPORT_WASM_API_WITH_SIG("Spatial::force_update_transform", "()"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_gizmo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_global_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_parent_spatial", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_rotation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_rotation_degrees", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_translation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::get_world", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::global_rotate", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::global_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::global_translate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::hide", "()"),
	EXPORT_WASM_API_WITH_SIG("Spatial::is_local_transform_notification_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::is_scale_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::is_set_as_toplevel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::is_transform_notification_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::is_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::is_visible_in_tree", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::look_at", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::look_at_from_position", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::orthonormalize", "()"),
	EXPORT_WASM_API_WITH_SIG("Spatial::rotate", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::rotate_object_local", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::rotate_x", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::rotate_y", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::rotate_z", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::scale_object_local", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_as_toplevel", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_disable_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_gizmo", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_global_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_identity", "()"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_ignore_transform_notification", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_notify_local_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_notify_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_rotation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_rotation_degrees", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_translation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::set_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::show", "()"),
	EXPORT_WASM_API_WITH_SIG("Spatial::to_global", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::to_local", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Spatial::translate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::translate_object_local", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Spatial::update_gizmo", "()"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_albedo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_alpha_scissor_threshold", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_anisotropy", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_ao_light_affect", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_ao_texture_channel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_billboard_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_blend_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_clearcoat", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_clearcoat_gloss", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_cull_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_depth_deep_parallax_flip_binormal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_depth_deep_parallax_flip_tangent", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_depth_deep_parallax_max_layers", "()I"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_depth_deep_parallax_min_layers", "()I"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_depth_draw_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_depth_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_detail_blend_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_detail_uv", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_diffuse_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_distance_fade", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_distance_fade_max_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_distance_fade_min_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_emission", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_emission_energy", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_emission_operator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_feature", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_flag", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_grow", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_line_width", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_metallic", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_metallic_texture_channel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_normal_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_particles_anim_h_frames", "()I"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_particles_anim_loop", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_particles_anim_v_frames", "()I"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_point_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_proximity_fade_distance", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_refraction", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_refraction_texture_channel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_rim", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_rim_tint", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_roughness", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_roughness_texture_channel", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_specular", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_specular_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_subsurface_scattering_strength", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_texture", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_transmission", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_uv1_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_uv1_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_uv1_triplanar_blend_sharpness", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_uv2_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_uv2_scale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::get_uv2_triplanar_blend_sharpness", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::is_depth_deep_parallax_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::is_grow_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::is_proximity_fade_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_albedo", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_alpha_scissor_threshold", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_anisotropy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_ao_light_affect", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_ao_texture_channel", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_billboard_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_blend_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_clearcoat", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_clearcoat_gloss", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_cull_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_depth_deep_parallax", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_depth_deep_parallax_flip_binormal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_depth_deep_parallax_flip_tangent", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_depth_deep_parallax_max_layers", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_depth_deep_parallax_min_layers", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_depth_draw_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_depth_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_detail_blend_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_detail_uv", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_diffuse_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_distance_fade", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_distance_fade_max_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_distance_fade_min_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_emission", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_emission_energy", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_emission_operator", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_feature", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_flag", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_grow", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_grow_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_line_width", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_metallic", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_metallic_texture_channel", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_normal_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_particles_anim_h_frames", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_particles_anim_loop", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_particles_anim_v_frames", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_point_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_proximity_fade", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_proximity_fade_distance", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_refraction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_refraction_texture_channel", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_rim", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_rim_tint", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_roughness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_roughness_texture_channel", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_specular", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_specular_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_subsurface_scattering_strength", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_texture", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_transmission", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_uv1_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_uv1_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_uv1_triplanar_blend_sharpness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_uv2_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_uv2_scale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialMaterial::set_uv2_triplanar_blend_sharpness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpatialVelocityTracker::get_tracked_linear_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialVelocityTracker::is_tracking_physics_step", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpatialVelocityTracker::reset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialVelocityTracker::set_track_physics_step", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpatialVelocityTracker::update_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::get_height", "()f"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::get_is_hemisphere", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::get_radial_segments", "()I"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::get_rings", "()I"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::set_height", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::set_is_hemisphere", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::set_radial_segments", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SphereMesh::set_rings", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SphereShape::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("SphereShape::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::_line_edit_focus_exit", "()"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::_line_edit_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::_range_click_timeout", "()"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::_text_entered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::apply", "()"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::get_align", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::get_line_edit", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::get_prefix", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::get_suffix", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::is_editable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::set_align", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::set_editable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::set_prefix", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpinBox::set_suffix", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::clamp_split_offset", "()"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::get_dragger_visibility", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::get_split_offset", "()I"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::is_collapsed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::set_collapsed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::set_dragger_visibility", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SplitContainer::set_split_offset", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::add_excluded_object", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::clear_excluded_objects", "()"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::get_hit_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::get_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::get_margin", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::get_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::remove_excluded_object", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::set_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::set_margin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpringArm::set_shape", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::_texture_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_frame", "()I"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_frame_coords", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_hframes", "()I"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_normal_map", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_region_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::get_vframes", "()I"),
	EXPORT_WASM_API_WITH_SIG("Sprite::is_centered", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::is_flipped_h", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::is_flipped_v", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::is_pixel_opaque", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::is_region", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::is_region_filter_clip_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_centered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_flip_h", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_flip_v", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_frame", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_frame_coords", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_hframes", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_normal_map", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_region", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_region_filter_clip", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_region_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite::set_vframes", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::get_frame", "()I"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::get_frame_coords", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::get_hframes", "()I"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::get_region_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::get_vframes", "()I"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::is_region", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::set_frame", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::set_frame_coords", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::set_hframes", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::set_region", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::set_region_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Sprite3D::set_vframes", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::_im_update", "()"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::_queue_update", "()"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::generate_triangle_mesh", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_alpha_cut_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_axis", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_billboard_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_draw_flag", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_item_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_modulate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_opacity", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::get_pixel_size", "()f"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::is_centered", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::is_flipped_h", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::is_flipped_v", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_alpha_cut_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_axis", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_billboard_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_centered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_draw_flag", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_flip_h", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_flip_v", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_modulate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_opacity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpriteBase3D::set_pixel_size", "(f)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::_get_animations", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::_get_frames", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::_set_animations", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::_set_frames", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::add_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::add_frame", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::clear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::clear_all", "()"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::get_animation_loop", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::get_animation_names", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::get_animation_speed", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::get_frame", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::get_frame_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::has_animation", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::remove_animation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::remove_frame", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::rename_animation", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::set_animation_loop", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::set_animation_speed", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("SpriteFrames::set_frame", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::_reload_physics_characteristics", "()"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::get_bounce", "()f"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::get_constant_angular_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::get_constant_linear_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::get_friction", "()f"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::get_physics_material_override", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::set_bounce", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::set_constant_angular_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::set_constant_linear_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::set_friction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody::set_physics_material_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::_reload_physics_characteristics", "()"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::get_bounce", "()f"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::get_constant_angular_velocity", "()f"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::get_constant_linear_velocity", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::get_friction", "()f"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::get_physics_material_override", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::set_bounce", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::set_constant_angular_velocity", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::set_constant_linear_velocity", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::set_friction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StaticBody2D::set_physics_material_override", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_16", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_32", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_64", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_8", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_available_bytes", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_data", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_double", "()f"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_float", "()f"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_partial_data", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_string", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_u16", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_u32", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_u64", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_u8", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_utf8_string", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::get_var", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::is_big_endian_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_16", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_32", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_64", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_8", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_data", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_double", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_float", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_partial_data", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_string", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_u16", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_u32", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_u64", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_u8", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_utf8_string", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::put_var", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeer::set_big_endian", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::duplicate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::get_data_array", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::get_position", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::get_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::resize", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::seek", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerBuffer::set_data_array", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerSSL::accept_stream", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerSSL::connect_to_stream", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerSSL::disconnect_from_stream", "()"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerSSL::get_status", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerSSL::is_blocking_handshake_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerSSL::poll", "()"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerSSL::set_blocking_handshake_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerTCP::connect_to_host", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerTCP::disconnect_from_host", "()"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerTCP::get_connected_host", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerTCP::get_connected_port", "()I"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerTCP::get_status", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerTCP::is_connected_to_host", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamPeerTCP::set_no_delay", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StreamTexture::get_load_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StreamTexture::load", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::draw", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::get_center_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::get_current_item_drawn", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::get_default_margin", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::get_margin", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::get_minimum_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::get_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::set_default_margin", "(If)"),
	EXPORT_WASM_API_WITH_SIG("StyleBox::test_mask", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_aa_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_bg_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_border_blend", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_border_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_border_width", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_border_width_min", "()I"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_corner_detail", "()I"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_corner_radius", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_expand_margin", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_shadow_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_shadow_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::get_shadow_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::is_anti_aliased", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::is_draw_center_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_aa_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_anti_aliased", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_bg_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_border_blend", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_border_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_border_width", "(II)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_border_width_all", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_corner_detail", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_corner_radius", "(II)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_corner_radius_all", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_corner_radius_individual", "(IIII)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_draw_center", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_expand_margin", "(If)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_expand_margin_all", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_expand_margin_individual", "(ffff)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_shadow_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_shadow_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxFlat::set_shadow_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::get_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::get_grow_begin", "()f"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::get_grow_end", "()f"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::get_thickness", "()I"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::is_vertical", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::set_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::set_grow_begin", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::set_grow_end", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::set_thickness", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxLine::set_vertical", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_expand_margin_size", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_h_axis_stretch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_margin_size", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_modulate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_normal_map", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_region_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::get_v_axis_stretch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::is_draw_center_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_draw_center", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_expand_margin_all", "(f)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_expand_margin_individual", "(ffff)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_expand_margin_size", "(If)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_h_axis_stretch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_margin_size", "(If)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_modulate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_normal_map", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_region_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("StyleBoxTexture::set_v_axis_stretch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_bones", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_index", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_normal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_smooth_group", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_tangent", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_triangle_fan", "(*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_uv", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_uv2", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_vertex", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::add_weights", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::append_from", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::begin", "(I)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::commit", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::commit_to_arrays", "()*~"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::create_from", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::create_from_blend_shape", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::deindex", "()"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::generate_normals", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::generate_tangents", "()"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::index", "()"),
	EXPORT_WASM_API_WITH_SIG("SurfaceTool::set_material", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TCP_Server::is_connection_available", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TCP_Server::is_listening", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TCP_Server::listen", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TCP_Server::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("TCP_Server::take_connection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::_child_renamed_callback", "()"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::_on_mouse_exited", "()"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::_on_theme_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::_update_current_tab", "()"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::are_tabs_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_current_tab", "()I"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_current_tab_control", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_drag_to_rearrange_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_popup", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_previous_tab", "()I"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_tab_align", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_tab_control", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_tab_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_tab_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_tab_icon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_tab_title", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_tabs_rearrange_group", "()I"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::get_use_hidden_tabs_for_min_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_current_tab", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_drag_to_rearrange_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_popup", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_tab_align", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_tab_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_tab_icon", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_tab_title", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_tabs_rearrange_group", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_tabs_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TabContainer::set_use_hidden_tabs_for_min_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::_on_mouse_exited", "()"),
	EXPORT_WASM_API_WITH_SIG("Tabs::_update_hover", "()"),
	EXPORT_WASM_API_WITH_SIG("Tabs::add_tab", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::ensure_tab_visible", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_current_tab", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_drag_to_rearrange_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_offset_buttons_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_scrolling_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_select_with_rmb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_align", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_close_display_policy", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_disabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_icon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_offset", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_rect", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tab_title", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Tabs::get_tabs_rearrange_group", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tabs::move_tab", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::remove_tab", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_current_tab", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_drag_to_rearrange_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_scrolling_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_select_with_rmb", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_tab_align", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_tab_close_display_policy", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_tab_disabled", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_tab_icon", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_tab_title", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Tabs::set_tabs_rearrange_group", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_click_selection_held", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_cursor_changed_emit", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_push_current_op", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_scroll_moved", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_text_changed_emit", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_toggle_draw_caret", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_update_wrap_at", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::_v_scroll_input", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::add_color_region", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::add_keyword_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::can_fold", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::center_viewport_to_cursor", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::clear_colors", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::clear_undo_history", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::copy", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_get_blink_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_get_blink_speed", "()f"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_get_column", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_get_line", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_is_block_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_set_blink_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_set_blink_speed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_set_block_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_set_column", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cursor_set_line", "(I*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::cut", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::deselect", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::draw_minimap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::fold_all_lines", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::fold_line", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_breakpoints", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_h_scroll", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_keyword_color", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_line", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_line_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_menu", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_minimap_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_selection_from_column", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_selection_from_line", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_selection_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_selection_to_column", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_selection_to_line", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_v_scroll", "()f"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_v_scroll_speed", "()f"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::get_word_under_cursor", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::has_keyword_color", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::insert_text_at_cursor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_breakpoint_gutter_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_context_menu_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_drawing_fold_gutter", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_drawing_minimap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_drawing_spaces", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_drawing_tabs", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_folded", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_hiding_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_highlight_all_occurrences_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_highlight_current_line_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_line_hidden", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_overriding_selected_font_color", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_readonly", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_right_click_moving_caret", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_selecting_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_selection_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_shortcut_keys_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_show_line_numbers_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_smooth_scroll_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_syntax_coloring_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::is_wrap_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::menu_option", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::paste", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::redo", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::remove_breakpoints", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::search", "(*~III)*~"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::select", "(IIII)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::select_all", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_breakpoint_gutter_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_context_menu_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_draw_fold_gutter", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_draw_spaces", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_draw_tabs", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_h_scroll", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_hiding_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_highlight_all_occurrences", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_highlight_current_line", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_line_as_hidden", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_minimap_width", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_override_selected_font_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_readonly", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_right_click_moves_caret", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_selecting_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_shortcut_keys_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_show_line_numbers", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_smooth_scroll_enable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_syntax_coloring", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_v_scroll", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_v_scroll_speed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::set_wrap_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::toggle_fold_line", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::undo", "()"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::unfold_line", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextEdit::unhide_all_lines", "()"),
	EXPORT_WASM_API_WITH_SIG("Texture::draw", "(*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Texture::draw_rect", "(*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Texture::draw_rect_region", "(*~*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Texture::get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Texture::get_flags", "()I"),
	EXPORT_WASM_API_WITH_SIG("Texture::get_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("Texture::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Texture::get_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("Texture::has_alpha", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Texture::set_flags", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_click_mask", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_disabled_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_expand", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_focused_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_hover_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_normal_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_pressed_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::get_stretch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_click_mask", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_disabled_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_expand", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_focused_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_hover_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_normal_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_pressed_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureButton::set_stretch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::create", "(IIIII)"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::get_depth", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::get_flags", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::get_format", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::get_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::get_layer_data", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::get_width", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::set_data_partial", "(*~IIII)"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::set_flags", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextureLayered::set_layer_data", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_fill_degrees", "()f"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_fill_mode", "()I"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_nine_patch_stretch", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_over_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_progress_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_radial_center_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_radial_initial_angle", "()f"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_stretch_margin", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_tint_over", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_tint_progress", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_tint_under", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::get_under_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_fill_degrees", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_fill_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_nine_patch_stretch", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_over_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_progress_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_radial_center_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_radial_initial_angle", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_stretch_margin", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_tint_over", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_tint_progress", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_tint_under", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureProgress::set_under_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::_texture_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::get_stretch_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::has_expand", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::is_flipped_h", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::is_flipped_v", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::set_expand", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::set_flip_h", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::set_flip_v", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::set_stretch_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TextureRect::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::_emit_theme_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Theme::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("Theme::clear_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::clear_constant", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::clear_font", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::clear_icon", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::clear_stylebox", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::copy_default_theme", "()"),
	EXPORT_WASM_API_WITH_SIG("Theme::copy_theme", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_color", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_color_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_constant", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_constant_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_default_font", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_font", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_font_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_icon", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_icon_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_stylebox", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_stylebox_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_stylebox_types", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::get_type_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::has_color", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::has_constant", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::has_font", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::has_icon", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::has_stylebox", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Theme::set_color", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::set_constant", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("Theme::set_default_font", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::set_font", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::set_icon", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Theme::set_stylebox", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::_clear_quadrants", "()"),
	EXPORT_WASM_API_WITH_SIG("TileMap::_get_old_cell_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("TileMap::_get_tile_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::_recreate_quadrants", "()"),
	EXPORT_WASM_API_WITH_SIG("TileMap::_set_celld", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::_set_old_cell_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::_set_tile_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("TileMap::fix_invalid_tiles", "()"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_cell", "(II)I"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_cell_autotile_coord", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_cell_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_cellv", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_clip_uv", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_bounce", "()f"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_friction", "()f"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_layer", "()I"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_layer_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_use_kinematic", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_collision_use_parent", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_custom_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_half_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_occluder_light_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_quadrant_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_tile_origin", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_tileset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_used_cells", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_used_cells_by_id", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::get_used_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::is_cell_transposed", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::is_cell_x_flipped", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::is_cell_y_flipped", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::is_centered_textures_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::is_compatibility_mode_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::is_y_sort_mode_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::map_to_world", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_cell", "(III*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_cell_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_cellv", "(*~I*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_centered_textures", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_clip_uv", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_bounce", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_friction", "(f)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_layer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_layer_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_use_kinematic", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_collision_use_parent", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_compatibility_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_custom_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_half_offset", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_occluder_light_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_quadrant_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_tile_origin", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_tileset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::set_y_sort_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::update_bitmask_area", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::update_bitmask_region", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileMap::update_dirty_quadrants", "()"),
	EXPORT_WASM_API_WITH_SIG("TileMap::world_to_map", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::_forward_atlas_subtile_selection", "(I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::_forward_subtile_selection", "(II*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::_is_tile_bound", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_clear_bitmask_map", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_bitmask", "(I*~)I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_bitmask_mode", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_icon_coordinate", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_light_occluder", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_navigation_polygon", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_size", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_spacing", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_subtile_priority", "(I*~)I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_get_z_index", "(I*~)I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_bitmask", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_bitmask_mode", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_icon_coordinate", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_light_occluder", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_navigation_polygon", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_size", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_spacing", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_subtile_priority", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::autotile_set_z_index", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("TileSet::create_tile", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::find_tile_by_name", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::get_last_unused_tile_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::get_tiles_ids", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::remove_tile", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_add_shape", "(I*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_light_occluder", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_material", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_modulate", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_navigation_polygon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_navigation_polygon_offset", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_normal_map", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_occluder_offset", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_region", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_shape", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_shape_count", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_shape_offset", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_shape_one_way", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_shape_one_way_margin", "(II)f"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_shape_transform", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_shapes", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_texture", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_texture_offset", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_tile_mode", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_get_z_index", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_light_occluder", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_material", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_modulate", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_navigation_polygon", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_navigation_polygon_offset", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_normal_map", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_occluder_offset", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_region", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_shape", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_shape_offset", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_shape_one_way", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_shape_one_way_margin", "(IIf)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_shape_transform", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_shapes", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_texture", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_texture_offset", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_tile_mode", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TileSet::tile_set_z_index", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Timer::get_time_left", "()f"),
	EXPORT_WASM_API_WITH_SIG("Timer::get_timer_process_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Timer::get_wait_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("Timer::has_autostart", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Timer::is_one_shot", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Timer::is_paused", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Timer::is_stopped", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Timer::set_autostart", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Timer::set_one_shot", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Timer::set_paused", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Timer::set_timer_process_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Timer::set_wait_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Timer::start", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Timer::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::get_action", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::get_bitmask", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::get_shape", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::get_texture_pressed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::get_visibility_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::is_passby_press_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::is_pressed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::is_shape_centered", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::is_shape_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_action", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_bitmask", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_passby_press", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_shape", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_shape_centered", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_shape_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_texture_pressed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TouchScreenButton::set_visibility_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Translation::_get_messages", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Translation::_set_messages", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Translation::add_message", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Translation::erase_message", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Translation::get_locale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Translation::get_message", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Translation::get_message_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("Translation::get_message_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Translation::set_locale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::add_translation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::get_loaded_locales", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::get_locale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::get_locale_name", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::remove_translation", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::set_locale", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TranslationServer::translate", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::_popup_select", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tree::_range_click_timeout", "()"),
	EXPORT_WASM_API_WITH_SIG("Tree::_scroll_moved", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Tree::_text_editor_enter", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::_text_editor_modal_close", "()"),
	EXPORT_WASM_API_WITH_SIG("Tree::_value_editor_changed", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Tree::are_column_titles_visible", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::clear", "()"),
	EXPORT_WASM_API_WITH_SIG("Tree::create_item", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::ensure_cursor_is_visible", "()"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_allow_reselect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_allow_rmb_select", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_column_at_position", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_column_title", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_column_width", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_columns", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_custom_popup_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_drop_mode_flags", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_drop_section_at_position", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_edited", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_edited_column", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_item_area_rect", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_item_at_position", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_next_selected", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_pressed_button", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_root", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_scroll", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_select_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_selected", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::get_selected_column", "()I"),
	EXPORT_WASM_API_WITH_SIG("Tree::is_folding_hidden", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::is_root_hidden", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_allow_reselect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_allow_rmb_select", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_column_expand", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_column_min_width", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_column_title", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_column_titles_visible", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_columns", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_drop_mode_flags", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_hide_folding", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_hide_root", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tree::set_select_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::add_button", "(I*~I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::call_recursive", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::clear_custom_bg_color", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::clear_custom_color", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::deselect", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::erase_button", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_button", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_button_count", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_button_tooltip", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_cell_mode", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_children", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_custom_bg_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_custom_color", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_custom_minimum_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_expand_right", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_icon", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_icon_max_width", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_icon_modulate", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_icon_region", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_metadata", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_next", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_next_visible", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_parent", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_prev", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_prev_visible", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_range", "(I)f"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_range_config", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_text", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_text_align", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::get_tooltip", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_button_disabled", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_checked", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_collapsed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_custom_set_as_button", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_editable", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_folding_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_selectable", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::is_selected", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::move_to_bottom", "()"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::move_to_top", "()"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::remove_child", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::select", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_button", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_button_disabled", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_cell_mode", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_checked", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_collapsed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_custom_as_button", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_custom_bg_color", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_custom_color", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_custom_draw", "(I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_custom_minimum_height", "(I)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_disable_folding", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_editable", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_expand_right", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_icon", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_icon_max_width", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_icon_modulate", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_icon_region", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_metadata", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_range", "(If)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_range_config", "(Ifff*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_selectable", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_text", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_text_align", "(II)"),
	EXPORT_WASM_API_WITH_SIG("TreeItem::set_tooltip", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("Tween::_remove_by_uid", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tween::follow_method", "(*~*~*~*~*~fIIf)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::follow_property", "(*~*~*~*~*~fIIf)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::get_runtime", "()f"),
	EXPORT_WASM_API_WITH_SIG("Tween::get_speed_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("Tween::get_tween_process_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::interpolate_callback", "(*~f*~*~*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::interpolate_deferred_callback", "(*~f*~*~*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::interpolate_method", "(*~*~*~*~fIIf)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::interpolate_property", "(*~*~*~*~fIIf)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::is_repeat", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::remove", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::remove_all", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::reset", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::reset_all", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::resume", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::resume_all", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::seek", "(f)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::set_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tween::set_repeat", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Tween::set_speed_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("Tween::set_tween_process_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Tween::start", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::stop", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::stop_all", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::targeting_method", "(*~*~*~*~*~fIIf)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::targeting_property", "(*~*~*~*~*~fIIf)*~"),
	EXPORT_WASM_API_WITH_SIG("Tween::tell", "()f"),
	EXPORT_WASM_API_WITH_SIG("UPNP::add_device", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNP::add_port_mapping", "(II*~*~I)I"),
	EXPORT_WASM_API_WITH_SIG("UPNP::clear_devices", "()"),
	EXPORT_WASM_API_WITH_SIG("UPNP::delete_port_mapping", "(I*~)I"),
	EXPORT_WASM_API_WITH_SIG("UPNP::discover", "(II*~)I"),
	EXPORT_WASM_API_WITH_SIG("UPNP::get_device", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("UPNP::get_device_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("UPNP::get_discover_local_port", "()I"),
	EXPORT_WASM_API_WITH_SIG("UPNP::get_discover_multicast_if", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNP::get_gateway", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNP::is_discover_ipv6", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNP::query_external_address", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNP::remove_device", "(I)"),
	EXPORT_WASM_API_WITH_SIG("UPNP::set_device", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNP::set_discover_ipv6", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNP::set_discover_local_port", "(I)"),
	EXPORT_WASM_API_WITH_SIG("UPNP::set_discover_multicast_if", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::add_port_mapping", "(II*~*~I)I"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::delete_port_mapping", "(I*~)I"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::get_description_url", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::get_igd_control_url", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::get_igd_our_addr", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::get_igd_service_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::get_igd_status", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::get_service_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::is_valid_gateway", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::query_external_address", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::set_description_url", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::set_igd_control_url", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::set_igd_our_addr", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::set_igd_service_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::set_igd_status", "(I)"),
	EXPORT_WASM_API_WITH_SIG("UPNPDevice::set_service_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::add_do_method", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::add_do_property", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::add_do_reference", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::add_undo_method", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::add_undo_property", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::add_undo_reference", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::clear_history", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::commit_action", "()"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::create_action", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::get_current_action_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::get_version", "()I"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::has_redo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::has_undo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::is_commiting_action", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::redo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("UndoRedo::undo", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VehicleBody::get_brake", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleBody::get_engine_force", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleBody::get_steering", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleBody::set_brake", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleBody::set_engine_force", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleBody::set_steering", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_brake", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_damping_compression", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_damping_relaxation", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_engine_force", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_friction_slip", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_radius", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_roll_influence", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_rpm", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_skidinfo", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_steering", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_suspension_max_force", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_suspension_rest_length", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_suspension_stiffness", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::get_suspension_travel", "()f"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::is_in_contact", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::is_used_as_steering", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::is_used_as_traction", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_brake", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_damping_compression", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_damping_relaxation", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_engine_force", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_friction_slip", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_radius", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_roll_influence", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_steering", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_suspension_max_force", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_suspension_rest_length", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_suspension_stiffness", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_suspension_travel", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_use_as_steering", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VehicleWheel::set_use_as_traction", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_audio_track", "()I"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_buffering_msec", "()I"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_bus", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_stream", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_stream_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_stream_position", "()f"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_video_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_volume", "()f"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::get_volume_db", "()f"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::has_autoplay", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::has_expand", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::is_paused", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::play", "()"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_audio_track", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_autoplay", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_buffering_msec", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_bus", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_expand", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_paused", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_stream", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_stream_position", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_volume", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::set_volume_db", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VideoPlayer::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("VideoStreamGDNative::get_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoStreamGDNative::set_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoStreamTheora::get_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoStreamTheora::set_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VideoStreamWebm::get_file", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VideoStreamWebm::set_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_gui_remove_focus", "()"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_gui_show_tooltip", "()"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_own_world_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_post_gui_grab_click_focus", "()"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_subwindow_visibility_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_vp_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_vp_input_text", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::_vp_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::find_world", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::find_world_2d", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_camera", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_canvas_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_clear_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_debug_draw", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_final_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_global_canvas_transform", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_hdr", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_keep_3d_linear", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_modal_stack_top", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_mouse_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_msaa", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_physics_object_picking", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_render_info", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_shadow_atlas_quadrant_subdiv", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_shadow_atlas_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_size_override", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_update_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_usage", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_vflip", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_viewport_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_visible_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_world", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::get_world_2d", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::gui_get_drag_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::gui_has_modal_stack", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::gui_is_dragging", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::has_transparent_background", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_3d_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_audio_listener", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_audio_listener_2d", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_handling_input_locally", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_input_disabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_input_handled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_size_override_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_size_override_stretch_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_snap_controls_to_pixels_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_using_own_world", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::is_using_render_direct_to_screen", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_as_audio_listener", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_as_audio_listener_2d", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_attach_to_screen_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_canvas_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_clear_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_debug_draw", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_disable_3d", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_disable_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_global_canvas_transform", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_handle_input_locally", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_hdr", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_input_as_handled", "()"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_keep_3d_linear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_msaa", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_physics_object_picking", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_shadow_atlas_quadrant_subdiv", "(II)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_shadow_atlas_size", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_size_override", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_size_override_stretch", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_snap_controls_to_pixels", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_transparent_background", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_update_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_usage", "(I)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_use_arvr", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_use_own_world", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_use_render_direct_to_screen", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_vflip", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_world", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::set_world_2d", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("Viewport::update_worlds", "()"),
	EXPORT_WASM_API_WITH_SIG("Viewport::use_arvr", "()*~"),
	EXPORT_WASM_API_WITH_SIG("Viewport::warp_mouse", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ViewportContainer::_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ViewportContainer::_unhandled_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ViewportContainer::get_stretch_shrink", "()I"),
	EXPORT_WASM_API_WITH_SIG("ViewportContainer::is_stretch_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ViewportContainer::set_stretch", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("ViewportContainer::set_stretch_shrink", "(I)"),
	EXPORT_WASM_API_WITH_SIG("ViewportTexture::get_viewport_path_in_scene", "()*~"),
	EXPORT_WASM_API_WITH_SIG("ViewportTexture::set_viewport_path_in_scene", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisibilityEnabler::_node_removed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisibilityEnabler::is_enabler_enabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisibilityEnabler::set_enabler", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisibilityEnabler2D::_node_removed", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisibilityEnabler2D::is_enabler_enabled", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisibilityEnabler2D::set_enabler", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisibilityNotifier::get_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisibilityNotifier::is_on_screen", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisibilityNotifier::set_aabb", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisibilityNotifier2D::get_rect", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisibilityNotifier2D::is_on_screen", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisibilityNotifier2D::set_rect", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::_get_visual_instance_rid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::get_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::get_base", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::get_instance", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::get_layer_mask", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::get_layer_mask_bit", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::get_transformed_aabb", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::set_base", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::set_layer_mask", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualInstance::set_layer_mask_bit", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::_get_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::_node_ports_changed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::add_custom_signal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::add_function", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::add_node", "(*~I*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::add_variable", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_add_argument", "(*~I*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_get_argument_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_get_argument_name", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_get_argument_type", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_remove_argument", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_set_argument_name", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_set_argument_type", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::custom_signal_swap_argument", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::data_connect", "(*~IIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::data_disconnect", "(*~IIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::get_function_node_id", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::get_function_scroll", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::get_node", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::get_node_position", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::get_variable_default_value", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::get_variable_export", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::get_variable_info", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::has_custom_signal", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::has_data_connection", "(*~IIII)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::has_function", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::has_node", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::has_sequence_connection", "(*~III)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::has_variable", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::remove_custom_signal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::remove_function", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::remove_node", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::remove_variable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::rename_custom_signal", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::rename_function", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::rename_variable", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::sequence_connect", "(*~III)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::sequence_disconnect", "(*~III)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::set_function_scroll", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::set_instance_base_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::set_node_position", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::set_variable_default_value", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::set_variable_export", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScript::set_variable_info", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptBasicTypeConstant::get_basic_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptBasicTypeConstant::get_basic_type_constant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptBasicTypeConstant::set_basic_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptBasicTypeConstant::set_basic_type_constant", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptBuiltinFunc::get_func", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptBuiltinFunc::set_func", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptClassConstant::get_base_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptClassConstant::get_class_constant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptClassConstant::set_base_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptClassConstant::set_class_constant", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptComment::get_description", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptComment::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptComment::get_title", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptComment::set_description", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptComment::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptComment::set_title", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstant::get_constant_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstant::get_constant_value", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstant::set_constant_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstant::set_constant_value", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstructor::get_constructor", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstructor::get_constructor_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstructor::set_constructor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptConstructor::set_constructor_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_caption", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_category", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_input_value_port_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_input_value_port_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_input_value_port_type", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_output_sequence_port_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_output_sequence_port_text", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_output_value_port_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_output_value_port_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_output_value_port_type", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_get_working_memory_size", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_has_input_sequence_port", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_script_changed", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptCustomNode::_step", "(*~*~I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptDeconstruct::_get_elem_cache", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptDeconstruct::_set_elem_cache", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptDeconstruct::get_deconstruct_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptDeconstruct::set_deconstruct_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptEmitSignal::get_signal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptEmitSignal::set_signal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptEngineSingleton::get_singleton", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptEngineSingleton::set_singleton", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::_get_argument_cache", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::_set_argument_cache", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_base_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_base_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_base_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_basic_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_call_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_rpc_call_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_singleton", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_use_default_args", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::get_validate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_base_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_base_script", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_base_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_basic_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_call_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_function", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_rpc_call_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_singleton", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_use_default_args", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionCall::set_validate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionState::_signal_callback", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionState::connect_to_signal", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionState::is_valid", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptFunctionState::resume", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptGlobalConstant::get_global_constant", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptGlobalConstant::set_global_constant", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptInputAction::get_action_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptInputAction::get_action_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptInputAction::set_action_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptInputAction::set_action_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::add_input_data_port", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::add_output_data_port", "(I*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::remove_input_data_port", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::remove_output_data_port", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::set_input_data_port_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::set_input_data_port_type", "(II)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::set_output_data_port_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLists::set_output_data_port_type", "(II)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVar::get_var_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVar::get_var_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVar::set_var_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVar::set_var_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVarSet::get_var_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVarSet::get_var_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVarSet::set_var_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptLocalVarSet::set_var_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptMathConstant::get_math_constant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptMathConstant::set_math_constant", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptNode::_get_default_input_values", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptNode::_set_default_input_values", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptNode::get_default_input_value", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptNode::get_visual_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptNode::ports_changed_notify", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptNode::set_default_input_value", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptOperator::get_operator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptOperator::get_typed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptOperator::set_operator", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptOperator::set_typed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPreload::get_preload", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPreload::set_preload", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::_get_type_cache", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::_set_type_cache", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::get_base_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::get_base_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::get_base_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::get_basic_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::get_call_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::get_index", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::get_property", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::set_base_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::set_base_script", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::set_base_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::set_basic_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::set_call_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::set_index", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertyGet::set_property", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::_get_type_cache", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::_set_type_cache", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_assign_op", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_base_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_base_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_base_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_basic_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_call_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_index", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::get_property", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_assign_op", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_base_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_base_script", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_base_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_basic_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_call_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_index", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptPropertySet::set_property", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptResourcePath::get_resource_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptResourcePath::set_resource_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptReturn::get_return_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptReturn::is_return_value_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptReturn::set_enable_return_value", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptReturn::set_return_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptSceneNode::get_node_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptSceneNode::set_node_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptSelect::get_typed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptSelect::set_typed", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptSequence::get_steps", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptSequence::set_steps", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptSubCall::_subcall", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptTypeCast::get_base_script", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptTypeCast::get_base_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptTypeCast::set_base_script", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptTypeCast::set_base_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptVariableGet::get_variable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptVariableGet::set_variable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptVariableSet::get_variable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptVariableSet::set_variable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYield::get_wait_time", "()f"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYield::get_yield_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYield::set_wait_time", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYield::set_yield_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::get_base_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::get_base_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::get_call_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::get_signal", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::set_base_path", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::set_base_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::set_call_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualScriptYieldSignal::set_signal", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::black_bars_set_images", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::black_bars_set_margins", "(IIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_set_cull_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_set_environment", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_set_frustum", "(*~f*~ff)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_set_orthogonal", "(*~fff)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_set_perspective", "(*~fff)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::camera_set_use_vertical_aspect", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_circle", "(*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_clip_ignore", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_line", "(*~*~*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_mesh", "(*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_multimesh", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_nine_patch", "(*~*~*~*~*~*~II*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_particles", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_polygon", "(*~*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_polyline", "(*~*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_primitive", "(*~*~*~*~*~f*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_rect", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_texture_rect", "(*~*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_texture_rect_region", "(*~*~*~*~*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_add_triangle_array", "(*~*~*~*~*~*~*~*~I*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_clear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_clip", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_copy_to_backbuffer", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_custom_rect", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_distance_field_mode", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_draw_behind_parent", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_draw_index", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_light_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_material", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_modulate", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_parent", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_self_modulate", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_sort_children_by_y", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_use_parent_material", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_visible", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_z_as_relative_to_parent", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_item_set_z_index", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_attach_to_canvas", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_occluder_attach_to_canvas", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_occluder_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_occluder_set_enabled", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_occluder_set_light_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_occluder_set_polygon", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_occluder_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_enabled", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_energy", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_height", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_item_cull_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_item_shadow_cull_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_layer_range", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_scale", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_shadow_buffer_size", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_shadow_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_shadow_enabled", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_shadow_filter", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_shadow_gradient_length", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_shadow_smooth", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_texture", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_texture_offset", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_light_set_z_range", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_occluder_polygon_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_occluder_polygon_set_cull_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_occluder_polygon_set_shape", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_occluder_polygon_set_shape_as_lines", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_set_item_mirroring", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::canvas_set_modulate", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::directional_light_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::draw", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_adjustment", "(*~*~fff*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_ambient_light", "(*~*~ff)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_background", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_bg_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_bg_energy", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_canvas_max_layer", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_dof_blur_far", "(*~*~fffI)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_dof_blur_near", "(*~*~fffI)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_fog", "(*~*~*~*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_fog_depth", "(*~*~fff*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_fog_height", "(*~*~fff)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_glow", "(*~*~IfffIfff*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_sky", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_sky_custom_fov", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_sky_orientation", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_ssao", "(*~*~fffffff*~IIf)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_ssr", "(*~*~Ifff*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::environment_set_tonemap", "(*~Iff*~ffff)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::finish", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::force_draw", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::force_sync", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::free_rid", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::get_render_info", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::get_test_cube", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::get_test_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::get_video_adapter_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::get_video_adapter_vendor", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::get_white_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_bias", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_bounds", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_cell_size", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_dynamic_data", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_dynamic_range", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_energy", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_normal_bias", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_propagation", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_get_to_cell_xform", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_is_compressed", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_is_interior", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_bias", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_bounds", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_cell_size", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_compress", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_dynamic_data", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_dynamic_range", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_energy", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_interior", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_normal_bias", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_propagation", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::gi_probe_set_to_cell_xform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::has_changed", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::has_feature", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::has_os_feature", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_begin", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_clear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_end", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_get_material", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_normal", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_set_material", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_tangent", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_uv", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_uv2", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_vertex", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::immediate_vertex_2d", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::init", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_attach_object_instance_id", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_attach_skeleton", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_create2", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_geometry_set_as_instance_lod", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_geometry_set_cast_shadows_setting", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_geometry_set_draw_range", "(*~ffff)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_geometry_set_flag", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_geometry_set_material_override", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_base", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_blend_shape_weight", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_custom_aabb", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_exterior", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_extra_visibility_margin", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_layer_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_scenario", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_surface_material", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_use_lightmap", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instance_set_visible", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instances_cull_aabb", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instances_cull_convex", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::instances_cull_ray", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_directional_set_blend_splits", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_directional_set_shadow_depth_range_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_directional_set_shadow_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_omni_set_shadow_detail", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_omni_set_shadow_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_cull_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_negative", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_param", "(*~If)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_projector", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_reverse_cull_face_mode", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_shadow", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_shadow_color", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::light_set_use_gi", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_get_bounds", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_get_energy", "(*~)f"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_get_octree", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_get_octree_cell_subdiv", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_get_octree_cell_transform", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_set_bounds", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_set_energy", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_set_octree", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_set_octree_cell_subdiv", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::lightmap_capture_set_octree_cell_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::make_sphere_mesh", "(IIf)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_get_param", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_get_param_default", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_get_shader", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_set_line_width", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_set_next_pass", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_set_param", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_set_render_priority", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::material_set_shader", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_add_surface_from_arrays", "(*~I*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_clear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_get_blend_shape_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_get_blend_shape_mode", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_get_custom_aabb", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_get_surface_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_remove_surface", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_set_blend_shape_count", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_set_blend_shape_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_set_custom_aabb", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_aabb", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_array", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_array_index_len", "(*~I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_array_len", "(*~I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_arrays", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_blend_shape_arrays", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_format", "(*~I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_format_offset", "(IIII)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_format_stride", "(III)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_index_array", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_material", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_primitive_type", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_get_skeleton_aabb", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_set_material", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::mesh_surface_update_region", "(*~II*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_allocate", "(*~IIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_get_aabb", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_get_instance_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_get_mesh", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_get_visible_instances", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_get_color", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_get_custom_data", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_get_transform", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_get_transform_2d", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_set_color", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_set_custom_data", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_set_transform", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_instance_set_transform_2d", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_set_as_bulk_array", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_set_mesh", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::multimesh_set_visible_instances", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::omni_light_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_get_current_aabb", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_get_emitting", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_is_inactive", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_request_process", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_restart", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_amount", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_custom_aabb", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_draw_order", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_draw_pass_mesh", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_draw_passes", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_emission_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_emitting", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_explosiveness_ratio", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_fixed_fps", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_fractional_delta", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_lifetime", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_one_shot", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_pre_process_time", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_process_material", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_randomness_ratio", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_speed_scale", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::particles_set_use_local_coordinates", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_as_interior", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_cull_mask", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_enable_box_projection", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_enable_shadows", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_extents", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_intensity", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_interior_ambient", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_interior_ambient_energy", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_interior_ambient_probe_contribution", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_max_distance", "(*~f)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_origin_offset", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::reflection_probe_set_update_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::request_frame_drawn_callback", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::scenario_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::scenario_set_debug", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::scenario_set_environment", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::scenario_set_fallback_environment", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::scenario_set_reflection_atlas_size", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::set_boot_image", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::set_debug_generate_wireframes", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::set_default_clear_color", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::shader_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::shader_get_code", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::shader_get_default_texture_param", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::shader_get_param_list", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::shader_set_code", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::shader_set_default_texture_param", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::skeleton_allocate", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::skeleton_bone_get_transform", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::skeleton_bone_get_transform_2d", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::skeleton_bone_set_transform", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::skeleton_bone_set_transform_2d", "(*~I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::skeleton_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::skeleton_get_bone_count", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::sky_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::sky_set_texture", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::spot_light_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::sync", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_allocate", "(*~IIIIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_bind", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_create_from_image", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_debug_usage", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_data", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_depth", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_flags", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_format", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_height", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_path", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_texid", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_get_width", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_set_data", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_set_data_partial", "(*~*~IIIIIIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_set_flags", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_set_path", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_set_shrink_all_x2_on_set_data", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::texture_set_size_override", "(*~III)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::textures_keep_original", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_attach_camera", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_attach_canvas", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_attach_to_screen", "(*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_create", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_detach", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_get_render_info", "(*~I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_get_texture", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_remove_canvas", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_active", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_canvas_stacking", "(*~*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_canvas_transform", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_clear_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_debug_draw", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_disable_3d", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_disable_environment", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_global_canvas_transform", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_hdr", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_hide_canvas", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_hide_scenario", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_msaa", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_parent_viewport", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_render_direct_to_screen", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_scenario", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_shadow_atlas_quadrant_subdivision", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_shadow_atlas_size", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_size", "(*~II)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_transparent_background", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_update_mode", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_usage", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_use_arvr", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualServer::viewport_set_vflip", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::_input_type_changed", "(II)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::_queue_update", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::_update_shader", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::add_node", "(I*~*~I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::can_connect_nodes", "(IIIII)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::connect_nodes", "(IIIII)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::connect_nodes_forced", "(IIIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::disconnect_nodes", "(IIIII)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::get_graph_offset", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::get_node", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::get_node_connections", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::get_node_list", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::get_node_position", "(II)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::get_valid_node_id", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::is_node_connection", "(IIIII)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::remove_node", "(II)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::set_graph_offset", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::set_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShader::set_node_position", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNode::get_default_input_values", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNode::get_input_port_default_value", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNode::get_output_port_for_preview", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNode::set_default_input_values", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNode::set_input_port_default_value", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNode::set_output_port_for_preview", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeBooleanConstant::get_constant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeBooleanConstant::set_constant", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeColorConstant::get_constant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeColorConstant::set_constant", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeColorFunc::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeColorFunc::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeColorOp::get_operator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeColorOp::set_operator", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCompare::get_comparison_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCompare::get_condition", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCompare::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCompare::set_comparison_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCompare::set_condition", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCompare::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCubeMap::get_cube_map", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCubeMap::get_source", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCubeMap::get_texture_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCubeMap::set_cube_map", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCubeMap::set_source", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCubeMap::set_texture_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_category", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_code", "(*~*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_description", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_global_code", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_input_port_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_input_port_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_input_port_type", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_output_port_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_output_port_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_output_port_type", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_return_icon_type", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeCustom::_get_subcategory", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeExpression::get_expression", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeExpression::set_expression", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::add_input_port", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::add_output_port", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::clear_input_ports", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::clear_output_ports", "()"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::get_free_input_port_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::get_free_output_port_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::get_input_port_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::get_inputs", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::get_output_port_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::get_outputs", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::get_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::has_input_port", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::has_output_port", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::is_valid_port_name", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::remove_input_port", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::remove_output_port", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::set_input_port_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::set_input_port_type", "(II)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::set_inputs", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::set_output_port_name", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::set_output_port_type", "(II)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::set_outputs", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeGroupBase::set_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeInput::get_input_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeInput::get_input_real_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeInput::set_input_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeIs::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeIs::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarConstant::get_constant", "()f"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarConstant::set_constant", "(f)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarDerivativeFunc::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarDerivativeFunc::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarFunc::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarFunc::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarOp::get_operator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeScalarOp::set_operator", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTexture::get_source", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTexture::get_texture", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTexture::get_texture_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTexture::set_source", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTexture::set_texture", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTexture::set_texture_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTextureUniform::get_color_default", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTextureUniform::get_texture_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTextureUniform::set_color_default", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTextureUniform::set_texture_type", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformConstant::get_constant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformConstant::set_constant", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformFunc::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformFunc::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformMult::get_operator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformMult::set_operator", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformVecMult::get_operator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeTransformVecMult::set_operator", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeUniform::get_uniform_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeUniform::set_uniform_name", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVec3Constant::get_constant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVec3Constant::set_constant", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVectorDerivativeFunc::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVectorDerivativeFunc::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVectorFunc::get_function", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVectorFunc::set_function", "(I)"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVectorOp::get_operator", "()*~"),
	EXPORT_WASM_API_WITH_SIG("VisualShaderNodeVectorOp::set_operator", "(I)"),
	EXPORT_WASM_API_WITH_SIG("WeakRef::get_ref", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::close", "()"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::get_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::get_label", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::get_max_packet_life_time", "()I"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::get_max_retransmits", "()I"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::get_protocol", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::get_ready_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::get_write_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::is_negotiated", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::is_ordered", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::poll", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::set_write_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("WebRTCDataChannel::was_string_packet", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCMultiplayer::add_peer", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCMultiplayer::close", "()"),
	EXPORT_WASM_API_WITH_SIG("WebRTCMultiplayer::get_peer", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCMultiplayer::get_peers", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCMultiplayer::has_peer", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCMultiplayer::initialize", "(I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCMultiplayer::remove_peer", "(I)"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::add_ice_candidate", "(*~I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::close", "()"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::create_data_channel", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::create_offer", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::get_connection_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::initialize", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::poll", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::set_local_description", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebRTCPeerConnection::set_remote_description", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::connect_to_url", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::disconnect_from_host", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::get_connected_host", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::get_connected_port", "()I"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::get_trusted_ssl_certificate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::is_verify_ssl_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::set_trusted_ssl_certificate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketClient::set_verify_ssl_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketMultiplayerPeer::get_peer", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketMultiplayerPeer::set_buffers", "(IIII)*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::close", "(I*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::get_connected_host", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::get_connected_port", "()I"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::get_write_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::is_connected_to_host", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::set_no_delay", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::set_write_mode", "(I)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketPeer::was_string_packet", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::disconnect_peer", "(II*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::get_bind_ip", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::get_ca_chain", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::get_peer_address", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::get_peer_port", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::get_private_key", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::get_ssl_certificate", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::has_peer", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::is_listening", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::listen", "(I*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::set_bind_ip", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::set_ca_chain", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::set_private_key", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::set_ssl_certificate", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WebSocketServer::stop", "()"),
	EXPORT_WASM_API_WITH_SIG("WindowDialog::_closed", "()"),
	EXPORT_WASM_API_WITH_SIG("WindowDialog::_gui_input", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WindowDialog::get_close_button", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WindowDialog::get_resizable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WindowDialog::get_title", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WindowDialog::set_resizable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("WindowDialog::set_title", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("World::get_direct_space_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("World::get_environment", "()*~"),
	EXPORT_WASM_API_WITH_SIG("World::get_fallback_environment", "()*~"),
	EXPORT_WASM_API_WITH_SIG("World::get_scenario", "()*~"),
	EXPORT_WASM_API_WITH_SIG("World::get_space", "()*~"),
	EXPORT_WASM_API_WITH_SIG("World::set_environment", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("World::set_fallback_environment", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("World2D::get_canvas", "()*~"),
	EXPORT_WASM_API_WITH_SIG("World2D::get_direct_space_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("World2D::get_space", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WorldEnvironment::get_environment", "()*~"),
	EXPORT_WASM_API_WITH_SIG("WorldEnvironment::set_environment", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("X509Certificate::load", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("X509Certificate::save", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_attribute_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_attribute_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_attribute_value", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_current_line", "()I"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_named_attribute_value", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_named_attribute_value_safe", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_node_data", "()*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_node_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_node_offset", "()I"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::get_node_type", "()*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::has_attribute", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::is_empty", "()*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::open", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::open_buffer", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::read", "()*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::seek", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("XMLParser::skip_section", "()"),
	EXPORT_WASM_API_WITH_SIG("YSort::is_sort_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("YSort::set_sort_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::can_instance", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_exists", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_category", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_integer_constant", "(*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_integer_constant_list", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_method_list", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_property", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_property_list", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_signal", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_get_signal_list", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_has_integer_constant", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_has_method", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_has_signal", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::class_set_property", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::get_class_list", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::get_inheriters_from_class", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::get_parent_class", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::instance", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::is_class_enabled", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ClassDB::is_parent_class", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::change_dir", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::copy", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::current_is_dir", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::dir_exists", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::file_exists", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::get_current_dir", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::get_current_drive", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Directory::get_drive", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::get_drive_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Directory::get_next", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::get_space_left", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Directory::list_dir_begin", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::list_dir_end", "()"),
	EXPORT_WASM_API_WITH_SIG("_Directory::make_dir", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::make_dir_recursive", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::open", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::remove", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Directory::rename", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_author_info", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_copyright_info", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_donor_info", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_frames_drawn", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_frames_per_second", "()f"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_idle_frames", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_iterations_per_second", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_license_info", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_license_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_main_loop", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_physics_frames", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_physics_interpolation_fraction", "()f"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_physics_jitter_fix", "()f"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_singleton", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_target_fps", "()I"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_time_scale", "()f"),
	EXPORT_WASM_API_WITH_SIG("_Engine::get_version_info", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::has_singleton", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::is_editor_hint", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::is_in_physics_frame", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Engine::set_editor_hint", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_Engine::set_iterations_per_second", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_Engine::set_physics_jitter_fix", "(f)"),
	EXPORT_WASM_API_WITH_SIG("_Engine::set_target_fps", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_Engine::set_time_scale", "(f)"),
	EXPORT_WASM_API_WITH_SIG("_File::close", "()"),
	EXPORT_WASM_API_WITH_SIG("_File::eof_reached", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::file_exists", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_16", "()I"),
	EXPORT_WASM_API_WITH_SIG("_File::get_32", "()I"),
	EXPORT_WASM_API_WITH_SIG("_File::get_64", "()I"),
	EXPORT_WASM_API_WITH_SIG("_File::get_8", "()I"),
	EXPORT_WASM_API_WITH_SIG("_File::get_as_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_buffer", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_csv_line", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_double", "()f"),
	EXPORT_WASM_API_WITH_SIG("_File::get_endian_swap", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_error", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_float", "()f"),
	EXPORT_WASM_API_WITH_SIG("_File::get_len", "()I"),
	EXPORT_WASM_API_WITH_SIG("_File::get_line", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_md5", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_modified_time", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("_File::get_pascal_string", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_path_absolute", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_position", "()I"),
	EXPORT_WASM_API_WITH_SIG("_File::get_real", "()f"),
	EXPORT_WASM_API_WITH_SIG("_File::get_sha256", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::get_var", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::is_open", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_File::open", "(*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::open_compressed", "(*~II)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::open_encrypted", "(*~I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::open_encrypted_with_pass", "(*~I*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_File::seek", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_File::seek_end", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_File::set_endian_swap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_16", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_32", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_64", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_8", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_buffer", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_csv_line", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_double", "(f)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_float", "(f)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_line", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_pascal_string", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_real", "(f)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_string", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_File::store_var", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::build_box_planes", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::build_capsule_planes", "(ffIII)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::build_cylinder_planes", "(ffII)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::clip_polygon", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::clip_polygons_2d", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::clip_polyline_with_polygon_2d", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::convex_hull_2d", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::exclude_polygons_2d", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::get_closest_point_to_segment", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::get_closest_point_to_segment_2d", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::get_closest_point_to_segment_uncapped", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::get_closest_point_to_segment_uncapped_2d", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::get_closest_points_between_segments", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::get_closest_points_between_segments_2d", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::get_uv84_normal_bit", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::intersect_polygons_2d", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::intersect_polyline_with_polygon_2d", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::is_point_in_circle", "(*~*~f)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::is_point_in_polygon", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::is_polygon_clockwise", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::line_intersects_line_2d", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::make_atlas", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::merge_polygons_2d", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::offset_polygon_2d", "(*~fI)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::offset_polyline_2d", "(*~fII)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::point_is_inside_triangle", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::ray_intersects_triangle", "(*~*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::segment_intersects_circle", "(*~*~*~f)f"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::segment_intersects_convex", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::segment_intersects_cylinder", "(*~*~ff)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::segment_intersects_segment_2d", "(*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::segment_intersects_sphere", "(*~*~*~f)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::segment_intersects_triangle", "(*~*~*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::triangulate_delaunay_2d", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Geometry::triangulate_polygon", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_JSON::parse", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_JSON::print", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Marshalls::base64_to_raw", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Marshalls::base64_to_utf8", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Marshalls::base64_to_variant", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Marshalls::raw_to_base64", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Marshalls::utf8_to_base64", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Marshalls::variant_to_base64", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_Mutex::lock", "()"),
	EXPORT_WASM_API_WITH_SIG("_Mutex::try_lock", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Mutex::unlock", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::alert", "(*~*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::can_draw", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::can_use_threads", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::center_window", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::close_midi_inputs", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::delay_msec", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_OS::delay_usec", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_OS::dump_memory_to_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::dump_resources_to_file", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::execute", "(*~*~*~*~*~)I"),
	EXPORT_WASM_API_WITH_SIG("_OS::find_scancode_from_string", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_audio_driver_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_audio_driver_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_borderless_window", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_clipboard", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_cmdline_args", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_connected_midi_inputs", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_current_screen", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_current_video_driver", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_date", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_datetime", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_datetime_from_unix_time", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_dynamic_memory_usage", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_environment", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_executable_path", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_exit_code", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_granted_permissions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_ime_selection", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_ime_text", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_latin_keyboard_variant", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_locale", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_low_processor_usage_mode_sleep_usec", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_max_window_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_min_window_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_model_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_name", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_power_percent_left", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_power_seconds_left", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_power_state", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_process_id", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_processor_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_real_window_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_scancode_string", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_screen_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_screen_dpi", "(I)I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_screen_orientation", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_screen_position", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_screen_size", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_splash_tick_msec", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_static_memory_peak_usage", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_static_memory_usage", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_system_dir", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_system_time_msecs", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_system_time_secs", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_ticks_msec", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_ticks_usec", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_time", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_time_zone_info", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_unique_id", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_unix_time", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_unix_time_from_datetime", "(*~)I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_user_data_dir", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_video_driver_count", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_video_driver_name", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_virtual_keyboard_height", "()I"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_window_per_pixel_transparency_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_window_position", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_window_safe_area", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::get_window_size", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::global_menu_add_item", "(*~*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::global_menu_add_separator", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::global_menu_clear", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::global_menu_remove_item", "(*~I)"),
	EXPORT_WASM_API_WITH_SIG("_OS::has_environment", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::has_feature", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::has_touchscreen_ui_hint", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::has_virtual_keyboard", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::hide_virtual_keyboard", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_debug_build", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_in_low_processor_usage_mode", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_keep_screen_on", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_ok_left_and_cancel_right", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_scancode_unicode", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_stdout_verbose", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_userfs_persistent", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_vsync_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_vsync_via_compositor_enabled", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_window_always_on_top", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_window_focused", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_window_fullscreen", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_window_maximized", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_window_minimized", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::is_window_resizable", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::kill", "(I)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::move_window_to_foreground", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::native_video_is_playing", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::native_video_pause", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::native_video_play", "(*~f*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::native_video_stop", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::native_video_unpause", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::open_midi_inputs", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::print_all_resources", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::print_all_textures_by_size", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::print_resources_by_type", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::print_resources_in_use", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::request_attention", "()"),
	EXPORT_WASM_API_WITH_SIG("_OS::request_permission", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::request_permissions", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_borderless_window", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_clipboard", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_current_screen", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_exit_code", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_icon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_ime_active", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_ime_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_keep_screen_on", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_low_processor_usage_mode", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_low_processor_usage_mode_sleep_usec", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_max_window_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_min_window_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_native_icon", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_screen_orientation", "(I)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_thread_name", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_use_file_access_save_and_swap", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_use_vsync", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_vsync_via_compositor", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_always_on_top", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_fullscreen", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_maximized", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_minimized", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_per_pixel_transparency_enabled", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_position", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_resizable", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_size", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::set_window_title", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_OS::shell_open", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_OS::show_virtual_keyboard", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::exists", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::get_dependencies", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::get_recognized_extensions_for_type", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::has", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::has_cached", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::load", "(*~*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::load_interactive", "(*~*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceLoader::set_abort_on_missing_resources", "(*~)"),
	EXPORT_WASM_API_WITH_SIG("_ResourceSaver::get_recognized_extensions", "(*~)*~"),
	EXPORT_WASM_API_WITH_SIG("_ResourceSaver::save", "(*~*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("_Semaphore::post", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Semaphore::wait", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Thread::get_id", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Thread::is_active", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_Thread::start", "(*~*~*~I)*~"),
	EXPORT_WASM_API_WITH_SIG("_Thread::wait_to_finish", "()*~"),
	EXPORT_WASM_API_WITH_SIG("_VisualScriptEditor::add_custom_node", "(*~*~*~)"),
	EXPORT_WASM_API_WITH_SIG("_VisualScriptEditor::remove_custom_node", "(*~*~)"),
};

static int wasgo_ARVRAnchor_get_anchor_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRAnchor *caller = (ARVRAnchor *) state->lookup_object(caller_id);
if(caller){
return caller->get_anchor_id();
}
}
}
static WasGoId wasgo_ARVRAnchor_get_anchor_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRAnchor *caller = (ARVRAnchor *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_anchor_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRAnchor_get_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRAnchor *caller = (ARVRAnchor *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRAnchor_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRAnchor *caller = (ARVRAnchor *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRAnchor_get_plane(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRAnchor *caller = (ARVRAnchor *) state->lookup_object(caller_id);
if(caller){
Plane ret_value = caller->get_plane();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRAnchor_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRAnchor *caller = (ARVRAnchor *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ARVRAnchor_set_anchor_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRAnchor *caller = (ARVRAnchor *) state->lookup_object(caller_id);
if(caller){
caller->set_anchor_id(arg0);
}
}
}
static int wasgo_ARVRController_get_controller_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
return caller->get_controller_id();
}
}
}
static WasGoId wasgo_ARVRController_get_controller_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_controller_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRController_get_hand(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
enum.ARVRPositionalTracker::TrackerHand ret_value = caller->get_hand();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRController_get_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ARVRController_get_joystick_axis(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
return caller->get_joystick_axis(arg0);
}
}
}
static int wasgo_ARVRController_get_joystick_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
return caller->get_joystick_id();
}
}
}
static WasGoId wasgo_ARVRController_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ARVRController_get_rumble(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
return caller->get_rumble();
}
}
}
static int wasgo_ARVRController_is_button_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
return caller->is_button_pressed(arg0);
}
}
}
static void wasgo_ARVRController_set_controller_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
caller->set_controller_id(arg0);
}
}
}
static void wasgo_ARVRController_set_rumble(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRController *caller = (ARVRController *) state->lookup_object(caller_id);
if(caller){
caller->set_rumble(arg0);
}
}
}
static WasGoId wasgo_ARVRInterface_get_anchor_detection_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_anchor_detection_is_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ARVRInterface_get_camera_feed_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_camera_feed_id();
}
}
}
static int wasgo_ARVRInterface_get_capabilities(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_capabilities();
}
}
}
static WasGoId wasgo_ARVRInterface_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRInterface_get_render_targetsize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_render_targetsize();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRInterface_get_tracking_status(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
enum.ARVRInterface::Tracking_status ret_value = caller->get_tracking_status();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRInterface_initialize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->initialize();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRInterface_is_initialized(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_initialized();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRInterface_is_primary(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_primary();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRInterface_is_stereo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_stereo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ARVRInterface_set_anchor_detection_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_anchor_detection_is_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRInterface_set_is_initialized(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_is_initialized(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRInterface_set_is_primary(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_is_primary(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRInterface_uninitialize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRInterface *caller = (ARVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->uninitialize();
}
}
}
static float wasgo_ARVROrigin_get_world_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVROrigin *caller = (ARVROrigin *) state->lookup_object(caller_id);
if(caller){
return caller->get_world_scale();
}
}
}
static void wasgo_ARVROrigin_set_world_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVROrigin *caller = (ARVROrigin *) state->lookup_object(caller_id);
if(caller){
caller->set_world_scale(arg0);
}
}
}
static void wasgo_ARVRPositionalTracker__set_joy_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
caller->_set_joy_id(arg0);
}
}
}
static void wasgo_ARVRPositionalTracker__set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
caller->_set_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRPositionalTracker__set_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
caller->_set_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRPositionalTracker__set_orientation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
caller->_set_orientation(&(Basis *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRPositionalTracker__set_rw_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
caller->_set_rw_position(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRPositionalTracker__set_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
caller->_set_type(arg0);
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_hand(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
enum.ARVRPositionalTracker::TrackerHand ret_value = caller->get_hand();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ARVRPositionalTracker_get_joy_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
return caller->get_joy_id();
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_orientation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
Basis ret_value = caller->get_orientation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ARVRPositionalTracker_get_rumble(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
return caller->get_rumble();
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_tracks_orientation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_tracks_orientation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_tracks_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_tracks_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_transform(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRPositionalTracker_get_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
enum.ARVRServer::TrackerType ret_value = caller->get_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ARVRPositionalTracker_set_rumble(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRPositionalTracker *caller = (ARVRPositionalTracker *) state->lookup_object(caller_id);
if(caller){
caller->set_rumble(arg0);
}
}
}
static void wasgo_ARVRServer_center_on_hmd(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
caller->center_on_hmd(arg0, &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_ARVRServer_find_interface(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
ARVRInterface ret_value = caller->find_interface(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRServer_get_hmd_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_hmd_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRServer_get_interface(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
ARVRInterface ret_value = caller->get_interface(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ARVRServer_get_interface_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_interface_count();
}
}
}
static WasGoId wasgo_ARVRServer_get_interfaces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_interfaces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ARVRServer_get_last_commit_usec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_last_commit_usec();
}
}
}
static int wasgo_ARVRServer_get_last_frame_usec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_last_frame_usec();
}
}
}
static int wasgo_ARVRServer_get_last_process_usec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_last_process_usec();
}
}
}
static WasGoId wasgo_ARVRServer_get_primary_interface(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
ARVRInterface ret_value = caller->get_primary_interface();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRServer_get_reference_frame(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_reference_frame();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ARVRServer_get_tracker(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
ARVRPositionalTracker ret_value = caller->get_tracker(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ARVRServer_get_tracker_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_tracker_count();
}
}
}
static float wasgo_ARVRServer_get_world_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_world_scale();
}
}
}
static void wasgo_ARVRServer_set_primary_interface(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
caller->set_primary_interface(&(ARVRInterface *)lookup_object(arg0));
}
}
}
static void wasgo_ARVRServer_set_world_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ARVRServer *caller = (ARVRServer *) state->lookup_object(caller_id);
if(caller){
caller->set_world_scale(arg0);
}
}
}
static float wasgo_AStar__compute_cost(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
return caller->_compute_cost(arg0, arg1);
}
}
}
static float wasgo_AStar__estimate_cost(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
return caller->_estimate_cost(arg0, arg1);
}
}
}
static void wasgo_AStar_add_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->add_point(arg0, &(Vector3 *)lookup_object(arg1), arg2);
}
}
}
static WasGoId wasgo_AStar_are_points_connected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_points_connected(arg0, arg1, &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AStar_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_AStar_connect_points(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->connect_points(arg0, arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_AStar_disconnect_points(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_points(arg0, arg1, &(bool *)lookup_object(arg2));
}
}
}
static int wasgo_AStar_get_available_point_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
return caller->get_available_point_id();
}
}
}
static int wasgo_AStar_get_closest_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
return caller->get_closest_point(&(Vector3 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_AStar_get_closest_position_in_segment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_closest_position_in_segment(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar_get_id_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_id_path(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AStar_get_point_capacity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_capacity();
}
}
}
static WasGoId wasgo_AStar_get_point_connections(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_point_connections(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AStar_get_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_count();
}
}
}
static WasGoId wasgo_AStar_get_point_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_point_path(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar_get_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_point_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AStar_get_point_weight_scale(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_weight_scale(arg0);
}
}
}
static WasGoId wasgo_AStar_get_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar_has_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_point(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar_is_point_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_point_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AStar_remove_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->remove_point(arg0);
}
}
}
static void wasgo_AStar_reserve_space(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->reserve_space(arg0);
}
}
}
static void wasgo_AStar_set_point_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->set_point_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AStar_set_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->set_point_position(arg0, &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_AStar_set_point_weight_scale(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar *caller = (AStar *) state->lookup_object(caller_id);
if(caller){
caller->set_point_weight_scale(arg0, arg1);
}
}
}
static void wasgo_AStar2D_add_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->add_point(arg0, &(Vector2 *)lookup_object(arg1), arg2);
}
}
}
static WasGoId wasgo_AStar2D_are_points_connected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_points_connected(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AStar2D_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_AStar2D_connect_points(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->connect_points(arg0, arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_AStar2D_disconnect_points(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_points(arg0, arg1);
}
}
}
static int wasgo_AStar2D_get_available_point_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_available_point_id();
}
}
}
static int wasgo_AStar2D_get_closest_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_closest_point(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_AStar2D_get_closest_position_in_segment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_closest_position_in_segment(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar2D_get_id_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_id_path(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AStar2D_get_point_capacity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_capacity();
}
}
}
static WasGoId wasgo_AStar2D_get_point_connections(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_point_connections(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AStar2D_get_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_count();
}
}
}
static WasGoId wasgo_AStar2D_get_point_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_point_path(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar2D_get_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_point_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AStar2D_get_point_weight_scale(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_weight_scale(arg0);
}
}
}
static WasGoId wasgo_AStar2D_get_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar2D_has_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_point(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AStar2D_is_point_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_point_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AStar2D_remove_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_point(arg0);
}
}
}
static void wasgo_AStar2D_reserve_space(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->reserve_space(arg0);
}
}
}
static void wasgo_AStar2D_set_point_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AStar2D_set_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_position(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_AStar2D_set_point_weight_scale(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AStar2D *caller = (AStar2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_weight_scale(arg0, arg1);
}
}
}
static void wasgo_AcceptDialog__builtin_text_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
caller->_builtin_text_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AcceptDialog__custom_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
caller->_custom_action(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AcceptDialog__ok(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
caller->_ok();
}
}
}
static WasGoId wasgo_AcceptDialog_add_button(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
Button ret_value = caller->add_button(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(String *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AcceptDialog_add_cancel(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
Button ret_value = caller->add_cancel(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AcceptDialog_get_hide_on_ok(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_hide_on_ok();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AcceptDialog_get_label(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
Label ret_value = caller->get_label();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AcceptDialog_get_ok(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
Button ret_value = caller->get_ok();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AcceptDialog_get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AcceptDialog_has_autowrap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_autowrap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AcceptDialog_register_text_enter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
caller->register_text_enter(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_AcceptDialog_set_autowrap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_autowrap(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AcceptDialog_set_hide_on_ok(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_hide_on_ok(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AcceptDialog_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AcceptDialog *caller = (AcceptDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_text(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimatedSprite__is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimatedSprite__res_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->_res_changed();
}
}
}
static void wasgo_AnimatedSprite__set_playing(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->_set_playing(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimatedSprite_get_animation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_animation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimatedSprite_get_frame(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
return caller->get_frame();
}
}
}
static WasGoId wasgo_AnimatedSprite_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimatedSprite_get_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed_scale();
}
}
}
static WasGoId wasgo_AnimatedSprite_get_sprite_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
SpriteFrames ret_value = caller->get_sprite_frames();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimatedSprite_is_centered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_centered();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimatedSprite_is_flipped_h(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_h();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimatedSprite_is_flipped_v(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_v();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimatedSprite_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimatedSprite_play(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->play(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AnimatedSprite_set_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_animation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite_set_centered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_centered(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite_set_flip_h(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_h(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite_set_flip_v(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_v(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite_set_frame(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_frame(arg0);
}
}
}
static void wasgo_AnimatedSprite_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_speed_scale(arg0);
}
}
}
static void wasgo_AnimatedSprite_set_sprite_frames(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->set_sprite_frames(&(SpriteFrames *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite *caller = (AnimatedSprite *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static WasGoId wasgo_AnimatedSprite3D__is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimatedSprite3D__res_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
caller->_res_changed();
}
}
}
static void wasgo_AnimatedSprite3D__set_playing(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
caller->_set_playing(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimatedSprite3D_get_animation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_animation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimatedSprite3D_get_frame(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_frame();
}
}
}
static WasGoId wasgo_AnimatedSprite3D_get_sprite_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
SpriteFrames ret_value = caller->get_sprite_frames();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimatedSprite3D_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimatedSprite3D_play(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
caller->play(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite3D_set_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_animation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite3D_set_frame(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_frame(arg0);
}
}
}
static void wasgo_AnimatedSprite3D_set_sprite_frames(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_sprite_frames(&(SpriteFrames *)lookup_object(arg0));
}
}
}
static void wasgo_AnimatedSprite3D_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedSprite3D *caller = (AnimatedSprite3D *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static void wasgo_AnimatedTexture__update_proxy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
caller->_update_proxy();
}
}
}
static float wasgo_AnimatedTexture_get_fps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_fps();
}
}
}
static float wasgo_AnimatedTexture_get_frame_delay(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_frame_delay(arg0);
}
}
}
static WasGoId wasgo_AnimatedTexture_get_frame_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_frame_texture(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimatedTexture_get_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_frames();
}
}
}
static void wasgo_AnimatedTexture_set_fps(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_fps(arg0);
}
}
}
static void wasgo_AnimatedTexture_set_frame_delay(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_frame_delay(arg0, arg1);
}
}
}
static void wasgo_AnimatedTexture_set_frame_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_frame_texture(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_AnimatedTexture_set_frames(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimatedTexture *caller = (AnimatedTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_frames(arg0);
}
}
}
static int wasgo_Animation_add_track(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->add_track(arg0, arg1);
}
}
}
static WasGoId wasgo_Animation_animation_track_get_key_animation(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->animation_track_get_key_animation(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Animation_animation_track_insert_key(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->animation_track_insert_key(arg0, arg1, &(String *)lookup_object(arg2));
}
}
}
static void wasgo_Animation_animation_track_set_key_animation(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->animation_track_set_key_animation(arg0, arg1, &(String *)lookup_object(arg2));
}
}
}
static float wasgo_Animation_audio_track_get_key_end_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->audio_track_get_key_end_offset(arg0, arg1);
}
}
}
static float wasgo_Animation_audio_track_get_key_start_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->audio_track_get_key_start_offset(arg0, arg1);
}
}
}
static WasGoId wasgo_Animation_audio_track_get_key_stream(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
Resource ret_value = caller->audio_track_get_key_stream(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Animation_audio_track_insert_key(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, WasGoID arg2, float arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->audio_track_insert_key(arg0, arg1, &(Resource *)lookup_object(arg2), arg3, arg4);
}
}
}
static void wasgo_Animation_audio_track_set_key_end_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->audio_track_set_key_end_offset(arg0, arg1, arg2);
}
}
}
static void wasgo_Animation_audio_track_set_key_start_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->audio_track_set_key_start_offset(arg0, arg1, arg2);
}
}
}
static void wasgo_Animation_audio_track_set_key_stream(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->audio_track_set_key_stream(arg0, arg1, &(Resource *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_Animation_bezier_track_get_key_in_handle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->bezier_track_get_key_in_handle(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_bezier_track_get_key_out_handle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->bezier_track_get_key_out_handle(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Animation_bezier_track_get_key_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->bezier_track_get_key_value(arg0, arg1);
}
}
}
static int wasgo_Animation_bezier_track_insert_key(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, float arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->bezier_track_insert_key(arg0, arg1, arg2, &(Vector2 *)lookup_object(arg3), &(Vector2 *)lookup_object(arg4));
}
}
}
static float wasgo_Animation_bezier_track_interpolate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->bezier_track_interpolate(arg0, arg1);
}
}
}
static void wasgo_Animation_bezier_track_set_key_in_handle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->bezier_track_set_key_in_handle(arg0, arg1, &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Animation_bezier_track_set_key_out_handle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->bezier_track_set_key_out_handle(arg0, arg1, &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Animation_bezier_track_set_key_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->bezier_track_set_key_value(arg0, arg1, arg2);
}
}
}
static void wasgo_Animation_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_Animation_copy_track(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->copy_track(arg0, &(Animation *)lookup_object(arg1));
}
}
}
static int wasgo_Animation_find_track(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->find_track(&(NodePath *)lookup_object(arg0));
}
}
}
static float wasgo_Animation_get_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->get_length();
}
}
}
static float wasgo_Animation_get_step(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->get_step();
}
}
}
static int wasgo_Animation_get_track_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->get_track_count();
}
}
}
static WasGoId wasgo_Animation_has_loop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_loop();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_method_track_get_key_indices(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->method_track_get_key_indices(arg0, arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_method_track_get_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->method_track_get_name(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_method_track_get_params(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->method_track_get_params(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Animation_remove_track(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->remove_track(arg0);
}
}
}
static void wasgo_Animation_set_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->set_length(arg0);
}
}
}
static void wasgo_Animation_set_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->set_loop(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Animation_set_step(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->set_step(arg0);
}
}
}
static int wasgo_Animation_track_find_key(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->track_find_key(arg0, arg1, &(bool *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_Animation_track_get_interpolation_loop_wrap(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->track_get_interpolation_loop_wrap(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_track_get_interpolation_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
enum.Animation::InterpolationType ret_value = caller->track_get_interpolation_type(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Animation_track_get_key_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->track_get_key_count(arg0);
}
}
}
static float wasgo_Animation_track_get_key_time(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->track_get_key_time(arg0, arg1);
}
}
}
static float wasgo_Animation_track_get_key_transition(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->track_get_key_transition(arg0, arg1);
}
}
}
static WasGoId wasgo_Animation_track_get_key_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->track_get_key_value(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_track_get_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->track_get_path(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_track_get_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
enum.Animation::TrackType ret_value = caller->track_get_type(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Animation_track_insert_key(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, WasGoID arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_insert_key(arg0, arg1, &(Variant *)lookup_object(arg2), arg3);
}
}
}
static WasGoId wasgo_Animation_track_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->track_is_enabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_track_is_imported(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->track_is_imported(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Animation_track_move_down(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_move_down(arg0);
}
}
}
static void wasgo_Animation_track_move_to(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_move_to(arg0, arg1);
}
}
}
static void wasgo_Animation_track_move_up(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_move_up(arg0);
}
}
}
static void wasgo_Animation_track_remove_key(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_remove_key(arg0, arg1);
}
}
}
static void wasgo_Animation_track_remove_key_at_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_remove_key_at_position(arg0, arg1);
}
}
}
static void wasgo_Animation_track_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_enabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Animation_track_set_imported(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_imported(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Animation_track_set_interpolation_loop_wrap(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_interpolation_loop_wrap(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Animation_track_set_interpolation_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_interpolation_type(arg0, arg1);
}
}
}
static void wasgo_Animation_track_set_key_time(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_key_time(arg0, arg1, arg2);
}
}
}
static void wasgo_Animation_track_set_key_transition(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_key_transition(arg0, arg1, arg2);
}
}
}
static void wasgo_Animation_track_set_key_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_key_value(arg0, arg1, &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_Animation_track_set_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_set_path(arg0, &(NodePath *)lookup_object(arg1));
}
}
}
static void wasgo_Animation_track_swap(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->track_swap(arg0, arg1);
}
}
}
static int wasgo_Animation_transform_track_insert_key(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
return caller->transform_track_insert_key(arg0, arg1, &(Vector3 *)lookup_object(arg2), &(Quat *)lookup_object(arg3), &(Vector3 *)lookup_object(arg4));
}
}
}
static WasGoId wasgo_Animation_transform_track_interpolate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->transform_track_interpolate(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_value_track_get_key_indices(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->value_track_get_key_indices(arg0, arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Animation_value_track_get_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
enum.Animation::UpdateMode ret_value = caller->value_track_get_update_mode(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Animation_value_track_set_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Animation *caller = (Animation *) state->lookup_object(caller_id);
if(caller){
caller->value_track_set_update_mode(arg0, arg1);
}
}
}
static WasGoId wasgo_AnimationNode__get_filters(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_filters();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNode__set_filters(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->_set_filters(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_AnimationNode_add_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->add_input(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNode_blend_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, float arg2, WasGoID arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->blend_animation(&(String *)lookup_object(arg0), arg1, arg2, &(bool *)lookup_object(arg3), arg4);
}
}
}
static float wasgo_AnimationNode_blend_input(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, WasGoID arg2, float arg3, int arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
return caller->blend_input(arg0, arg1, &(bool *)lookup_object(arg2), arg3, arg4, &(bool *)lookup_object(arg5));
}
}
}
static float wasgo_AnimationNode_blend_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, WasGoID arg3, float arg4, int arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
return caller->blend_node(&(String *)lookup_object(arg0), &(AnimationNode *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3), arg4, arg5, &(bool *)lookup_object(arg6));
}
}
}
static WasGoId wasgo_AnimationNode_get_caption(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_caption();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_get_child_by_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_child_by_name(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_get_child_nodes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_child_nodes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimationNode_get_input_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_input_count();
}
}
}
static WasGoId wasgo_AnimationNode_get_input_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_input_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_get_parameter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_parameter(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_get_parameter_default_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_parameter_default_value(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_get_parameter_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_parameter_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_has_filter(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->has_filter();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_is_filter_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_filter_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNode_is_path_filtered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_path_filtered(&(NodePath *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNode_process(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->process(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNode_remove_input(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->remove_input(arg0);
}
}
}
static void wasgo_AnimationNode_set_filter_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->set_filter_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNode_set_filter_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->set_filter_path(&(NodePath *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNode_set_parameter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNode *caller = (AnimationNode *) state->lookup_object(caller_id);
if(caller){
caller->set_parameter(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_AnimationNodeAdd2_is_using_sync(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeAdd2 *caller = (AnimationNodeAdd2 *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_sync();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeAdd2_set_use_sync(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeAdd2 *caller = (AnimationNodeAdd2 *) state->lookup_object(caller_id);
if(caller){
caller->set_use_sync(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationNodeAdd3_is_using_sync(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeAdd3 *caller = (AnimationNodeAdd3 *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_sync();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeAdd3_set_use_sync(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeAdd3 *caller = (AnimationNodeAdd3 *) state->lookup_object(caller_id);
if(caller){
caller->set_use_sync(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationNodeAnimation_get_animation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeAnimation *caller = (AnimationNodeAnimation *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_animation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeAnimation_set_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeAnimation *caller = (AnimationNodeAnimation *) state->lookup_object(caller_id);
if(caller){
caller->set_animation(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationNodeBlend2_is_using_sync(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlend2 *caller = (AnimationNodeBlend2 *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_sync();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeBlend2_set_use_sync(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlend2 *caller = (AnimationNodeBlend2 *) state->lookup_object(caller_id);
if(caller){
caller->set_use_sync(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationNodeBlend3_is_using_sync(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlend3 *caller = (AnimationNodeBlend3 *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_sync();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeBlend3_set_use_sync(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlend3 *caller = (AnimationNodeBlend3 *) state->lookup_object(caller_id);
if(caller){
caller->set_use_sync(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace1D__add_blend_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->_add_blend_point(arg0, &(AnimationRootNode *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeBlendSpace1D__tree_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->_tree_changed();
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_add_blend_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->add_blend_point(&(AnimationRootNode *)lookup_object(arg0), arg1, arg2);
}
}
}
static int wasgo_AnimationNodeBlendSpace1D_get_blend_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
return caller->get_blend_point_count();
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace1D_get_blend_point_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
AnimationRootNode ret_value = caller->get_blend_point_node(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationNodeBlendSpace1D_get_blend_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
return caller->get_blend_point_position(arg0);
}
}
}
static float wasgo_AnimationNodeBlendSpace1D_get_max_space(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_space();
}
}
}
static float wasgo_AnimationNodeBlendSpace1D_get_min_space(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
return caller->get_min_space();
}
}
}
static float wasgo_AnimationNodeBlendSpace1D_get_snap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
return caller->get_snap();
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace1D_get_value_label(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_value_label();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_remove_blend_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->remove_blend_point(arg0);
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_set_blend_point_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_point_node(arg0, &(AnimationRootNode *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_set_blend_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_point_position(arg0, arg1);
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_set_max_space(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->set_max_space(arg0);
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_set_min_space(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->set_min_space(arg0);
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_set_snap(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->set_snap(arg0);
}
}
}
static void wasgo_AnimationNodeBlendSpace1D_set_value_label(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace1D *caller = (AnimationNodeBlendSpace1D *) state->lookup_object(caller_id);
if(caller){
caller->set_value_label(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D__add_blend_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->_add_blend_point(arg0, &(AnimationRootNode *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D__get_triangles(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->_get_triangles();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeBlendSpace2D__set_triangles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_triangles(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D__tree_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->_tree_changed();
}
}
}
static void wasgo_AnimationNodeBlendSpace2D__update_triangles(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->_update_triangles();
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_add_blend_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->add_blend_point(&(AnimationRootNode *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_add_triangle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->add_triangle(arg0, arg1, arg2, arg3);
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_auto_triangles(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_auto_triangles();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
enum.AnimationNodeBlendSpace2D::BlendMode ret_value = caller->get_blend_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimationNodeBlendSpace2D_get_blend_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_blend_point_count();
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_blend_point_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
AnimationRootNode ret_value = caller->get_blend_point_node(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_blend_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_blend_point_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_max_space(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_max_space();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_min_space(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_min_space();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_snap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_snap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimationNodeBlendSpace2D_get_triangle_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_triangle_count();
}
}
}
static int wasgo_AnimationNodeBlendSpace2D_get_triangle_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_triangle_point(arg0, arg1);
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_x_label(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_x_label();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendSpace2D_get_y_label(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_y_label();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_remove_blend_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_blend_point(arg0);
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_remove_triangle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_triangle(arg0);
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_auto_triangles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_auto_triangles(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_mode(arg0);
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_blend_point_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_point_node(arg0, &(AnimationRootNode *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_blend_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_point_position(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_max_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_max_space(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_min_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_min_space(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_snap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_snap(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_x_label(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_x_label(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendSpace2D_set_y_label(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendSpace2D *caller = (AnimationNodeBlendSpace2D *) state->lookup_object(caller_id);
if(caller){
caller->set_y_label(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendTree__node_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->_node_changed(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendTree__tree_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->_tree_changed();
}
}
}
static void wasgo_AnimationNodeBlendTree_add_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->add_node(&(String *)lookup_object(arg0), &(AnimationNode *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_AnimationNodeBlendTree_connect_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->connect_node(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2));
}
}
}
static void wasgo_AnimationNodeBlendTree_disconnect_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_node(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_AnimationNodeBlendTree_get_graph_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_graph_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendTree_get_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
AnimationNode ret_value = caller->get_node(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendTree_get_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_node_position(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeBlendTree_has_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_node(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeBlendTree_remove_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->remove_node(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendTree_rename_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->rename_node(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeBlendTree_set_graph_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->set_graph_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeBlendTree_set_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeBlendTree *caller = (AnimationNodeBlendTree *) state->lookup_object(caller_id);
if(caller){
caller->set_node_position(&(String *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static float wasgo_AnimationNodeOneShot_get_autorestart_delay(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
return caller->get_autorestart_delay();
}
}
}
static float wasgo_AnimationNodeOneShot_get_autorestart_random_delay(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
return caller->get_autorestart_random_delay();
}
}
}
static float wasgo_AnimationNodeOneShot_get_fadein_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
return caller->get_fadein_time();
}
}
}
static float wasgo_AnimationNodeOneShot_get_fadeout_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
return caller->get_fadeout_time();
}
}
}
static WasGoId wasgo_AnimationNodeOneShot_get_mix_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
enum.AnimationNodeOneShot::MixMode ret_value = caller->get_mix_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeOneShot_has_autorestart(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_autorestart();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeOneShot_is_using_sync(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_sync();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeOneShot_set_autorestart(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
caller->set_autorestart(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeOneShot_set_autorestart_delay(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
caller->set_autorestart_delay(arg0);
}
}
}
static void wasgo_AnimationNodeOneShot_set_autorestart_random_delay(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
caller->set_autorestart_random_delay(arg0);
}
}
}
static void wasgo_AnimationNodeOneShot_set_fadein_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
caller->set_fadein_time(arg0);
}
}
}
static void wasgo_AnimationNodeOneShot_set_fadeout_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
caller->set_fadeout_time(arg0);
}
}
}
static void wasgo_AnimationNodeOneShot_set_mix_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
caller->set_mix_mode(arg0);
}
}
}
static void wasgo_AnimationNodeOneShot_set_use_sync(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeOneShot *caller = (AnimationNodeOneShot *) state->lookup_object(caller_id);
if(caller){
caller->set_use_sync(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachine__tree_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->_tree_changed();
}
}
}
static void wasgo_AnimationNodeStateMachine_add_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->add_node(&(String *)lookup_object(arg0), &(AnimationNode *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_AnimationNodeStateMachine_add_transition(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->add_transition(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(AnimationNodeStateMachineTransition *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_end_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_end_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_graph_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_graph_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
AnimationNode ret_value = caller->get_node(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_node_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_node_name(&(AnimationNode *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_node_position(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_start_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_start_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_transition(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
AnimationNodeStateMachineTransition ret_value = caller->get_transition(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimationNodeStateMachine_get_transition_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
return caller->get_transition_count();
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_transition_from(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_transition_from(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_get_transition_to(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_transition_to(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_has_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_node(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachine_has_transition(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_transition(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeStateMachine_remove_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->remove_node(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachine_remove_transition(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->remove_transition(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeStateMachine_remove_transition_by_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->remove_transition_by_index(arg0);
}
}
}
static void wasgo_AnimationNodeStateMachine_rename_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->rename_node(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeStateMachine_set_end_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->set_end_node(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachine_set_graph_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->set_graph_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachine_set_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->set_node_position(&(String *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeStateMachine_set_start_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachine *caller = (AnimationNodeStateMachine *) state->lookup_object(caller_id);
if(caller){
caller->set_start_node(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationNodeStateMachinePlayback_get_current_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachinePlayback *caller = (AnimationNodeStateMachinePlayback *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachinePlayback_get_travel_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachinePlayback *caller = (AnimationNodeStateMachinePlayback *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_travel_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachinePlayback_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachinePlayback *caller = (AnimationNodeStateMachinePlayback *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeStateMachinePlayback_start(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachinePlayback *caller = (AnimationNodeStateMachinePlayback *) state->lookup_object(caller_id);
if(caller){
caller->start(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachinePlayback_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachinePlayback *caller = (AnimationNodeStateMachinePlayback *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static void wasgo_AnimationNodeStateMachinePlayback_travel(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachinePlayback *caller = (AnimationNodeStateMachinePlayback *) state->lookup_object(caller_id);
if(caller){
caller->travel(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationNodeStateMachineTransition_get_advance_condition(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_advance_condition();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimationNodeStateMachineTransition_get_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
return caller->get_priority();
}
}
}
static WasGoId wasgo_AnimationNodeStateMachineTransition_get_switch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
enum.AnimationNodeStateMachineTransition::SwitchMode ret_value = caller->get_switch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationNodeStateMachineTransition_get_xfade_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
return caller->get_xfade_time();
}
}
}
static WasGoId wasgo_AnimationNodeStateMachineTransition_has_auto_advance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_auto_advance();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeStateMachineTransition_is_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeStateMachineTransition_set_advance_condition(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_advance_condition(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachineTransition_set_auto_advance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_auto_advance(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachineTransition_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_disabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationNodeStateMachineTransition_set_priority(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_priority(arg0);
}
}
}
static void wasgo_AnimationNodeStateMachineTransition_set_switch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_switch_mode(arg0);
}
}
}
static void wasgo_AnimationNodeStateMachineTransition_set_xfade_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeStateMachineTransition *caller = (AnimationNodeStateMachineTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_xfade_time(arg0);
}
}
}
static float wasgo_AnimationNodeTransition_get_cross_fade_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
return caller->get_cross_fade_time();
}
}
}
static int wasgo_AnimationNodeTransition_get_enabled_inputs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
return caller->get_enabled_inputs();
}
}
}
static WasGoId wasgo_AnimationNodeTransition_get_input_caption(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_input_caption(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationNodeTransition_is_input_set_as_auto_advance(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_input_set_as_auto_advance(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationNodeTransition_set_cross_fade_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_cross_fade_time(arg0);
}
}
}
static void wasgo_AnimationNodeTransition_set_enabled_inputs(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_enabled_inputs(arg0);
}
}
}
static void wasgo_AnimationNodeTransition_set_input_as_auto_advance(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_input_as_auto_advance(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationNodeTransition_set_input_caption(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationNodeTransition *caller = (AnimationNodeTransition *) state->lookup_object(caller_id);
if(caller){
caller->set_input_caption(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationPlayer__animation_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->_animation_changed();
}
}
}
static void wasgo_AnimationPlayer__node_removed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->_node_removed(&(Node *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationPlayer_add_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->add_animation(&(String *)lookup_object(arg0), &(Animation *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationPlayer_advance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->advance(arg0);
}
}
}
static WasGoId wasgo_AnimationPlayer_animation_get_next(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->animation_get_next(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationPlayer_animation_set_next(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->animation_set_next(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationPlayer_clear_caches(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->clear_caches();
}
}
}
static void wasgo_AnimationPlayer_clear_queue(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->clear_queue();
}
}
}
static WasGoId wasgo_AnimationPlayer_find_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->find_animation(&(Animation *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_get_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
Animation ret_value = caller->get_animation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_get_animation_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_animation_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_get_animation_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
enum.AnimationPlayer::AnimationProcessMode ret_value = caller->get_animation_process_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_get_assigned_animation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_assigned_animation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_get_autoplay(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_autoplay();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationPlayer_get_blend_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_blend_time(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_AnimationPlayer_get_current_animation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_animation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationPlayer_get_current_animation_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_current_animation_length();
}
}
}
static float wasgo_AnimationPlayer_get_current_animation_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_current_animation_position();
}
}
}
static float wasgo_AnimationPlayer_get_default_blend_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_default_blend_time();
}
}
}
static WasGoId wasgo_AnimationPlayer_get_method_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
enum.AnimationPlayer::AnimationMethodCallMode ret_value = caller->get_method_call_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationPlayer_get_playing_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_playing_speed();
}
}
}
static WasGoId wasgo_AnimationPlayer_get_queue(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_queue();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_get_root(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_root();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationPlayer_get_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed_scale();
}
}
}
static WasGoId wasgo_AnimationPlayer_has_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_animation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationPlayer_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationPlayer_play(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->play(&(String *)lookup_object(arg0), arg1, arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_AnimationPlayer_play_backwards(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->play_backwards(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationPlayer_queue(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->queue(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationPlayer_remove_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->remove_animation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationPlayer_rename_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->rename_animation(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationPlayer_seek(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->seek(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationPlayer_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationPlayer_set_animation_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_animation_process_mode(arg0);
}
}
}
static void wasgo_AnimationPlayer_set_assigned_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_assigned_animation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationPlayer_set_autoplay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_autoplay(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationPlayer_set_blend_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_time(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_AnimationPlayer_set_current_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_current_animation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationPlayer_set_default_blend_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_default_blend_time(arg0);
}
}
}
static void wasgo_AnimationPlayer_set_method_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_method_call_mode(arg0);
}
}
}
static void wasgo_AnimationPlayer_set_root(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_root(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationPlayer_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_speed_scale(arg0);
}
}
}
static void wasgo_AnimationPlayer_stop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationPlayer *caller = (AnimationPlayer *) state->lookup_object(caller_id);
if(caller){
caller->stop(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTree__clear_caches(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->_clear_caches();
}
}
}
static void wasgo_AnimationTree__node_removed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->_node_removed(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTree__tree_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->_tree_changed();
}
}
}
static void wasgo_AnimationTree__update_properties(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->_update_properties();
}
}
}
static void wasgo_AnimationTree_advance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->advance(arg0);
}
}
}
static WasGoId wasgo_AnimationTree_get_animation_player(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_animation_player();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTree_get_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
enum.AnimationTree::AnimationProcessMode ret_value = caller->get_process_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTree_get_root_motion_track(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_root_motion_track();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTree_get_root_motion_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_root_motion_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTree_get_tree_root(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
AnimationNode ret_value = caller->get_tree_root();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTree_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationTree_rename_parameter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->rename_parameter(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationTree_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->set_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTree_set_animation_player(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->set_animation_player(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTree_set_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->set_process_mode(arg0);
}
}
}
static void wasgo_AnimationTree_set_root_motion_track(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->set_root_motion_track(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTree_set_tree_root(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTree *caller = (AnimationTree *) state->lookup_object(caller_id);
if(caller){
caller->set_tree_root(&(AnimationNode *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_add_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->add_node(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationTreePlayer_advance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->advance(arg0);
}
}
}
static WasGoId wasgo_AnimationTreePlayer_animation_node_get_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
Animation ret_value = caller->animation_node_get_animation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_animation_node_get_master_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->animation_node_get_master_animation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationTreePlayer_animation_node_get_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->animation_node_get_position(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_animation_node_set_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->animation_node_set_animation(&(String *)lookup_object(arg0), &(Animation *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationTreePlayer_animation_node_set_filter_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->animation_node_set_filter_path(&(String *)lookup_object(arg0), &(NodePath *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_AnimationTreePlayer_animation_node_set_master_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->animation_node_set_master_animation(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_AnimationTreePlayer_are_nodes_connected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_nodes_connected(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationTreePlayer_blend2_node_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->blend2_node_get_amount(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_blend2_node_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->blend2_node_set_amount(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_blend2_node_set_filter_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->blend2_node_set_filter_path(&(String *)lookup_object(arg0), &(NodePath *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static float wasgo_AnimationTreePlayer_blend3_node_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->blend3_node_get_amount(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_blend3_node_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->blend3_node_set_amount(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_AnimationTreePlayer_blend4_node_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->blend4_node_get_amount(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationTreePlayer_blend4_node_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->blend4_node_set_amount(&(String *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_AnimationTreePlayer_connect_nodes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect_nodes(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationTreePlayer_disconnect_nodes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_nodes(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_AnimationTreePlayer_get_animation_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
enum.AnimationTreePlayer::AnimationProcessMode ret_value = caller->get_animation_process_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_get_base_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_base_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_get_master_player(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_master_player();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_get_node_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_node_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AnimationTreePlayer_mix_node_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->mix_node_get_amount(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_mix_node_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->mix_node_set_amount(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_AnimationTreePlayer_node_exists(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->node_exists(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AnimationTreePlayer_node_get_input_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->node_get_input_count(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationTreePlayer_node_get_input_source(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->node_get_input_source(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_node_get_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->node_get_position(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_node_get_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
enum.AnimationTreePlayer::NodeType ret_value = caller->node_get_type(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_node_rename(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->node_rename(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationTreePlayer_node_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->node_set_position(&(String *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static float wasgo_AnimationTreePlayer_oneshot_node_get_autorestart_delay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->oneshot_node_get_autorestart_delay(&(String *)lookup_object(arg0));
}
}
}
static float wasgo_AnimationTreePlayer_oneshot_node_get_autorestart_random_delay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->oneshot_node_get_autorestart_random_delay(&(String *)lookup_object(arg0));
}
}
}
static float wasgo_AnimationTreePlayer_oneshot_node_get_fadein_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->oneshot_node_get_fadein_time(&(String *)lookup_object(arg0));
}
}
}
static float wasgo_AnimationTreePlayer_oneshot_node_get_fadeout_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->oneshot_node_get_fadeout_time(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationTreePlayer_oneshot_node_has_autorestart(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->oneshot_node_has_autorestart(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AnimationTreePlayer_oneshot_node_is_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->oneshot_node_is_active(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_set_autorestart(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_set_autorestart(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_set_autorestart_delay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_set_autorestart_delay(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_set_autorestart_random_delay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_set_autorestart_random_delay(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_set_fadein_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_set_fadein_time(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_set_fadeout_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_set_fadeout_time(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_set_filter_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_set_filter_path(&(String *)lookup_object(arg0), &(NodePath *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_start(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_start(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_oneshot_node_stop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->oneshot_node_stop(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_recompute_caches(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->recompute_caches();
}
}
}
static void wasgo_AnimationTreePlayer_remove_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->remove_node(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_reset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->reset();
}
}
}
static void wasgo_AnimationTreePlayer_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_set_animation_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_animation_process_mode(arg0);
}
}
}
static void wasgo_AnimationTreePlayer_set_base_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_base_path(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_set_master_player(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_master_player(&(NodePath *)lookup_object(arg0));
}
}
}
static float wasgo_AnimationTreePlayer_timescale_node_get_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->timescale_node_get_scale(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AnimationTreePlayer_timescale_node_set_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->timescale_node_set_scale(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_timeseek_node_seek(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->timeseek_node_seek(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_transition_node_delete_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->transition_node_delete_input(&(String *)lookup_object(arg0), arg1);
}
}
}
static int wasgo_AnimationTreePlayer_transition_node_get_current(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->transition_node_get_current(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_AnimationTreePlayer_transition_node_get_input_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->transition_node_get_input_count(&(String *)lookup_object(arg0));
}
}
}
static float wasgo_AnimationTreePlayer_transition_node_get_xfade_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
return caller->transition_node_get_xfade_time(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AnimationTreePlayer_transition_node_has_input_auto_advance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->transition_node_has_input_auto_advance(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AnimationTreePlayer_transition_node_set_current(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->transition_node_set_current(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_transition_node_set_input_auto_advance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->transition_node_set_input_auto_advance(&(String *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_AnimationTreePlayer_transition_node_set_input_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->transition_node_set_input_count(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_AnimationTreePlayer_transition_node_set_xfade_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AnimationTreePlayer *caller = (AnimationTreePlayer *) state->lookup_object(caller_id);
if(caller){
caller->transition_node_set_xfade_time(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Area__area_enter_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->_area_enter_tree(arg0);
}
}
}
static void wasgo_Area__area_exit_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->_area_exit_tree(arg0);
}
}
}
static void wasgo_Area__area_inout(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->_area_inout(arg0, &(RID *)lookup_object(arg1), arg2, arg3, arg4);
}
}
}
static void wasgo_Area__body_enter_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->_body_enter_tree(arg0);
}
}
}
static void wasgo_Area__body_exit_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->_body_exit_tree(arg0);
}
}
}
static void wasgo_Area__body_inout(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->_body_inout(arg0, &(RID *)lookup_object(arg1), arg2, arg3, arg4);
}
}
}
static float wasgo_Area_get_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_angular_damp();
}
}
}
static WasGoId wasgo_Area_get_audio_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_audio_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Area_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_Area_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Area_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_Area_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Area_get_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_gravity();
}
}
}
static float wasgo_Area_get_gravity_distance_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_gravity_distance_scale();
}
}
}
static WasGoId wasgo_Area_get_gravity_vector(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_gravity_vector();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Area_get_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_linear_damp();
}
}
}
static WasGoId wasgo_Area_get_overlapping_areas(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_overlapping_areas();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_get_overlapping_bodies(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_overlapping_bodies();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Area_get_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_priority();
}
}
}
static float wasgo_Area_get_reverb_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_reverb_amount();
}
}
}
static WasGoId wasgo_Area_get_reverb_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_reverb_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Area_get_reverb_uniformity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
return caller->get_reverb_uniformity();
}
}
}
static WasGoId wasgo_Area_get_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
enum.Area::SpaceOverride ret_value = caller->get_space_override_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_is_gravity_a_point(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_gravity_a_point();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_is_monitorable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_monitorable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_is_monitoring(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_monitoring();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_is_overriding_audio_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_overriding_audio_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_is_using_reverb_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_reverb_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_overlaps_area(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->overlaps_area(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area_overlaps_body(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->overlaps_body(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Area_set_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_damp(arg0);
}
}
}
static void wasgo_Area_set_audio_bus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_audio_bus(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Area_set_audio_bus_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_audio_bus_override(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_Area_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Area_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_Area_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Area_set_gravity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity(arg0);
}
}
}
static void wasgo_Area_set_gravity_distance_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_distance_scale(arg0);
}
}
}
static void wasgo_Area_set_gravity_is_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_is_point(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area_set_gravity_vector(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_vector(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Area_set_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_damp(arg0);
}
}
}
static void wasgo_Area_set_monitorable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_monitorable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area_set_monitoring(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_monitoring(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area_set_priority(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_priority(arg0);
}
}
}
static void wasgo_Area_set_reverb_amount(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_reverb_amount(arg0);
}
}
}
static void wasgo_Area_set_reverb_bus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_reverb_bus(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Area_set_reverb_uniformity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_reverb_uniformity(arg0);
}
}
}
static void wasgo_Area_set_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_space_override_mode(arg0);
}
}
}
static void wasgo_Area_set_use_reverb_bus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area *caller = (Area *) state->lookup_object(caller_id);
if(caller){
caller->set_use_reverb_bus(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area2D__area_enter_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->_area_enter_tree(arg0);
}
}
}
static void wasgo_Area2D__area_exit_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->_area_exit_tree(arg0);
}
}
}
static void wasgo_Area2D__area_inout(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->_area_inout(arg0, &(RID *)lookup_object(arg1), arg2, arg3, arg4);
}
}
}
static void wasgo_Area2D__body_enter_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->_body_enter_tree(arg0);
}
}
}
static void wasgo_Area2D__body_exit_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->_body_exit_tree(arg0);
}
}
}
static void wasgo_Area2D__body_inout(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->_body_inout(arg0, &(RID *)lookup_object(arg1), arg2, arg3, arg4);
}
}
}
static float wasgo_Area2D_get_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_angular_damp();
}
}
}
static WasGoId wasgo_Area2D_get_audio_bus_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_audio_bus_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Area2D_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_Area2D_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Area2D_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_Area2D_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Area2D_get_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_gravity();
}
}
}
static float wasgo_Area2D_get_gravity_distance_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_gravity_distance_scale();
}
}
}
static WasGoId wasgo_Area2D_get_gravity_vector(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_gravity_vector();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Area2D_get_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_linear_damp();
}
}
}
static WasGoId wasgo_Area2D_get_overlapping_areas(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_overlapping_areas();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area2D_get_overlapping_bodies(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_overlapping_bodies();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Area2D_get_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_priority();
}
}
}
static WasGoId wasgo_Area2D_get_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
enum.Area2D::SpaceOverride ret_value = caller->get_space_override_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area2D_is_gravity_a_point(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_gravity_a_point();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area2D_is_monitorable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_monitorable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area2D_is_monitoring(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_monitoring();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area2D_is_overriding_audio_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_overriding_audio_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area2D_overlaps_area(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->overlaps_area(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Area2D_overlaps_body(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->overlaps_body(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Area2D_set_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_damp(arg0);
}
}
}
static void wasgo_Area2D_set_audio_bus_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_audio_bus_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Area2D_set_audio_bus_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_audio_bus_override(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area2D_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_Area2D_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Area2D_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_Area2D_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Area2D_set_gravity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity(arg0);
}
}
}
static void wasgo_Area2D_set_gravity_distance_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_distance_scale(arg0);
}
}
}
static void wasgo_Area2D_set_gravity_is_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_is_point(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area2D_set_gravity_vector(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_vector(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Area2D_set_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_damp(arg0);
}
}
}
static void wasgo_Area2D_set_monitorable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_monitorable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area2D_set_monitoring(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_monitoring(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Area2D_set_priority(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_priority(arg0);
}
}
}
static void wasgo_Area2D_set_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Area2D *caller = (Area2D *) state->lookup_object(caller_id);
if(caller){
caller->set_space_override_mode(arg0);
}
}
}
static void wasgo_ArrayMesh_add_blend_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->add_blend_shape(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ArrayMesh_add_surface_from_arrays(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->add_surface_from_arrays(arg0, &(Array *)lookup_array(arg1), &(Array *)lookup_array(arg2), arg3);
}
}
}
static void wasgo_ArrayMesh_clear_blend_shapes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->clear_blend_shapes();
}
}
}
static int wasgo_ArrayMesh_get_blend_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_blend_shape_count();
}
}
}
static WasGoId wasgo_ArrayMesh_get_blend_shape_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
enum.Mesh::BlendShapeMode ret_value = caller->get_blend_shape_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ArrayMesh_get_blend_shape_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_blend_shape_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ArrayMesh_get_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_custom_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ArrayMesh_lightmap_unwrap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->lightmap_unwrap(&(Transform *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ArrayMesh_regen_normalmaps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->regen_normalmaps();
}
}
}
static void wasgo_ArrayMesh_set_blend_shape_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_shape_mode(arg0);
}
}
}
static void wasgo_ArrayMesh_set_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_aabb(&(AABB *)lookup_object(arg0));
}
}
}
static int wasgo_ArrayMesh_surface_find_by_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
return caller->surface_find_by_name(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_ArrayMesh_surface_get_array_index_len(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
return caller->surface_get_array_index_len(arg0);
}
}
}
static int wasgo_ArrayMesh_surface_get_array_len(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
return caller->surface_get_array_len(arg0);
}
}
}
static int wasgo_ArrayMesh_surface_get_format(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
return caller->surface_get_format(arg0);
}
}
}
static WasGoId wasgo_ArrayMesh_surface_get_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->surface_get_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ArrayMesh_surface_get_primitive_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
enum.Mesh::PrimitiveType ret_value = caller->surface_get_primitive_type(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ArrayMesh_surface_remove(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->surface_remove(arg0);
}
}
}
static void wasgo_ArrayMesh_surface_set_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->surface_set_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_ArrayMesh_surface_update_region(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ArrayMesh *caller = (ArrayMesh *) state->lookup_object(caller_id);
if(caller){
caller->surface_update_region(arg0, arg1, &(PoolByteArray *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_AtlasTexture_get_atlas(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_atlas();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AtlasTexture_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_margin();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AtlasTexture_get_region(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_region();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AtlasTexture_has_filter_clip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_filter_clip();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AtlasTexture_set_atlas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_atlas(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_AtlasTexture_set_filter_clip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_filter_clip(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AtlasTexture_set_margin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_margin(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_AtlasTexture_set_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AtlasTexture *caller = (AtlasTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_region(&(Rect2 *)lookup_object(arg0));
}
}
}
static float wasgo_AudioEffectAmplify_get_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectAmplify *caller = (AudioEffectAmplify *) state->lookup_object(caller_id);
if(caller){
return caller->get_volume_db();
}
}
}
static void wasgo_AudioEffectAmplify_set_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectAmplify *caller = (AudioEffectAmplify *) state->lookup_object(caller_id);
if(caller){
caller->set_volume_db(arg0);
}
}
}
static float wasgo_AudioEffectChorus_get_dry(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_dry();
}
}
}
static int wasgo_AudioEffectChorus_get_voice_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_voice_count();
}
}
}
static float wasgo_AudioEffectChorus_get_voice_cutoff_hz(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_voice_cutoff_hz(arg0);
}
}
}
static float wasgo_AudioEffectChorus_get_voice_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_voice_delay_ms(arg0);
}
}
}
static float wasgo_AudioEffectChorus_get_voice_depth_ms(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_voice_depth_ms(arg0);
}
}
}
static float wasgo_AudioEffectChorus_get_voice_level_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_voice_level_db(arg0);
}
}
}
static float wasgo_AudioEffectChorus_get_voice_pan(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_voice_pan(arg0);
}
}
}
static float wasgo_AudioEffectChorus_get_voice_rate_hz(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_voice_rate_hz(arg0);
}
}
}
static float wasgo_AudioEffectChorus_get_wet(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_wet();
}
}
}
static void wasgo_AudioEffectChorus_set_dry(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_dry(arg0);
}
}
}
static void wasgo_AudioEffectChorus_set_voice_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_voice_count(arg0);
}
}
}
static void wasgo_AudioEffectChorus_set_voice_cutoff_hz(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_voice_cutoff_hz(arg0, arg1);
}
}
}
static void wasgo_AudioEffectChorus_set_voice_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_voice_delay_ms(arg0, arg1);
}
}
}
static void wasgo_AudioEffectChorus_set_voice_depth_ms(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_voice_depth_ms(arg0, arg1);
}
}
}
static void wasgo_AudioEffectChorus_set_voice_level_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_voice_level_db(arg0, arg1);
}
}
}
static void wasgo_AudioEffectChorus_set_voice_pan(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_voice_pan(arg0, arg1);
}
}
}
static void wasgo_AudioEffectChorus_set_voice_rate_hz(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_voice_rate_hz(arg0, arg1);
}
}
}
static void wasgo_AudioEffectChorus_set_wet(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectChorus *caller = (AudioEffectChorus *) state->lookup_object(caller_id);
if(caller){
caller->set_wet(arg0);
}
}
}
static float wasgo_AudioEffectCompressor_get_attack_us(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
return caller->get_attack_us();
}
}
}
static float wasgo_AudioEffectCompressor_get_gain(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
return caller->get_gain();
}
}
}
static float wasgo_AudioEffectCompressor_get_mix(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
return caller->get_mix();
}
}
}
static float wasgo_AudioEffectCompressor_get_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
return caller->get_ratio();
}
}
}
static float wasgo_AudioEffectCompressor_get_release_ms(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
return caller->get_release_ms();
}
}
}
static WasGoId wasgo_AudioEffectCompressor_get_sidechain(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_sidechain();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioEffectCompressor_get_threshold(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
return caller->get_threshold();
}
}
}
static void wasgo_AudioEffectCompressor_set_attack_us(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
caller->set_attack_us(arg0);
}
}
}
static void wasgo_AudioEffectCompressor_set_gain(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
caller->set_gain(arg0);
}
}
}
static void wasgo_AudioEffectCompressor_set_mix(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
caller->set_mix(arg0);
}
}
}
static void wasgo_AudioEffectCompressor_set_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
caller->set_ratio(arg0);
}
}
}
static void wasgo_AudioEffectCompressor_set_release_ms(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
caller->set_release_ms(arg0);
}
}
}
static void wasgo_AudioEffectCompressor_set_sidechain(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
caller->set_sidechain(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AudioEffectCompressor_set_threshold(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectCompressor *caller = (AudioEffectCompressor *) state->lookup_object(caller_id);
if(caller){
caller->set_threshold(arg0);
}
}
}
static float wasgo_AudioEffectDelay_get_dry(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_dry();
}
}
}
static float wasgo_AudioEffectDelay_get_feedback_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_feedback_delay_ms();
}
}
}
static float wasgo_AudioEffectDelay_get_feedback_level_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_feedback_level_db();
}
}
}
static float wasgo_AudioEffectDelay_get_feedback_lowpass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_feedback_lowpass();
}
}
}
static float wasgo_AudioEffectDelay_get_tap1_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_tap1_delay_ms();
}
}
}
static float wasgo_AudioEffectDelay_get_tap1_level_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_tap1_level_db();
}
}
}
static float wasgo_AudioEffectDelay_get_tap1_pan(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_tap1_pan();
}
}
}
static float wasgo_AudioEffectDelay_get_tap2_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_tap2_delay_ms();
}
}
}
static float wasgo_AudioEffectDelay_get_tap2_level_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_tap2_level_db();
}
}
}
static float wasgo_AudioEffectDelay_get_tap2_pan(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
return caller->get_tap2_pan();
}
}
}
static WasGoId wasgo_AudioEffectDelay_is_feedback_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_feedback_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioEffectDelay_is_tap1_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_tap1_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioEffectDelay_is_tap2_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_tap2_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioEffectDelay_set_dry(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_dry(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_feedback_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_feedback_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioEffectDelay_set_feedback_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_feedback_delay_ms(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_feedback_level_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_feedback_level_db(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_feedback_lowpass(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_feedback_lowpass(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_tap1_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap1_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioEffectDelay_set_tap1_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap1_delay_ms(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_tap1_level_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap1_level_db(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_tap1_pan(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap1_pan(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_tap2_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap2_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioEffectDelay_set_tap2_delay_ms(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap2_delay_ms(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_tap2_level_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap2_level_db(arg0);
}
}
}
static void wasgo_AudioEffectDelay_set_tap2_pan(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDelay *caller = (AudioEffectDelay *) state->lookup_object(caller_id);
if(caller){
caller->set_tap2_pan(arg0);
}
}
}
static float wasgo_AudioEffectDistortion_get_drive(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
return caller->get_drive();
}
}
}
static float wasgo_AudioEffectDistortion_get_keep_hf_hz(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
return caller->get_keep_hf_hz();
}
}
}
static WasGoId wasgo_AudioEffectDistortion_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
enum.AudioEffectDistortion::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioEffectDistortion_get_post_gain(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
return caller->get_post_gain();
}
}
}
static float wasgo_AudioEffectDistortion_get_pre_gain(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
return caller->get_pre_gain();
}
}
}
static void wasgo_AudioEffectDistortion_set_drive(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
caller->set_drive(arg0);
}
}
}
static void wasgo_AudioEffectDistortion_set_keep_hf_hz(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
caller->set_keep_hf_hz(arg0);
}
}
}
static void wasgo_AudioEffectDistortion_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_AudioEffectDistortion_set_post_gain(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
caller->set_post_gain(arg0);
}
}
}
static void wasgo_AudioEffectDistortion_set_pre_gain(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectDistortion *caller = (AudioEffectDistortion *) state->lookup_object(caller_id);
if(caller){
caller->set_pre_gain(arg0);
}
}
}
static int wasgo_AudioEffectEQ_get_band_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectEQ *caller = (AudioEffectEQ *) state->lookup_object(caller_id);
if(caller){
return caller->get_band_count();
}
}
}
static float wasgo_AudioEffectEQ_get_band_gain_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectEQ *caller = (AudioEffectEQ *) state->lookup_object(caller_id);
if(caller){
return caller->get_band_gain_db(arg0);
}
}
}
static void wasgo_AudioEffectEQ_set_band_gain_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectEQ *caller = (AudioEffectEQ *) state->lookup_object(caller_id);
if(caller){
caller->set_band_gain_db(arg0, arg1);
}
}
}
static float wasgo_AudioEffectFilter_get_cutoff(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
return caller->get_cutoff();
}
}
}
static WasGoId wasgo_AudioEffectFilter_get_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
enum.AudioEffectFilter::FilterDB ret_value = caller->get_db();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioEffectFilter_get_gain(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
return caller->get_gain();
}
}
}
static float wasgo_AudioEffectFilter_get_resonance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
return caller->get_resonance();
}
}
}
static void wasgo_AudioEffectFilter_set_cutoff(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
caller->set_cutoff(arg0);
}
}
}
static void wasgo_AudioEffectFilter_set_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
caller->set_db(arg0);
}
}
}
static void wasgo_AudioEffectFilter_set_gain(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
caller->set_gain(arg0);
}
}
}
static void wasgo_AudioEffectFilter_set_resonance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectFilter *caller = (AudioEffectFilter *) state->lookup_object(caller_id);
if(caller){
caller->set_resonance(arg0);
}
}
}
static float wasgo_AudioEffectLimiter_get_ceiling_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
return caller->get_ceiling_db();
}
}
}
static float wasgo_AudioEffectLimiter_get_soft_clip_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
return caller->get_soft_clip_db();
}
}
}
static float wasgo_AudioEffectLimiter_get_soft_clip_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
return caller->get_soft_clip_ratio();
}
}
}
static float wasgo_AudioEffectLimiter_get_threshold_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
return caller->get_threshold_db();
}
}
}
static void wasgo_AudioEffectLimiter_set_ceiling_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
caller->set_ceiling_db(arg0);
}
}
}
static void wasgo_AudioEffectLimiter_set_soft_clip_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
caller->set_soft_clip_db(arg0);
}
}
}
static void wasgo_AudioEffectLimiter_set_soft_clip_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
caller->set_soft_clip_ratio(arg0);
}
}
}
static void wasgo_AudioEffectLimiter_set_threshold_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectLimiter *caller = (AudioEffectLimiter *) state->lookup_object(caller_id);
if(caller){
caller->set_threshold_db(arg0);
}
}
}
static float wasgo_AudioEffectPanner_get_pan(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPanner *caller = (AudioEffectPanner *) state->lookup_object(caller_id);
if(caller){
return caller->get_pan();
}
}
}
static void wasgo_AudioEffectPanner_set_pan(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPanner *caller = (AudioEffectPanner *) state->lookup_object(caller_id);
if(caller){
caller->set_pan(arg0);
}
}
}
static float wasgo_AudioEffectPhaser_get_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth();
}
}
}
static float wasgo_AudioEffectPhaser_get_feedback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
return caller->get_feedback();
}
}
}
static float wasgo_AudioEffectPhaser_get_range_max_hz(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
return caller->get_range_max_hz();
}
}
}
static float wasgo_AudioEffectPhaser_get_range_min_hz(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
return caller->get_range_min_hz();
}
}
}
static float wasgo_AudioEffectPhaser_get_rate_hz(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
return caller->get_rate_hz();
}
}
}
static void wasgo_AudioEffectPhaser_set_depth(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
caller->set_depth(arg0);
}
}
}
static void wasgo_AudioEffectPhaser_set_feedback(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
caller->set_feedback(arg0);
}
}
}
static void wasgo_AudioEffectPhaser_set_range_max_hz(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
caller->set_range_max_hz(arg0);
}
}
}
static void wasgo_AudioEffectPhaser_set_range_min_hz(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
caller->set_range_min_hz(arg0);
}
}
}
static void wasgo_AudioEffectPhaser_set_rate_hz(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPhaser *caller = (AudioEffectPhaser *) state->lookup_object(caller_id);
if(caller){
caller->set_rate_hz(arg0);
}
}
}
static WasGoId wasgo_AudioEffectPitchShift_get_fft_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPitchShift *caller = (AudioEffectPitchShift *) state->lookup_object(caller_id);
if(caller){
enum.AudioEffectPitchShift::FFT_Size ret_value = caller->get_fft_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AudioEffectPitchShift_get_oversampling(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPitchShift *caller = (AudioEffectPitchShift *) state->lookup_object(caller_id);
if(caller){
return caller->get_oversampling();
}
}
}
static float wasgo_AudioEffectPitchShift_get_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPitchShift *caller = (AudioEffectPitchShift *) state->lookup_object(caller_id);
if(caller){
return caller->get_pitch_scale();
}
}
}
static void wasgo_AudioEffectPitchShift_set_fft_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPitchShift *caller = (AudioEffectPitchShift *) state->lookup_object(caller_id);
if(caller){
caller->set_fft_size(arg0);
}
}
}
static void wasgo_AudioEffectPitchShift_set_oversampling(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPitchShift *caller = (AudioEffectPitchShift *) state->lookup_object(caller_id);
if(caller){
caller->set_oversampling(arg0);
}
}
}
static void wasgo_AudioEffectPitchShift_set_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectPitchShift *caller = (AudioEffectPitchShift *) state->lookup_object(caller_id);
if(caller){
caller->set_pitch_scale(arg0);
}
}
}
static WasGoId wasgo_AudioEffectRecord_get_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectRecord *caller = (AudioEffectRecord *) state->lookup_object(caller_id);
if(caller){
enum.AudioStreamSample::Format ret_value = caller->get_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioEffectRecord_get_recording(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectRecord *caller = (AudioEffectRecord *) state->lookup_object(caller_id);
if(caller){
AudioStreamSample ret_value = caller->get_recording();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioEffectRecord_is_recording_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectRecord *caller = (AudioEffectRecord *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_recording_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioEffectRecord_set_format(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectRecord *caller = (AudioEffectRecord *) state->lookup_object(caller_id);
if(caller){
caller->set_format(arg0);
}
}
}
static void wasgo_AudioEffectRecord_set_recording_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectRecord *caller = (AudioEffectRecord *) state->lookup_object(caller_id);
if(caller){
caller->set_recording_active(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_AudioEffectReverb_get_damping(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_damping();
}
}
}
static float wasgo_AudioEffectReverb_get_dry(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_dry();
}
}
}
static float wasgo_AudioEffectReverb_get_hpf(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_hpf();
}
}
}
static float wasgo_AudioEffectReverb_get_predelay_feedback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_predelay_feedback();
}
}
}
static float wasgo_AudioEffectReverb_get_predelay_msec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_predelay_msec();
}
}
}
static float wasgo_AudioEffectReverb_get_room_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_room_size();
}
}
}
static float wasgo_AudioEffectReverb_get_spread(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_spread();
}
}
}
static float wasgo_AudioEffectReverb_get_wet(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
return caller->get_wet();
}
}
}
static void wasgo_AudioEffectReverb_set_damping(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_damping(arg0);
}
}
}
static void wasgo_AudioEffectReverb_set_dry(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_dry(arg0);
}
}
}
static void wasgo_AudioEffectReverb_set_hpf(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_hpf(arg0);
}
}
}
static void wasgo_AudioEffectReverb_set_predelay_feedback(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_predelay_feedback(arg0);
}
}
}
static void wasgo_AudioEffectReverb_set_predelay_msec(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_predelay_msec(arg0);
}
}
}
static void wasgo_AudioEffectReverb_set_room_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_room_size(arg0);
}
}
}
static void wasgo_AudioEffectReverb_set_spread(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_spread(arg0);
}
}
}
static void wasgo_AudioEffectReverb_set_wet(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectReverb *caller = (AudioEffectReverb *) state->lookup_object(caller_id);
if(caller){
caller->set_wet(arg0);
}
}
}
static float wasgo_AudioEffectSpectrumAnalyzer_get_buffer_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectSpectrumAnalyzer *caller = (AudioEffectSpectrumAnalyzer *) state->lookup_object(caller_id);
if(caller){
return caller->get_buffer_length();
}
}
}
static WasGoId wasgo_AudioEffectSpectrumAnalyzer_get_fft_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectSpectrumAnalyzer *caller = (AudioEffectSpectrumAnalyzer *) state->lookup_object(caller_id);
if(caller){
enum.AudioEffectSpectrumAnalyzer::FFT_Size ret_value = caller->get_fft_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioEffectSpectrumAnalyzer_get_tap_back_pos(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectSpectrumAnalyzer *caller = (AudioEffectSpectrumAnalyzer *) state->lookup_object(caller_id);
if(caller){
return caller->get_tap_back_pos();
}
}
}
static void wasgo_AudioEffectSpectrumAnalyzer_set_buffer_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectSpectrumAnalyzer *caller = (AudioEffectSpectrumAnalyzer *) state->lookup_object(caller_id);
if(caller){
caller->set_buffer_length(arg0);
}
}
}
static void wasgo_AudioEffectSpectrumAnalyzer_set_fft_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectSpectrumAnalyzer *caller = (AudioEffectSpectrumAnalyzer *) state->lookup_object(caller_id);
if(caller){
caller->set_fft_size(arg0);
}
}
}
static void wasgo_AudioEffectSpectrumAnalyzer_set_tap_back_pos(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectSpectrumAnalyzer *caller = (AudioEffectSpectrumAnalyzer *) state->lookup_object(caller_id);
if(caller){
caller->set_tap_back_pos(arg0);
}
}
}
static WasGoId wasgo_AudioEffectSpectrumAnalyzerInstance_get_magnitude_for_frequency_range(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectSpectrumAnalyzerInstance *caller = (AudioEffectSpectrumAnalyzerInstance *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_magnitude_for_frequency_range(arg0, arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioEffectStereoEnhance_get_pan_pullout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectStereoEnhance *caller = (AudioEffectStereoEnhance *) state->lookup_object(caller_id);
if(caller){
return caller->get_pan_pullout();
}
}
}
static float wasgo_AudioEffectStereoEnhance_get_surround(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectStereoEnhance *caller = (AudioEffectStereoEnhance *) state->lookup_object(caller_id);
if(caller){
return caller->get_surround();
}
}
}
static float wasgo_AudioEffectStereoEnhance_get_time_pullout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectStereoEnhance *caller = (AudioEffectStereoEnhance *) state->lookup_object(caller_id);
if(caller){
return caller->get_time_pullout();
}
}
}
static void wasgo_AudioEffectStereoEnhance_set_pan_pullout(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectStereoEnhance *caller = (AudioEffectStereoEnhance *) state->lookup_object(caller_id);
if(caller){
caller->set_pan_pullout(arg0);
}
}
}
static void wasgo_AudioEffectStereoEnhance_set_surround(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectStereoEnhance *caller = (AudioEffectStereoEnhance *) state->lookup_object(caller_id);
if(caller){
caller->set_surround(arg0);
}
}
}
static void wasgo_AudioEffectStereoEnhance_set_time_pullout(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioEffectStereoEnhance *caller = (AudioEffectStereoEnhance *) state->lookup_object(caller_id);
if(caller){
caller->set_time_pullout(arg0);
}
}
}
static void wasgo_AudioServer_add_bus(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->add_bus(arg0);
}
}
}
static void wasgo_AudioServer_add_bus_effect(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->add_bus_effect(arg0, &(AudioEffect *)lookup_object(arg1), arg2);
}
}
}
static WasGoId wasgo_AudioServer_capture_get_device(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->capture_get_device();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioServer_capture_get_device_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->capture_get_device_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioServer_capture_set_device(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->capture_set_device(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AudioServer_generate_bus_layout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
AudioBusLayout ret_value = caller->generate_bus_layout();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AudioServer_get_bus_channels(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_bus_channels(arg0);
}
}
}
static int wasgo_AudioServer_get_bus_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_bus_count();
}
}
}
static WasGoId wasgo_AudioServer_get_bus_effect(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
AudioEffect ret_value = caller->get_bus_effect(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AudioServer_get_bus_effect_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_bus_effect_count(arg0);
}
}
}
static WasGoId wasgo_AudioServer_get_bus_effect_instance(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
AudioEffectInstance ret_value = caller->get_bus_effect_instance(arg0, arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AudioServer_get_bus_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_bus_index(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AudioServer_get_bus_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bus_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioServer_get_bus_peak_volume_left_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_bus_peak_volume_left_db(arg0, arg1);
}
}
}
static float wasgo_AudioServer_get_bus_peak_volume_right_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_bus_peak_volume_right_db(arg0, arg1);
}
}
}
static WasGoId wasgo_AudioServer_get_bus_send(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bus_send(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioServer_get_bus_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_bus_volume_db(arg0);
}
}
}
static WasGoId wasgo_AudioServer_get_device(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_device();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioServer_get_device_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_device_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioServer_get_global_rate_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_global_rate_scale();
}
}
}
static float wasgo_AudioServer_get_mix_rate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_mix_rate();
}
}
}
static float wasgo_AudioServer_get_output_latency(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_output_latency();
}
}
}
static WasGoId wasgo_AudioServer_get_speaker_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
enum.AudioServer::SpeakerMode ret_value = caller->get_speaker_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioServer_get_time_since_last_mix(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_time_since_last_mix();
}
}
}
static float wasgo_AudioServer_get_time_to_next_mix(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_time_to_next_mix();
}
}
}
static WasGoId wasgo_AudioServer_is_bus_bypassing_effects(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_bus_bypassing_effects(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioServer_is_bus_effect_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_bus_effect_enabled(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioServer_is_bus_mute(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_bus_mute(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioServer_is_bus_solo(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_bus_solo(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioServer_lock(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->lock();
}
}
}
static void wasgo_AudioServer_move_bus(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->move_bus(arg0, arg1);
}
}
}
static void wasgo_AudioServer_remove_bus(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->remove_bus(arg0);
}
}
}
static void wasgo_AudioServer_remove_bus_effect(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->remove_bus_effect(arg0, arg1);
}
}
}
static void wasgo_AudioServer_set_bus_bypass_effects(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_bypass_effects(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AudioServer_set_bus_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_count(arg0);
}
}
}
static void wasgo_AudioServer_set_bus_effect_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_effect_enabled(arg0, arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_AudioServer_set_bus_layout(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_layout(&(AudioBusLayout *)lookup_object(arg0));
}
}
}
static void wasgo_AudioServer_set_bus_mute(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_mute(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AudioServer_set_bus_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AudioServer_set_bus_send(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_send(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_AudioServer_set_bus_solo(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_solo(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_AudioServer_set_bus_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus_volume_db(arg0, arg1);
}
}
}
static void wasgo_AudioServer_set_device(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_device(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AudioServer_set_global_rate_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->set_global_rate_scale(arg0);
}
}
}
static void wasgo_AudioServer_swap_bus_effects(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->swap_bus_effects(arg0, arg1, arg2);
}
}
}
static void wasgo_AudioServer_unlock(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioServer *caller = (AudioServer *) state->lookup_object(caller_id);
if(caller){
caller->unlock();
}
}
}
static float wasgo_AudioStream_get_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStream *caller = (AudioStream *) state->lookup_object(caller_id);
if(caller){
return caller->get_length();
}
}
}
static float wasgo_AudioStreamGenerator_get_buffer_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGenerator *caller = (AudioStreamGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->get_buffer_length();
}
}
}
static float wasgo_AudioStreamGenerator_get_mix_rate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGenerator *caller = (AudioStreamGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->get_mix_rate();
}
}
}
static void wasgo_AudioStreamGenerator_set_buffer_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGenerator *caller = (AudioStreamGenerator *) state->lookup_object(caller_id);
if(caller){
caller->set_buffer_length(arg0);
}
}
}
static void wasgo_AudioStreamGenerator_set_mix_rate(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGenerator *caller = (AudioStreamGenerator *) state->lookup_object(caller_id);
if(caller){
caller->set_mix_rate(arg0);
}
}
}
static WasGoId wasgo_AudioStreamGeneratorPlayback_can_push_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGeneratorPlayback *caller = (AudioStreamGeneratorPlayback *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_push_buffer(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamGeneratorPlayback_clear_buffer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGeneratorPlayback *caller = (AudioStreamGeneratorPlayback *) state->lookup_object(caller_id);
if(caller){
caller->clear_buffer();
}
}
}
static int wasgo_AudioStreamGeneratorPlayback_get_frames_available(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGeneratorPlayback *caller = (AudioStreamGeneratorPlayback *) state->lookup_object(caller_id);
if(caller){
return caller->get_frames_available();
}
}
}
static int wasgo_AudioStreamGeneratorPlayback_get_skips(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGeneratorPlayback *caller = (AudioStreamGeneratorPlayback *) state->lookup_object(caller_id);
if(caller){
return caller->get_skips();
}
}
}
static WasGoId wasgo_AudioStreamGeneratorPlayback_push_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGeneratorPlayback *caller = (AudioStreamGeneratorPlayback *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->push_buffer(&(PoolVector2Array *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamGeneratorPlayback_push_frame(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamGeneratorPlayback *caller = (AudioStreamGeneratorPlayback *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->push_frame(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamOGGVorbis_get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamOGGVorbis *caller = (AudioStreamOGGVorbis *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamOGGVorbis_get_loop_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamOGGVorbis *caller = (AudioStreamOGGVorbis *) state->lookup_object(caller_id);
if(caller){
return caller->get_loop_offset();
}
}
}
static WasGoId wasgo_AudioStreamOGGVorbis_has_loop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamOGGVorbis *caller = (AudioStreamOGGVorbis *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_loop();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamOGGVorbis_set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamOGGVorbis *caller = (AudioStreamOGGVorbis *) state->lookup_object(caller_id);
if(caller){
caller->set_data(&(PoolByteArray *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamOGGVorbis_set_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamOGGVorbis *caller = (AudioStreamOGGVorbis *) state->lookup_object(caller_id);
if(caller){
caller->set_loop(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamOGGVorbis_set_loop_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamOGGVorbis *caller = (AudioStreamOGGVorbis *) state->lookup_object(caller_id);
if(caller){
caller->set_loop_offset(arg0);
}
}
}
static void wasgo_AudioStreamPlayer__bus_layout_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->_bus_layout_changed();
}
}
}
static WasGoId wasgo_AudioStreamPlayer__is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamPlayer__set_playing(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->_set_playing(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_AudioStreamPlayer_get_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer_get_mix_target(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
enum.AudioStreamPlayer::MixTarget ret_value = caller->get_mix_target();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamPlayer_get_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_pitch_scale();
}
}
}
static float wasgo_AudioStreamPlayer_get_playback_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_playback_position();
}
}
}
static WasGoId wasgo_AudioStreamPlayer_get_stream(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
AudioStream ret_value = caller->get_stream();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer_get_stream_paused(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_stream_paused();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer_get_stream_playback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
AudioStreamPlayback ret_value = caller->get_stream_playback();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamPlayer_get_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_volume_db();
}
}
}
static WasGoId wasgo_AudioStreamPlayer_is_autoplay_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_autoplay_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamPlayer_play(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->play(arg0);
}
}
}
static void wasgo_AudioStreamPlayer_seek(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->seek(arg0);
}
}
}
static void wasgo_AudioStreamPlayer_set_autoplay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_autoplay(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer_set_bus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer_set_mix_target(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_mix_target(arg0);
}
}
}
static void wasgo_AudioStreamPlayer_set_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_pitch_scale(arg0);
}
}
}
static void wasgo_AudioStreamPlayer_set_stream(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_stream(&(AudioStream *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer_set_stream_paused(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_stream_paused(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer_set_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_volume_db(arg0);
}
}
}
static void wasgo_AudioStreamPlayer_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer *caller = (AudioStreamPlayer *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static void wasgo_AudioStreamPlayer2D__bus_layout_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->_bus_layout_changed();
}
}
}
static WasGoId wasgo_AudioStreamPlayer2D__is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamPlayer2D__set_playing(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_playing(&(bool *)lookup_object(arg0));
}
}
}
static int wasgo_AudioStreamPlayer2D_get_area_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_area_mask();
}
}
}
static float wasgo_AudioStreamPlayer2D_get_attenuation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_attenuation();
}
}
}
static WasGoId wasgo_AudioStreamPlayer2D_get_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamPlayer2D_get_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_distance();
}
}
}
static float wasgo_AudioStreamPlayer2D_get_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_pitch_scale();
}
}
}
static float wasgo_AudioStreamPlayer2D_get_playback_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_playback_position();
}
}
}
static WasGoId wasgo_AudioStreamPlayer2D_get_stream(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
AudioStream ret_value = caller->get_stream();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer2D_get_stream_paused(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_stream_paused();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer2D_get_stream_playback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
AudioStreamPlayback ret_value = caller->get_stream_playback();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamPlayer2D_get_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_volume_db();
}
}
}
static WasGoId wasgo_AudioStreamPlayer2D_is_autoplay_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_autoplay_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer2D_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamPlayer2D_play(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->play(arg0);
}
}
}
static void wasgo_AudioStreamPlayer2D_seek(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->seek(arg0);
}
}
}
static void wasgo_AudioStreamPlayer2D_set_area_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_area_mask(arg0);
}
}
}
static void wasgo_AudioStreamPlayer2D_set_attenuation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_attenuation(arg0);
}
}
}
static void wasgo_AudioStreamPlayer2D_set_autoplay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_autoplay(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer2D_set_bus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_bus(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer2D_set_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_max_distance(arg0);
}
}
}
static void wasgo_AudioStreamPlayer2D_set_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_pitch_scale(arg0);
}
}
}
static void wasgo_AudioStreamPlayer2D_set_stream(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_stream(&(AudioStream *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer2D_set_stream_paused(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_stream_paused(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer2D_set_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->set_volume_db(arg0);
}
}
}
static void wasgo_AudioStreamPlayer2D_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer2D *caller = (AudioStreamPlayer2D *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static void wasgo_AudioStreamPlayer3D__bus_layout_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->_bus_layout_changed();
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D__is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamPlayer3D__set_playing(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->_set_playing(&(bool *)lookup_object(arg0));
}
}
}
static int wasgo_AudioStreamPlayer3D_get_area_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_area_mask();
}
}
}
static float wasgo_AudioStreamPlayer3D_get_attenuation_filter_cutoff_hz(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_attenuation_filter_cutoff_hz();
}
}
}
static float wasgo_AudioStreamPlayer3D_get_attenuation_filter_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_attenuation_filter_db();
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_get_attenuation_model(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
enum.AudioStreamPlayer3D::AttenuationModel ret_value = caller->get_attenuation_model();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_get_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_get_doppler_tracking(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
enum.AudioStreamPlayer3D::DopplerTracking ret_value = caller->get_doppler_tracking();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamPlayer3D_get_emission_angle(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_emission_angle();
}
}
}
static float wasgo_AudioStreamPlayer3D_get_emission_angle_filter_attenuation_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_emission_angle_filter_attenuation_db();
}
}
}
static float wasgo_AudioStreamPlayer3D_get_max_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_db();
}
}
}
static float wasgo_AudioStreamPlayer3D_get_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_distance();
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_get_out_of_range_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
enum.AudioStreamPlayer3D::OutOfRangeMode ret_value = caller->get_out_of_range_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamPlayer3D_get_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_pitch_scale();
}
}
}
static float wasgo_AudioStreamPlayer3D_get_playback_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_playback_position();
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_get_stream(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
AudioStream ret_value = caller->get_stream();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_get_stream_paused(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_stream_paused();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_get_stream_playback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
AudioStreamPlayback ret_value = caller->get_stream_playback();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamPlayer3D_get_unit_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_unit_db();
}
}
}
static float wasgo_AudioStreamPlayer3D_get_unit_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_unit_size();
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_is_autoplay_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_autoplay_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_is_emission_angle_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_emission_angle_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamPlayer3D_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamPlayer3D_play(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->play(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_seek(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->seek(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_area_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_area_mask(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_attenuation_filter_cutoff_hz(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_attenuation_filter_cutoff_hz(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_attenuation_filter_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_attenuation_filter_db(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_attenuation_model(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_attenuation_model(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_autoplay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_autoplay(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer3D_set_bus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_bus(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer3D_set_doppler_tracking(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_doppler_tracking(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_emission_angle(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_angle(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_emission_angle_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_angle_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer3D_set_emission_angle_filter_attenuation_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_angle_filter_attenuation_db(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_max_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_max_db(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_max_distance(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_out_of_range_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_out_of_range_mode(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_pitch_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_pitch_scale(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_stream(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_stream(&(AudioStream *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer3D_set_stream_paused(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_stream_paused(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamPlayer3D_set_unit_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_unit_db(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_set_unit_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->set_unit_size(arg0);
}
}
}
static void wasgo_AudioStreamPlayer3D_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamPlayer3D *caller = (AudioStreamPlayer3D *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static WasGoId wasgo_AudioStreamRandomPitch_get_audio_stream(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamRandomPitch *caller = (AudioStreamRandomPitch *) state->lookup_object(caller_id);
if(caller){
AudioStream ret_value = caller->get_audio_stream();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_AudioStreamRandomPitch_get_random_pitch(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamRandomPitch *caller = (AudioStreamRandomPitch *) state->lookup_object(caller_id);
if(caller){
return caller->get_random_pitch();
}
}
}
static void wasgo_AudioStreamRandomPitch_set_audio_stream(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamRandomPitch *caller = (AudioStreamRandomPitch *) state->lookup_object(caller_id);
if(caller){
caller->set_audio_stream(&(AudioStream *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamRandomPitch_set_random_pitch(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamRandomPitch *caller = (AudioStreamRandomPitch *) state->lookup_object(caller_id);
if(caller){
caller->set_random_pitch(arg0);
}
}
}
static WasGoId wasgo_AudioStreamSample_get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamSample_get_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
enum.AudioStreamSample::Format ret_value = caller->get_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AudioStreamSample_get_loop_begin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
return caller->get_loop_begin();
}
}
}
static int wasgo_AudioStreamSample_get_loop_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
return caller->get_loop_end();
}
}
}
static WasGoId wasgo_AudioStreamSample_get_loop_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
enum.AudioStreamSample::LoopMode ret_value = caller->get_loop_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_AudioStreamSample_get_mix_rate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
return caller->get_mix_rate();
}
}
}
static WasGoId wasgo_AudioStreamSample_is_stereo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_stereo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_AudioStreamSample_save_to_wav(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_to_wav(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_AudioStreamSample_set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
caller->set_data(&(PoolByteArray *)lookup_object(arg0));
}
}
}
static void wasgo_AudioStreamSample_set_format(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
caller->set_format(arg0);
}
}
}
static void wasgo_AudioStreamSample_set_loop_begin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
caller->set_loop_begin(arg0);
}
}
}
static void wasgo_AudioStreamSample_set_loop_end(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
caller->set_loop_end(arg0);
}
}
}
static void wasgo_AudioStreamSample_set_loop_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
caller->set_loop_mode(arg0);
}
}
}
static void wasgo_AudioStreamSample_set_mix_rate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
caller->set_mix_rate(arg0);
}
}
}
static void wasgo_AudioStreamSample_set_stereo(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
AudioStreamSample *caller = (AudioStreamSample *) state->lookup_object(caller_id);
if(caller){
caller->set_stereo(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_BackBufferCopy_get_copy_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BackBufferCopy *caller = (BackBufferCopy *) state->lookup_object(caller_id);
if(caller){
enum.BackBufferCopy::CopyMode ret_value = caller->get_copy_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BackBufferCopy_get_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BackBufferCopy *caller = (BackBufferCopy *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BackBufferCopy_set_copy_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BackBufferCopy *caller = (BackBufferCopy *) state->lookup_object(caller_id);
if(caller){
caller->set_copy_mode(arg0);
}
}
}
static void wasgo_BackBufferCopy_set_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BackBufferCopy *caller = (BackBufferCopy *) state->lookup_object(caller_id);
if(caller){
caller->set_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_BakedLightmap_bake(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
enum.BakedLightmap::BakeError ret_value = caller->bake(&(Node *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BakedLightmap_debug_bake(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->debug_bake();
}
}
}
static float wasgo_BakedLightmap_get_bake_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
return caller->get_bake_cell_size();
}
}
}
static float wasgo_BakedLightmap_get_bake_default_texels_per_unit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
return caller->get_bake_default_texels_per_unit();
}
}
}
static WasGoId wasgo_BakedLightmap_get_bake_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
enum.BakedLightmap::BakeMode ret_value = caller->get_bake_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BakedLightmap_get_bake_quality(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
enum.BakedLightmap::BakeQuality ret_value = caller->get_bake_quality();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_BakedLightmap_get_capture_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
return caller->get_capture_cell_size();
}
}
}
static float wasgo_BakedLightmap_get_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
return caller->get_energy();
}
}
}
static WasGoId wasgo_BakedLightmap_get_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BakedLightmap_get_image_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_image_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BakedLightmap_get_light_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
BakedLightmapData ret_value = caller->get_light_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_BakedLightmap_get_propagation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
return caller->get_propagation();
}
}
}
static WasGoId wasgo_BakedLightmap_is_hdr(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hdr();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BakedLightmap_set_bake_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_cell_size(arg0);
}
}
}
static void wasgo_BakedLightmap_set_bake_default_texels_per_unit(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_default_texels_per_unit(arg0);
}
}
}
static void wasgo_BakedLightmap_set_bake_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_mode(arg0);
}
}
}
static void wasgo_BakedLightmap_set_bake_quality(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_quality(arg0);
}
}
}
static void wasgo_BakedLightmap_set_capture_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_capture_cell_size(arg0);
}
}
}
static void wasgo_BakedLightmap_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_energy(arg0);
}
}
}
static void wasgo_BakedLightmap_set_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_extents(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_BakedLightmap_set_hdr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_hdr(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_BakedLightmap_set_image_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_image_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_BakedLightmap_set_light_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_light_data(&(BakedLightmapData *)lookup_object(arg0));
}
}
}
static void wasgo_BakedLightmap_set_propagation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmap *caller = (BakedLightmap *) state->lookup_object(caller_id);
if(caller){
caller->set_propagation(arg0);
}
}
}
static WasGoId wasgo_BakedLightmapData__get_user_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_user_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BakedLightmapData__set_user_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->_set_user_data(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_BakedLightmapData_add_user(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->add_user(&(NodePath *)lookup_object(arg0), &(Texture *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_BakedLightmapData_clear_users(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->clear_users();
}
}
}
static WasGoId wasgo_BakedLightmapData_get_bounds(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_bounds();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BakedLightmapData_get_cell_space_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_cell_space_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_BakedLightmapData_get_cell_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell_subdiv();
}
}
}
static float wasgo_BakedLightmapData_get_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
return caller->get_energy();
}
}
}
static WasGoId wasgo_BakedLightmapData_get_octree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_octree();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_BakedLightmapData_get_user_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
return caller->get_user_count();
}
}
}
static WasGoId wasgo_BakedLightmapData_get_user_lightmap(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_user_lightmap(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BakedLightmapData_get_user_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_user_path(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BakedLightmapData_set_bounds(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->set_bounds(&(AABB *)lookup_object(arg0));
}
}
}
static void wasgo_BakedLightmapData_set_cell_space_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_space_transform(&(Transform *)lookup_object(arg0));
}
}
}
static void wasgo_BakedLightmapData_set_cell_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_subdiv(arg0);
}
}
}
static void wasgo_BakedLightmapData_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->set_energy(arg0);
}
}
}
static void wasgo_BakedLightmapData_set_octree(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BakedLightmapData *caller = (BakedLightmapData *) state->lookup_object(caller_id);
if(caller){
caller->set_octree(&(PoolByteArray *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton__pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->_pressed();
}
}
}
static void wasgo_BaseButton__toggled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->_toggled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton__unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_BaseButton_get_action_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
enum.BaseButton::ActionMode ret_value = caller->get_action_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_get_button_group(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
ButtonGroup ret_value = caller->get_button_group();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_BaseButton_get_button_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_button_mask();
}
}
}
static WasGoId wasgo_BaseButton_get_draw_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
enum.BaseButton::DrawMode ret_value = caller->get_draw_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_get_enabled_focus_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
enum.Control::FocusMode ret_value = caller->get_enabled_focus_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_get_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
ShortCut ret_value = caller->get_shortcut();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_is_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_is_hovered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hovered();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_is_keep_pressed_outside(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_keep_pressed_outside();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_is_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_pressed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_is_shortcut_in_tooltip_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shortcut_in_tooltip_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BaseButton_is_toggle_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_toggle_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BaseButton_set_action_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_action_mode(arg0);
}
}
}
static void wasgo_BaseButton_set_button_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_button_group(&(ButtonGroup *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton_set_button_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_button_mask(arg0);
}
}
}
static void wasgo_BaseButton_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_disabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton_set_enabled_focus_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_enabled_focus_mode(arg0);
}
}
}
static void wasgo_BaseButton_set_keep_pressed_outside(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_keep_pressed_outside(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton_set_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_pressed(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton_set_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_shortcut(&(ShortCut *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton_set_shortcut_in_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_shortcut_in_tooltip(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_BaseButton_set_toggle_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BaseButton *caller = (BaseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_toggle_mode(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_BitMap__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BitMap__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_BitMap_create(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
caller->create(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_BitMap_create_from_image_alpha(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
caller->create_from_image_alpha(&(Image *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_BitMap_get_bit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_bit(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BitMap_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_BitMap_get_true_bit_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_true_bit_count();
}
}
}
static void wasgo_BitMap_grow_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
caller->grow_mask(arg0, &(Rect2 *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_BitMap_opaque_to_polygons(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->opaque_to_polygons(&(Rect2 *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BitMap_set_bit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
caller->set_bit(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_BitMap_set_bit_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitMap *caller = (BitMap *) state->lookup_object(caller_id);
if(caller){
caller->set_bit_rect(&(Rect2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_BitmapFont__get_chars(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->_get_chars();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BitmapFont__get_kernings(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->_get_kernings();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BitmapFont__get_textures(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_textures();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BitmapFont__set_chars(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->_set_chars(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_BitmapFont__set_kernings(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->_set_kernings(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_BitmapFont__set_textures(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->_set_textures(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_BitmapFont_add_char(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, WasGoID arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->add_char(arg0, arg1, &(Rect2 *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3), arg4);
}
}
}
static void wasgo_BitmapFont_add_kerning_pair(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->add_kerning_pair(arg0, arg1, arg2);
}
}
}
static void wasgo_BitmapFont_add_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->add_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_BitmapFont_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_BitmapFont_create_from_fnt(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->create_from_fnt(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BitmapFont_get_char_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_char_size(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_BitmapFont_get_fallback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
BitmapFont ret_value = caller->get_fallback();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_BitmapFont_get_kerning_pair(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
return caller->get_kerning_pair(arg0, arg1);
}
}
}
static WasGoId wasgo_BitmapFont_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_BitmapFont_get_texture_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
return caller->get_texture_count();
}
}
}
static void wasgo_BitmapFont_set_ascent(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->set_ascent(arg0);
}
}
}
static void wasgo_BitmapFont_set_distance_field_hint(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->set_distance_field_hint(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_BitmapFont_set_fallback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->set_fallback(&(BitmapFont *)lookup_object(arg0));
}
}
}
static void wasgo_BitmapFont_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BitmapFont *caller = (BitmapFont *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_Bone2D_apply_rest(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Bone2D *caller = (Bone2D *) state->lookup_object(caller_id);
if(caller){
caller->apply_rest();
}
}
}
static float wasgo_Bone2D_get_default_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Bone2D *caller = (Bone2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_default_length();
}
}
}
static int wasgo_Bone2D_get_index_in_skeleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Bone2D *caller = (Bone2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_index_in_skeleton();
}
}
}
static WasGoId wasgo_Bone2D_get_rest(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Bone2D *caller = (Bone2D *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_rest();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Bone2D_get_skeleton_rest(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Bone2D *caller = (Bone2D *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_skeleton_rest();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Bone2D_set_default_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Bone2D *caller = (Bone2D *) state->lookup_object(caller_id);
if(caller){
caller->set_default_length(arg0);
}
}
}
static void wasgo_Bone2D_set_rest(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Bone2D *caller = (Bone2D *) state->lookup_object(caller_id);
if(caller){
caller->set_rest(&(Transform2D *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_BoneAttachment_get_bone_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BoneAttachment *caller = (BoneAttachment *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bone_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BoneAttachment_set_bone_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BoneAttachment *caller = (BoneAttachment *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_BoxContainer_add_spacer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BoxContainer *caller = (BoxContainer *) state->lookup_object(caller_id);
if(caller){
caller->add_spacer(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_BoxContainer_get_alignment(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BoxContainer *caller = (BoxContainer *) state->lookup_object(caller_id);
if(caller){
enum.BoxContainer::AlignMode ret_value = caller->get_alignment();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BoxContainer_set_alignment(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BoxContainer *caller = (BoxContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_alignment(arg0);
}
}
}
static WasGoId wasgo_BoxShape_get_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BoxShape *caller = (BoxShape *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_BoxShape_set_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
BoxShape *caller = (BoxShape *) state->lookup_object(caller_id);
if(caller){
caller->set_extents(&(Vector3 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Button_get_button_icon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_button_icon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Button_get_clip_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_clip_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Button_get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Button_get_text_align(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
enum.Button::TextAlign ret_value = caller->get_text_align();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Button_is_expand_icon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_expand_icon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Button_is_flat(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flat();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Button_set_button_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
caller->set_button_icon(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Button_set_clip_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
caller->set_clip_text(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Button_set_expand_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_icon(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Button_set_flat(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
caller->set_flat(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Button_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
caller->set_text(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Button_set_text_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Button *caller = (Button *) state->lookup_object(caller_id);
if(caller){
caller->set_text_align(arg0);
}
}
}
static WasGoId wasgo_ButtonGroup_get_buttons(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ButtonGroup *caller = (ButtonGroup *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_buttons();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ButtonGroup_get_pressed_button(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ButtonGroup *caller = (ButtonGroup *) state->lookup_object(caller_id);
if(caller){
BaseButton ret_value = caller->get_pressed_button();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CPUParticles__update_render_thread(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->_update_render_thread();
}
}
}
static void wasgo_CPUParticles_convert_from_particles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->convert_from_particles(&(Node *)lookup_object(arg0));
}
}
}
static int wasgo_CPUParticles_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_amount();
}
}
}
static WasGoId wasgo_CPUParticles_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_color_ramp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
Gradient ret_value = caller->get_color_ramp();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_direction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_direction();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
enum.CPUParticles::DrawOrder ret_value = caller->get_draw_order();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_emission_box_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_emission_box_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_emission_colors(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
PoolColorArray ret_value = caller->get_emission_colors();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_emission_normals(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_emission_normals();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_emission_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_emission_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_emission_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
enum.CPUParticles::EmissionShape ret_value = caller->get_emission_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles_get_emission_sphere_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_emission_sphere_radius();
}
}
}
static float wasgo_CPUParticles_get_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_explosiveness_ratio();
}
}
}
static int wasgo_CPUParticles_get_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_fixed_fps();
}
}
}
static float wasgo_CPUParticles_get_flatness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_flatness();
}
}
}
static WasGoId wasgo_CPUParticles_get_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_fractional_delta();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_gravity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles_get_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_lifetime();
}
}
}
static float wasgo_CPUParticles_get_lifetime_randomness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_lifetime_randomness();
}
}
}
static WasGoId wasgo_CPUParticles_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_get_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_one_shot();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static WasGoId wasgo_CPUParticles_get_param_curve(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
Curve ret_value = caller->get_param_curve(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles_get_param_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_param_randomness(arg0);
}
}
}
static WasGoId wasgo_CPUParticles_get_particle_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_particle_flag(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles_get_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_pre_process_time();
}
}
}
static float wasgo_CPUParticles_get_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_randomness_ratio();
}
}
}
static float wasgo_CPUParticles_get_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed_scale();
}
}
}
static float wasgo_CPUParticles_get_spread(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
return caller->get_spread();
}
}
}
static WasGoId wasgo_CPUParticles_get_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_local_coordinates();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles_is_emitting(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_emitting();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CPUParticles_restart(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->restart();
}
}
}
static void wasgo_CPUParticles_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_amount(arg0);
}
}
}
static void wasgo_CPUParticles_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_color_ramp(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_color_ramp(&(Gradient *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_direction(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_direction(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_order(arg0);
}
}
}
static void wasgo_CPUParticles_set_emission_box_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_box_extents(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_emission_colors(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_colors(&(PoolColorArray *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_emission_normals(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_normals(&(PoolVector3Array *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_emission_points(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_points(&(PoolVector3Array *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_emission_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_shape(arg0);
}
}
}
static void wasgo_CPUParticles_set_emission_sphere_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_sphere_radius(arg0);
}
}
}
static void wasgo_CPUParticles_set_emitting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_emitting(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_explosiveness_ratio(arg0);
}
}
}
static void wasgo_CPUParticles_set_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_fixed_fps(arg0);
}
}
}
static void wasgo_CPUParticles_set_flatness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_flatness(arg0);
}
}
}
static void wasgo_CPUParticles_set_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_fractional_delta(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_gravity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_lifetime(arg0);
}
}
}
static void wasgo_CPUParticles_set_lifetime_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_lifetime_randomness(arg0);
}
}
}
static void wasgo_CPUParticles_set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_one_shot(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static void wasgo_CPUParticles_set_param_curve(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_param_curve(arg0, &(Curve *)lookup_object(arg1));
}
}
}
static void wasgo_CPUParticles_set_param_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_param_randomness(arg0, arg1);
}
}
}
static void wasgo_CPUParticles_set_particle_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_particle_flag(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_CPUParticles_set_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_pre_process_time(arg0);
}
}
}
static void wasgo_CPUParticles_set_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_randomness_ratio(arg0);
}
}
}
static void wasgo_CPUParticles_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_speed_scale(arg0);
}
}
}
static void wasgo_CPUParticles_set_spread(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_spread(arg0);
}
}
}
static void wasgo_CPUParticles_set_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles *caller = (CPUParticles *) state->lookup_object(caller_id);
if(caller){
caller->set_use_local_coordinates(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D__update_render_thread(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->_update_render_thread();
}
}
}
static void wasgo_CPUParticles2D_convert_from_particles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->convert_from_particles(&(Node *)lookup_object(arg0));
}
}
}
static int wasgo_CPUParticles2D_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_amount();
}
}
}
static WasGoId wasgo_CPUParticles2D_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_color_ramp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Gradient ret_value = caller->get_color_ramp();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_direction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_direction();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
enum.CPUParticles2D::DrawOrder ret_value = caller->get_draw_order();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_emission_colors(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
PoolColorArray ret_value = caller->get_emission_colors();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_emission_normals(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_emission_normals();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_emission_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_emission_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_emission_rect_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_emission_rect_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_emission_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
enum.CPUParticles2D::EmissionShape ret_value = caller->get_emission_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles2D_get_emission_sphere_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_emission_sphere_radius();
}
}
}
static float wasgo_CPUParticles2D_get_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_explosiveness_ratio();
}
}
}
static int wasgo_CPUParticles2D_get_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_fixed_fps();
}
}
}
static WasGoId wasgo_CPUParticles2D_get_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_fractional_delta();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_gravity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles2D_get_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_lifetime();
}
}
}
static float wasgo_CPUParticles2D_get_lifetime_randomness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_lifetime_randomness();
}
}
}
static WasGoId wasgo_CPUParticles2D_get_normalmap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_normalmap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_one_shot();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles2D_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static WasGoId wasgo_CPUParticles2D_get_param_curve(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Curve ret_value = caller->get_param_curve(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles2D_get_param_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_param_randomness(arg0);
}
}
}
static WasGoId wasgo_CPUParticles2D_get_particle_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_particle_flag(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CPUParticles2D_get_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_pre_process_time();
}
}
}
static float wasgo_CPUParticles2D_get_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_randomness_ratio();
}
}
}
static float wasgo_CPUParticles2D_get_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed_scale();
}
}
}
static float wasgo_CPUParticles2D_get_spread(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_spread();
}
}
}
static WasGoId wasgo_CPUParticles2D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_get_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_local_coordinates();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CPUParticles2D_is_emitting(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_emitting();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CPUParticles2D_restart(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->restart();
}
}
}
static void wasgo_CPUParticles2D_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_amount(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_color_ramp(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_color_ramp(&(Gradient *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_direction(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_direction(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_order(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_emission_colors(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_colors(&(PoolColorArray *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_emission_normals(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_normals(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_emission_points(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_points(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_emission_rect_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_rect_extents(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_emission_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_shape(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_emission_sphere_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_sphere_radius(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_emitting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emitting(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_explosiveness_ratio(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_fixed_fps(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_fractional_delta(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_gravity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_lifetime(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_lifetime_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_lifetime_randomness(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_normalmap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_normalmap(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_one_shot(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static void wasgo_CPUParticles2D_set_param_curve(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_param_curve(arg0, &(Curve *)lookup_object(arg1));
}
}
}
static void wasgo_CPUParticles2D_set_param_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_param_randomness(arg0, arg1);
}
}
}
static void wasgo_CPUParticles2D_set_particle_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_particle_flag(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_CPUParticles2D_set_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_pre_process_time(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_randomness_ratio(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_speed_scale(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_spread(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_spread(arg0);
}
}
}
static void wasgo_CPUParticles2D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_CPUParticles2D_set_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CPUParticles2D *caller = (CPUParticles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_use_local_coordinates(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_CSGBox_get_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth();
}
}
}
static float wasgo_CSGBox_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static WasGoId wasgo_CSGBox_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CSGBox_get_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
return caller->get_width();
}
}
}
static void wasgo_CSGBox_set_depth(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
caller->set_depth(arg0);
}
}
}
static void wasgo_CSGBox_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_CSGBox_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_CSGBox_set_width(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGBox *caller = (CSGBox *) state->lookup_object(caller_id);
if(caller){
caller->set_width(arg0);
}
}
}
static float wasgo_CSGCylinder_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static WasGoId wasgo_CSGCylinder_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CSGCylinder_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static int wasgo_CSGCylinder_get_sides(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
return caller->get_sides();
}
}
}
static WasGoId wasgo_CSGCylinder_get_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_smooth_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGCylinder_is_cone(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_cone();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGCylinder_set_cone(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
caller->set_cone(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGCylinder_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_CSGCylinder_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_CSGCylinder_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static void wasgo_CSGCylinder_set_sides(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
caller->set_sides(arg0);
}
}
}
static void wasgo_CSGCylinder_set_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGCylinder *caller = (CSGCylinder *) state->lookup_object(caller_id);
if(caller){
caller->set_smooth_faces(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGMesh__mesh_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGMesh *caller = (CSGMesh *) state->lookup_object(caller_id);
if(caller){
caller->_mesh_changed();
}
}
}
static WasGoId wasgo_CSGMesh_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGMesh *caller = (CSGMesh *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGMesh_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGMesh *caller = (CSGMesh *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGMesh_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGMesh *caller = (CSGMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_CSGMesh_set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGMesh *caller = (CSGMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CSGPolygon__has_editable_3d_polygon_no_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_has_editable_3d_polygon_no_depth();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGPolygon__is_editable_3d_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_editable_3d_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGPolygon__path_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->_path_changed();
}
}
}
static void wasgo_CSGPolygon__path_exited(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->_path_exited();
}
}
}
static float wasgo_CSGPolygon_get_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth();
}
}
}
static WasGoId wasgo_CSGPolygon_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGPolygon_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
enum.CSGPolygon::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CSGPolygon_get_path_interval(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
return caller->get_path_interval();
}
}
}
static WasGoId wasgo_CSGPolygon_get_path_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_path_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGPolygon_get_path_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
enum.CSGPolygon::PathRotation ret_value = caller->get_path_rotation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGPolygon_get_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGPolygon_get_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_smooth_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CSGPolygon_get_spin_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
return caller->get_spin_degrees();
}
}
}
static int wasgo_CSGPolygon_get_spin_sides(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
return caller->get_spin_sides();
}
}
}
static WasGoId wasgo_CSGPolygon_is_path_continuous_u(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_path_continuous_u();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGPolygon_is_path_joined(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_path_joined();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGPolygon_is_path_local(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_path_local();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGPolygon_set_depth(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_depth(arg0);
}
}
}
static void wasgo_CSGPolygon_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_CSGPolygon_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_CSGPolygon_set_path_continuous_u(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_path_continuous_u(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGPolygon_set_path_interval(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_path_interval(arg0);
}
}
}
static void wasgo_CSGPolygon_set_path_joined(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_path_joined(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGPolygon_set_path_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_path_local(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGPolygon_set_path_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_path_node(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_CSGPolygon_set_path_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_path_rotation(arg0);
}
}
}
static void wasgo_CSGPolygon_set_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_polygon(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_CSGPolygon_set_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_smooth_faces(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGPolygon_set_spin_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_spin_degrees(arg0);
}
}
}
static void wasgo_CSGPolygon_set_spin_sides(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPolygon *caller = (CSGPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_spin_sides(arg0);
}
}
}
static WasGoId wasgo_CSGPrimitive_is_inverting_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPrimitive *caller = (CSGPrimitive *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_inverting_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGPrimitive_set_invert_faces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGPrimitive *caller = (CSGPrimitive *) state->lookup_object(caller_id);
if(caller){
caller->set_invert_faces(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGShape__update_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->_update_shape();
}
}
}
static int wasgo_CSGShape_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_CSGShape_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CSGShape_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_CSGShape_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGShape_get_meshes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_meshes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGShape_get_operation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
enum.CSGShape::Operation ret_value = caller->get_operation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CSGShape_get_snap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_snap();
}
}
}
static WasGoId wasgo_CSGShape_is_calculating_tangents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_calculating_tangents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGShape_is_root_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_root_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CSGShape_is_using_collision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_collision();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGShape_set_calculate_tangents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_calculate_tangents(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CSGShape_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_CSGShape_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_CSGShape_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_CSGShape_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_CSGShape_set_operation(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_operation(arg0);
}
}
}
static void wasgo_CSGShape_set_snap(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_snap(arg0);
}
}
}
static void wasgo_CSGShape_set_use_collision(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGShape *caller = (CSGShape *) state->lookup_object(caller_id);
if(caller){
caller->set_use_collision(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CSGSphere_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CSGSphere_get_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
return caller->get_radial_segments();
}
}
}
static float wasgo_CSGSphere_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static int wasgo_CSGSphere_get_rings(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
return caller->get_rings();
}
}
}
static WasGoId wasgo_CSGSphere_get_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_smooth_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGSphere_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_CSGSphere_set_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
caller->set_radial_segments(arg0);
}
}
}
static void wasgo_CSGSphere_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static void wasgo_CSGSphere_set_rings(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
caller->set_rings(arg0);
}
}
}
static void wasgo_CSGSphere_set_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGSphere *caller = (CSGSphere *) state->lookup_object(caller_id);
if(caller){
caller->set_smooth_faces(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_CSGTorus_get_inner_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_inner_radius();
}
}
}
static WasGoId wasgo_CSGTorus_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CSGTorus_get_outer_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_outer_radius();
}
}
}
static int wasgo_CSGTorus_get_ring_sides(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_ring_sides();
}
}
}
static int wasgo_CSGTorus_get_sides(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
return caller->get_sides();
}
}
}
static WasGoId wasgo_CSGTorus_get_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_smooth_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CSGTorus_set_inner_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
caller->set_inner_radius(arg0);
}
}
}
static void wasgo_CSGTorus_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_CSGTorus_set_outer_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
caller->set_outer_radius(arg0);
}
}
}
static void wasgo_CSGTorus_set_ring_sides(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
caller->set_ring_sides(arg0);
}
}
}
static void wasgo_CSGTorus_set_sides(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
caller->set_sides(arg0);
}
}
}
static void wasgo_CSGTorus_set_smooth_faces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CSGTorus *caller = (CSGTorus *) state->lookup_object(caller_id);
if(caller){
caller->set_smooth_faces(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera_clear_current(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->clear_current(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Camera_get_camera_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_camera_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_get_camera_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_camera_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Camera_get_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
return caller->get_cull_mask();
}
}
}
static WasGoId wasgo_Camera_get_cull_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_cull_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_get_doppler_tracking(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
enum.Camera::DopplerTracking ret_value = caller->get_doppler_tracking();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_get_environment(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Environment ret_value = caller->get_environment();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Camera_get_fov(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
return caller->get_fov();
}
}
}
static WasGoId wasgo_Camera_get_frustum(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_frustum();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_get_frustum_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_frustum_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Camera_get_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
return caller->get_h_offset();
}
}
}
static WasGoId wasgo_Camera_get_keep_aspect_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
enum.Camera::KeepAspect ret_value = caller->get_keep_aspect_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_get_projection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
enum.Camera::Projection ret_value = caller->get_projection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Camera_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
return caller->get_size();
}
}
}
static float wasgo_Camera_get_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_offset();
}
}
}
static float wasgo_Camera_get_zfar(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
return caller->get_zfar();
}
}
}
static float wasgo_Camera_get_znear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
return caller->get_znear();
}
}
}
static WasGoId wasgo_Camera_is_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_current();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_is_position_behind(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_position_behind(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Camera_make_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->make_current();
}
}
}
static WasGoId wasgo_Camera_project_local_ray_normal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->project_local_ray_normal(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_project_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->project_position(&(Vector2 *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_project_ray_normal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->project_ray_normal(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera_project_ray_origin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->project_ray_origin(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Camera_set_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_cull_mask(arg0);
}
}
}
static void wasgo_Camera_set_cull_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_cull_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Camera_set_current(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_current(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera_set_doppler_tracking(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_doppler_tracking(arg0);
}
}
}
static void wasgo_Camera_set_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_environment(&(Environment *)lookup_object(arg0));
}
}
}
static void wasgo_Camera_set_fov(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_fov(arg0);
}
}
}
static void wasgo_Camera_set_frustum(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_frustum(arg0, &(Vector2 *)lookup_object(arg1), arg2, arg3);
}
}
}
static void wasgo_Camera_set_frustum_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_frustum_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Camera_set_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_h_offset(arg0);
}
}
}
static void wasgo_Camera_set_keep_aspect_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_keep_aspect_mode(arg0);
}
}
}
static void wasgo_Camera_set_orthogonal(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_orthogonal(arg0, arg1, arg2);
}
}
}
static void wasgo_Camera_set_perspective(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_perspective(arg0, arg1, arg2);
}
}
}
static void wasgo_Camera_set_projection(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_projection(arg0);
}
}
}
static void wasgo_Camera_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_size(arg0);
}
}
}
static void wasgo_Camera_set_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_v_offset(arg0);
}
}
}
static void wasgo_Camera_set_zfar(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_zfar(arg0);
}
}
}
static void wasgo_Camera_set_znear(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
caller->set_znear(arg0);
}
}
}
static WasGoId wasgo_Camera_unproject_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera *caller = (Camera *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->unproject_position(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Camera2D__make_current(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->_make_current(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D__set_current(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_current(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D__set_old_smoothing(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_old_smoothing(arg0);
}
}
}
static void wasgo_Camera2D__update_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->_update_scroll();
}
}
}
static void wasgo_Camera2D_align(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->align();
}
}
}
static void wasgo_Camera2D_clear_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->clear_current();
}
}
}
static void wasgo_Camera2D_force_update_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->force_update_scroll();
}
}
}
static WasGoId wasgo_Camera2D_get_anchor_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
enum.Camera2D::AnchorMode ret_value = caller->get_anchor_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_get_camera_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_camera_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_get_camera_screen_center(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_camera_screen_center();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_get_custom_viewport(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_custom_viewport();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Camera2D_get_drag_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_drag_margin(arg0);
}
}
}
static float wasgo_Camera2D_get_follow_smoothing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_follow_smoothing();
}
}
}
static float wasgo_Camera2D_get_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_h_offset();
}
}
}
static int wasgo_Camera2D_get_limit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_limit(arg0);
}
}
}
static WasGoId wasgo_Camera2D_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_get_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
enum.Camera2D::Camera2DProcessMode ret_value = caller->get_process_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Camera2D_get_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_offset();
}
}
}
static WasGoId wasgo_Camera2D_get_zoom(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_zoom();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_current();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_follow_smoothing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_follow_smoothing_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_h_drag_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_h_drag_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_limit_drawing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_limit_drawing_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_limit_smoothing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_limit_smoothing_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_margin_drawing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_margin_drawing_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_rotating(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_rotating();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_screen_drawing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_screen_drawing_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Camera2D_is_v_drag_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_v_drag_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Camera2D_make_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->make_current();
}
}
}
static void wasgo_Camera2D_reset_smoothing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->reset_smoothing();
}
}
}
static void wasgo_Camera2D_set_anchor_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_anchor_mode(arg0);
}
}
}
static void wasgo_Camera2D_set_custom_viewport(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_viewport(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_drag_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_drag_margin(arg0, arg1);
}
}
}
static void wasgo_Camera2D_set_enable_follow_smoothing(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_enable_follow_smoothing(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_follow_smoothing(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_follow_smoothing(arg0);
}
}
}
static void wasgo_Camera2D_set_h_drag_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_h_drag_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_h_offset(arg0);
}
}
}
static void wasgo_Camera2D_set_limit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_limit(arg0, arg1);
}
}
}
static void wasgo_Camera2D_set_limit_drawing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_limit_drawing_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_limit_smoothing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_limit_smoothing_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_margin_drawing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_margin_drawing_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_process_mode(arg0);
}
}
}
static void wasgo_Camera2D_set_rotating(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_rotating(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_screen_drawing_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_screen_drawing_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_v_drag_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_v_drag_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Camera2D_set_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_v_offset(arg0);
}
}
}
static void wasgo_Camera2D_set_zoom(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Camera2D *caller = (Camera2D *) state->lookup_object(caller_id);
if(caller){
caller->set_zoom(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CameraFeed__allocate_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->_allocate_texture(arg0, arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_CameraFeed__set_RGB_img(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->_set_RGB_img(&(Image *)lookup_object(arg0));
}
}
}
static void wasgo_CameraFeed__set_YCbCr_img(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->_set_YCbCr_img(&(Image *)lookup_object(arg0));
}
}
}
static void wasgo_CameraFeed__set_YCbCr_imgs(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->_set_YCbCr_imgs(&(Image *)lookup_object(arg0), &(Image *)lookup_object(arg1));
}
}
}
static void wasgo_CameraFeed__set_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->_set_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_CameraFeed__set_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->_set_position(arg0);
}
}
}
static int wasgo_CameraFeed_get_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
return caller->get_id();
}
}
}
static WasGoId wasgo_CameraFeed_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CameraFeed_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
enum.CameraFeed::FeedPosition ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CameraFeed_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CameraFeed_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CameraFeed_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->set_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CameraFeed_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraFeed *caller = (CameraFeed *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static void wasgo_CameraServer_add_feed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraServer *caller = (CameraServer *) state->lookup_object(caller_id);
if(caller){
caller->add_feed(&(CameraFeed *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CameraServer_feeds(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraServer *caller = (CameraServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->feeds();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CameraServer_get_feed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraServer *caller = (CameraServer *) state->lookup_object(caller_id);
if(caller){
CameraFeed ret_value = caller->get_feed(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CameraServer_get_feed_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraServer *caller = (CameraServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_feed_count();
}
}
}
static void wasgo_CameraServer_remove_feed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraServer *caller = (CameraServer *) state->lookup_object(caller_id);
if(caller){
caller->remove_feed(&(CameraFeed *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CameraTexture_get_camera_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraTexture *caller = (CameraTexture *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_camera_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CameraTexture_get_camera_feed_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraTexture *caller = (CameraTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_camera_feed_id();
}
}
}
static WasGoId wasgo_CameraTexture_get_which_feed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraTexture *caller = (CameraTexture *) state->lookup_object(caller_id);
if(caller){
enum.CameraServer::FeedImage ret_value = caller->get_which_feed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CameraTexture_set_camera_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraTexture *caller = (CameraTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_camera_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CameraTexture_set_camera_feed_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraTexture *caller = (CameraTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_camera_feed_id(arg0);
}
}
}
static void wasgo_CameraTexture_set_which_feed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CameraTexture *caller = (CameraTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_which_feed(arg0);
}
}
}
static void wasgo_CanvasItem__draw(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_draw();
}
}
}
static WasGoId wasgo_CanvasItem__edit_get_pivot(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->_edit_get_pivot();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem__edit_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->_edit_get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem__edit_get_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->_edit_get_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CanvasItem__edit_get_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
return caller->_edit_get_rotation();
}
}
}
static WasGoId wasgo_CanvasItem__edit_get_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->_edit_get_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem__edit_get_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_edit_get_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem__edit_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->_edit_get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CanvasItem__edit_set_pivot(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_edit_set_pivot(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem__edit_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_edit_set_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem__edit_set_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_edit_set_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem__edit_set_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_edit_set_rotation(arg0);
}
}
}
static void wasgo_CanvasItem__edit_set_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_edit_set_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem__edit_set_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_edit_set_state(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static WasGoId wasgo_CanvasItem__edit_use_pivot(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_edit_use_pivot();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem__edit_use_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_edit_use_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem__edit_use_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_edit_use_rotation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem__is_on_top(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_on_top();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CanvasItem__set_on_top(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_set_on_top(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem__toplevel_raise_self(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_toplevel_raise_self();
}
}
}
static void wasgo_CanvasItem__update_callback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->_update_callback();
}
}
}
static void wasgo_CanvasItem_draw_arc(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, float arg2, float arg3, int arg4, WasGoID arg5, float arg6, WasGoID arg7){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_arc(&(Vector2 *)lookup_object(arg0), arg1, arg2, arg3, arg4, &(Color *)lookup_object(arg5), arg6, &(bool *)lookup_object(arg7));
}
}
}
static float wasgo_CanvasItem_draw_char(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
return caller->draw_char(&(Font *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(String *)lookup_object(arg2), &(String *)lookup_object(arg3), &(Color *)lookup_object(arg4));
}
}
}
static void wasgo_CanvasItem_draw_circle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_circle(&(Vector2 *)lookup_object(arg0), arg1, &(Color *)lookup_object(arg2));
}
}
}
static void wasgo_CanvasItem_draw_colored_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_colored_polygon(&(PoolVector2Array *)lookup_object(arg0), &(Color *)lookup_object(arg1), &(PoolVector2Array *)lookup_object(arg2), &(Texture *)lookup_object(arg3), &(Texture *)lookup_object(arg4), &(bool *)lookup_object(arg5));
}
}
}
static void wasgo_CanvasItem_draw_line(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, float arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_line(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Color *)lookup_object(arg2), arg3, &(bool *)lookup_object(arg4));
}
}
}
static void wasgo_CanvasItem_draw_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_mesh(&(Mesh *)lookup_object(arg0), &(Texture *)lookup_object(arg1), &(Texture *)lookup_object(arg2), &(Transform2D *)lookup_object(arg3), &(Color *)lookup_object(arg4));
}
}
}
static void wasgo_CanvasItem_draw_multiline(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_multiline(&(PoolVector2Array *)lookup_object(arg0), &(Color *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_CanvasItem_draw_multiline_colors(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_multiline_colors(&(PoolVector2Array *)lookup_object(arg0), &(PoolColorArray *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_CanvasItem_draw_multimesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_multimesh(&(MultiMesh *)lookup_object(arg0), &(Texture *)lookup_object(arg1), &(Texture *)lookup_object(arg2));
}
}
}
static void wasgo_CanvasItem_draw_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_polygon(&(PoolVector2Array *)lookup_object(arg0), &(PoolColorArray *)lookup_object(arg1), &(PoolVector2Array *)lookup_object(arg2), &(Texture *)lookup_object(arg3), &(Texture *)lookup_object(arg4), &(bool *)lookup_object(arg5));
}
}
}
static void wasgo_CanvasItem_draw_polyline(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_polyline(&(PoolVector2Array *)lookup_object(arg0), &(Color *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_CanvasItem_draw_polyline_colors(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_polyline_colors(&(PoolVector2Array *)lookup_object(arg0), &(PoolColorArray *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_CanvasItem_draw_primitive(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, float arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_primitive(&(PoolVector2Array *)lookup_object(arg0), &(PoolColorArray *)lookup_object(arg1), &(PoolVector2Array *)lookup_object(arg2), &(Texture *)lookup_object(arg3), arg4, &(Texture *)lookup_object(arg5));
}
}
}
static void wasgo_CanvasItem_draw_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, float arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_rect(&(Rect2 *)lookup_object(arg0), &(Color *)lookup_object(arg1), &(bool *)lookup_object(arg2), arg3, &(bool *)lookup_object(arg4));
}
}
}
static void wasgo_CanvasItem_draw_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_set_transform(&(Vector2 *)lookup_object(arg0), arg1, &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_CanvasItem_draw_set_transform_matrix(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_set_transform_matrix(&(Transform2D *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_draw_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_string(&(Font *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Color *)lookup_object(arg3), arg4);
}
}
}
static void wasgo_CanvasItem_draw_style_box(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_style_box(&(StyleBox *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1));
}
}
}
static void wasgo_CanvasItem_draw_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_texture(&(Texture *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Color *)lookup_object(arg2), &(Texture *)lookup_object(arg3));
}
}
}
static void wasgo_CanvasItem_draw_texture_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_texture_rect(&(Texture *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(Color *)lookup_object(arg3), &(bool *)lookup_object(arg4), &(Texture *)lookup_object(arg5));
}
}
}
static void wasgo_CanvasItem_draw_texture_rect_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->draw_texture_rect_region(&(Texture *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(Rect2 *)lookup_object(arg2), &(Color *)lookup_object(arg3), &(bool *)lookup_object(arg4), &(Texture *)lookup_object(arg5), &(bool *)lookup_object(arg6));
}
}
}
static void wasgo_CanvasItem_force_update_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->force_update_transform();
}
}
}
static WasGoId wasgo_CanvasItem_get_canvas(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_canvas();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_canvas_item(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_canvas_item();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_canvas_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_canvas_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_global_mouse_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_global_mouse_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_global_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_global_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_global_transform_with_canvas(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_global_transform_with_canvas();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CanvasItem_get_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
return caller->get_light_mask();
}
}
}
static WasGoId wasgo_CanvasItem_get_local_mouse_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_local_mouse_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_modulate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_modulate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_self_modulate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_self_modulate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_use_parent_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_parent_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_viewport_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_viewport_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_viewport_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_viewport_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_get_world_2d(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
World2D ret_value = caller->get_world_2d();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CanvasItem_hide(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->hide();
}
}
}
static WasGoId wasgo_CanvasItem_is_draw_behind_parent_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_draw_behind_parent_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_is_local_transform_notification_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_local_transform_notification_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_is_set_as_toplevel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_set_as_toplevel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_is_transform_notification_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_transform_notification_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_is_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_is_visible_in_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_visible_in_tree();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_make_canvas_position_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->make_canvas_position_local(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItem_make_input_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
InputEvent ret_value = caller->make_input_local(&(InputEvent *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CanvasItem_set_as_toplevel(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_as_toplevel(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_draw_behind_parent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_behind_parent(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_light_mask(arg0);
}
}
}
static void wasgo_CanvasItem_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_modulate(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_notify_local_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_notify_local_transform(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_notify_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_notify_transform(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_self_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_self_modulate(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_use_parent_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_use_parent_material(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_set_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->set_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItem_show(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->show();
}
}
}
static void wasgo_CanvasItem_update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItem *caller = (CanvasItem *) state->lookup_object(caller_id);
if(caller){
caller->update();
}
}
}
static WasGoId wasgo_CanvasItemMaterial_get_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
enum.CanvasItemMaterial::BlendMode ret_value = caller->get_blend_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasItemMaterial_get_light_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
enum.CanvasItemMaterial::LightMode ret_value = caller->get_light_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CanvasItemMaterial_get_particles_anim_h_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_particles_anim_h_frames();
}
}
}
static WasGoId wasgo_CanvasItemMaterial_get_particles_anim_loop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_particles_anim_loop();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CanvasItemMaterial_get_particles_anim_v_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_particles_anim_v_frames();
}
}
}
static WasGoId wasgo_CanvasItemMaterial_get_particles_animation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_particles_animation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CanvasItemMaterial_set_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_mode(arg0);
}
}
}
static void wasgo_CanvasItemMaterial_set_light_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_light_mode(arg0);
}
}
}
static void wasgo_CanvasItemMaterial_set_particles_anim_h_frames(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_particles_anim_h_frames(arg0);
}
}
}
static void wasgo_CanvasItemMaterial_set_particles_anim_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_particles_anim_loop(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasItemMaterial_set_particles_anim_v_frames(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_particles_anim_v_frames(arg0);
}
}
}
static void wasgo_CanvasItemMaterial_set_particles_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasItemMaterial *caller = (CanvasItemMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_particles_animation(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CanvasLayer_get_canvas(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_canvas();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasLayer_get_custom_viewport(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_custom_viewport();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CanvasLayer_get_follow_viewport_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_follow_viewport_scale();
}
}
}
static int wasgo_CanvasLayer_get_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_layer();
}
}
}
static WasGoId wasgo_CanvasLayer_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CanvasLayer_get_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_rotation();
}
}
}
static float wasgo_CanvasLayer_get_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_rotation_degrees();
}
}
}
static WasGoId wasgo_CanvasLayer_get_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasLayer_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CanvasLayer_is_following_viewport(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_following_viewport();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CanvasLayer_set_custom_viewport(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_viewport(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasLayer_set_follow_viewport(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_follow_viewport(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasLayer_set_follow_viewport_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_follow_viewport_scale(arg0);
}
}
}
static void wasgo_CanvasLayer_set_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_layer(arg0);
}
}
}
static void wasgo_CanvasLayer_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasLayer_set_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation(arg0);
}
}
}
static void wasgo_CanvasLayer_set_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation_degrees(arg0);
}
}
}
static void wasgo_CanvasLayer_set_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CanvasLayer_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasLayer *caller = (CanvasLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CanvasModulate_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasModulate *caller = (CanvasModulate *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CanvasModulate_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CanvasModulate *caller = (CanvasModulate *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static float wasgo_CapsuleMesh_get_mid_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_mid_height();
}
}
}
static int wasgo_CapsuleMesh_get_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_radial_segments();
}
}
}
static float wasgo_CapsuleMesh_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static int wasgo_CapsuleMesh_get_rings(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_rings();
}
}
}
static void wasgo_CapsuleMesh_set_mid_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_mid_height(arg0);
}
}
}
static void wasgo_CapsuleMesh_set_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_radial_segments(arg0);
}
}
}
static void wasgo_CapsuleMesh_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static void wasgo_CapsuleMesh_set_rings(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleMesh *caller = (CapsuleMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_rings(arg0);
}
}
}
static float wasgo_CapsuleShape_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape *caller = (CapsuleShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static float wasgo_CapsuleShape_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape *caller = (CapsuleShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static void wasgo_CapsuleShape_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape *caller = (CapsuleShape *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_CapsuleShape_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape *caller = (CapsuleShape *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static float wasgo_CapsuleShape2D_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape2D *caller = (CapsuleShape2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static float wasgo_CapsuleShape2D_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape2D *caller = (CapsuleShape2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static void wasgo_CapsuleShape2D_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape2D *caller = (CapsuleShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_CapsuleShape2D_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CapsuleShape2D *caller = (CapsuleShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static WasGoId wasgo_CenterContainer_is_using_top_left(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CenterContainer *caller = (CenterContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_top_left();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CenterContainer_set_use_top_left(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CenterContainer *caller = (CenterContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_use_top_left(&(bool *)lookup_object(arg0));
}
}
}
static int wasgo_CharFXTransform_get_absolute_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
return caller->get_absolute_index();
}
}
}
static int wasgo_CharFXTransform_get_character(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
return caller->get_character();
}
}
}
static WasGoId wasgo_CharFXTransform_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CharFXTransform_get_elapsed_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
return caller->get_elapsed_time();
}
}
}
static WasGoId wasgo_CharFXTransform_get_environment(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_environment();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CharFXTransform_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CharFXTransform_get_relative_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
return caller->get_relative_index();
}
}
}
static WasGoId wasgo_CharFXTransform_is_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CharFXTransform_set_absolute_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_absolute_index(arg0);
}
}
}
static void wasgo_CharFXTransform_set_character(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_character(arg0);
}
}
}
static void wasgo_CharFXTransform_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_CharFXTransform_set_elapsed_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_elapsed_time(arg0);
}
}
}
static void wasgo_CharFXTransform_set_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_environment(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_CharFXTransform_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_CharFXTransform_set_relative_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_relative_index(arg0);
}
}
}
static void wasgo_CharFXTransform_set_visibility(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CharFXTransform *caller = (CharFXTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_visibility(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_CircleShape2D_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CircleShape2D *caller = (CircleShape2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static void wasgo_CircleShape2D_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CircleShape2D *caller = (CircleShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static void wasgo_ClippedCamera_add_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->add_exception(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_ClippedCamera_add_exception_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->add_exception_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_ClippedCamera_clear_exceptions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->clear_exceptions();
}
}
}
static float wasgo_ClippedCamera_get_clip_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
return caller->get_clip_offset();
}
}
}
static int wasgo_ClippedCamera_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_ClippedCamera_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ClippedCamera_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin();
}
}
}
static WasGoId wasgo_ClippedCamera_get_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
enum.ClippedCamera::ProcessMode ret_value = caller->get_process_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ClippedCamera_is_clip_to_areas_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_clip_to_areas_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ClippedCamera_is_clip_to_bodies_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_clip_to_bodies_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ClippedCamera_remove_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->remove_exception(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_ClippedCamera_remove_exception_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->remove_exception_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_ClippedCamera_set_clip_to_areas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_clip_to_areas(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ClippedCamera_set_clip_to_bodies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_clip_to_bodies(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ClippedCamera_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_ClippedCamera_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ClippedCamera_set_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_margin(arg0);
}
}
}
static void wasgo_ClippedCamera_set_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ClippedCamera *caller = (ClippedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_process_mode(arg0);
}
}
}
static void wasgo_CollisionObject__input_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->_input_event(&(Object *)lookup_object(arg0), &(InputEvent *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2), &(Vector3 *)lookup_object(arg3), arg4);
}
}
}
static int wasgo_CollisionObject_create_shape_owner(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
return caller->create_shape_owner(&(Object *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CollisionObject_get_capture_input_on_drag(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_capture_input_on_drag();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject_get_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject_get_shape_owners(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_shape_owners();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject_is_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ray_pickable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject_is_shape_owner_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shape_owner_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionObject_remove_shape_owner(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->remove_shape_owner(arg0);
}
}
}
static void wasgo_CollisionObject_set_capture_input_on_drag(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->set_capture_input_on_drag(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionObject_set_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->set_ray_pickable(&(bool *)lookup_object(arg0));
}
}
}
static int wasgo_CollisionObject_shape_find_owner(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
return caller->shape_find_owner(arg0);
}
}
}
static void wasgo_CollisionObject_shape_owner_add_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_add_shape(arg0, &(Shape *)lookup_object(arg1));
}
}
}
static void wasgo_CollisionObject_shape_owner_clear_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_clear_shapes(arg0);
}
}
}
static WasGoId wasgo_CollisionObject_shape_owner_get_owner(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->shape_owner_get_owner(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject_shape_owner_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
Shape ret_value = caller->shape_owner_get_shape(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CollisionObject_shape_owner_get_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
return caller->shape_owner_get_shape_count(arg0);
}
}
}
static int wasgo_CollisionObject_shape_owner_get_shape_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
return caller->shape_owner_get_shape_index(arg0, arg1);
}
}
}
static WasGoId wasgo_CollisionObject_shape_owner_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->shape_owner_get_transform(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionObject_shape_owner_remove_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_remove_shape(arg0, arg1);
}
}
}
static void wasgo_CollisionObject_shape_owner_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_set_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_CollisionObject_shape_owner_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject *caller = (CollisionObject *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_set_transform(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_CollisionObject2D__input_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->_input_event(&(Object *)lookup_object(arg0), &(InputEvent *)lookup_object(arg1), arg2);
}
}
}
static int wasgo_CollisionObject2D_create_shape_owner(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
return caller->create_shape_owner(&(Object *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CollisionObject2D_get_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CollisionObject2D_get_shape_owner_one_way_collision_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_shape_owner_one_way_collision_margin(arg0);
}
}
}
static WasGoId wasgo_CollisionObject2D_get_shape_owners(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_shape_owners();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject2D_is_pickable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_pickable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject2D_is_shape_owner_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shape_owner_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject2D_is_shape_owner_one_way_collision_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shape_owner_one_way_collision_enabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionObject2D_remove_shape_owner(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_shape_owner(arg0);
}
}
}
static void wasgo_CollisionObject2D_set_pickable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->set_pickable(&(bool *)lookup_object(arg0));
}
}
}
static int wasgo_CollisionObject2D_shape_find_owner(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
return caller->shape_find_owner(arg0);
}
}
}
static void wasgo_CollisionObject2D_shape_owner_add_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_add_shape(arg0, &(Shape2D *)lookup_object(arg1));
}
}
}
static void wasgo_CollisionObject2D_shape_owner_clear_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_clear_shapes(arg0);
}
}
}
static WasGoId wasgo_CollisionObject2D_shape_owner_get_owner(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->shape_owner_get_owner(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionObject2D_shape_owner_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
Shape2D ret_value = caller->shape_owner_get_shape(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CollisionObject2D_shape_owner_get_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
return caller->shape_owner_get_shape_count(arg0);
}
}
}
static int wasgo_CollisionObject2D_shape_owner_get_shape_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
return caller->shape_owner_get_shape_index(arg0, arg1);
}
}
}
static WasGoId wasgo_CollisionObject2D_shape_owner_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->shape_owner_get_transform(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionObject2D_shape_owner_remove_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_remove_shape(arg0, arg1);
}
}
}
static void wasgo_CollisionObject2D_shape_owner_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_set_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_CollisionObject2D_shape_owner_set_one_way_collision(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_set_one_way_collision(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_CollisionObject2D_shape_owner_set_one_way_collision_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_set_one_way_collision_margin(arg0, arg1);
}
}
}
static void wasgo_CollisionObject2D_shape_owner_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionObject2D *caller = (CollisionObject2D *) state->lookup_object(caller_id);
if(caller){
caller->shape_owner_set_transform(arg0, &(Transform2D *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_CollisionPolygon__is_editable_3d_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon *caller = (CollisionPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_editable_3d_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CollisionPolygon_get_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon *caller = (CollisionPolygon *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth();
}
}
}
static WasGoId wasgo_CollisionPolygon_get_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon *caller = (CollisionPolygon *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionPolygon_is_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon *caller = (CollisionPolygon *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionPolygon_set_depth(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon *caller = (CollisionPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_depth(arg0);
}
}
}
static void wasgo_CollisionPolygon_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon *caller = (CollisionPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_disabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionPolygon_set_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon *caller = (CollisionPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_polygon(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_CollisionPolygon2D_get_build_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
enum.CollisionPolygon2D::BuildMode ret_value = caller->get_build_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_CollisionPolygon2D_get_one_way_collision_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_one_way_collision_margin();
}
}
}
static WasGoId wasgo_CollisionPolygon2D_get_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionPolygon2D_is_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionPolygon2D_is_one_way_collision_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_one_way_collision_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionPolygon2D_set_build_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_build_mode(arg0);
}
}
}
static void wasgo_CollisionPolygon2D_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_disabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionPolygon2D_set_one_way_collision(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_one_way_collision(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionPolygon2D_set_one_way_collision_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_one_way_collision_margin(arg0);
}
}
}
static void wasgo_CollisionPolygon2D_set_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionPolygon2D *caller = (CollisionPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_polygon(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionShape__shape_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
caller->_shape_changed();
}
}
}
static void wasgo_CollisionShape__update_debug_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
caller->_update_debug_shape();
}
}
}
static WasGoId wasgo_CollisionShape_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
Shape ret_value = caller->get_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionShape_is_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionShape_make_convex_from_brothers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
caller->make_convex_from_brothers();
}
}
}
static void wasgo_CollisionShape_resource_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
caller->resource_changed(&(Resource *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionShape_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
caller->set_disabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionShape_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape *caller = (CollisionShape *) state->lookup_object(caller_id);
if(caller){
caller->set_shape(&(Shape *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionShape2D__shape_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
caller->_shape_changed();
}
}
}
static float wasgo_CollisionShape2D_get_one_way_collision_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_one_way_collision_margin();
}
}
}
static WasGoId wasgo_CollisionShape2D_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
Shape2D ret_value = caller->get_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionShape2D_is_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CollisionShape2D_is_one_way_collision_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_one_way_collision_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CollisionShape2D_set_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_disabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionShape2D_set_one_way_collision(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_one_way_collision(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_CollisionShape2D_set_one_way_collision_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_one_way_collision_margin(arg0);
}
}
}
static void wasgo_CollisionShape2D_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CollisionShape2D *caller = (CollisionShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_shape(&(Shape2D *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker__add_preset_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_add_preset_pressed();
}
}
}
static void wasgo_ColorPicker__focus_enter(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_focus_enter();
}
}
}
static void wasgo_ColorPicker__focus_exit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_focus_exit();
}
}
}
static void wasgo_ColorPicker__hsv_draw(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_hsv_draw(arg0, &(Control *)lookup_object(arg1));
}
}
}
static void wasgo_ColorPicker__html_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_html_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker__html_focus_exit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_html_focus_exit();
}
}
}
static void wasgo_ColorPicker__preset_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_preset_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker__sample_draw(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_sample_draw();
}
}
}
static void wasgo_ColorPicker__screen_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_screen_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker__screen_pick_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_screen_pick_pressed();
}
}
}
static void wasgo_ColorPicker__text_type_toggled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_text_type_toggled();
}
}
}
static void wasgo_ColorPicker__update_presets(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_update_presets();
}
}
}
static void wasgo_ColorPicker__uv_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_uv_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker__value_changed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_value_changed(arg0);
}
}
}
static void wasgo_ColorPicker__w_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->_w_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker_add_preset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->add_preset(&(Color *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ColorPicker_are_presets_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_presets_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPicker_are_presets_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_presets_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ColorPicker_erase_preset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->erase_preset(&(Color *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ColorPicker_get_pick_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_pick_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPicker_get_presets(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
PoolColorArray ret_value = caller->get_presets();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPicker_is_deferred_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_deferred_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPicker_is_editing_alpha(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editing_alpha();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPicker_is_hsv_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hsv_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPicker_is_raw_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_raw_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ColorPicker_set_deferred_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->set_deferred_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker_set_edit_alpha(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->set_edit_alpha(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker_set_hsv_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->set_hsv_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker_set_pick_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->set_pick_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker_set_presets_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->set_presets_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker_set_presets_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->set_presets_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPicker_set_raw_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPicker *caller = (ColorPicker *) state->lookup_object(caller_id);
if(caller){
caller->set_raw_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPickerButton__color_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
caller->_color_changed(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPickerButton__modal_closed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
caller->_modal_closed();
}
}
}
static WasGoId wasgo_ColorPickerButton_get_pick_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_pick_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPickerButton_get_picker(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
ColorPicker ret_value = caller->get_picker();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPickerButton_get_popup(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
PopupPanel ret_value = caller->get_popup();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ColorPickerButton_is_editing_alpha(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editing_alpha();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ColorPickerButton_set_edit_alpha(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
caller->set_edit_alpha(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ColorPickerButton_set_pick_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorPickerButton *caller = (ColorPickerButton *) state->lookup_object(caller_id);
if(caller){
caller->set_pick_color(&(Color *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ColorRect_get_frame_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorRect *caller = (ColorRect *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_frame_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ColorRect_set_frame_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ColorRect *caller = (ColorRect *) state->lookup_object(caller_id);
if(caller){
caller->set_frame_color(&(Color *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ConcavePolygonShape_get_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConcavePolygonShape *caller = (ConcavePolygonShape *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ConcavePolygonShape_set_faces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConcavePolygonShape *caller = (ConcavePolygonShape *) state->lookup_object(caller_id);
if(caller){
caller->set_faces(&(PoolVector3Array *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ConcavePolygonShape2D_get_segments(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConcavePolygonShape2D *caller = (ConcavePolygonShape2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_segments();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ConcavePolygonShape2D_set_segments(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConcavePolygonShape2D *caller = (ConcavePolygonShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_segments(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static float wasgo_ConeTwistJoint__get_swing_span(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConeTwistJoint *caller = (ConeTwistJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_swing_span();
}
}
}
static float wasgo_ConeTwistJoint__get_twist_span(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConeTwistJoint *caller = (ConeTwistJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_twist_span();
}
}
}
static void wasgo_ConeTwistJoint__set_swing_span(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConeTwistJoint *caller = (ConeTwistJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_swing_span(arg0);
}
}
}
static void wasgo_ConeTwistJoint__set_twist_span(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConeTwistJoint *caller = (ConeTwistJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_twist_span(arg0);
}
}
}
static float wasgo_ConeTwistJoint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConeTwistJoint *caller = (ConeTwistJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static void wasgo_ConeTwistJoint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConeTwistJoint *caller = (ConeTwistJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static void wasgo_ConfigFile_erase_section(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
caller->erase_section(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ConfigFile_erase_section_key(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
caller->erase_section_key(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_ConfigFile_get_section_keys(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_section_keys(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_get_sections(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_sections();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_get_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_value(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_has_section(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_section(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_has_section_key(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_section_key(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_load_encrypted(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load_encrypted(&(String *)lookup_object(arg0), &(PoolByteArray *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_load_encrypted_pass(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load_encrypted_pass(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_save(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_save_encrypted(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_encrypted(&(String *)lookup_object(arg0), &(PoolByteArray *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ConfigFile_save_encrypted_pass(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_encrypted_pass(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ConfigFile_set_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfigFile *caller = (ConfigFile *) state->lookup_object(caller_id);
if(caller){
caller->set_value(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_ConfirmationDialog_get_cancel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConfirmationDialog *caller = (ConfirmationDialog *) state->lookup_object(caller_id);
if(caller){
Button ret_value = caller->get_cancel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Container__child_minsize_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Container *caller = (Container *) state->lookup_object(caller_id);
if(caller){
caller->_child_minsize_changed();
}
}
}
static void wasgo_Container__sort_children(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Container *caller = (Container *) state->lookup_object(caller_id);
if(caller){
caller->_sort_children();
}
}
}
static void wasgo_Container_fit_child_in_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Container *caller = (Container *) state->lookup_object(caller_id);
if(caller){
caller->fit_child_in_rect(&(Control *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1));
}
}
}
static void wasgo_Container_queue_sort(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Container *caller = (Container *) state->lookup_object(caller_id);
if(caller){
caller->queue_sort();
}
}
}
static WasGoId wasgo_Control__clips_input(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_clips_input();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control__get_minimum_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->_get_minimum_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control__get_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_tooltip();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Control__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Control__make_custom_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->_make_custom_tooltip(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Control__override_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_override_changed();
}
}
}
static void wasgo_Control__set_anchor(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_set_anchor(arg0, arg1);
}
}
}
static void wasgo_Control__set_global_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_set_global_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control__set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_set_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control__set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_set_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control__size_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_size_changed();
}
}
}
static void wasgo_Control__theme_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_theme_changed();
}
}
}
static void wasgo_Control__update_minimum_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->_update_minimum_size();
}
}
}
static void wasgo_Control_accept_event(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->accept_event();
}
}
}
static void wasgo_Control_add_color_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->add_color_override(&(String *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_Control_add_constant_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->add_constant_override(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Control_add_font_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->add_font_override(&(String *)lookup_object(arg0), &(Font *)lookup_object(arg1));
}
}
}
static void wasgo_Control_add_icon_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_override(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_Control_add_shader_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->add_shader_override(&(String *)lookup_object(arg0), &(Shader *)lookup_object(arg1));
}
}
}
static void wasgo_Control_add_stylebox_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->add_stylebox_override(&(String *)lookup_object(arg0), &(StyleBox *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Control_can_drop_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_drop_data(&(Vector2 *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Control_drop_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->drop_data(&(Vector2 *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_Control_force_drag(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->force_drag(&(Variant *)lookup_object(arg0), &(Control *)lookup_object(arg1));
}
}
}
static float wasgo_Control_get_anchor(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_anchor(arg0);
}
}
}
static WasGoId wasgo_Control_get_begin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_begin();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_combined_minimum_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_combined_minimum_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Control_get_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Control_get_cursor_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
enum.Control::CursorShape ret_value = caller->get_cursor_shape(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_custom_minimum_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_custom_minimum_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_default_cursor_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
enum.Control::CursorShape ret_value = caller->get_default_cursor_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_drag_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_drag_data(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_end();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_focus_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
enum.Control::FocusMode ret_value = caller->get_focus_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_focus_neighbour(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_focus_neighbour(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_focus_next(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_focus_next();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_focus_owner(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Control ret_value = caller->get_focus_owner();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_focus_previous(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_focus_previous();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Font ret_value = caller->get_font(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_global_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_global_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_global_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_global_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_h_grow_direction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
enum.Control::GrowDirection ret_value = caller->get_h_grow_direction();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Control_get_h_size_flags(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_h_size_flags();
}
}
}
static WasGoId wasgo_Control_get_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_icon(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Control_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin(arg0);
}
}
}
static WasGoId wasgo_Control_get_minimum_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_minimum_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_mouse_filter(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
enum.Control::MouseFilter ret_value = caller->get_mouse_filter();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_parent_area_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_parent_area_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_parent_control(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Control ret_value = caller->get_parent_control();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_pivot_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_pivot_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Control_get_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_rotation();
}
}
}
static float wasgo_Control_get_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_rotation_degrees();
}
}
}
static WasGoId wasgo_Control_get_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Control_get_stretch_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_stretch_ratio();
}
}
}
static WasGoId wasgo_Control_get_stylebox(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
StyleBox ret_value = caller->get_stylebox(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_theme(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
Theme ret_value = caller->get_theme();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_tooltip(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_get_v_grow_direction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
enum.Control::GrowDirection ret_value = caller->get_v_grow_direction();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Control_get_v_size_flags(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_size_flags();
}
}
}
static void wasgo_Control_grab_click_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->grab_click_focus();
}
}
}
static void wasgo_Control_grab_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->grab_focus();
}
}
}
static WasGoId wasgo_Control_has_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_color(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_color_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_color_override(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_constant_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_constant_override(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_focus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_font(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_font_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_font_override(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_icon(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_icon_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_icon_override(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_point(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_shader_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_shader_override(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_stylebox(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_stylebox(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_has_stylebox_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_stylebox_override(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Control_is_clipping_contents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_clipping_contents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Control_minimum_size_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->minimum_size_changed();
}
}
}
static void wasgo_Control_release_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->release_focus();
}
}
}
static void wasgo_Control_set_anchor(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_anchor(arg0, arg1, &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_Control_set_anchor_and_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_anchor_and_margin(arg0, arg1, arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_Control_set_anchors_and_margins_preset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_anchors_and_margins_preset(arg0, arg1, arg2);
}
}
}
static void wasgo_Control_set_anchors_preset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_anchors_preset(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Control_set_begin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_begin(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_clip_contents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_clip_contents(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_custom_minimum_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_minimum_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_default_cursor_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_default_cursor_shape(arg0);
}
}
}
static void wasgo_Control_set_drag_forwarding(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_drag_forwarding(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_drag_preview(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_drag_preview(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_end(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_end(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_focus_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_focus_mode(arg0);
}
}
}
static void wasgo_Control_set_focus_neighbour(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_focus_neighbour(arg0, &(NodePath *)lookup_object(arg1));
}
}
}
static void wasgo_Control_set_focus_next(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_focus_next(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_focus_previous(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_focus_previous(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_global_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_global_position(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Control_set_h_grow_direction(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_h_grow_direction(arg0);
}
}
}
static void wasgo_Control_set_h_size_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_h_size_flags(arg0);
}
}
}
static void wasgo_Control_set_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_margin(arg0, arg1);
}
}
}
static void wasgo_Control_set_margins_preset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_margins_preset(arg0, arg1, arg2);
}
}
}
static void wasgo_Control_set_mouse_filter(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_mouse_filter(arg0);
}
}
}
static void wasgo_Control_set_pivot_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_pivot_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_position(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Control_set_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation(arg0);
}
}
}
static void wasgo_Control_set_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation_degrees(arg0);
}
}
}
static void wasgo_Control_set_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Control_set_stretch_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_stretch_ratio(arg0);
}
}
}
static void wasgo_Control_set_theme(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_theme(&(Theme *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_tooltip(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Control_set_v_grow_direction(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_v_grow_direction(arg0);
}
}
}
static void wasgo_Control_set_v_size_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->set_v_size_flags(arg0);
}
}
}
static void wasgo_Control_show_modal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->show_modal(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Control_warp_mouse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Control *caller = (Control *) state->lookup_object(caller_id);
if(caller){
caller->warp_mouse(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ConvexPolygonShape_get_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConvexPolygonShape *caller = (ConvexPolygonShape *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ConvexPolygonShape_set_points(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConvexPolygonShape *caller = (ConvexPolygonShape *) state->lookup_object(caller_id);
if(caller){
caller->set_points(&(PoolVector3Array *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ConvexPolygonShape2D_get_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConvexPolygonShape2D *caller = (ConvexPolygonShape2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ConvexPolygonShape2D_set_point_cloud(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConvexPolygonShape2D *caller = (ConvexPolygonShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_cloud(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_ConvexPolygonShape2D_set_points(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ConvexPolygonShape2D *caller = (ConvexPolygonShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_points(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Crypto_generate_random_bytes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Crypto *caller = (Crypto *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->generate_random_bytes(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Crypto_generate_rsa(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Crypto *caller = (Crypto *) state->lookup_object(caller_id);
if(caller){
CryptoKey ret_value = caller->generate_rsa(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Crypto_generate_self_signed_certificate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Crypto *caller = (Crypto *) state->lookup_object(caller_id);
if(caller){
X509Certificate ret_value = caller->generate_self_signed_certificate(&(CryptoKey *)lookup_object(arg0), &(String *)lookup_object(arg1), &(String *)lookup_object(arg2), &(String *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CryptoKey_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CryptoKey *caller = (CryptoKey *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CryptoKey_save(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CryptoKey *caller = (CryptoKey *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CubeMap_get_flags(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_flags();
}
}
}
static int wasgo_CubeMap_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static float wasgo_CubeMap_get_lossy_storage_quality(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_lossy_storage_quality();
}
}
}
static WasGoId wasgo_CubeMap_get_side(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->get_side(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_CubeMap_get_storage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
enum.CubeMap::Storage ret_value = caller->get_storage();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CubeMap_get_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_width();
}
}
}
static void wasgo_CubeMap_set_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
caller->set_flags(arg0);
}
}
}
static void wasgo_CubeMap_set_lossy_storage_quality(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
caller->set_lossy_storage_quality(arg0);
}
}
}
static void wasgo_CubeMap_set_side(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
caller->set_side(arg0, &(Image *)lookup_object(arg1));
}
}
}
static void wasgo_CubeMap_set_storage(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMap *caller = (CubeMap *) state->lookup_object(caller_id);
if(caller){
caller->set_storage(arg0);
}
}
}
static WasGoId wasgo_CubeMesh_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_CubeMesh_get_subdivide_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_depth();
}
}
}
static int wasgo_CubeMesh_get_subdivide_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_height();
}
}
}
static int wasgo_CubeMesh_get_subdivide_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_width();
}
}
}
static void wasgo_CubeMesh_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_CubeMesh_set_subdivide_depth(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_depth(arg0);
}
}
}
static void wasgo_CubeMesh_set_subdivide_height(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_height(arg0);
}
}
}
static void wasgo_CubeMesh_set_subdivide_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CubeMesh *caller = (CubeMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_width(arg0);
}
}
}
static WasGoId wasgo_Curve__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Curve__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Array *)lookup_array(arg0));
}
}
}
static int wasgo_Curve_add_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, float arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->add_point(&(Vector2 *)lookup_object(arg0), arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_Curve_bake(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->bake();
}
}
}
static void wasgo_Curve_clean_dupes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->clean_dupes();
}
}
}
static void wasgo_Curve_clear_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->clear_points();
}
}
}
static int wasgo_Curve_get_bake_resolution(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->get_bake_resolution();
}
}
}
static float wasgo_Curve_get_max_value(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_value();
}
}
}
static float wasgo_Curve_get_min_value(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->get_min_value();
}
}
}
static int wasgo_Curve_get_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_count();
}
}
}
static WasGoId wasgo_Curve_get_point_left_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
enum.Curve::TangentMode ret_value = caller->get_point_left_mode(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Curve_get_point_left_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_left_tangent(arg0);
}
}
}
static WasGoId wasgo_Curve_get_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_point_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve_get_point_right_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
enum.Curve::TangentMode ret_value = caller->get_point_right_mode(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Curve_get_point_right_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_right_tangent(arg0);
}
}
}
static float wasgo_Curve_interpolate(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->interpolate(arg0);
}
}
}
static float wasgo_Curve_interpolate_baked(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->interpolate_baked(arg0);
}
}
}
static void wasgo_Curve_remove_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->remove_point(arg0);
}
}
}
static void wasgo_Curve_set_bake_resolution(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_resolution(arg0);
}
}
}
static void wasgo_Curve_set_max_value(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_max_value(arg0);
}
}
}
static void wasgo_Curve_set_min_value(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_min_value(arg0);
}
}
}
static void wasgo_Curve_set_point_left_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_point_left_mode(arg0, arg1);
}
}
}
static void wasgo_Curve_set_point_left_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_point_left_tangent(arg0, arg1);
}
}
}
static int wasgo_Curve_set_point_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
return caller->set_point_offset(arg0, arg1);
}
}
}
static void wasgo_Curve_set_point_right_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_point_right_mode(arg0, arg1);
}
}
}
static void wasgo_Curve_set_point_right_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_point_right_tangent(arg0, arg1);
}
}
}
static void wasgo_Curve_set_point_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve *caller = (Curve *) state->lookup_object(caller_id);
if(caller){
caller->set_point_value(arg0, arg1);
}
}
}
static WasGoId wasgo_Curve2D__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Curve2D__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_Curve2D_add_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->add_point(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), arg3);
}
}
}
static void wasgo_Curve2D_clear_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->clear_points();
}
}
}
static float wasgo_Curve2D_get_bake_interval(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_bake_interval();
}
}
}
static float wasgo_Curve2D_get_baked_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_baked_length();
}
}
}
static WasGoId wasgo_Curve2D_get_baked_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_baked_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Curve2D_get_closest_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_closest_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Curve2D_get_closest_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_closest_point(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Curve2D_get_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_count();
}
}
}
static WasGoId wasgo_Curve2D_get_point_in(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_point_in(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve2D_get_point_out(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_point_out(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve2D_get_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_point_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve2D_interpolate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->interpolate(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve2D_interpolate_baked(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->interpolate_baked(arg0, &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve2D_interpolatef(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->interpolatef(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Curve2D_remove_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_point(arg0);
}
}
}
static void wasgo_Curve2D_set_bake_interval(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_interval(arg0);
}
}
}
static void wasgo_Curve2D_set_point_in(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_in(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Curve2D_set_point_out(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_out(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Curve2D_set_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_position(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Curve2D_tessellate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve2D *caller = (Curve2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->tessellate(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Curve3D__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_Curve3D_add_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->add_point(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2), arg3);
}
}
}
static void wasgo_Curve3D_clear_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->clear_points();
}
}
}
static float wasgo_Curve3D_get_bake_interval(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_bake_interval();
}
}
}
static float wasgo_Curve3D_get_baked_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_baked_length();
}
}
}
static WasGoId wasgo_Curve3D_get_baked_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_baked_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_get_baked_tilts(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
PoolRealArray ret_value = caller->get_baked_tilts();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_get_baked_up_vectors(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_baked_up_vectors();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Curve3D_get_closest_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_closest_offset(&(Vector3 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Curve3D_get_closest_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_closest_point(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Curve3D_get_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_count();
}
}
}
static WasGoId wasgo_Curve3D_get_point_in(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_point_in(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_get_point_out(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_point_out(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_get_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_point_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Curve3D_get_point_tilt(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_tilt(arg0);
}
}
}
static WasGoId wasgo_Curve3D_interpolate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->interpolate(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_interpolate_baked(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->interpolate_baked(arg0, &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_interpolate_baked_up_vector(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->interpolate_baked_up_vector(arg0, &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_interpolatef(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->interpolatef(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Curve3D_is_up_vector_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_up_vector_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Curve3D_remove_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->remove_point(arg0);
}
}
}
static void wasgo_Curve3D_set_bake_interval(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_interval(arg0);
}
}
}
static void wasgo_Curve3D_set_point_in(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_in(arg0, &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_Curve3D_set_point_out(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_out(arg0, &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_Curve3D_set_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_position(arg0, &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_Curve3D_set_point_tilt(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_tilt(arg0, arg1);
}
}
}
static void wasgo_Curve3D_set_up_vector_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
caller->set_up_vector_enabled(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Curve3D_tessellate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Curve3D *caller = (Curve3D *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->tessellate(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CurveTexture__update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CurveTexture *caller = (CurveTexture *) state->lookup_object(caller_id);
if(caller){
caller->_update();
}
}
}
static WasGoId wasgo_CurveTexture_get_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CurveTexture *caller = (CurveTexture *) state->lookup_object(caller_id);
if(caller){
Curve ret_value = caller->get_curve();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_CurveTexture_set_curve(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CurveTexture *caller = (CurveTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_curve(&(Curve *)lookup_object(arg0));
}
}
}
static void wasgo_CurveTexture_set_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CurveTexture *caller = (CurveTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_width(arg0);
}
}
}
static float wasgo_CylinderMesh_get_bottom_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_bottom_radius();
}
}
}
static float wasgo_CylinderMesh_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static int wasgo_CylinderMesh_get_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_radial_segments();
}
}
}
static int wasgo_CylinderMesh_get_rings(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_rings();
}
}
}
static float wasgo_CylinderMesh_get_top_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_top_radius();
}
}
}
static void wasgo_CylinderMesh_set_bottom_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_bottom_radius(arg0);
}
}
}
static void wasgo_CylinderMesh_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_CylinderMesh_set_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_radial_segments(arg0);
}
}
}
static void wasgo_CylinderMesh_set_rings(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_rings(arg0);
}
}
}
static void wasgo_CylinderMesh_set_top_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderMesh *caller = (CylinderMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_top_radius(arg0);
}
}
}
static float wasgo_CylinderShape_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderShape *caller = (CylinderShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static float wasgo_CylinderShape_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderShape *caller = (CylinderShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static void wasgo_CylinderShape_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderShape *caller = (CylinderShape *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_CylinderShape_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
CylinderShape *caller = (CylinderShape *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static float wasgo_DampedSpringJoint2D_get_damping(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_damping();
}
}
}
static float wasgo_DampedSpringJoint2D_get_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_length();
}
}
}
static float wasgo_DampedSpringJoint2D_get_rest_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_rest_length();
}
}
}
static float wasgo_DampedSpringJoint2D_get_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_stiffness();
}
}
}
static void wasgo_DampedSpringJoint2D_set_damping(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_damping(arg0);
}
}
}
static void wasgo_DampedSpringJoint2D_set_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_length(arg0);
}
}
}
static void wasgo_DampedSpringJoint2D_set_rest_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_rest_length(arg0);
}
}
}
static void wasgo_DampedSpringJoint2D_set_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DampedSpringJoint2D *caller = (DampedSpringJoint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_stiffness(arg0);
}
}
}
static WasGoId wasgo_DirectionalLight_get_shadow_depth_range(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DirectionalLight *caller = (DirectionalLight *) state->lookup_object(caller_id);
if(caller){
enum.DirectionalLight::ShadowDepthRange ret_value = caller->get_shadow_depth_range();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_DirectionalLight_get_shadow_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DirectionalLight *caller = (DirectionalLight *) state->lookup_object(caller_id);
if(caller){
enum.DirectionalLight::ShadowMode ret_value = caller->get_shadow_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_DirectionalLight_is_blend_splits_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DirectionalLight *caller = (DirectionalLight *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_blend_splits_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_DirectionalLight_set_blend_splits(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DirectionalLight *caller = (DirectionalLight *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_splits(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_DirectionalLight_set_shadow_depth_range(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DirectionalLight *caller = (DirectionalLight *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_depth_range(arg0);
}
}
}
static void wasgo_DirectionalLight_set_shadow_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DirectionalLight *caller = (DirectionalLight *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_mode(arg0);
}
}
}
static void wasgo_DynamicFont_add_fallback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->add_fallback(&(DynamicFontData *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_DynamicFont_get_fallback(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
DynamicFontData ret_value = caller->get_fallback(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_DynamicFont_get_fallback_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
return caller->get_fallback_count();
}
}
}
static WasGoId wasgo_DynamicFont_get_font_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
DynamicFontData ret_value = caller->get_font_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_DynamicFont_get_outline_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_outline_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_DynamicFont_get_outline_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
return caller->get_outline_size();
}
}
}
static int wasgo_DynamicFont_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
return caller->get_size();
}
}
}
static int wasgo_DynamicFont_get_spacing(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
return caller->get_spacing(arg0);
}
}
}
static WasGoId wasgo_DynamicFont_get_use_filter(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_filter();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_DynamicFont_get_use_mipmaps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_mipmaps();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_DynamicFont_remove_fallback(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->remove_fallback(arg0);
}
}
}
static void wasgo_DynamicFont_set_fallback(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_fallback(arg0, &(DynamicFontData *)lookup_object(arg1));
}
}
}
static void wasgo_DynamicFont_set_font_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_font_data(&(DynamicFontData *)lookup_object(arg0));
}
}
}
static void wasgo_DynamicFont_set_outline_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_outline_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_DynamicFont_set_outline_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_outline_size(arg0);
}
}
}
static void wasgo_DynamicFont_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_size(arg0);
}
}
}
static void wasgo_DynamicFont_set_spacing(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_spacing(arg0, arg1);
}
}
}
static void wasgo_DynamicFont_set_use_filter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_use_filter(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_DynamicFont_set_use_mipmaps(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFont *caller = (DynamicFont *) state->lookup_object(caller_id);
if(caller){
caller->set_use_mipmaps(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_DynamicFontData_get_font_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFontData *caller = (DynamicFontData *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_font_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_DynamicFontData_get_hinting(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFontData *caller = (DynamicFontData *) state->lookup_object(caller_id);
if(caller){
enum.DynamicFontData::Hinting ret_value = caller->get_hinting();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_DynamicFontData_is_antialiased(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFontData *caller = (DynamicFontData *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_antialiased();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_DynamicFontData_set_antialiased(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFontData *caller = (DynamicFontData *) state->lookup_object(caller_id);
if(caller){
caller->set_antialiased(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_DynamicFontData_set_font_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFontData *caller = (DynamicFontData *) state->lookup_object(caller_id);
if(caller){
caller->set_font_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_DynamicFontData_set_hinting(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
DynamicFontData *caller = (DynamicFontData *) state->lookup_object(caller_id);
if(caller){
caller->set_hinting(arg0);
}
}
}
static void wasgo_EditorExportPlugin__export_begin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->_export_begin(&(PoolStringArray *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(String *)lookup_object(arg2), arg3);
}
}
}
static void wasgo_EditorExportPlugin__export_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->_export_end();
}
}
}
static void wasgo_EditorExportPlugin__export_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->_export_file(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(PoolStringArray *)lookup_object(arg2));
}
}
}
static void wasgo_EditorExportPlugin_add_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_file(&(String *)lookup_object(arg0), &(PoolByteArray *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_EditorExportPlugin_add_ios_bundle_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_ios_bundle_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorExportPlugin_add_ios_cpp_code(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_ios_cpp_code(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorExportPlugin_add_ios_framework(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_ios_framework(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorExportPlugin_add_ios_linker_flags(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_ios_linker_flags(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorExportPlugin_add_ios_plist_content(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_ios_plist_content(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorExportPlugin_add_shared_object(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_shared_object(&(String *)lookup_object(arg0), &(PoolStringArray *)lookup_object(arg1));
}
}
}
static void wasgo_EditorExportPlugin_skip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorExportPlugin *caller = (EditorExportPlugin *) state->lookup_object(caller_id);
if(caller){
caller->skip();
}
}
}
static WasGoId wasgo_EditorFeatureProfile_get_feature_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_feature_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFeatureProfile_is_class_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_class_disabled(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFeatureProfile_is_class_editor_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_class_editor_disabled(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFeatureProfile_is_class_property_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_class_property_disabled(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFeatureProfile_is_feature_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_feature_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFeatureProfile_load_from_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load_from_file(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFeatureProfile_save_to_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_to_file(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorFeatureProfile_set_disable_class(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_class(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorFeatureProfile_set_disable_class_editor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_class_editor(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorFeatureProfile_set_disable_class_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_class_property(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_EditorFeatureProfile_set_disable_feature(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFeatureProfile *caller = (EditorFeatureProfile *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_feature(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorFileDialog__action_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_action_pressed();
}
}
}
static void wasgo_EditorFileDialog__cancel_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_cancel_pressed();
}
}
}
static void wasgo_EditorFileDialog__dir_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_dir_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog__favorite_move_down(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_favorite_move_down();
}
}
}
static void wasgo_EditorFileDialog__favorite_move_up(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_favorite_move_up();
}
}
}
static void wasgo_EditorFileDialog__favorite_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_favorite_pressed();
}
}
}
static void wasgo_EditorFileDialog__favorite_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_favorite_selected(arg0);
}
}
}
static void wasgo_EditorFileDialog__file_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_file_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog__filter_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_filter_selected(arg0);
}
}
}
static void wasgo_EditorFileDialog__go_back(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_go_back();
}
}
}
static void wasgo_EditorFileDialog__go_forward(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_go_forward();
}
}
}
static void wasgo_EditorFileDialog__go_up(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_go_up();
}
}
}
static void wasgo_EditorFileDialog__item_db_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_item_db_selected(arg0);
}
}
}
static void wasgo_EditorFileDialog__item_list_item_rmb_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_item_list_item_rmb_selected(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_EditorFileDialog__item_list_rmb_clicked(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_item_list_rmb_clicked(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog__item_menu_id_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_item_menu_id_pressed(arg0);
}
}
}
static void wasgo_EditorFileDialog__item_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_item_selected(arg0);
}
}
}
static void wasgo_EditorFileDialog__items_clear_selection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_items_clear_selection();
}
}
}
static void wasgo_EditorFileDialog__make_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_make_dir();
}
}
}
static void wasgo_EditorFileDialog__make_dir_confirm(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_make_dir_confirm();
}
}
}
static void wasgo_EditorFileDialog__multi_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_multi_selected(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorFileDialog__recent_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_recent_selected(arg0);
}
}
}
static void wasgo_EditorFileDialog__save_confirm_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_save_confirm_pressed();
}
}
}
static void wasgo_EditorFileDialog__select_drive(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_select_drive(arg0);
}
}
}
static void wasgo_EditorFileDialog__thumbnail_done(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_thumbnail_done(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1), &(Texture *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_EditorFileDialog__thumbnail_result(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_thumbnail_result(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1), &(Texture *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_EditorFileDialog__unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog__update_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_update_dir();
}
}
}
static void wasgo_EditorFileDialog__update_file_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_update_file_list();
}
}
}
static void wasgo_EditorFileDialog__update_file_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_update_file_name();
}
}
}
static void wasgo_EditorFileDialog_add_filter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->add_filter(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog_clear_filters(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->clear_filters();
}
}
}
static WasGoId wasgo_EditorFileDialog_get_access(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
enum.EditorFileDialog::Access ret_value = caller->get_access();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileDialog_get_current_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_dir();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileDialog_get_current_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileDialog_get_current_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileDialog_get_display_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
enum.EditorFileDialog::DisplayMode ret_value = caller->get_display_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileDialog_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
enum.EditorFileDialog::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileDialog_get_vbox(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
VBoxContainer ret_value = caller->get_vbox();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorFileDialog_invalidate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->invalidate();
}
}
}
static WasGoId wasgo_EditorFileDialog_is_overwrite_warning_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_overwrite_warning_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileDialog_is_showing_hidden_files(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_showing_hidden_files();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorFileDialog_set_access(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_access(arg0);
}
}
}
static void wasgo_EditorFileDialog_set_current_dir(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_current_dir(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog_set_current_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_current_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog_set_current_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_current_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog_set_disable_overwrite_warning(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_overwrite_warning(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileDialog_set_display_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_display_mode(arg0);
}
}
}
static void wasgo_EditorFileDialog_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_EditorFileDialog_set_show_hidden_files(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileDialog *caller = (EditorFileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_show_hidden_files(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorFileSystem_get_file_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file_type(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystem_get_filesystem(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
EditorFileSystemDirectory ret_value = caller->get_filesystem();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystem_get_filesystem_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
EditorFileSystemDirectory ret_value = caller->get_filesystem_path(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_EditorFileSystem_get_scanning_progress(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
return caller->get_scanning_progress();
}
}
}
static WasGoId wasgo_EditorFileSystem_is_scanning(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_scanning();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorFileSystem_scan(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
caller->scan();
}
}
}
static void wasgo_EditorFileSystem_scan_sources(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
caller->scan_sources();
}
}
}
static void wasgo_EditorFileSystem_update_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
caller->update_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorFileSystem_update_script_classes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystem *caller = (EditorFileSystem *) state->lookup_object(caller_id);
if(caller){
caller->update_script_classes();
}
}
}
static int wasgo_EditorFileSystemDirectory_find_dir_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
return caller->find_dir_index(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_EditorFileSystemDirectory_find_file_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
return caller->find_file_index(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_file(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_EditorFileSystemDirectory_get_file_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
return caller->get_file_count();
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_file_import_is_valid(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_file_import_is_valid(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_file_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file_path(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_file_script_class_extends(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file_script_class_extends(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_file_script_class_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file_script_class_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_file_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file_type(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_parent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
EditorFileSystemDirectory ret_value = caller->get_parent();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorFileSystemDirectory_get_subdir(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
EditorFileSystemDirectory ret_value = caller->get_subdir(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_EditorFileSystemDirectory_get_subdir_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorFileSystemDirectory *caller = (EditorFileSystemDirectory *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdir_count();
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_import_options(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_import_options(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_EditorImportPlugin_get_import_order(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
return caller->get_import_order();
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_importer_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_importer_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_option_visibility(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_option_visibility(&(String *)lookup_object(arg0), &(Dictionary *)lookup_dictionary(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_EditorImportPlugin_get_preset_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
return caller->get_preset_count();
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_preset_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_preset_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_EditorImportPlugin_get_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
return caller->get_priority();
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_recognized_extensions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_recognized_extensions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_resource_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_resource_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_save_extension(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_save_extension();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorImportPlugin_get_visible_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_visible_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_EditorImportPlugin_import(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorImportPlugin *caller = (EditorImportPlugin *) state->lookup_object(caller_id);
if(caller){
return caller->import(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Dictionary *)lookup_dictionary(arg2), &(Array *)lookup_array(arg3), &(Array *)lookup_array(arg4));
}
}
}
static void wasgo_EditorInspector__edit_request_change(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_edit_request_change(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_EditorInspector__feature_profile_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_feature_profile_changed();
}
}
}
static void wasgo_EditorInspector__filter_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_filter_changed(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInspector__multiple_properties_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_multiple_properties_changed(&(PoolStringArray *)lookup_object(arg0), &(Array *)lookup_array(arg1));
}
}
}
static void wasgo_EditorInspector__node_removed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_node_removed(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInspector__object_id_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_object_id_selected(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_EditorInspector__property_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_property_changed(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(String *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_EditorInspector__property_changed_update_all(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_property_changed_update_all(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(String *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_EditorInspector__property_checked(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_property_checked(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorInspector__property_keyed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_property_keyed(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorInspector__property_keyed_with_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_property_keyed_with_value(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_EditorInspector__property_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_property_selected(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_EditorInspector__resource_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_resource_selected(&(String *)lookup_object(arg0), &(Resource *)lookup_object(arg1));
}
}
}
static void wasgo_EditorInspector__vscroll_changed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->_vscroll_changed(arg0);
}
}
}
static void wasgo_EditorInspector_refresh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspector *caller = (EditorInspector *) state->lookup_object(caller_id);
if(caller){
caller->refresh();
}
}
}
static void wasgo_EditorInspectorPlugin_add_custom_control(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_custom_control(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInspectorPlugin_add_property_editor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_property_editor(&(String *)lookup_object(arg0), &(Control *)lookup_object(arg1));
}
}
}
static void wasgo_EditorInspectorPlugin_add_property_editor_for_multiple_properties(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_property_editor_for_multiple_properties(&(String *)lookup_object(arg0), &(PoolStringArray *)lookup_object(arg1), &(Control *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_EditorInspectorPlugin_can_handle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_handle(&(Object *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorInspectorPlugin_parse_begin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->parse_begin(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInspectorPlugin_parse_category(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->parse_category(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_EditorInspectorPlugin_parse_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->parse_end();
}
}
}
static WasGoId wasgo_EditorInspectorPlugin_parse_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, int arg3, WasGoID arg4, int arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInspectorPlugin *caller = (EditorInspectorPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->parse_property(&(Object *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), arg3, &(String *)lookup_object(arg4), arg5);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorInterface_edit_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->edit_resource(&(Resource *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorInterface_get_base_control(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
Control ret_value = caller->get_base_control();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_current_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_edited_scene_root(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_edited_scene_root();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_editor_settings(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
EditorSettings ret_value = caller->get_editor_settings();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_editor_viewport(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
Control ret_value = caller->get_editor_viewport();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_inspector(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
EditorInspector ret_value = caller->get_inspector();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_open_scenes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_open_scenes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_resource_filesystem(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
EditorFileSystem ret_value = caller->get_resource_filesystem();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_resource_previewer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
EditorResourcePreview ret_value = caller->get_resource_previewer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_script_editor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
ScriptEditor ret_value = caller->get_script_editor();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_selected_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_selected_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_get_selection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
EditorSelection ret_value = caller->get_selection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorInterface_inspect_object(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->inspect_object(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_EditorInterface_is_plugin_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_plugin_enabled(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorInterface_make_mesh_previews(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->make_mesh_previews(&(Array *)lookup_array(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorInterface_open_scene_from_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->open_scene_from_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInterface_reload_scene_from_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->reload_scene_from_path(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorInterface_save_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorInterface_save_scene_as(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->save_scene_as(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorInterface_select_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->select_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInterface_set_distraction_free_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_distraction_free_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInterface_set_main_screen_editor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_main_screen_editor(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorInterface_set_plugin_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorInterface *caller = (EditorInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_plugin_enabled(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorNavigationMeshGenerator_bake(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorNavigationMeshGenerator *caller = (EditorNavigationMeshGenerator *) state->lookup_object(caller_id);
if(caller){
caller->bake(&(NavigationMesh *)lookup_object(arg0), &(Node *)lookup_object(arg1));
}
}
}
static void wasgo_EditorNavigationMeshGenerator_clear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorNavigationMeshGenerator *caller = (EditorNavigationMeshGenerator *) state->lookup_object(caller_id);
if(caller){
caller->clear(&(NavigationMesh *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_add_autoload_singleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_autoload_singleton(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_EditorPlugin_add_control_to_bottom_panel(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
ToolButton ret_value = caller->add_control_to_bottom_panel(&(Control *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorPlugin_add_control_to_container(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_control_to_container(arg0, &(Control *)lookup_object(arg1));
}
}
}
static void wasgo_EditorPlugin_add_control_to_dock(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_control_to_dock(arg0, &(Control *)lookup_object(arg1));
}
}
}
static void wasgo_EditorPlugin_add_custom_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_custom_type(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Script *)lookup_object(arg2), &(Texture *)lookup_object(arg3));
}
}
}
static void wasgo_EditorPlugin_add_export_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_export_plugin(&(EditorExportPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_add_import_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_import_plugin(&(EditorImportPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_add_inspector_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_inspector_plugin(&(EditorInspectorPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_add_scene_import_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_scene_import_plugin(&(EditorSceneImporter *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_add_spatial_gizmo_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_spatial_gizmo_plugin(&(EditorSpatialGizmoPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_add_tool_menu_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_tool_menu_item(&(String *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_EditorPlugin_add_tool_submenu_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_tool_submenu_item(&(String *)lookup_object(arg0), &(Object *)lookup_object(arg1));
}
}
}
static void wasgo_EditorPlugin_apply_changes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->apply_changes();
}
}
}
static WasGoId wasgo_EditorPlugin_build(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->build();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorPlugin_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_EditorPlugin_disable_plugin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->disable_plugin();
}
}
}
static void wasgo_EditorPlugin_edit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->edit(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_enable_plugin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->enable_plugin();
}
}
}
static void wasgo_EditorPlugin_forward_canvas_draw_over_viewport(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->forward_canvas_draw_over_viewport(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_forward_canvas_force_draw_over_viewport(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->forward_canvas_force_draw_over_viewport(&(Control *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorPlugin_forward_canvas_gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->forward_canvas_gui_input(&(InputEvent *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_forward_spatial_gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->forward_spatial_gui_input(&(Camera *)lookup_object(arg0), &(InputEvent *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_get_breakpoints(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_breakpoints();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_get_editor_interface(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
EditorInterface ret_value = caller->get_editor_interface();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_get_plugin_icon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_plugin_icon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_get_plugin_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_plugin_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_get_script_create_dialog(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
ScriptCreateDialog ret_value = caller->get_script_create_dialog();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_get_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_get_undo_redo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
UndoRedo ret_value = caller->get_undo_redo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorPlugin_get_window_layout(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->get_window_layout(&(ConfigFile *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorPlugin_handles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->handles(&(Object *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorPlugin_has_main_screen(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_main_screen();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorPlugin_hide_bottom_panel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->hide_bottom_panel();
}
}
}
static void wasgo_EditorPlugin_make_bottom_panel_item_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->make_bottom_panel_item_visible(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_make_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->make_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_queue_save_layout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->queue_save_layout();
}
}
}
static void wasgo_EditorPlugin_remove_autoload_singleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_autoload_singleton(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_control_from_bottom_panel(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_control_from_bottom_panel(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_control_from_container(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_control_from_container(arg0, &(Control *)lookup_object(arg1));
}
}
}
static void wasgo_EditorPlugin_remove_control_from_docks(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_control_from_docks(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_custom_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_custom_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_export_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_export_plugin(&(EditorExportPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_import_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_import_plugin(&(EditorImportPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_inspector_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_inspector_plugin(&(EditorInspectorPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_scene_import_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_scene_import_plugin(&(EditorSceneImporter *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_spatial_gizmo_plugin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_spatial_gizmo_plugin(&(EditorSpatialGizmoPlugin *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_remove_tool_menu_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->remove_tool_menu_item(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorPlugin_save_external_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->save_external_data();
}
}
}
static void wasgo_EditorPlugin_set_force_draw_over_forwarding_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->set_force_draw_over_forwarding_enabled();
}
}
}
static void wasgo_EditorPlugin_set_input_event_forwarding_always_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->set_input_event_forwarding_always_enabled();
}
}
}
static void wasgo_EditorPlugin_set_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->set_state(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_EditorPlugin_set_window_layout(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
caller->set_window_layout(&(ConfigFile *)lookup_object(arg0));
}
}
}
static int wasgo_EditorPlugin_update_overlays(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorPlugin *caller = (EditorPlugin *) state->lookup_object(caller_id);
if(caller){
return caller->update_overlays();
}
}
}
static void wasgo_EditorProperty__focusable_focused(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->_focusable_focused(arg0);
}
}
}
static void wasgo_EditorProperty__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_add_focusable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->add_focusable(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_emit_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->emit_changed(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(String *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static WasGoId wasgo_EditorProperty_get_edited_object(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_edited_object();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_get_edited_property(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_edited_property();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_get_label(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_label();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_get_tooltip_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_tooltip_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_is_checkable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_checkable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_is_checked(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_checked();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_is_draw_red(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_draw_red();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_is_keying(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_keying();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorProperty_is_read_only(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_read_only();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorProperty_set_bottom_editor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->set_bottom_editor(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_set_checkable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->set_checkable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_set_checked(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->set_checked(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_set_draw_red(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_red(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_set_keying(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->set_keying(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_set_label(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->set_label(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_set_read_only(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->set_read_only(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorProperty_update_property(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorProperty *caller = (EditorProperty *) state->lookup_object(caller_id);
if(caller){
caller->update_property();
}
}
}
static WasGoId wasgo_EditorResourceConversionPlugin__convert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourceConversionPlugin *caller = (EditorResourceConversionPlugin *) state->lookup_object(caller_id);
if(caller){
Resource ret_value = caller->_convert(&(Resource *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorResourceConversionPlugin__converts_to(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourceConversionPlugin *caller = (EditorResourceConversionPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_converts_to();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorResourcePreview__preview_ready(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreview *caller = (EditorResourcePreview *) state->lookup_object(caller_id);
if(caller){
caller->_preview_ready(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1), &(Texture *)lookup_object(arg2), arg3, &(String *)lookup_object(arg4), &(Variant *)lookup_object(arg5));
}
}
}
static void wasgo_EditorResourcePreview_add_preview_generator(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreview *caller = (EditorResourcePreview *) state->lookup_object(caller_id);
if(caller){
caller->add_preview_generator(&(EditorResourcePreviewGenerator *)lookup_object(arg0));
}
}
}
static void wasgo_EditorResourcePreview_check_for_invalidation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreview *caller = (EditorResourcePreview *) state->lookup_object(caller_id);
if(caller){
caller->check_for_invalidation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorResourcePreview_queue_edited_resource_preview(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreview *caller = (EditorResourcePreview *) state->lookup_object(caller_id);
if(caller){
caller->queue_edited_resource_preview(&(Resource *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_EditorResourcePreview_queue_resource_preview(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreview *caller = (EditorResourcePreview *) state->lookup_object(caller_id);
if(caller){
caller->queue_resource_preview(&(String *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_EditorResourcePreview_remove_preview_generator(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreview *caller = (EditorResourcePreview *) state->lookup_object(caller_id);
if(caller){
caller->remove_preview_generator(&(EditorResourcePreviewGenerator *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorResourcePreviewGenerator_can_generate_small_preview(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreviewGenerator *caller = (EditorResourcePreviewGenerator *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_generate_small_preview();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorResourcePreviewGenerator_generate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreviewGenerator *caller = (EditorResourcePreviewGenerator *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->generate(&(Resource *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorResourcePreviewGenerator_generate_from_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreviewGenerator *caller = (EditorResourcePreviewGenerator *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->generate_from_path(&(String *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorResourcePreviewGenerator_generate_small_preview_automatically(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreviewGenerator *caller = (EditorResourcePreviewGenerator *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->generate_small_preview_automatically();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorResourcePreviewGenerator_handles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorResourcePreviewGenerator *caller = (EditorResourcePreviewGenerator *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->handles(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSceneImporter__get_extensions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSceneImporter *caller = (EditorSceneImporter *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_extensions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_EditorSceneImporter__get_import_flags(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSceneImporter *caller = (EditorSceneImporter *) state->lookup_object(caller_id);
if(caller){
return caller->_get_import_flags();
}
}
}
static WasGoId wasgo_EditorSceneImporter__import_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSceneImporter *caller = (EditorSceneImporter *) state->lookup_object(caller_id);
if(caller){
Animation ret_value = caller->_import_animation(&(String *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSceneImporter__import_scene(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSceneImporter *caller = (EditorSceneImporter *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->_import_scene(&(String *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSceneImporter_import_animation_from_other_importer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSceneImporter *caller = (EditorSceneImporter *) state->lookup_object(caller_id);
if(caller){
Animation ret_value = caller->import_animation_from_other_importer(&(String *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSceneImporter_import_scene_from_other_importer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSceneImporter *caller = (EditorSceneImporter *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->import_scene_from_other_importer(&(String *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorScenePostImport_get_source_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorScenePostImport *caller = (EditorScenePostImport *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_source_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorScenePostImport_get_source_folder(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorScenePostImport *caller = (EditorScenePostImport *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_source_folder();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorScenePostImport_post_import(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorScenePostImport *caller = (EditorScenePostImport *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->post_import(&(Object *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorScript__run(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorScript *caller = (EditorScript *) state->lookup_object(caller_id);
if(caller){
caller->_run();
}
}
}
static void wasgo_EditorScript_add_root_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorScript *caller = (EditorScript *) state->lookup_object(caller_id);
if(caller){
caller->add_root_node(&(Node *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorScript_get_editor_interface(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorScript *caller = (EditorScript *) state->lookup_object(caller_id);
if(caller){
EditorInterface ret_value = caller->get_editor_interface();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorScript_get_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorScript *caller = (EditorScript *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSelection__emit_change(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSelection *caller = (EditorSelection *) state->lookup_object(caller_id);
if(caller){
caller->_emit_change();
}
}
}
static void wasgo_EditorSelection__node_removed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSelection *caller = (EditorSelection *) state->lookup_object(caller_id);
if(caller){
caller->_node_removed(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSelection_add_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSelection *caller = (EditorSelection *) state->lookup_object(caller_id);
if(caller){
caller->add_node(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSelection_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSelection *caller = (EditorSelection *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_EditorSelection_get_selected_nodes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSelection *caller = (EditorSelection *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_selected_nodes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSelection_get_transformable_selected_nodes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSelection *caller = (EditorSelection *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_transformable_selected_nodes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSelection_remove_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSelection *caller = (EditorSelection *) state->lookup_object(caller_id);
if(caller){
caller->remove_node(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSettings_add_property_info(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
caller->add_property_info(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_EditorSettings_erase(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
caller->erase(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorSettings_get_favorites(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_favorites();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_get_project_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_project_metadata(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_get_project_settings_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_project_settings_dir();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_get_recent_dirs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_recent_dirs();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_get_setting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_setting(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_get_settings_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_settings_dir();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_has_setting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_setting(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_property_can_revert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->property_can_revert(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSettings_property_get_revert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->property_get_revert(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSettings_set_favorites(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_favorites(&(PoolStringArray *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSettings_set_initial_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_initial_value(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_EditorSettings_set_project_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_project_metadata(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_EditorSettings_set_recent_dirs(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_recent_dirs(&(PoolStringArray *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSettings_set_setting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSettings *caller = (EditorSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_setting(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_EditorSpatialGizmo_add_collision_segments(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->add_collision_segments(&(PoolVector3Array *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpatialGizmo_add_collision_triangles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->add_collision_triangles(&(TriangleMesh *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpatialGizmo_add_handles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->add_handles(&(PoolVector3Array *)lookup_object(arg0), &(Material *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_EditorSpatialGizmo_add_lines(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->add_lines(&(PoolVector3Array *)lookup_object(arg0), &(Material *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(Color *)lookup_object(arg3));
}
}
}
static void wasgo_EditorSpatialGizmo_add_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->add_mesh(&(ArrayMesh *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(SkinReference *)lookup_object(arg2), &(Material *)lookup_object(arg3));
}
}
}
static void wasgo_EditorSpatialGizmo_add_unscaled_billboard(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->add_unscaled_billboard(&(Material *)lookup_object(arg0), arg1, &(Color *)lookup_object(arg2));
}
}
}
static void wasgo_EditorSpatialGizmo_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_EditorSpatialGizmo_commit_handle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->commit_handle(arg0, &(Variant *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_EditorSpatialGizmo_get_handle_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_handle_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmo_get_handle_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_handle_value(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmo_get_plugin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
EditorSpatialGizmoPlugin ret_value = caller->get_plugin();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmo_get_spatial_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
Spatial ret_value = caller->get_spatial_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmo_is_handle_highlighted(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_handle_highlighted(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSpatialGizmo_redraw(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->redraw();
}
}
}
static void wasgo_EditorSpatialGizmo_set_handle(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->set_handle(arg0, &(Camera *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_EditorSpatialGizmo_set_hidden(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->set_hidden(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpatialGizmo_set_spatial_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmo *caller = (EditorSpatialGizmo *) state->lookup_object(caller_id);
if(caller){
caller->set_spatial_node(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpatialGizmoPlugin_add_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
caller->add_material(&(String *)lookup_object(arg0), &(SpatialMaterial *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_can_be_hidden(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_be_hidden();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSpatialGizmoPlugin_commit_handle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
caller->commit_handle(&(EditorSpatialGizmo *)lookup_object(arg0), arg1, &(Variant *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_create_gizmo(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
EditorSpatialGizmo ret_value = caller->create_gizmo(&(Spatial *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSpatialGizmoPlugin_create_handle_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
caller->create_handle_material(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_EditorSpatialGizmoPlugin_create_icon_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
caller->create_icon_material(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(Color *)lookup_object(arg3));
}
}
}
static void wasgo_EditorSpatialGizmoPlugin_create_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
caller->create_material(&(String *)lookup_object(arg0), &(Color *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3), &(bool *)lookup_object(arg4));
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_get_handle_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_handle_name(&(EditorSpatialGizmo *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_get_handle_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_handle_value(&(EditorSpatialGizmo *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_get_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
SpatialMaterial ret_value = caller->get_material(&(String *)lookup_object(arg0), &(EditorSpatialGizmo *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_get_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_priority();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_has_gizmo(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_gizmo(&(Spatial *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_is_handle_highlighted(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_handle_highlighted(&(EditorSpatialGizmo *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpatialGizmoPlugin_is_selectable_when_hidden(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selectable_when_hidden();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSpatialGizmoPlugin_redraw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
caller->redraw(&(EditorSpatialGizmo *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpatialGizmoPlugin_set_handle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpatialGizmoPlugin *caller = (EditorSpatialGizmoPlugin *) state->lookup_object(caller_id);
if(caller){
caller->set_handle(&(EditorSpatialGizmo *)lookup_object(arg0), arg1, &(Camera *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
}
}
}
static void wasgo_EditorSpinSlider__grabber_gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->_grabber_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpinSlider__grabber_mouse_entered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->_grabber_mouse_entered();
}
}
}
static void wasgo_EditorSpinSlider__grabber_mouse_exited(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->_grabber_mouse_exited();
}
}
}
static void wasgo_EditorSpinSlider__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpinSlider__value_focus_exited(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->_value_focus_exited();
}
}
}
static void wasgo_EditorSpinSlider__value_input_closed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->_value_input_closed();
}
}
}
static void wasgo_EditorSpinSlider__value_input_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->_value_input_entered(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorSpinSlider_get_label(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_label();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpinSlider_is_flat(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flat();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorSpinSlider_is_read_only(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_read_only();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorSpinSlider_set_flat(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->set_flat(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpinSlider_set_label(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->set_label(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorSpinSlider_set_read_only(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorSpinSlider *caller = (EditorSpinSlider *) state->lookup_object(caller_id);
if(caller){
caller->set_read_only(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_EditorVCSInterface__commit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
caller->_commit(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorVCSInterface__get_file_diff(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_file_diff(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface__get_modified_files_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_modified_files_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface__get_project_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_project_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface__get_vcs_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_vcs_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface__initialize(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_initialize(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface__is_vcs_initialized(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_vcs_initialized();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface__shut_down(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_shut_down();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorVCSInterface__stage_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
caller->_stage_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorVCSInterface__unstage_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
caller->_unstage_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorVCSInterface_commit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
caller->commit(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_EditorVCSInterface_get_file_diff(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_file_diff(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface_get_modified_files_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_modified_files_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface_get_project_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_project_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface_get_vcs_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_vcs_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface_initialize(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->initialize(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface_is_addon_ready(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_addon_ready();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface_is_vcs_initialized(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_vcs_initialized();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_EditorVCSInterface_shut_down(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->shut_down();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_EditorVCSInterface_stage_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
caller->stage_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_EditorVCSInterface_unstage_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EditorVCSInterface *caller = (EditorVCSInterface *) state->lookup_object(caller_id);
if(caller){
caller->unstage_file(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_EncodedObjectAsID_get_object_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EncodedObjectAsID *caller = (EncodedObjectAsID *) state->lookup_object(caller_id);
if(caller){
return caller->get_object_id();
}
}
}
static void wasgo_EncodedObjectAsID_set_object_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
EncodedObjectAsID *caller = (EncodedObjectAsID *) state->lookup_object(caller_id);
if(caller){
caller->set_object_id(arg0);
}
}
}
static float wasgo_Environment_get_adjustment_brightness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_adjustment_brightness();
}
}
}
static WasGoId wasgo_Environment_get_adjustment_color_correction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_adjustment_color_correction();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_adjustment_contrast(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_adjustment_contrast();
}
}
}
static float wasgo_Environment_get_adjustment_saturation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_adjustment_saturation();
}
}
}
static WasGoId wasgo_Environment_get_ambient_light_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_ambient_light_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_ambient_light_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ambient_light_energy();
}
}
}
static float wasgo_Environment_get_ambient_light_sky_contribution(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ambient_light_sky_contribution();
}
}
}
static WasGoId wasgo_Environment_get_background(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
enum.Environment::BGMode ret_value = caller->get_background();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_get_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_bg_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_bg_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_bg_energy();
}
}
}
static int wasgo_Environment_get_camera_feed_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_camera_feed_id();
}
}
}
static int wasgo_Environment_get_canvas_max_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_canvas_max_layer();
}
}
}
static float wasgo_Environment_get_dof_blur_far_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_dof_blur_far_amount();
}
}
}
static float wasgo_Environment_get_dof_blur_far_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_dof_blur_far_distance();
}
}
}
static WasGoId wasgo_Environment_get_dof_blur_far_quality(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
enum.Environment::DOFBlurQuality ret_value = caller->get_dof_blur_far_quality();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_dof_blur_far_transition(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_dof_blur_far_transition();
}
}
}
static float wasgo_Environment_get_dof_blur_near_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_dof_blur_near_amount();
}
}
}
static float wasgo_Environment_get_dof_blur_near_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_dof_blur_near_distance();
}
}
}
static WasGoId wasgo_Environment_get_dof_blur_near_quality(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
enum.Environment::DOFBlurQuality ret_value = caller->get_dof_blur_near_quality();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_dof_blur_near_transition(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_dof_blur_near_transition();
}
}
}
static WasGoId wasgo_Environment_get_fog_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_fog_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_fog_depth_begin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_depth_begin();
}
}
}
static float wasgo_Environment_get_fog_depth_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_depth_curve();
}
}
}
static float wasgo_Environment_get_fog_depth_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_depth_end();
}
}
}
static float wasgo_Environment_get_fog_height_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_height_curve();
}
}
}
static float wasgo_Environment_get_fog_height_max(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_height_max();
}
}
}
static float wasgo_Environment_get_fog_height_min(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_height_min();
}
}
}
static float wasgo_Environment_get_fog_sun_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_sun_amount();
}
}
}
static WasGoId wasgo_Environment_get_fog_sun_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_fog_sun_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_fog_transmit_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_fog_transmit_curve();
}
}
}
static WasGoId wasgo_Environment_get_glow_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
enum.Environment::GlowBlendMode ret_value = caller->get_glow_blend_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_glow_bloom(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_glow_bloom();
}
}
}
static float wasgo_Environment_get_glow_hdr_bleed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_glow_hdr_bleed_scale();
}
}
}
static float wasgo_Environment_get_glow_hdr_bleed_threshold(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_glow_hdr_bleed_threshold();
}
}
}
static float wasgo_Environment_get_glow_hdr_luminance_cap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_glow_hdr_luminance_cap();
}
}
}
static float wasgo_Environment_get_glow_intensity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_glow_intensity();
}
}
}
static float wasgo_Environment_get_glow_strength(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_glow_strength();
}
}
}
static WasGoId wasgo_Environment_get_sky(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Sky ret_value = caller->get_sky();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_sky_custom_fov(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_sky_custom_fov();
}
}
}
static WasGoId wasgo_Environment_get_sky_orientation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Basis ret_value = caller->get_sky_orientation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_get_sky_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_sky_rotation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_get_sky_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_sky_rotation_degrees();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_ssao_ao_channel_affect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_ao_channel_affect();
}
}
}
static float wasgo_Environment_get_ssao_bias(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_bias();
}
}
}
static WasGoId wasgo_Environment_get_ssao_blur(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
enum.Environment::SSAOBlur ret_value = caller->get_ssao_blur();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_get_ssao_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_ssao_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_ssao_direct_light_affect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_direct_light_affect();
}
}
}
static float wasgo_Environment_get_ssao_edge_sharpness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_edge_sharpness();
}
}
}
static float wasgo_Environment_get_ssao_intensity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_intensity();
}
}
}
static float wasgo_Environment_get_ssao_intensity2(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_intensity2();
}
}
}
static WasGoId wasgo_Environment_get_ssao_quality(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
enum.Environment::SSAOQuality ret_value = caller->get_ssao_quality();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_ssao_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_radius();
}
}
}
static float wasgo_Environment_get_ssao_radius2(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssao_radius2();
}
}
}
static float wasgo_Environment_get_ssr_depth_tolerance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssr_depth_tolerance();
}
}
}
static float wasgo_Environment_get_ssr_fade_in(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssr_fade_in();
}
}
}
static float wasgo_Environment_get_ssr_fade_out(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssr_fade_out();
}
}
}
static int wasgo_Environment_get_ssr_max_steps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_ssr_max_steps();
}
}
}
static WasGoId wasgo_Environment_get_tonemap_auto_exposure(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_tonemap_auto_exposure();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Environment_get_tonemap_auto_exposure_grey(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_tonemap_auto_exposure_grey();
}
}
}
static float wasgo_Environment_get_tonemap_auto_exposure_max(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_tonemap_auto_exposure_max();
}
}
}
static float wasgo_Environment_get_tonemap_auto_exposure_min(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_tonemap_auto_exposure_min();
}
}
}
static float wasgo_Environment_get_tonemap_auto_exposure_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_tonemap_auto_exposure_speed();
}
}
}
static float wasgo_Environment_get_tonemap_exposure(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_tonemap_exposure();
}
}
}
static float wasgo_Environment_get_tonemap_white(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
return caller->get_tonemap_white();
}
}
}
static WasGoId wasgo_Environment_get_tonemapper(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
enum.Environment::ToneMapper ret_value = caller->get_tonemapper();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_adjustment_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_adjustment_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_dof_blur_far_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_dof_blur_far_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_dof_blur_near_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_dof_blur_near_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_fog_depth_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_fog_depth_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_fog_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_fog_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_fog_height_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_fog_height_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_fog_transmit_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_fog_transmit_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_glow_bicubic_upscale_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_glow_bicubic_upscale_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_glow_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_glow_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_glow_level_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_glow_level_enabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_ssao_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ssao_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_ssr_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ssr_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Environment_is_ssr_rough(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ssr_rough();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Environment_set_adjustment_brightness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_adjustment_brightness(arg0);
}
}
}
static void wasgo_Environment_set_adjustment_color_correction(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_adjustment_color_correction(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_adjustment_contrast(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_adjustment_contrast(arg0);
}
}
}
static void wasgo_Environment_set_adjustment_enable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_adjustment_enable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_adjustment_saturation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_adjustment_saturation(arg0);
}
}
}
static void wasgo_Environment_set_ambient_light_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ambient_light_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_ambient_light_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ambient_light_energy(arg0);
}
}
}
static void wasgo_Environment_set_ambient_light_sky_contribution(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ambient_light_sky_contribution(arg0);
}
}
}
static void wasgo_Environment_set_background(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_background(arg0);
}
}
}
static void wasgo_Environment_set_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_bg_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_bg_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_bg_energy(arg0);
}
}
}
static void wasgo_Environment_set_camera_feed_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_camera_feed_id(arg0);
}
}
}
static void wasgo_Environment_set_canvas_max_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_canvas_max_layer(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_far_amount(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_far_amount(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_far_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_far_distance(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_far_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_far_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_dof_blur_far_quality(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_far_quality(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_far_transition(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_far_transition(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_near_amount(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_near_amount(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_near_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_near_distance(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_near_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_near_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_dof_blur_near_quality(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_near_quality(arg0);
}
}
}
static void wasgo_Environment_set_dof_blur_near_transition(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_dof_blur_near_transition(arg0);
}
}
}
static void wasgo_Environment_set_fog_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_fog_depth_begin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_depth_begin(arg0);
}
}
}
static void wasgo_Environment_set_fog_depth_curve(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_depth_curve(arg0);
}
}
}
static void wasgo_Environment_set_fog_depth_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_depth_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_fog_depth_end(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_depth_end(arg0);
}
}
}
static void wasgo_Environment_set_fog_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_fog_height_curve(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_height_curve(arg0);
}
}
}
static void wasgo_Environment_set_fog_height_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_height_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_fog_height_max(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_height_max(arg0);
}
}
}
static void wasgo_Environment_set_fog_height_min(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_height_min(arg0);
}
}
}
static void wasgo_Environment_set_fog_sun_amount(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_sun_amount(arg0);
}
}
}
static void wasgo_Environment_set_fog_sun_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_sun_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_fog_transmit_curve(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_transmit_curve(arg0);
}
}
}
static void wasgo_Environment_set_fog_transmit_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_fog_transmit_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_glow_bicubic_upscale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_bicubic_upscale(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_glow_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_blend_mode(arg0);
}
}
}
static void wasgo_Environment_set_glow_bloom(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_bloom(arg0);
}
}
}
static void wasgo_Environment_set_glow_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_glow_hdr_bleed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_hdr_bleed_scale(arg0);
}
}
}
static void wasgo_Environment_set_glow_hdr_bleed_threshold(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_hdr_bleed_threshold(arg0);
}
}
}
static void wasgo_Environment_set_glow_hdr_luminance_cap(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_hdr_luminance_cap(arg0);
}
}
}
static void wasgo_Environment_set_glow_intensity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_intensity(arg0);
}
}
}
static void wasgo_Environment_set_glow_level(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_level(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Environment_set_glow_strength(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_glow_strength(arg0);
}
}
}
static void wasgo_Environment_set_sky(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_sky(&(Sky *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_sky_custom_fov(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_custom_fov(arg0);
}
}
}
static void wasgo_Environment_set_sky_orientation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_orientation(&(Basis *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_sky_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_rotation(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_sky_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_rotation_degrees(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_ssao_ao_channel_affect(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_ao_channel_affect(arg0);
}
}
}
static void wasgo_Environment_set_ssao_bias(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_bias(arg0);
}
}
}
static void wasgo_Environment_set_ssao_blur(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_blur(arg0);
}
}
}
static void wasgo_Environment_set_ssao_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_ssao_direct_light_affect(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_direct_light_affect(arg0);
}
}
}
static void wasgo_Environment_set_ssao_edge_sharpness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_edge_sharpness(arg0);
}
}
}
static void wasgo_Environment_set_ssao_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_ssao_intensity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_intensity(arg0);
}
}
}
static void wasgo_Environment_set_ssao_intensity2(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_intensity2(arg0);
}
}
}
static void wasgo_Environment_set_ssao_quality(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_quality(arg0);
}
}
}
static void wasgo_Environment_set_ssao_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_radius(arg0);
}
}
}
static void wasgo_Environment_set_ssao_radius2(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssao_radius2(arg0);
}
}
}
static void wasgo_Environment_set_ssr_depth_tolerance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssr_depth_tolerance(arg0);
}
}
}
static void wasgo_Environment_set_ssr_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssr_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_ssr_fade_in(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssr_fade_in(arg0);
}
}
}
static void wasgo_Environment_set_ssr_fade_out(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssr_fade_out(arg0);
}
}
}
static void wasgo_Environment_set_ssr_max_steps(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssr_max_steps(arg0);
}
}
}
static void wasgo_Environment_set_ssr_rough(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_ssr_rough(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_tonemap_auto_exposure(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemap_auto_exposure(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Environment_set_tonemap_auto_exposure_grey(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemap_auto_exposure_grey(arg0);
}
}
}
static void wasgo_Environment_set_tonemap_auto_exposure_max(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemap_auto_exposure_max(arg0);
}
}
}
static void wasgo_Environment_set_tonemap_auto_exposure_min(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemap_auto_exposure_min(arg0);
}
}
}
static void wasgo_Environment_set_tonemap_auto_exposure_speed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemap_auto_exposure_speed(arg0);
}
}
}
static void wasgo_Environment_set_tonemap_exposure(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemap_exposure(arg0);
}
}
}
static void wasgo_Environment_set_tonemap_white(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemap_white(arg0);
}
}
}
static void wasgo_Environment_set_tonemapper(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Environment *caller = (Environment *) state->lookup_object(caller_id);
if(caller){
caller->set_tonemapper(arg0);
}
}
}
static WasGoId wasgo_Expression_execute(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Expression *caller = (Expression *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->execute(&(Array *)lookup_array(arg0), &(Object *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Expression_get_error_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Expression *caller = (Expression *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_error_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Expression_has_execute_failed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Expression *caller = (Expression *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_execute_failed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Expression_parse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Expression *caller = (Expression *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->parse(&(String *)lookup_object(arg0), &(PoolStringArray *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_FileDialog__action_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_action_pressed();
}
}
}
static void wasgo_FileDialog__cancel_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_cancel_pressed();
}
}
}
static void wasgo_FileDialog__dir_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_dir_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog__file_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_file_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog__filter_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_filter_selected(arg0);
}
}
}
static void wasgo_FileDialog__go_up(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_go_up();
}
}
}
static void wasgo_FileDialog__make_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_make_dir();
}
}
}
static void wasgo_FileDialog__make_dir_confirm(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_make_dir_confirm();
}
}
}
static void wasgo_FileDialog__save_confirm_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_save_confirm_pressed();
}
}
}
static void wasgo_FileDialog__select_drive(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_select_drive(arg0);
}
}
}
static void wasgo_FileDialog__tree_item_activated(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_tree_item_activated();
}
}
}
static void wasgo_FileDialog__tree_multi_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_tree_multi_selected(&(Object *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_FileDialog__tree_selected(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_tree_selected();
}
}
}
static void wasgo_FileDialog__unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog__update_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_update_dir();
}
}
}
static void wasgo_FileDialog__update_file_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_update_file_list();
}
}
}
static void wasgo_FileDialog__update_file_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->_update_file_name();
}
}
}
static void wasgo_FileDialog_add_filter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->add_filter(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog_clear_filters(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->clear_filters();
}
}
}
static void wasgo_FileDialog_deselect_items(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->deselect_items();
}
}
}
static WasGoId wasgo_FileDialog_get_access(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
enum.FileDialog::Access ret_value = caller->get_access();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_get_current_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_dir();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_get_current_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_get_current_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_get_filters(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_filters();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_get_line_edit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
LineEdit ret_value = caller->get_line_edit();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
enum.FileDialog::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_get_vbox(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
VBoxContainer ret_value = caller->get_vbox();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_FileDialog_invalidate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->invalidate();
}
}
}
static WasGoId wasgo_FileDialog_is_mode_overriding_title(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_mode_overriding_title();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FileDialog_is_showing_hidden_files(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_showing_hidden_files();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_FileDialog_set_access(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_access(arg0);
}
}
}
static void wasgo_FileDialog_set_current_dir(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_current_dir(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog_set_current_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_current_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog_set_current_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_current_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog_set_filters(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_filters(&(PoolStringArray *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_FileDialog_set_mode_overrides_title(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_mode_overrides_title(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_FileDialog_set_show_hidden_files(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FileDialog *caller = (FileDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_show_hidden_files(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Font_draw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, int arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
caller->draw(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Color *)lookup_object(arg3), arg4, &(Color *)lookup_object(arg5));
}
}
}
static float wasgo_Font_draw_char(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
return caller->draw_char(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), arg2, arg3, &(Color *)lookup_object(arg4), &(bool *)lookup_object(arg5));
}
}
}
static float wasgo_Font_get_ascent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
return caller->get_ascent();
}
}
}
static float wasgo_Font_get_descent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
return caller->get_descent();
}
}
}
static float wasgo_Font_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static WasGoId wasgo_Font_get_string_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_string_size(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Font_get_wordwrap_string_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_wordwrap_string_size(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Font_has_outline(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_outline();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Font_is_distance_field_hint(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_distance_field_hint();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Font_update_changes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Font *caller = (Font *) state->lookup_object(caller_id);
if(caller){
caller->update_changes();
}
}
}
static WasGoId wasgo_FuncRef_call_func(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FuncRef *caller = (FuncRef *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->call_func();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FuncRef_call_funcv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FuncRef *caller = (FuncRef *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->call_funcv(&(Array *)lookup_array(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_FuncRef_is_valid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FuncRef *caller = (FuncRef *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_FuncRef_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FuncRef *caller = (FuncRef *) state->lookup_object(caller_id);
if(caller){
caller->set_function(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_FuncRef_set_instance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
FuncRef *caller = (FuncRef *) state->lookup_object(caller_id);
if(caller){
caller->set_instance(&(Object *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_GDNative_call_native(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNative *caller = (GDNative *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->call_native(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Array *)lookup_array(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNative_get_library(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNative *caller = (GDNative *) state->lookup_object(caller_id);
if(caller){
GDNativeLibrary ret_value = caller->get_library();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNative_initialize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNative *caller = (GDNative *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->initialize();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GDNative_set_library(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNative *caller = (GDNative *) state->lookup_object(caller_id);
if(caller){
caller->set_library(&(GDNativeLibrary *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_GDNative_terminate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNative *caller = (GDNative *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->terminate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNativeLibrary_get_config_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
ConfigFile ret_value = caller->get_config_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNativeLibrary_get_current_dependencies(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_current_dependencies();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNativeLibrary_get_current_library_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_library_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNativeLibrary_get_symbol_prefix(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_symbol_prefix();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNativeLibrary_is_reloadable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_reloadable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDNativeLibrary_is_singleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_singleton();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GDNativeLibrary_set_config_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_config_file(&(ConfigFile *)lookup_object(arg0));
}
}
}
static void wasgo_GDNativeLibrary_set_load_once(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_load_once(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GDNativeLibrary_set_reloadable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_reloadable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GDNativeLibrary_set_singleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_singleton(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GDNativeLibrary_set_symbol_prefix(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_symbol_prefix(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_GDNativeLibrary_should_load_once(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDNativeLibrary *caller = (GDNativeLibrary *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->should_load_once();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDScript_get_as_byte_code(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDScript *caller = (GDScript *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_as_byte_code();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDScript_new(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDScript *caller = (GDScript *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->new();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDScriptFunctionState__signal_callback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDScriptFunctionState *caller = (GDScriptFunctionState *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_signal_callback();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDScriptFunctionState_is_valid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDScriptFunctionState *caller = (GDScriptFunctionState *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GDScriptFunctionState_resume(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GDScriptFunctionState *caller = (GDScriptFunctionState *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->resume(&(Variant *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GIProbe_bake(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->bake(&(Node *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_GIProbe_debug_bake(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->debug_bake();
}
}
}
static float wasgo_GIProbe_get_bias(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_bias();
}
}
}
static int wasgo_GIProbe_get_dynamic_range(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_dynamic_range();
}
}
}
static float wasgo_GIProbe_get_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_energy();
}
}
}
static WasGoId wasgo_GIProbe_get_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_GIProbe_get_normal_bias(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_normal_bias();
}
}
}
static WasGoId wasgo_GIProbe_get_probe_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
GIProbeData ret_value = caller->get_probe_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_GIProbe_get_propagation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_propagation();
}
}
}
static WasGoId wasgo_GIProbe_get_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
enum.GIProbe::Subdiv ret_value = caller->get_subdiv();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GIProbe_is_compressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_compressed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GIProbe_is_interior(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_interior();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GIProbe_set_bias(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_bias(arg0);
}
}
}
static void wasgo_GIProbe_set_compress(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_compress(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbe_set_dynamic_range(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_dynamic_range(arg0);
}
}
}
static void wasgo_GIProbe_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_energy(arg0);
}
}
}
static void wasgo_GIProbe_set_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_extents(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbe_set_interior(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_interior(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbe_set_normal_bias(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_bias(arg0);
}
}
}
static void wasgo_GIProbe_set_probe_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_probe_data(&(GIProbeData *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbe_set_propagation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_propagation(arg0);
}
}
}
static void wasgo_GIProbe_set_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbe *caller = (GIProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_subdiv(arg0);
}
}
}
static float wasgo_GIProbeData_get_bias(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
return caller->get_bias();
}
}
}
static WasGoId wasgo_GIProbeData_get_bounds(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_bounds();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_GIProbeData_get_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell_size();
}
}
}
static WasGoId wasgo_GIProbeData_get_dynamic_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_dynamic_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GIProbeData_get_dynamic_range(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
return caller->get_dynamic_range();
}
}
}
static float wasgo_GIProbeData_get_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
return caller->get_energy();
}
}
}
static float wasgo_GIProbeData_get_normal_bias(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
return caller->get_normal_bias();
}
}
}
static float wasgo_GIProbeData_get_propagation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
return caller->get_propagation();
}
}
}
static WasGoId wasgo_GIProbeData_get_to_cell_xform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_to_cell_xform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GIProbeData_is_compressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_compressed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GIProbeData_is_interior(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_interior();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GIProbeData_set_bias(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_bias(arg0);
}
}
}
static void wasgo_GIProbeData_set_bounds(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_bounds(&(AABB *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbeData_set_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_size(arg0);
}
}
}
static void wasgo_GIProbeData_set_compress(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_compress(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbeData_set_dynamic_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_dynamic_data(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbeData_set_dynamic_range(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_dynamic_range(arg0);
}
}
}
static void wasgo_GIProbeData_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_energy(arg0);
}
}
}
static void wasgo_GIProbeData_set_interior(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_interior(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GIProbeData_set_normal_bias(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_bias(arg0);
}
}
}
static void wasgo_GIProbeData_set_propagation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_propagation(arg0);
}
}
}
static void wasgo_GIProbeData_set_to_cell_xform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GIProbeData *caller = (GIProbeData *) state->lookup_object(caller_id);
if(caller){
caller->set_to_cell_xform(&(Transform *)lookup_object(arg0));
}
}
}
static float wasgo_Generic6DOFJoint__get_angular_hi_limit_x(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_angular_hi_limit_x();
}
}
}
static float wasgo_Generic6DOFJoint__get_angular_hi_limit_y(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_angular_hi_limit_y();
}
}
}
static float wasgo_Generic6DOFJoint__get_angular_hi_limit_z(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_angular_hi_limit_z();
}
}
}
static float wasgo_Generic6DOFJoint__get_angular_lo_limit_x(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_angular_lo_limit_x();
}
}
}
static float wasgo_Generic6DOFJoint__get_angular_lo_limit_y(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_angular_lo_limit_y();
}
}
}
static float wasgo_Generic6DOFJoint__get_angular_lo_limit_z(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_angular_lo_limit_z();
}
}
}
static void wasgo_Generic6DOFJoint__set_angular_hi_limit_x(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_angular_hi_limit_x(arg0);
}
}
}
static void wasgo_Generic6DOFJoint__set_angular_hi_limit_y(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_angular_hi_limit_y(arg0);
}
}
}
static void wasgo_Generic6DOFJoint__set_angular_hi_limit_z(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_angular_hi_limit_z(arg0);
}
}
}
static void wasgo_Generic6DOFJoint__set_angular_lo_limit_x(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_angular_lo_limit_x(arg0);
}
}
}
static void wasgo_Generic6DOFJoint__set_angular_lo_limit_y(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_angular_lo_limit_y(arg0);
}
}
}
static void wasgo_Generic6DOFJoint__set_angular_lo_limit_z(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_angular_lo_limit_z(arg0);
}
}
}
static WasGoId wasgo_Generic6DOFJoint_get_flag_x(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flag_x(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Generic6DOFJoint_get_flag_y(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flag_y(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Generic6DOFJoint_get_flag_z(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flag_z(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Generic6DOFJoint_get_param_x(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_param_x(arg0);
}
}
}
static float wasgo_Generic6DOFJoint_get_param_y(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_param_y(arg0);
}
}
}
static float wasgo_Generic6DOFJoint_get_param_z(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_param_z(arg0);
}
}
}
static int wasgo_Generic6DOFJoint_get_precision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_precision();
}
}
}
static void wasgo_Generic6DOFJoint_set_flag_x(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_flag_x(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Generic6DOFJoint_set_flag_y(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_flag_y(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Generic6DOFJoint_set_flag_z(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_flag_z(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Generic6DOFJoint_set_param_x(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_param_x(arg0, arg1);
}
}
}
static void wasgo_Generic6DOFJoint_set_param_y(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_param_y(arg0, arg1);
}
}
}
static void wasgo_Generic6DOFJoint_set_param_z(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_param_z(arg0, arg1);
}
}
}
static void wasgo_Generic6DOFJoint_set_precision(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Generic6DOFJoint *caller = (Generic6DOFJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_precision(arg0);
}
}
}
static WasGoId wasgo_GeometryInstance_get_cast_shadows_setting(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
enum.GeometryInstance::ShadowCastingSetting ret_value = caller->get_cast_shadows_setting();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_GeometryInstance_get_extra_cull_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
return caller->get_extra_cull_margin();
}
}
}
static WasGoId wasgo_GeometryInstance_get_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flag(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_GeometryInstance_get_lod_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
return caller->get_lod_max_distance();
}
}
}
static float wasgo_GeometryInstance_get_lod_max_hysteresis(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
return caller->get_lod_max_hysteresis();
}
}
}
static float wasgo_GeometryInstance_get_lod_min_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
return caller->get_lod_min_distance();
}
}
}
static float wasgo_GeometryInstance_get_lod_min_hysteresis(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
return caller->get_lod_min_hysteresis();
}
}
}
static WasGoId wasgo_GeometryInstance_get_material_override(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material_override();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GeometryInstance_set_cast_shadows_setting(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_cast_shadows_setting(arg0);
}
}
}
static void wasgo_GeometryInstance_set_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_aabb(&(AABB *)lookup_object(arg0));
}
}
}
static void wasgo_GeometryInstance_set_extra_cull_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_extra_cull_margin(arg0);
}
}
}
static void wasgo_GeometryInstance_set_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_flag(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_GeometryInstance_set_lod_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_lod_max_distance(arg0);
}
}
}
static void wasgo_GeometryInstance_set_lod_max_hysteresis(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_lod_max_hysteresis(arg0);
}
}
}
static void wasgo_GeometryInstance_set_lod_min_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_lod_min_distance(arg0);
}
}
}
static void wasgo_GeometryInstance_set_lod_min_hysteresis(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_lod_min_hysteresis(arg0);
}
}
}
static void wasgo_GeometryInstance_set_material_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GeometryInstance *caller = (GeometryInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_material_override(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_Gradient_add_point(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
caller->add_point(arg0, &(Color *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Gradient_get_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Gradient_get_colors(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
PoolColorArray ret_value = caller->get_colors();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Gradient_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
return caller->get_offset(arg0);
}
}
}
static WasGoId wasgo_Gradient_get_offsets(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
PoolRealArray ret_value = caller->get_offsets();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Gradient_get_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_count();
}
}
}
static WasGoId wasgo_Gradient_interpolate(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->interpolate(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Gradient_remove_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
caller->remove_point(arg0);
}
}
}
static void wasgo_Gradient_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
caller->set_color(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_Gradient_set_colors(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
caller->set_colors(&(PoolColorArray *)lookup_object(arg0));
}
}
}
static void wasgo_Gradient_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(arg0, arg1);
}
}
}
static void wasgo_Gradient_set_offsets(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Gradient *caller = (Gradient *) state->lookup_object(caller_id);
if(caller){
caller->set_offsets(&(PoolRealArray *)lookup_object(arg0));
}
}
}
static void wasgo_GradientTexture__update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GradientTexture *caller = (GradientTexture *) state->lookup_object(caller_id);
if(caller){
caller->_update();
}
}
}
static WasGoId wasgo_GradientTexture_get_gradient(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GradientTexture *caller = (GradientTexture *) state->lookup_object(caller_id);
if(caller){
Gradient ret_value = caller->get_gradient();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GradientTexture_set_gradient(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GradientTexture *caller = (GradientTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_gradient(&(Gradient *)lookup_object(arg0));
}
}
}
static void wasgo_GradientTexture_set_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GradientTexture *caller = (GradientTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_width(arg0);
}
}
}
static void wasgo_GraphEdit__connections_layer_draw(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_connections_layer_draw();
}
}
}
static void wasgo_GraphEdit__graph_node_moved(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_graph_node_moved(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit__graph_node_raised(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_graph_node_raised(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit__scroll_moved(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_scroll_moved(arg0);
}
}
}
static void wasgo_GraphEdit__snap_toggled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_snap_toggled();
}
}
}
static void wasgo_GraphEdit__snap_value_changed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_snap_value_changed(arg0);
}
}
}
static void wasgo_GraphEdit__top_layer_draw(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_top_layer_draw();
}
}
}
static void wasgo_GraphEdit__top_layer_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_top_layer_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit__update_scroll_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_update_scroll_offset();
}
}
}
static void wasgo_GraphEdit__zoom_minus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_zoom_minus();
}
}
}
static void wasgo_GraphEdit__zoom_plus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_zoom_plus();
}
}
}
static void wasgo_GraphEdit__zoom_reset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->_zoom_reset();
}
}
}
static void wasgo_GraphEdit_add_valid_connection_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->add_valid_connection_type(arg0, arg1);
}
}
}
static void wasgo_GraphEdit_add_valid_left_disconnect_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->add_valid_left_disconnect_type(arg0);
}
}
}
static void wasgo_GraphEdit_add_valid_right_disconnect_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->add_valid_right_disconnect_type(arg0);
}
}
}
static void wasgo_GraphEdit_clear_connections(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->clear_connections();
}
}
}
static WasGoId wasgo_GraphEdit_connect_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect_node(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GraphEdit_disconnect_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_node(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), arg3);
}
}
}
static WasGoId wasgo_GraphEdit_get_connection_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_connection_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphEdit_get_scroll_ofs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scroll_ofs();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GraphEdit_get_snap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_snap();
}
}
}
static float wasgo_GraphEdit_get_zoom(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_zoom();
}
}
}
static WasGoId wasgo_GraphEdit_get_zoom_hbox(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
HBoxContainer ret_value = caller->get_zoom_hbox();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphEdit_is_node_connected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_node_connected(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphEdit_is_right_disconnects_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_right_disconnects_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphEdit_is_using_snap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_snap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphEdit_is_valid_connection_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid_connection_type(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GraphEdit_remove_valid_connection_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->remove_valid_connection_type(arg0, arg1);
}
}
}
static void wasgo_GraphEdit_remove_valid_left_disconnect_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->remove_valid_left_disconnect_type(arg0);
}
}
}
static void wasgo_GraphEdit_remove_valid_right_disconnect_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->remove_valid_right_disconnect_type(arg0);
}
}
}
static void wasgo_GraphEdit_set_connection_activity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, int arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_connection_activity(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), arg3, arg4);
}
}
}
static void wasgo_GraphEdit_set_right_disconnects(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_right_disconnects(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit_set_scroll_ofs(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_scroll_ofs(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit_set_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_selected(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit_set_snap(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_snap(arg0);
}
}
}
static void wasgo_GraphEdit_set_use_snap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_use_snap(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GraphEdit_set_zoom(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphEdit *caller = (GraphEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_zoom(arg0);
}
}
}
static void wasgo_GraphNode__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_GraphNode_clear_all_slots(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->clear_all_slots();
}
}
}
static void wasgo_GraphNode_clear_slot(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->clear_slot(arg0);
}
}
}
static WasGoId wasgo_GraphNode_get_connection_input_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_connection_input_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GraphNode_get_connection_input_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_connection_input_count();
}
}
}
static WasGoId wasgo_GraphNode_get_connection_input_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_connection_input_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GraphNode_get_connection_input_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_connection_input_type(arg0);
}
}
}
static WasGoId wasgo_GraphNode_get_connection_output_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_connection_output_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GraphNode_get_connection_output_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_connection_output_count();
}
}
}
static WasGoId wasgo_GraphNode_get_connection_output_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_connection_output_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GraphNode_get_connection_output_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_connection_output_type(arg0);
}
}
}
static WasGoId wasgo_GraphNode_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_get_overlay(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
enum.GraphNode::Overlay ret_value = caller->get_overlay();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_get_slot_color_left(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_slot_color_left(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_get_slot_color_right(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_slot_color_right(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GraphNode_get_slot_type_left(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_slot_type_left(arg0);
}
}
}
static int wasgo_GraphNode_get_slot_type_right(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_slot_type_right(arg0);
}
}
}
static WasGoId wasgo_GraphNode_get_title(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_title();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_is_close_button_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_close_button_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_is_comment(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_comment();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_is_resizable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_resizable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_is_selected(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selected();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_is_slot_enabled_left(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_slot_enabled_left(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GraphNode_is_slot_enabled_right(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_slot_enabled_right(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GraphNode_set_comment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_comment(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GraphNode_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_GraphNode_set_overlay(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_overlay(arg0);
}
}
}
static void wasgo_GraphNode_set_resizable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_resizable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GraphNode_set_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_selected(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GraphNode_set_show_close_button(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_show_close_button(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GraphNode_set_slot(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2, WasGoID arg3, WasGoID arg4, int arg5, WasGoID arg6, WasGoID arg7, WasGoID arg8){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_slot(arg0, &(bool *)lookup_object(arg1), arg2, &(Color *)lookup_object(arg3), &(bool *)lookup_object(arg4), arg5, &(Color *)lookup_object(arg6), &(Texture *)lookup_object(arg7), &(Texture *)lookup_object(arg8));
}
}
}
static void wasgo_GraphNode_set_title(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GraphNode *caller = (GraphNode *) state->lookup_object(caller_id);
if(caller){
caller->set_title(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_GridContainer_get_columns(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridContainer *caller = (GridContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_columns();
}
}
}
static void wasgo_GridContainer_set_columns(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridContainer *caller = (GridContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_columns(arg0);
}
}
}
static void wasgo_GridMap__update_octants_callback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->_update_octants_callback();
}
}
}
static void wasgo_GridMap_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_GridMap_clear_baked_meshes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->clear_baked_meshes();
}
}
}
static WasGoId wasgo_GridMap_get_bake_mesh_instance(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_bake_mesh_instance(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GridMap_get_bake_meshes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_bake_meshes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GridMap_get_cell_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell_item(arg0, arg1, arg2);
}
}
}
static int wasgo_GridMap_get_cell_item_orientation(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell_item_orientation(arg0, arg1, arg2);
}
}
}
static float wasgo_GridMap_get_cell_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell_scale();
}
}
}
static WasGoId wasgo_GridMap_get_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_cell_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GridMap_get_center_x(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_center_x();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GridMap_get_center_y(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_center_y();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GridMap_get_center_z(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_center_z();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GridMap_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_GridMap_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GridMap_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_GridMap_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GridMap_get_mesh_library(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
MeshLibrary ret_value = caller->get_mesh_library();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_GridMap_get_meshes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_meshes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_GridMap_get_octant_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_octant_size();
}
}
}
static WasGoId wasgo_GridMap_get_used_cells(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_used_cells();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GridMap_make_baked_meshes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->make_baked_meshes(&(bool *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_GridMap_map_to_world(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->map_to_world(arg0, arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_GridMap_resource_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->resource_changed(&(Resource *)lookup_object(arg0));
}
}
}
static void wasgo_GridMap_set_cell_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_item(arg0, arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_GridMap_set_cell_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_scale(arg0);
}
}
}
static void wasgo_GridMap_set_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_size(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_GridMap_set_center_x(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_center_x(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GridMap_set_center_y(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_center_y(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GridMap_set_center_z(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_center_z(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_GridMap_set_clip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_clip(&(bool *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3);
}
}
}
static void wasgo_GridMap_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_GridMap_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_GridMap_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_GridMap_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_GridMap_set_mesh_library(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_mesh_library(&(MeshLibrary *)lookup_object(arg0));
}
}
}
static void wasgo_GridMap_set_octant_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
caller->set_octant_size(arg0);
}
}
}
static WasGoId wasgo_GridMap_world_to_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GridMap *caller = (GridMap *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->world_to_map(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_GrooveJoint2D_get_initial_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GrooveJoint2D *caller = (GrooveJoint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_initial_offset();
}
}
}
static float wasgo_GrooveJoint2D_get_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GrooveJoint2D *caller = (GrooveJoint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_length();
}
}
}
static void wasgo_GrooveJoint2D_set_initial_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GrooveJoint2D *caller = (GrooveJoint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_initial_offset(arg0);
}
}
}
static void wasgo_GrooveJoint2D_set_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
GrooveJoint2D *caller = (GrooveJoint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_length(arg0);
}
}
}
static void wasgo_HTTPClient_close(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
caller->close();
}
}
}
static WasGoId wasgo_HTTPClient_connect_to_host(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect_to_host(&(String *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_get_connection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
StreamPeer ret_value = caller->get_connection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_HTTPClient_get_read_chunk_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
return caller->get_read_chunk_size();
}
}
}
static int wasgo_HTTPClient_get_response_body_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
return caller->get_response_body_length();
}
}
}
static int wasgo_HTTPClient_get_response_code(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
return caller->get_response_code();
}
}
}
static WasGoId wasgo_HTTPClient_get_response_headers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_response_headers();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_get_response_headers_as_dictionary(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_response_headers_as_dictionary();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_get_status(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
enum.HTTPClient::Status ret_value = caller->get_status();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_has_response(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_response();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_is_blocking_mode_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_blocking_mode_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_is_response_chunked(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_response_chunked();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_poll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->poll();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_query_string_from_dict(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->query_string_from_dict(&(Dictionary *)lookup_dictionary(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_read_response_body_chunk(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->read_response_body_chunk();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_request(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->request(arg0, &(String *)lookup_object(arg1), &(PoolStringArray *)lookup_object(arg2), &(String *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPClient_request_raw(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->request_raw(arg0, &(String *)lookup_object(arg1), &(PoolStringArray *)lookup_object(arg2), &(PoolByteArray *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_HTTPClient_set_blocking_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
caller->set_blocking_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_HTTPClient_set_connection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
caller->set_connection(&(StreamPeer *)lookup_object(arg0));
}
}
}
static void wasgo_HTTPClient_set_read_chunk_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPClient *caller = (HTTPClient *) state->lookup_object(caller_id);
if(caller){
caller->set_read_chunk_size(arg0);
}
}
}
static void wasgo_HTTPRequest__redirect_request(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->_redirect_request(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_HTTPRequest__request_done(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->_request_done(arg0, arg1, &(PoolStringArray *)lookup_object(arg2), &(PoolByteArray *)lookup_object(arg3));
}
}
}
static void wasgo_HTTPRequest__timeout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->_timeout();
}
}
}
static void wasgo_HTTPRequest_cancel_request(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->cancel_request();
}
}
}
static int wasgo_HTTPRequest_get_body_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
return caller->get_body_size();
}
}
}
static int wasgo_HTTPRequest_get_body_size_limit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
return caller->get_body_size_limit();
}
}
}
static int wasgo_HTTPRequest_get_download_chunk_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
return caller->get_download_chunk_size();
}
}
}
static WasGoId wasgo_HTTPRequest_get_download_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_download_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_HTTPRequest_get_downloaded_bytes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
return caller->get_downloaded_bytes();
}
}
}
static WasGoId wasgo_HTTPRequest_get_http_client_status(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
enum.HTTPClient::Status ret_value = caller->get_http_client_status();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_HTTPRequest_get_max_redirects(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_redirects();
}
}
}
static int wasgo_HTTPRequest_get_timeout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
return caller->get_timeout();
}
}
}
static WasGoId wasgo_HTTPRequest_is_using_threads(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_threads();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HTTPRequest_request(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->request(&(String *)lookup_object(arg0), &(PoolStringArray *)lookup_object(arg1), &(bool *)lookup_object(arg2), arg3, &(String *)lookup_object(arg4));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_HTTPRequest_set_body_size_limit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->set_body_size_limit(arg0);
}
}
}
static void wasgo_HTTPRequest_set_download_chunk_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->set_download_chunk_size(arg0);
}
}
}
static void wasgo_HTTPRequest_set_download_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->set_download_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_HTTPRequest_set_max_redirects(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->set_max_redirects(arg0);
}
}
}
static void wasgo_HTTPRequest_set_timeout(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->set_timeout(arg0);
}
}
}
static void wasgo_HTTPRequest_set_use_threads(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HTTPRequest *caller = (HTTPRequest *) state->lookup_object(caller_id);
if(caller){
caller->set_use_threads(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_HashingContext_finish(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HashingContext *caller = (HashingContext *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->finish();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HashingContext_start(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HashingContext *caller = (HashingContext *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->start(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HashingContext_update(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HashingContext *caller = (HashingContext *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->update(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_HeightMapShape_get_map_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HeightMapShape *caller = (HeightMapShape *) state->lookup_object(caller_id);
if(caller){
PoolRealArray ret_value = caller->get_map_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_HeightMapShape_get_map_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HeightMapShape *caller = (HeightMapShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_map_depth();
}
}
}
static int wasgo_HeightMapShape_get_map_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HeightMapShape *caller = (HeightMapShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_map_width();
}
}
}
static void wasgo_HeightMapShape_set_map_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HeightMapShape *caller = (HeightMapShape *) state->lookup_object(caller_id);
if(caller){
caller->set_map_data(&(PoolRealArray *)lookup_object(arg0));
}
}
}
static void wasgo_HeightMapShape_set_map_depth(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HeightMapShape *caller = (HeightMapShape *) state->lookup_object(caller_id);
if(caller){
caller->set_map_depth(arg0);
}
}
}
static void wasgo_HeightMapShape_set_map_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HeightMapShape *caller = (HeightMapShape *) state->lookup_object(caller_id);
if(caller){
caller->set_map_width(arg0);
}
}
}
static float wasgo_HingeJoint__get_lower_limit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_lower_limit();
}
}
}
static float wasgo_HingeJoint__get_upper_limit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_upper_limit();
}
}
}
static void wasgo_HingeJoint__set_lower_limit(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_lower_limit(arg0);
}
}
}
static void wasgo_HingeJoint__set_upper_limit(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_upper_limit(arg0);
}
}
}
static WasGoId wasgo_HingeJoint_get_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flag(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_HingeJoint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static void wasgo_HingeJoint_set_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_flag(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_HingeJoint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
HingeJoint *caller = (HingeJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static void wasgo_IP_clear_cache(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
caller->clear_cache(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_IP_erase_resolve_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
caller->erase_resolve_item(arg0);
}
}
}
static WasGoId wasgo_IP_get_local_addresses(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_local_addresses();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_IP_get_local_interfaces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_local_interfaces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_IP_get_resolve_item_address(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_resolve_item_address(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_IP_get_resolve_item_status(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
enum.IP::ResolverStatus ret_value = caller->get_resolve_item_status(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_IP_resolve_hostname(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->resolve_hostname(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_IP_resolve_hostname_queue_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
IP *caller = (IP *) state->lookup_object(caller_id);
if(caller){
return caller->resolve_hostname_queue_item(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_Image__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Image__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_Image_blend_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->blend_rect(&(Image *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Image_blend_rect_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->blend_rect_mask(&(Image *)lookup_object(arg0), &(Image *)lookup_object(arg1), &(Rect2 *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
}
}
}
static void wasgo_Image_blit_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->blit_rect(&(Image *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Image_blit_rect_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->blit_rect_mask(&(Image *)lookup_object(arg0), &(Image *)lookup_object(arg1), &(Rect2 *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
}
}
}
static void wasgo_Image_bumpmap_to_normalmap(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->bumpmap_to_normalmap(arg0);
}
}
}
static void wasgo_Image_clear_mipmaps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->clear_mipmaps();
}
}
}
static WasGoId wasgo_Image_compress(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->compress(arg0, arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Image_convert(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->convert(arg0);
}
}
}
static void wasgo_Image_copy_from(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->copy_from(&(Image *)lookup_object(arg0));
}
}
}
static void wasgo_Image_create(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->create(arg0, arg1, &(bool *)lookup_object(arg2), arg3);
}
}
}
static void wasgo_Image_create_from_data(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, int arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->create_from_data(arg0, arg1, &(bool *)lookup_object(arg2), arg3, &(PoolByteArray *)lookup_object(arg4));
}
}
}
static void wasgo_Image_crop(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->crop(arg0, arg1);
}
}
}
static WasGoId wasgo_Image_decompress(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->decompress();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_detect_alpha(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Image::AlphaMode ret_value = caller->detect_alpha();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Image_expand_x2_hq2x(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->expand_x2_hq2x();
}
}
}
static void wasgo_Image_fill(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->fill(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Image_fix_alpha_edges(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->fix_alpha_edges();
}
}
}
static void wasgo_Image_flip_x(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->flip_x();
}
}
}
static void wasgo_Image_flip_y(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->flip_y();
}
}
}
static WasGoId wasgo_Image_generate_mipmaps(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->generate_mipmaps(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_get_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Image::Format ret_value = caller->get_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Image_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static int wasgo_Image_get_mipmap_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
return caller->get_mipmap_offset(arg0);
}
}
}
static WasGoId wasgo_Image_get_pixel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_pixel(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_get_pixelv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_pixelv(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_get_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->get_rect(&(Rect2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_get_used_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_used_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Image_get_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
return caller->get_width();
}
}
}
static WasGoId wasgo_Image_has_mipmaps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_mipmaps();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_is_compressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_compressed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_is_empty(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_empty();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_is_invisible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_invisible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_load_jpg_from_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load_jpg_from_buffer(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_load_png_from_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load_png_from_buffer(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_load_webp_from_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load_webp_from_buffer(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Image_lock(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->lock();
}
}
}
static void wasgo_Image_normalmap_to_xy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->normalmap_to_xy();
}
}
}
static void wasgo_Image_premultiply_alpha(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->premultiply_alpha();
}
}
}
static void wasgo_Image_resize(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->resize(arg0, arg1, arg2);
}
}
}
static void wasgo_Image_resize_to_po2(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->resize_to_po2(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Image_rgbe_to_srgb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->rgbe_to_srgb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_save_exr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_exr(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Image_save_png(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_png(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Image_set_pixel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->set_pixel(arg0, arg1, &(Color *)lookup_object(arg2));
}
}
}
static void wasgo_Image_set_pixelv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->set_pixelv(&(Vector2 *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_Image_shrink_x2(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->shrink_x2();
}
}
}
static void wasgo_Image_srgb_to_linear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->srgb_to_linear();
}
}
}
static void wasgo_Image_unlock(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Image *caller = (Image *) state->lookup_object(caller_id);
if(caller){
caller->unlock();
}
}
}
static void wasgo_ImageTexture__reload_hook(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
caller->_reload_hook(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_ImageTexture_create(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
caller->create(arg0, arg1, arg2, arg3);
}
}
}
static void wasgo_ImageTexture_create_from_image(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
caller->create_from_image(&(Image *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_ImageTexture_get_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
enum.Image::Format ret_value = caller->get_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ImageTexture_get_lossy_storage_quality(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_lossy_storage_quality();
}
}
}
static WasGoId wasgo_ImageTexture_get_storage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
enum.ImageTexture::Storage ret_value = caller->get_storage();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ImageTexture_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ImageTexture_set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_data(&(Image *)lookup_object(arg0));
}
}
}
static void wasgo_ImageTexture_set_lossy_storage_quality(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_lossy_storage_quality(arg0);
}
}
}
static void wasgo_ImageTexture_set_size_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_size_override(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ImageTexture_set_storage(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImageTexture *caller = (ImageTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_storage(arg0);
}
}
}
static void wasgo_ImmediateGeometry_add_sphere(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->add_sphere(arg0, arg1, arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_ImmediateGeometry_add_vertex(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->add_vertex(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ImmediateGeometry_begin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->begin(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_ImmediateGeometry_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_ImmediateGeometry_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->end();
}
}
}
static void wasgo_ImmediateGeometry_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ImmediateGeometry_set_normal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->set_normal(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ImmediateGeometry_set_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->set_tangent(&(Plane *)lookup_object(arg0));
}
}
}
static void wasgo_ImmediateGeometry_set_uv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->set_uv(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ImmediateGeometry_set_uv2(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ImmediateGeometry *caller = (ImmediateGeometry *) state->lookup_object(caller_id);
if(caller){
caller->set_uv2(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Input_action_press(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->action_press(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Input_action_release(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->action_release(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Input_add_joy_mapping(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->add_joy_mapping(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Input_get_accelerometer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_accelerometer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Input_get_action_strength(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
return caller->get_action_strength(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Input_get_connected_joypads(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_connected_joypads();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_get_current_cursor_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
enum.Input::CursorShape ret_value = caller->get_current_cursor_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_get_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_gravity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_get_gyroscope(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_gyroscope();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Input_get_joy_axis(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
return caller->get_joy_axis(arg0, arg1);
}
}
}
static int wasgo_Input_get_joy_axis_index_from_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
return caller->get_joy_axis_index_from_string(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Input_get_joy_axis_string(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_joy_axis_string(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Input_get_joy_button_index_from_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
return caller->get_joy_button_index_from_string(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Input_get_joy_button_string(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_joy_button_string(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_get_joy_guid(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_joy_guid(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_get_joy_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_joy_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Input_get_joy_vibration_duration(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
return caller->get_joy_vibration_duration(arg0);
}
}
}
static WasGoId wasgo_Input_get_joy_vibration_strength(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_joy_vibration_strength(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_get_last_mouse_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_last_mouse_speed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_get_magnetometer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_magnetometer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Input_get_mouse_button_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
return caller->get_mouse_button_mask();
}
}
}
static WasGoId wasgo_Input_get_mouse_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
enum.Input::MouseMode ret_value = caller->get_mouse_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_is_action_just_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_action_just_pressed(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_is_action_just_released(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_action_just_released(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_is_action_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_action_pressed(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_is_joy_button_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_joy_button_pressed(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_is_joy_known(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_joy_known(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_is_key_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_key_pressed(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Input_is_mouse_button_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_mouse_button_pressed(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Input_joy_connection_changed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->joy_connection_changed(arg0, &(bool *)lookup_object(arg1), &(String *)lookup_object(arg2), &(String *)lookup_object(arg3));
}
}
}
static void wasgo_Input_parse_input_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->parse_input_event(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Input_remove_joy_mapping(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->remove_joy_mapping(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Input_set_custom_mouse_cursor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_mouse_cursor(&(Resource *)lookup_object(arg0), arg1, &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Input_set_default_cursor_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->set_default_cursor_shape(arg0);
}
}
}
static void wasgo_Input_set_mouse_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->set_mouse_mode(arg0);
}
}
}
static void wasgo_Input_set_use_accumulated_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->set_use_accumulated_input(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Input_start_joy_vibration(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->start_joy_vibration(arg0, arg1, arg2, arg3);
}
}
}
static void wasgo_Input_stop_joy_vibration(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->stop_joy_vibration(arg0);
}
}
}
static void wasgo_Input_vibrate_handheld(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->vibrate_handheld(arg0);
}
}
}
static void wasgo_Input_warp_mouse_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Input *caller = (Input *) state->lookup_object(caller_id);
if(caller){
caller->warp_mouse_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_InputEvent_accumulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->accumulate(&(InputEvent *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEvent_as_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->as_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_InputEvent_get_action_strength(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
return caller->get_action_strength(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_InputEvent_get_device(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
return caller->get_device();
}
}
}
static WasGoId wasgo_InputEvent_is_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_action(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEvent_is_action_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_action_pressed(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEvent_is_action_released(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_action_released(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEvent_is_action_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_action_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEvent_is_echo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_echo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEvent_is_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_pressed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEvent_set_device(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
caller->set_device(arg0);
}
}
}
static WasGoId wasgo_InputEvent_shortcut_match(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->shortcut_match(&(InputEvent *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEvent_xformed_by(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEvent *caller = (InputEvent *) state->lookup_object(caller_id);
if(caller){
InputEvent ret_value = caller->xformed_by(&(Transform2D *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventAction_get_action(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventAction *caller = (InputEventAction *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_action();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_InputEventAction_get_strength(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventAction *caller = (InputEventAction *) state->lookup_object(caller_id);
if(caller){
return caller->get_strength();
}
}
}
static void wasgo_InputEventAction_set_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventAction *caller = (InputEventAction *) state->lookup_object(caller_id);
if(caller){
caller->set_action(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventAction_set_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventAction *caller = (InputEventAction *) state->lookup_object(caller_id);
if(caller){
caller->set_pressed(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventAction_set_strength(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventAction *caller = (InputEventAction *) state->lookup_object(caller_id);
if(caller){
caller->set_strength(arg0);
}
}
}
static WasGoId wasgo_InputEventGesture_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventGesture *caller = (InputEventGesture *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventGesture_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventGesture *caller = (InputEventGesture *) state->lookup_object(caller_id);
if(caller){
caller->set_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static int wasgo_InputEventJoypadButton_get_button_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadButton *caller = (InputEventJoypadButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_button_index();
}
}
}
static float wasgo_InputEventJoypadButton_get_pressure(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadButton *caller = (InputEventJoypadButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_pressure();
}
}
}
static void wasgo_InputEventJoypadButton_set_button_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadButton *caller = (InputEventJoypadButton *) state->lookup_object(caller_id);
if(caller){
caller->set_button_index(arg0);
}
}
}
static void wasgo_InputEventJoypadButton_set_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadButton *caller = (InputEventJoypadButton *) state->lookup_object(caller_id);
if(caller){
caller->set_pressed(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventJoypadButton_set_pressure(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadButton *caller = (InputEventJoypadButton *) state->lookup_object(caller_id);
if(caller){
caller->set_pressure(arg0);
}
}
}
static int wasgo_InputEventJoypadMotion_get_axis(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadMotion *caller = (InputEventJoypadMotion *) state->lookup_object(caller_id);
if(caller){
return caller->get_axis();
}
}
}
static float wasgo_InputEventJoypadMotion_get_axis_value(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadMotion *caller = (InputEventJoypadMotion *) state->lookup_object(caller_id);
if(caller){
return caller->get_axis_value();
}
}
}
static void wasgo_InputEventJoypadMotion_set_axis(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadMotion *caller = (InputEventJoypadMotion *) state->lookup_object(caller_id);
if(caller){
caller->set_axis(arg0);
}
}
}
static void wasgo_InputEventJoypadMotion_set_axis_value(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventJoypadMotion *caller = (InputEventJoypadMotion *) state->lookup_object(caller_id);
if(caller){
caller->set_axis_value(arg0);
}
}
}
static int wasgo_InputEventKey_get_scancode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventKey *caller = (InputEventKey *) state->lookup_object(caller_id);
if(caller){
return caller->get_scancode();
}
}
}
static int wasgo_InputEventKey_get_scancode_with_modifiers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventKey *caller = (InputEventKey *) state->lookup_object(caller_id);
if(caller){
return caller->get_scancode_with_modifiers();
}
}
}
static int wasgo_InputEventKey_get_unicode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventKey *caller = (InputEventKey *) state->lookup_object(caller_id);
if(caller){
return caller->get_unicode();
}
}
}
static void wasgo_InputEventKey_set_echo(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventKey *caller = (InputEventKey *) state->lookup_object(caller_id);
if(caller){
caller->set_echo(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventKey_set_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventKey *caller = (InputEventKey *) state->lookup_object(caller_id);
if(caller){
caller->set_pressed(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventKey_set_scancode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventKey *caller = (InputEventKey *) state->lookup_object(caller_id);
if(caller){
caller->set_scancode(arg0);
}
}
}
static void wasgo_InputEventKey_set_unicode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventKey *caller = (InputEventKey *) state->lookup_object(caller_id);
if(caller){
caller->set_unicode(arg0);
}
}
}
static int wasgo_InputEventMIDI_get_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_channel();
}
}
}
static int wasgo_InputEventMIDI_get_controller_number(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_controller_number();
}
}
}
static int wasgo_InputEventMIDI_get_controller_value(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_controller_value();
}
}
}
static int wasgo_InputEventMIDI_get_instrument(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_instrument();
}
}
}
static int wasgo_InputEventMIDI_get_message(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_message();
}
}
}
static int wasgo_InputEventMIDI_get_pitch(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_pitch();
}
}
}
static int wasgo_InputEventMIDI_get_pressure(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_pressure();
}
}
}
static int wasgo_InputEventMIDI_get_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
return caller->get_velocity();
}
}
}
static void wasgo_InputEventMIDI_set_channel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_channel(arg0);
}
}
}
static void wasgo_InputEventMIDI_set_controller_number(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_controller_number(arg0);
}
}
}
static void wasgo_InputEventMIDI_set_controller_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_controller_value(arg0);
}
}
}
static void wasgo_InputEventMIDI_set_instrument(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_instrument(arg0);
}
}
}
static void wasgo_InputEventMIDI_set_message(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_message(arg0);
}
}
}
static void wasgo_InputEventMIDI_set_pitch(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_pitch(arg0);
}
}
}
static void wasgo_InputEventMIDI_set_pressure(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_pressure(arg0);
}
}
}
static void wasgo_InputEventMIDI_set_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMIDI *caller = (InputEventMIDI *) state->lookup_object(caller_id);
if(caller){
caller->set_velocity(arg0);
}
}
}
static float wasgo_InputEventMagnifyGesture_get_factor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMagnifyGesture *caller = (InputEventMagnifyGesture *) state->lookup_object(caller_id);
if(caller){
return caller->get_factor();
}
}
}
static void wasgo_InputEventMagnifyGesture_set_factor(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMagnifyGesture *caller = (InputEventMagnifyGesture *) state->lookup_object(caller_id);
if(caller){
caller->set_factor(arg0);
}
}
}
static int wasgo_InputEventMouse_get_button_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouse *caller = (InputEventMouse *) state->lookup_object(caller_id);
if(caller){
return caller->get_button_mask();
}
}
}
static WasGoId wasgo_InputEventMouse_get_global_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouse *caller = (InputEventMouse *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_global_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventMouse_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouse *caller = (InputEventMouse *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventMouse_set_button_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouse *caller = (InputEventMouse *) state->lookup_object(caller_id);
if(caller){
caller->set_button_mask(arg0);
}
}
}
static void wasgo_InputEventMouse_set_global_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouse *caller = (InputEventMouse *) state->lookup_object(caller_id);
if(caller){
caller->set_global_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventMouse_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouse *caller = (InputEventMouse *) state->lookup_object(caller_id);
if(caller){
caller->set_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static int wasgo_InputEventMouseButton_get_button_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseButton *caller = (InputEventMouseButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_button_index();
}
}
}
static float wasgo_InputEventMouseButton_get_factor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseButton *caller = (InputEventMouseButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_factor();
}
}
}
static WasGoId wasgo_InputEventMouseButton_is_doubleclick(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseButton *caller = (InputEventMouseButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_doubleclick();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventMouseButton_set_button_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseButton *caller = (InputEventMouseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_button_index(arg0);
}
}
}
static void wasgo_InputEventMouseButton_set_doubleclick(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseButton *caller = (InputEventMouseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_doubleclick(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventMouseButton_set_factor(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseButton *caller = (InputEventMouseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_factor(arg0);
}
}
}
static void wasgo_InputEventMouseButton_set_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseButton *caller = (InputEventMouseButton *) state->lookup_object(caller_id);
if(caller){
caller->set_pressed(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_InputEventMouseMotion_get_pressure(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
return caller->get_pressure();
}
}
}
static WasGoId wasgo_InputEventMouseMotion_get_relative(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_relative();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventMouseMotion_get_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_speed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventMouseMotion_get_tilt(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_tilt();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventMouseMotion_set_pressure(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
caller->set_pressure(arg0);
}
}
}
static void wasgo_InputEventMouseMotion_set_relative(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
caller->set_relative(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventMouseMotion_set_speed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
caller->set_speed(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventMouseMotion_set_tilt(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventMouseMotion *caller = (InputEventMouseMotion *) state->lookup_object(caller_id);
if(caller){
caller->set_tilt(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_InputEventPanGesture_get_delta(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventPanGesture *caller = (InputEventPanGesture *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_delta();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventPanGesture_set_delta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventPanGesture *caller = (InputEventPanGesture *) state->lookup_object(caller_id);
if(caller){
caller->set_delta(&(Vector2 *)lookup_object(arg0));
}
}
}
static int wasgo_InputEventScreenDrag_get_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
return caller->get_index();
}
}
}
static WasGoId wasgo_InputEventScreenDrag_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventScreenDrag_get_relative(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_relative();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventScreenDrag_get_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_speed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventScreenDrag_set_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
caller->set_index(arg0);
}
}
}
static void wasgo_InputEventScreenDrag_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
caller->set_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventScreenDrag_set_relative(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
caller->set_relative(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventScreenDrag_set_speed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenDrag *caller = (InputEventScreenDrag *) state->lookup_object(caller_id);
if(caller){
caller->set_speed(&(Vector2 *)lookup_object(arg0));
}
}
}
static int wasgo_InputEventScreenTouch_get_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenTouch *caller = (InputEventScreenTouch *) state->lookup_object(caller_id);
if(caller){
return caller->get_index();
}
}
}
static WasGoId wasgo_InputEventScreenTouch_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenTouch *caller = (InputEventScreenTouch *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventScreenTouch_set_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenTouch *caller = (InputEventScreenTouch *) state->lookup_object(caller_id);
if(caller){
caller->set_index(arg0);
}
}
}
static void wasgo_InputEventScreenTouch_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenTouch *caller = (InputEventScreenTouch *) state->lookup_object(caller_id);
if(caller){
caller->set_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventScreenTouch_set_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventScreenTouch *caller = (InputEventScreenTouch *) state->lookup_object(caller_id);
if(caller){
caller->set_pressed(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_InputEventWithModifiers_get_alt(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_alt();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventWithModifiers_get_command(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_command();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventWithModifiers_get_control(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_control();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventWithModifiers_get_metakey(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_metakey();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputEventWithModifiers_get_shift(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_shift();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputEventWithModifiers_set_alt(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
caller->set_alt(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventWithModifiers_set_command(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
caller->set_command(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventWithModifiers_set_control(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
caller->set_control(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventWithModifiers_set_metakey(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
caller->set_metakey(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputEventWithModifiers_set_shift(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputEventWithModifiers *caller = (InputEventWithModifiers *) state->lookup_object(caller_id);
if(caller){
caller->set_shift(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InputMap_action_add_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
caller->action_add_event(&(String *)lookup_object(arg0), &(InputEvent *)lookup_object(arg1));
}
}
}
static void wasgo_InputMap_action_erase_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
caller->action_erase_event(&(String *)lookup_object(arg0), &(InputEvent *)lookup_object(arg1));
}
}
}
static void wasgo_InputMap_action_erase_events(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
caller->action_erase_events(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_InputMap_action_has_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->action_has_event(&(String *)lookup_object(arg0), &(InputEvent *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputMap_action_set_deadzone(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
caller->action_set_deadzone(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_InputMap_add_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
caller->add_action(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_InputMap_erase_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
caller->erase_action(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_InputMap_event_is_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->event_is_action(&(InputEvent *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputMap_get_action_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_action_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputMap_get_actions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_actions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InputMap_has_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_action(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InputMap_load_from_globals(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InputMap *caller = (InputMap *) state->lookup_object(caller_id);
if(caller){
caller->load_from_globals();
}
}
}
static WasGoId wasgo_InstancePlaceholder_create_instance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InstancePlaceholder *caller = (InstancePlaceholder *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->create_instance(&(bool *)lookup_object(arg0), &(PackedScene *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InstancePlaceholder_get_instance_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InstancePlaceholder *caller = (InstancePlaceholder *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_instance_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InstancePlaceholder_get_stored_values(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InstancePlaceholder *caller = (InstancePlaceholder *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_stored_values(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InstancePlaceholder_replace_by_instance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InstancePlaceholder *caller = (InstancePlaceholder *) state->lookup_object(caller_id);
if(caller){
caller->replace_by_instance(&(PackedScene *)lookup_object(arg0));
}
}
}
static float wasgo_InterpolatedCamera_get_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InterpolatedCamera *caller = (InterpolatedCamera *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed();
}
}
}
static WasGoId wasgo_InterpolatedCamera_get_target_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InterpolatedCamera *caller = (InterpolatedCamera *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_target_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_InterpolatedCamera_is_interpolation_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InterpolatedCamera *caller = (InterpolatedCamera *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_interpolation_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_InterpolatedCamera_set_interpolation_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InterpolatedCamera *caller = (InterpolatedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_interpolation_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_InterpolatedCamera_set_speed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InterpolatedCamera *caller = (InterpolatedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_speed(arg0);
}
}
}
static void wasgo_InterpolatedCamera_set_target(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InterpolatedCamera *caller = (InterpolatedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_target(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_InterpolatedCamera_set_target_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
InterpolatedCamera *caller = (InterpolatedCamera *) state->lookup_object(caller_id);
if(caller){
caller->set_target_path(&(NodePath *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ItemList__get_items(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_items();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ItemList__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ItemList__scroll_changed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->_scroll_changed(arg0);
}
}
}
static void wasgo_ItemList__set_items(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->_set_items(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_ItemList_add_icon_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_item(&(Texture *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_add_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->add_item(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_ItemList_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_ItemList_ensure_current_is_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->ensure_current_is_visible();
}
}
}
static WasGoId wasgo_ItemList_get_allow_reselect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_allow_reselect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_allow_rmb_select(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_allow_rmb_select();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ItemList_get_fixed_column_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
return caller->get_fixed_column_width();
}
}
}
static WasGoId wasgo_ItemList_get_fixed_icon_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_fixed_icon_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_icon_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
enum.ItemList::IconMode ret_value = caller->get_icon_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ItemList_get_icon_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
return caller->get_icon_scale();
}
}
}
static int wasgo_ItemList_get_item_at_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_at_position(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static int wasgo_ItemList_get_item_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_count();
}
}
}
static WasGoId wasgo_ItemList_get_item_custom_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_item_custom_bg_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_item_custom_fg_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_item_custom_fg_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_item_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_item_icon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_item_icon_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_item_icon_modulate(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_item_icon_region(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_item_icon_region(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_item_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_item_metadata(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_item_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_item_text(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_item_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_item_tooltip(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ItemList_get_max_columns(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_columns();
}
}
}
static int wasgo_ItemList_get_max_text_lines(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_text_lines();
}
}
}
static WasGoId wasgo_ItemList_get_select_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
enum.ItemList::SelectMode ret_value = caller->get_select_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_selected_items(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_selected_items();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_get_v_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
VScrollBar ret_value = caller->get_v_scroll();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_has_auto_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_auto_height();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_is_anything_selected(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_anything_selected();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_is_item_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_is_item_icon_transposed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_icon_transposed(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_is_item_selectable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_selectable(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_is_item_tooltip_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_tooltip_enabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_is_same_column_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_same_column_width();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ItemList_is_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selected(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ItemList_move_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->move_item(arg0, arg1);
}
}
}
static void wasgo_ItemList_remove_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->remove_item(arg0);
}
}
}
static void wasgo_ItemList_select(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->select(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_allow_reselect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_reselect(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ItemList_set_allow_rmb_select(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_rmb_select(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ItemList_set_auto_height(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_auto_height(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ItemList_set_fixed_column_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_fixed_column_width(arg0);
}
}
}
static void wasgo_ItemList_set_fixed_icon_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_fixed_icon_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ItemList_set_icon_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_icon_mode(arg0);
}
}
}
static void wasgo_ItemList_set_icon_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_icon_scale(arg0);
}
}
}
static void wasgo_ItemList_set_item_custom_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_custom_bg_color(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_custom_fg_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_custom_fg_color(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_icon(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_icon_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_icon_modulate(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_icon_region(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_icon_region(arg0, &(Rect2 *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_icon_transposed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_icon_transposed(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_metadata(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_selectable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_selectable(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_text(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_tooltip(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_item_tooltip_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_item_tooltip_enabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ItemList_set_max_columns(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_max_columns(arg0);
}
}
}
static void wasgo_ItemList_set_max_text_lines(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_max_text_lines(arg0);
}
}
}
static void wasgo_ItemList_set_same_column_width(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_same_column_width(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ItemList_set_select_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->set_select_mode(arg0);
}
}
}
static void wasgo_ItemList_sort_items_by_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->sort_items_by_text();
}
}
}
static void wasgo_ItemList_unselect(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->unselect(arg0);
}
}
}
static void wasgo_ItemList_unselect_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ItemList *caller = (ItemList *) state->lookup_object(caller_id);
if(caller){
caller->unselect_all();
}
}
}
static WasGoId wasgo_JSONParseResult_get_error(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->get_error();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_JSONParseResult_get_error_line(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_error_line();
}
}
}
static WasGoId wasgo_JSONParseResult_get_error_string(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_error_string();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_JSONParseResult_get_result(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_result();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_JSONParseResult_set_error(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
caller->set_error(arg0);
}
}
}
static void wasgo_JSONParseResult_set_error_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
caller->set_error_line(arg0);
}
}
}
static void wasgo_JSONParseResult_set_error_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
caller->set_error_string(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_JSONParseResult_set_result(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONParseResult *caller = (JSONParseResult *) state->lookup_object(caller_id);
if(caller){
caller->set_result(&(Variant *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_JSONRPC_make_notification(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONRPC *caller = (JSONRPC *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->make_notification(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_JSONRPC_make_request(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONRPC *caller = (JSONRPC *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->make_request(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_JSONRPC_make_response(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONRPC *caller = (JSONRPC *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->make_response(&(Variant *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_JSONRPC_make_response_error(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONRPC *caller = (JSONRPC *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->make_response_error(arg0, &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_JSONRPC_process_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONRPC *caller = (JSONRPC *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->process_action(&(Variant *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_JSONRPC_process_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONRPC *caller = (JSONRPC *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->process_string(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_JSONRPC_set_scope(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JSONRPC *caller = (JSONRPC *) state->lookup_object(caller_id);
if(caller){
caller->set_scope(&(String *)lookup_object(arg0), &(Object *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_JavaClassWrapper_wrap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JavaClassWrapper *caller = (JavaClassWrapper *) state->lookup_object(caller_id);
if(caller){
JavaClass ret_value = caller->wrap(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_JavaScript_eval(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
JavaScript *caller = (JavaScript *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->eval(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Joint_get_exclude_nodes_from_collision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_exclude_nodes_from_collision();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Joint_get_node_a(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_node_a();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Joint_get_node_b(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_node_b();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Joint_get_solver_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
return caller->get_solver_priority();
}
}
}
static void wasgo_Joint_set_exclude_nodes_from_collision(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
caller->set_exclude_nodes_from_collision(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Joint_set_node_a(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
caller->set_node_a(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_Joint_set_node_b(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
caller->set_node_b(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_Joint_set_solver_priority(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint *caller = (Joint *) state->lookup_object(caller_id);
if(caller){
caller->set_solver_priority(arg0);
}
}
}
static float wasgo_Joint2D_get_bias(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_bias();
}
}
}
static WasGoId wasgo_Joint2D_get_exclude_nodes_from_collision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_exclude_nodes_from_collision();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Joint2D_get_node_a(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_node_a();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Joint2D_get_node_b(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_node_b();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Joint2D_set_bias(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_bias(arg0);
}
}
}
static void wasgo_Joint2D_set_exclude_nodes_from_collision(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_exclude_nodes_from_collision(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Joint2D_set_node_a(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_node_a(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_Joint2D_set_node_b(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Joint2D *caller = (Joint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_node_b(&(NodePath *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_KinematicBody_get_axis_lock(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_axis_lock(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody_get_floor_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_floor_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody_get_floor_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_floor_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_KinematicBody_get_safe_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_safe_margin();
}
}
}
static WasGoId wasgo_KinematicBody_get_slide_collision(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
KinematicCollision ret_value = caller->get_slide_collision(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_KinematicBody_get_slide_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_slide_count();
}
}
}
static WasGoId wasgo_KinematicBody_is_on_ceiling(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_ceiling();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody_is_on_floor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_floor();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody_is_on_wall(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_wall();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody_move_and_collide(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
KinematicCollision ret_value = caller->move_and_collide(&(Vector3 *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody_move_and_slide(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3, float arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->move_and_slide(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(bool *)lookup_object(arg2), arg3, arg4, &(bool *)lookup_object(arg5));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody_move_and_slide_with_snap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, int arg4, float arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->move_and_slide_with_snap(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2), &(bool *)lookup_object(arg3), arg4, arg5, &(bool *)lookup_object(arg6));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_KinematicBody_set_axis_lock(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
caller->set_axis_lock(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_KinematicBody_set_safe_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
caller->set_safe_margin(arg0);
}
}
}
static WasGoId wasgo_KinematicBody_test_move(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody *caller = (KinematicBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->test_move(&(Transform *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_KinematicBody2D__direct_state_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_direct_state_changed(&(Object *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_KinematicBody2D_get_floor_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_floor_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody2D_get_floor_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_floor_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_KinematicBody2D_get_safe_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_safe_margin();
}
}
}
static WasGoId wasgo_KinematicBody2D_get_slide_collision(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
KinematicCollision2D ret_value = caller->get_slide_collision(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_KinematicBody2D_get_slide_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_slide_count();
}
}
}
static WasGoId wasgo_KinematicBody2D_is_on_ceiling(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_ceiling();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody2D_is_on_floor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_floor();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody2D_is_on_wall(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_wall();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody2D_is_sync_to_physics_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_sync_to_physics_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody2D_move_and_collide(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
KinematicCollision2D ret_value = caller->move_and_collide(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody2D_move_and_slide(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3, float arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->move_and_slide(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(bool *)lookup_object(arg2), arg3, arg4, &(bool *)lookup_object(arg5));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicBody2D_move_and_slide_with_snap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, int arg4, float arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->move_and_slide_with_snap(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(bool *)lookup_object(arg3), arg4, arg5, &(bool *)lookup_object(arg6));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_KinematicBody2D_set_safe_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_safe_margin(arg0);
}
}
}
static void wasgo_KinematicBody2D_set_sync_to_physics(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_sync_to_physics(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_KinematicBody2D_test_move(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicBody2D *caller = (KinematicBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->test_move(&(Transform2D *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision_get_collider(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_collider();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_KinematicCollision_get_collider_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_id();
}
}
}
static WasGoId wasgo_KinematicCollision_get_collider_metadata(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_collider_metadata();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision_get_collider_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_collider_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_KinematicCollision_get_collider_shape_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_shape_index();
}
}
}
static WasGoId wasgo_KinematicCollision_get_collider_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_collider_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision_get_local_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_local_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision_get_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision_get_remainder(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_remainder();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision_get_travel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision *caller = (KinematicCollision *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_travel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_collider(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_collider();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_KinematicCollision2D_get_collider_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_id();
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_collider_metadata(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_collider_metadata();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_collider_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_collider_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_KinematicCollision2D_get_collider_shape_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_shape_index();
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_collider_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_collider_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_local_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_local_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_remainder(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_remainder();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_KinematicCollision2D_get_travel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
KinematicCollision2D *caller = (KinematicCollision2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_travel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Label_get_align(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
enum.Label::Align ret_value = caller->get_align();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Label_get_line_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_line_count();
}
}
}
static int wasgo_Label_get_line_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_line_height();
}
}
}
static int wasgo_Label_get_lines_skipped(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_lines_skipped();
}
}
}
static int wasgo_Label_get_max_lines_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_lines_visible();
}
}
}
static float wasgo_Label_get_percent_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_percent_visible();
}
}
}
static WasGoId wasgo_Label_get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Label_get_total_character_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_total_character_count();
}
}
}
static WasGoId wasgo_Label_get_valign(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
enum.Label::VAlign ret_value = caller->get_valign();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Label_get_visible_characters(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_visible_characters();
}
}
}
static int wasgo_Label_get_visible_line_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
return caller->get_visible_line_count();
}
}
}
static WasGoId wasgo_Label_has_autowrap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_autowrap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Label_is_clipping_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_clipping_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Label_is_uppercase(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_uppercase();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Label_set_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_align(arg0);
}
}
}
static void wasgo_Label_set_autowrap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_autowrap(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Label_set_clip_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_clip_text(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Label_set_lines_skipped(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_lines_skipped(arg0);
}
}
}
static void wasgo_Label_set_max_lines_visible(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_max_lines_visible(arg0);
}
}
}
static void wasgo_Label_set_percent_visible(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_percent_visible(arg0);
}
}
}
static void wasgo_Label_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_text(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Label_set_uppercase(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_uppercase(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Label_set_valign(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_valign(arg0);
}
}
}
static void wasgo_Label_set_visible_characters(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Label *caller = (Label *) state->lookup_object(caller_id);
if(caller){
caller->set_visible_characters(arg0);
}
}
}
static WasGoId wasgo_LargeTexture__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_LargeTexture__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Array *)lookup_array(arg0));
}
}
}
static int wasgo_LargeTexture_add_piece(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
return caller->add_piece(&(Vector2 *)lookup_object(arg0), &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_LargeTexture_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static int wasgo_LargeTexture_get_piece_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_piece_count();
}
}
}
static WasGoId wasgo_LargeTexture_get_piece_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_piece_offset(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LargeTexture_get_piece_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_piece_texture(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_LargeTexture_set_piece_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_piece_offset(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_LargeTexture_set_piece_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_piece_texture(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_LargeTexture_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LargeTexture *caller = (LargeTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Light_get_bake_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
enum.Light::BakeMode ret_value = caller->get_bake_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Light_get_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
return caller->get_cull_mask();
}
}
}
static float wasgo_Light_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static WasGoId wasgo_Light_get_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_shadow_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light_get_shadow_reverse_cull_face(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_shadow_reverse_cull_face();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light_has_shadow(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_shadow();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light_is_editor_only(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editor_only();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light_is_negative(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_negative();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Light_set_bake_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_bake_mode(arg0);
}
}
}
static void wasgo_Light_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Light_set_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_cull_mask(arg0);
}
}
}
static void wasgo_Light_set_editor_only(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_editor_only(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Light_set_negative(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_negative(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Light_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static void wasgo_Light_set_shadow(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Light_set_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Light_set_shadow_reverse_cull_face(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light *caller = (Light *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_reverse_cull_face(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Light2D_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Light2D_get_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_energy();
}
}
}
static float wasgo_Light2D_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static int wasgo_Light2D_get_item_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_cull_mask();
}
}
}
static int wasgo_Light2D_get_item_shadow_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_shadow_cull_mask();
}
}
}
static int wasgo_Light2D_get_layer_range_max(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_layer_range_max();
}
}
}
static int wasgo_Light2D_get_layer_range_min(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_layer_range_min();
}
}
}
static WasGoId wasgo_Light2D_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
enum.Light2D::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Light2D_get_shadow_buffer_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_shadow_buffer_size();
}
}
}
static WasGoId wasgo_Light2D_get_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_shadow_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light2D_get_shadow_filter(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
enum.Light2D::ShadowFilter ret_value = caller->get_shadow_filter();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Light2D_get_shadow_gradient_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_shadow_gradient_length();
}
}
}
static float wasgo_Light2D_get_shadow_smooth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_shadow_smooth();
}
}
}
static WasGoId wasgo_Light2D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light2D_get_texture_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_texture_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Light2D_get_texture_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_texture_scale();
}
}
}
static int wasgo_Light2D_get_z_range_max(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_z_range_max();
}
}
}
static int wasgo_Light2D_get_z_range_min(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_z_range_min();
}
}
}
static WasGoId wasgo_Light2D_is_editor_only(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editor_only();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light2D_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Light2D_is_shadow_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shadow_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Light2D_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Light2D_set_editor_only(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_editor_only(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Light2D_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Light2D_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_energy(arg0);
}
}
}
static void wasgo_Light2D_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_Light2D_set_item_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_item_cull_mask(arg0);
}
}
}
static void wasgo_Light2D_set_item_shadow_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_item_shadow_cull_mask(arg0);
}
}
}
static void wasgo_Light2D_set_layer_range_max(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_layer_range_max(arg0);
}
}
}
static void wasgo_Light2D_set_layer_range_min(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_layer_range_min(arg0);
}
}
}
static void wasgo_Light2D_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_Light2D_set_shadow_buffer_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_buffer_size(arg0);
}
}
}
static void wasgo_Light2D_set_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Light2D_set_shadow_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Light2D_set_shadow_filter(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_filter(arg0);
}
}
}
static void wasgo_Light2D_set_shadow_gradient_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_gradient_length(arg0);
}
}
}
static void wasgo_Light2D_set_shadow_smooth(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_smooth(arg0);
}
}
}
static void wasgo_Light2D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Light2D_set_texture_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Light2D_set_texture_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_scale(arg0);
}
}
}
static void wasgo_Light2D_set_z_range_max(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_z_range_max(arg0);
}
}
}
static void wasgo_Light2D_set_z_range_min(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Light2D *caller = (Light2D *) state->lookup_object(caller_id);
if(caller){
caller->set_z_range_min(arg0);
}
}
}
static void wasgo_LightOccluder2D__poly_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LightOccluder2D *caller = (LightOccluder2D *) state->lookup_object(caller_id);
if(caller){
caller->_poly_changed();
}
}
}
static int wasgo_LightOccluder2D_get_occluder_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LightOccluder2D *caller = (LightOccluder2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_occluder_light_mask();
}
}
}
static WasGoId wasgo_LightOccluder2D_get_occluder_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LightOccluder2D *caller = (LightOccluder2D *) state->lookup_object(caller_id);
if(caller){
OccluderPolygon2D ret_value = caller->get_occluder_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_LightOccluder2D_set_occluder_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LightOccluder2D *caller = (LightOccluder2D *) state->lookup_object(caller_id);
if(caller){
caller->set_occluder_light_mask(arg0);
}
}
}
static void wasgo_LightOccluder2D_set_occluder_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LightOccluder2D *caller = (LightOccluder2D *) state->lookup_object(caller_id);
if(caller){
caller->set_occluder_polygon(&(OccluderPolygon2D *)lookup_object(arg0));
}
}
}
static void wasgo_Line2D__curve_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->_curve_changed();
}
}
}
static void wasgo_Line2D__gradient_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->_gradient_changed();
}
}
}
static void wasgo_Line2D_add_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->add_point(&(Vector2 *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Line2D_clear_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->clear_points();
}
}
}
static WasGoId wasgo_Line2D_get_antialiased(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_antialiased();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_begin_cap_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
enum.Line2D::LineCapMode ret_value = caller->get_begin_cap_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
Curve ret_value = caller->get_curve();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_default_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_default_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_end_cap_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
enum.Line2D::LineCapMode ret_value = caller->get_end_cap_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_gradient(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
Gradient ret_value = caller->get_gradient();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_joint_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
enum.Line2D::LineJointMode ret_value = caller->get_joint_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Line2D_get_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_count();
}
}
}
static WasGoId wasgo_Line2D_get_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_point_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_points(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_points();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Line2D_get_round_precision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_round_precision();
}
}
}
static float wasgo_Line2D_get_sharp_limit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_sharp_limit();
}
}
}
static WasGoId wasgo_Line2D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Line2D_get_texture_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
enum.Line2D::LineTextureMode ret_value = caller->get_texture_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Line2D_get_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_width();
}
}
}
static void wasgo_Line2D_remove_point(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_point(arg0);
}
}
}
static void wasgo_Line2D_set_antialiased(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_antialiased(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Line2D_set_begin_cap_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_begin_cap_mode(arg0);
}
}
}
static void wasgo_Line2D_set_curve(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_curve(&(Curve *)lookup_object(arg0));
}
}
}
static void wasgo_Line2D_set_default_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_default_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Line2D_set_end_cap_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_end_cap_mode(arg0);
}
}
}
static void wasgo_Line2D_set_gradient(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_gradient(&(Gradient *)lookup_object(arg0));
}
}
}
static void wasgo_Line2D_set_joint_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_joint_mode(arg0);
}
}
}
static void wasgo_Line2D_set_point_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_point_position(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Line2D_set_points(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_points(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_Line2D_set_round_precision(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_round_precision(arg0);
}
}
}
static void wasgo_Line2D_set_sharp_limit(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_sharp_limit(arg0);
}
}
}
static void wasgo_Line2D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Line2D_set_texture_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_mode(arg0);
}
}
}
static void wasgo_Line2D_set_width(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Line2D *caller = (Line2D *) state->lookup_object(caller_id);
if(caller){
caller->set_width(arg0);
}
}
}
static void wasgo_LineEdit__editor_settings_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->_editor_settings_changed();
}
}
}
static void wasgo_LineEdit__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit__text_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->_text_changed();
}
}
}
static void wasgo_LineEdit__toggle_draw_caret(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->_toggle_draw_caret();
}
}
}
static void wasgo_LineEdit_append_at_cursor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->append_at_cursor(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_LineEdit_cursor_get_blink_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->cursor_get_blink_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_LineEdit_cursor_get_blink_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
return caller->cursor_get_blink_speed();
}
}
}
static void wasgo_LineEdit_cursor_set_blink_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->cursor_set_blink_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_cursor_set_blink_speed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->cursor_set_blink_speed(arg0);
}
}
}
static void wasgo_LineEdit_deselect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->deselect();
}
}
}
static WasGoId wasgo_LineEdit_get_align(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
enum.LineEdit::Align ret_value = caller->get_align();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_LineEdit_get_cursor_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_cursor_position();
}
}
}
static WasGoId wasgo_LineEdit_get_expand_to_text_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_expand_to_text_length();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_LineEdit_get_max_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_length();
}
}
}
static WasGoId wasgo_LineEdit_get_menu(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
PopupMenu ret_value = caller->get_menu();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_get_placeholder(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_placeholder();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_LineEdit_get_placeholder_alpha(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_placeholder_alpha();
}
}
}
static WasGoId wasgo_LineEdit_get_right_icon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_right_icon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_get_secret_character(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_secret_character();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_is_clear_button_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_clear_button_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_is_context_menu_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_context_menu_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_is_editable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_is_secret(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_secret();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_is_selecting_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selecting_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LineEdit_is_shortcut_keys_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shortcut_keys_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_LineEdit_menu_option(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->menu_option(arg0);
}
}
}
static void wasgo_LineEdit_select(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->select(arg0, arg1);
}
}
}
static void wasgo_LineEdit_select_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->select_all();
}
}
}
static void wasgo_LineEdit_set_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_align(arg0);
}
}
}
static void wasgo_LineEdit_set_clear_button_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_clear_button_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_context_menu_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_context_menu_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_cursor_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_cursor_position(arg0);
}
}
}
static void wasgo_LineEdit_set_editable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_editable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_expand_to_text_length(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_to_text_length(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_max_length(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_max_length(arg0);
}
}
}
static void wasgo_LineEdit_set_placeholder(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_placeholder(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_placeholder_alpha(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_placeholder_alpha(arg0);
}
}
}
static void wasgo_LineEdit_set_right_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_right_icon(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_secret(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_secret(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_secret_character(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_secret_character(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_selecting_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_selecting_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_shortcut_keys_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_shortcut_keys_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_LineEdit_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineEdit *caller = (LineEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_text(&(String *)lookup_object(arg0));
}
}
}
static float wasgo_LineShape2D_get_d(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineShape2D *caller = (LineShape2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_d();
}
}
}
static WasGoId wasgo_LineShape2D_get_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineShape2D *caller = (LineShape2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_LineShape2D_set_d(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineShape2D *caller = (LineShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_d(arg0);
}
}
}
static void wasgo_LineShape2D_set_normal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LineShape2D *caller = (LineShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_normal(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_LinkButton_get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LinkButton *caller = (LinkButton *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_LinkButton_get_underline_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LinkButton *caller = (LinkButton *) state->lookup_object(caller_id);
if(caller){
enum.LinkButton::UnderlineMode ret_value = caller->get_underline_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_LinkButton_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LinkButton *caller = (LinkButton *) state->lookup_object(caller_id);
if(caller){
caller->set_text(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_LinkButton_set_underline_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
LinkButton *caller = (LinkButton *) state->lookup_object(caller_id);
if(caller){
caller->set_underline_mode(arg0);
}
}
}
static void wasgo_Listener_clear_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Listener *caller = (Listener *) state->lookup_object(caller_id);
if(caller){
caller->clear_current();
}
}
}
static WasGoId wasgo_Listener_get_listener_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Listener *caller = (Listener *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_listener_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Listener_is_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Listener *caller = (Listener *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_current();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Listener_make_current(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Listener *caller = (Listener *) state->lookup_object(caller_id);
if(caller){
caller->make_current();
}
}
}
static void wasgo_MainLoop__drop_files(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->_drop_files(&(PoolStringArray *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_MainLoop__finalize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->_finalize();
}
}
}
static void wasgo_MainLoop__global_menu_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->_global_menu_action(&(Variant *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_MainLoop__idle(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_idle(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MainLoop__initialize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->_initialize();
}
}
}
static void wasgo_MainLoop__input_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->_input_event(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_MainLoop__input_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->_input_text(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_MainLoop__iteration(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_iteration(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MainLoop_finish(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->finish();
}
}
}
static WasGoId wasgo_MainLoop_idle(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->idle(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MainLoop_init(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->init();
}
}
}
static void wasgo_MainLoop_input_event(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->input_event(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_MainLoop_input_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
caller->input_text(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_MainLoop_iteration(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MainLoop *caller = (MainLoop *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->iteration(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Material_get_next_pass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Material *caller = (Material *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_next_pass();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Material_get_render_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Material *caller = (Material *) state->lookup_object(caller_id);
if(caller){
return caller->get_render_priority();
}
}
}
static void wasgo_Material_set_next_pass(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Material *caller = (Material *) state->lookup_object(caller_id);
if(caller){
caller->set_next_pass(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_Material_set_render_priority(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Material *caller = (Material *) state->lookup_object(caller_id);
if(caller){
caller->set_render_priority(arg0);
}
}
}
static WasGoId wasgo_MenuButton__get_items(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MenuButton *caller = (MenuButton *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_items();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MenuButton__set_items(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MenuButton *caller = (MenuButton *) state->lookup_object(caller_id);
if(caller){
caller->_set_items(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_MenuButton__unhandled_key_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MenuButton *caller = (MenuButton *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_key_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_MenuButton_get_popup(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MenuButton *caller = (MenuButton *) state->lookup_object(caller_id);
if(caller){
PopupMenu ret_value = caller->get_popup();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MenuButton_is_switch_on_hover(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MenuButton *caller = (MenuButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_switch_on_hover();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MenuButton_set_disable_shortcuts(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MenuButton *caller = (MenuButton *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_shortcuts(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_MenuButton_set_switch_on_hover(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MenuButton *caller = (MenuButton *) state->lookup_object(caller_id);
if(caller){
caller->set_switch_on_hover(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Mesh_create_convex_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
Shape ret_value = caller->create_convex_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_create_outline(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->create_outline(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_create_trimesh_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
Shape ret_value = caller->create_trimesh_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_generate_triangle_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
TriangleMesh ret_value = caller->generate_triangle_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_get_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_get_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_get_lightmap_size_hint(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_lightmap_size_hint();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Mesh_get_surface_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_surface_count();
}
}
}
static void wasgo_Mesh_set_lightmap_size_hint(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
caller->set_lightmap_size_hint(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Mesh_surface_get_arrays(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->surface_get_arrays(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_surface_get_blend_shape_arrays(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->surface_get_blend_shape_arrays(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Mesh_surface_get_material(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->surface_get_material(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Mesh_surface_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Mesh *caller = (Mesh *) state->lookup_object(caller_id);
if(caller){
caller->surface_set_material(arg0, &(Material *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_MeshDataTool_commit_to_surface(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->commit_to_surface(&(ArrayMesh *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_create_from_surface(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->create_from_surface(&(ArrayMesh *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MeshDataTool_get_edge_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
return caller->get_edge_count();
}
}
}
static WasGoId wasgo_MeshDataTool_get_edge_faces(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_edge_faces(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_edge_meta(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_edge_meta(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MeshDataTool_get_edge_vertex(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
return caller->get_edge_vertex(arg0, arg1);
}
}
}
static int wasgo_MeshDataTool_get_face_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
return caller->get_face_count();
}
}
}
static int wasgo_MeshDataTool_get_face_edge(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
return caller->get_face_edge(arg0, arg1);
}
}
}
static WasGoId wasgo_MeshDataTool_get_face_meta(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_face_meta(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_face_normal(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_face_normal(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MeshDataTool_get_face_vertex(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
return caller->get_face_vertex(arg0, arg1);
}
}
}
static int wasgo_MeshDataTool_get_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
return caller->get_format();
}
}
}
static WasGoId wasgo_MeshDataTool_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_vertex(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_bones(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_vertex_bones(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_vertex_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MeshDataTool_get_vertex_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
return caller->get_vertex_count();
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_edges(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_vertex_edges(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_faces(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_vertex_faces(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_meta(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_vertex_meta(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_normal(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_vertex_normal(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Plane ret_value = caller->get_vertex_tangent(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_uv(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_vertex_uv(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_uv2(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_vertex_uv2(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshDataTool_get_vertex_weights(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
PoolRealArray ret_value = caller->get_vertex_weights(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MeshDataTool_set_edge_meta(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_edge_meta(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_face_meta(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_face_meta(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_MeshDataTool_set_vertex(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex(arg0, &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_bones(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_bones(arg0, &(PoolIntArray *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_color(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_meta(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_meta(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_normal(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_normal(arg0, &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_tangent(arg0, &(Plane *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_uv(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_uv(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_uv2(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_uv2(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_MeshDataTool_set_vertex_weights(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshDataTool *caller = (MeshDataTool *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_weights(arg0, &(PoolRealArray *)lookup_object(arg1));
}
}
}
static void wasgo_MeshInstance__mesh_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->_mesh_changed();
}
}
}
static void wasgo_MeshInstance_create_convex_collision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->create_convex_collision();
}
}
}
static void wasgo_MeshInstance_create_debug_tangents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->create_debug_tangents();
}
}
}
static void wasgo_MeshInstance_create_trimesh_collision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->create_trimesh_collision();
}
}
}
static WasGoId wasgo_MeshInstance_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshInstance_get_skeleton_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_skeleton_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshInstance_get_skin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
Skin ret_value = caller->get_skin();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshInstance_get_surface_material(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_surface_material(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MeshInstance_get_surface_material_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
return caller->get_surface_material_count();
}
}
}
static void wasgo_MeshInstance_set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static void wasgo_MeshInstance_set_skeleton_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_skeleton_path(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_MeshInstance_set_skin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_skin(&(Skin *)lookup_object(arg0));
}
}
}
static void wasgo_MeshInstance_set_surface_material(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance *caller = (MeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_surface_material(arg0, &(Material *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_MeshInstance2D_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance2D *caller = (MeshInstance2D *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshInstance2D_get_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance2D *caller = (MeshInstance2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_normal_map();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshInstance2D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance2D *caller = (MeshInstance2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MeshInstance2D_set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance2D *caller = (MeshInstance2D *) state->lookup_object(caller_id);
if(caller){
caller->set_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static void wasgo_MeshInstance2D_set_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance2D *caller = (MeshInstance2D *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_map(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_MeshInstance2D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshInstance2D *caller = (MeshInstance2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_MeshLibrary_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_MeshLibrary_create_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->create_item(arg0);
}
}
}
static int wasgo_MeshLibrary_find_item_by_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
return caller->find_item_by_name(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_MeshLibrary_get_item_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_item_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshLibrary_get_item_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_item_mesh(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshLibrary_get_item_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_item_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshLibrary_get_item_navmesh(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
NavigationMesh ret_value = caller->get_item_navmesh(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshLibrary_get_item_navmesh_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_item_navmesh_transform(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshLibrary_get_item_preview(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_item_preview(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshLibrary_get_item_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_item_shapes(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MeshLibrary_get_last_unused_item_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
return caller->get_last_unused_item_id();
}
}
}
static void wasgo_MeshLibrary_remove_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->remove_item(arg0);
}
}
}
static void wasgo_MeshLibrary_set_item_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_item_mesh(arg0, &(Mesh *)lookup_object(arg1));
}
}
}
static void wasgo_MeshLibrary_set_item_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_item_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_MeshLibrary_set_item_navmesh(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_item_navmesh(arg0, &(NavigationMesh *)lookup_object(arg1));
}
}
}
static void wasgo_MeshLibrary_set_item_navmesh_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_item_navmesh_transform(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_MeshLibrary_set_item_preview(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_item_preview(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_MeshLibrary_set_item_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshLibrary *caller = (MeshLibrary *) state->lookup_object(caller_id);
if(caller){
caller->set_item_shapes(arg0, &(Array *)lookup_array(arg1));
}
}
}
static WasGoId wasgo_MeshTexture_get_base_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshTexture *caller = (MeshTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_base_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshTexture_get_image_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshTexture *caller = (MeshTexture *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_image_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MeshTexture_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshTexture *caller = (MeshTexture *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MeshTexture_set_base_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshTexture *caller = (MeshTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_base_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_MeshTexture_set_image_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshTexture *caller = (MeshTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_image_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_MeshTexture_set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MeshTexture *caller = (MeshTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static float wasgo_MobileVRInterface_get_display_to_lens(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_display_to_lens();
}
}
}
static float wasgo_MobileVRInterface_get_display_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_display_width();
}
}
}
static float wasgo_MobileVRInterface_get_eye_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_eye_height();
}
}
}
static float wasgo_MobileVRInterface_get_iod(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_iod();
}
}
}
static float wasgo_MobileVRInterface_get_k1(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_k1();
}
}
}
static float wasgo_MobileVRInterface_get_k2(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_k2();
}
}
}
static float wasgo_MobileVRInterface_get_oversample(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
return caller->get_oversample();
}
}
}
static void wasgo_MobileVRInterface_set_display_to_lens(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_display_to_lens(arg0);
}
}
}
static void wasgo_MobileVRInterface_set_display_width(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_display_width(arg0);
}
}
}
static void wasgo_MobileVRInterface_set_eye_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_eye_height(arg0);
}
}
}
static void wasgo_MobileVRInterface_set_iod(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_iod(arg0);
}
}
}
static void wasgo_MobileVRInterface_set_k1(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_k1(arg0);
}
}
}
static void wasgo_MobileVRInterface_set_k2(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_k2(arg0);
}
}
}
static void wasgo_MobileVRInterface_set_oversample(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MobileVRInterface *caller = (MobileVRInterface *) state->lookup_object(caller_id);
if(caller){
caller->set_oversample(arg0);
}
}
}
static WasGoId wasgo_MultiMesh__get_color_array(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
PoolColorArray ret_value = caller->_get_color_array();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh__get_custom_data_array(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
PoolColorArray ret_value = caller->_get_custom_data_array();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh__get_transform_2d_array(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->_get_transform_2d_array();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh__get_transform_array(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->_get_transform_array();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MultiMesh__set_color_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->_set_color_array(&(PoolColorArray *)lookup_object(arg0));
}
}
}
static void wasgo_MultiMesh__set_custom_data_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->_set_custom_data_array(&(PoolColorArray *)lookup_object(arg0));
}
}
}
static void wasgo_MultiMesh__set_transform_2d_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->_set_transform_2d_array(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_MultiMesh__set_transform_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->_set_transform_array(&(PoolVector3Array *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_MultiMesh_get_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh_get_color_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
enum.MultiMesh::ColorFormat ret_value = caller->get_color_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh_get_custom_data_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
enum.MultiMesh::CustomDataFormat ret_value = caller->get_custom_data_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh_get_instance_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_instance_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MultiMesh_get_instance_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_instance_count();
}
}
}
static WasGoId wasgo_MultiMesh_get_instance_custom_data(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_instance_custom_data(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh_get_instance_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_instance_transform(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh_get_instance_transform_2d(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_instance_transform_2d(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMesh_get_transform_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
enum.MultiMesh::TransformFormat ret_value = caller->get_transform_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MultiMesh_get_visible_instance_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_visible_instance_count();
}
}
}
static void wasgo_MultiMesh_set_as_bulk_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_as_bulk_array(&(PoolRealArray *)lookup_object(arg0));
}
}
}
static void wasgo_MultiMesh_set_color_format(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_color_format(arg0);
}
}
}
static void wasgo_MultiMesh_set_custom_data_format(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_data_format(arg0);
}
}
}
static void wasgo_MultiMesh_set_instance_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_instance_color(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_MultiMesh_set_instance_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_instance_count(arg0);
}
}
}
static void wasgo_MultiMesh_set_instance_custom_data(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_instance_custom_data(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_MultiMesh_set_instance_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_instance_transform(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_MultiMesh_set_instance_transform_2d(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_instance_transform_2d(arg0, &(Transform2D *)lookup_object(arg1));
}
}
}
static void wasgo_MultiMesh_set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static void wasgo_MultiMesh_set_transform_format(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_transform_format(arg0);
}
}
}
static void wasgo_MultiMesh_set_visible_instance_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMesh *caller = (MultiMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_visible_instance_count(arg0);
}
}
}
static WasGoId wasgo_MultiMeshInstance_get_multimesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance *caller = (MultiMeshInstance *) state->lookup_object(caller_id);
if(caller){
MultiMesh ret_value = caller->get_multimesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MultiMeshInstance_set_multimesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance *caller = (MultiMeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_multimesh(&(MultiMesh *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_MultiMeshInstance2D_get_multimesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance2D *caller = (MultiMeshInstance2D *) state->lookup_object(caller_id);
if(caller){
MultiMesh ret_value = caller->get_multimesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMeshInstance2D_get_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance2D *caller = (MultiMeshInstance2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_normal_map();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiMeshInstance2D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance2D *caller = (MultiMeshInstance2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MultiMeshInstance2D_set_multimesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance2D *caller = (MultiMeshInstance2D *) state->lookup_object(caller_id);
if(caller){
caller->set_multimesh(&(MultiMesh *)lookup_object(arg0));
}
}
}
static void wasgo_MultiMeshInstance2D_set_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance2D *caller = (MultiMeshInstance2D *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_map(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_MultiMeshInstance2D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiMeshInstance2D *caller = (MultiMeshInstance2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_MultiplayerAPI__add_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->_add_peer(arg0);
}
}
}
static void wasgo_MultiplayerAPI__connected_to_server(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->_connected_to_server();
}
}
}
static void wasgo_MultiplayerAPI__connection_failed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->_connection_failed();
}
}
}
static void wasgo_MultiplayerAPI__del_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->_del_peer(arg0);
}
}
}
static void wasgo_MultiplayerAPI__server_disconnected(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->_server_disconnected();
}
}
}
static void wasgo_MultiplayerAPI_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_MultiplayerAPI_get_network_connected_peers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_network_connected_peers();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiplayerAPI_get_network_peer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
NetworkedMultiplayerPeer ret_value = caller->get_network_peer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_MultiplayerAPI_get_network_unique_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
return caller->get_network_unique_id();
}
}
}
static int wasgo_MultiplayerAPI_get_rpc_sender_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
return caller->get_rpc_sender_id();
}
}
}
static WasGoId wasgo_MultiplayerAPI_has_network_peer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_network_peer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiplayerAPI_is_network_server(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_network_server();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiplayerAPI_is_object_decoding_allowed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_object_decoding_allowed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_MultiplayerAPI_is_refusing_new_network_connections(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_refusing_new_network_connections();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MultiplayerAPI_poll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->poll();
}
}
}
static WasGoId wasgo_MultiplayerAPI_send_bytes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->send_bytes(&(PoolByteArray *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_MultiplayerAPI_set_allow_object_decoding(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_object_decoding(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_MultiplayerAPI_set_network_peer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->set_network_peer(&(NetworkedMultiplayerPeer *)lookup_object(arg0));
}
}
}
static void wasgo_MultiplayerAPI_set_refuse_new_network_connections(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->set_refuse_new_network_connections(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_MultiplayerAPI_set_root_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
MultiplayerAPI *caller = (MultiplayerAPI *) state->lookup_object(caller_id);
if(caller){
caller->set_root_node(&(Node *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_NativeScript_get_class_documentation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_class_documentation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_get_class_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_class_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_get_library(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
GDNativeLibrary ret_value = caller->get_library();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_get_method_documentation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_method_documentation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_get_property_documentation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_property_documentation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_get_script_class_icon_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_script_class_icon_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_get_script_class_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_script_class_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_get_signal_documentation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_signal_documentation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NativeScript_new(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->new();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NativeScript_set_class_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
caller->set_class_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_NativeScript_set_library(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
caller->set_library(&(GDNativeLibrary *)lookup_object(arg0));
}
}
}
static void wasgo_NativeScript_set_script_class_icon_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
caller->set_script_class_icon_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_NativeScript_set_script_class_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NativeScript *caller = (NativeScript *) state->lookup_object(caller_id);
if(caller){
caller->set_script_class_name(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Navigation_get_closest_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_closest_point(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Navigation_get_closest_point_normal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_closest_point_normal(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Navigation_get_closest_point_owner(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_closest_point_owner(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Navigation_get_closest_point_to_segment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_closest_point_to_segment(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Navigation_get_simple_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_simple_path(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Navigation_get_up_vector(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_up_vector();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Navigation_navmesh_add(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
return caller->navmesh_add(&(NavigationMesh *)lookup_object(arg0), &(Transform *)lookup_object(arg1), &(Object *)lookup_object(arg2));
}
}
}
static void wasgo_Navigation_navmesh_remove(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
caller->navmesh_remove(arg0);
}
}
}
static void wasgo_Navigation_navmesh_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
caller->navmesh_set_transform(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_Navigation_set_up_vector(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation *caller = (Navigation *) state->lookup_object(caller_id);
if(caller){
caller->set_up_vector(&(Vector3 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Navigation2D_get_closest_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation2D *caller = (Navigation2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_closest_point(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Navigation2D_get_closest_point_owner(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation2D *caller = (Navigation2D *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_closest_point_owner(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Navigation2D_get_simple_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation2D *caller = (Navigation2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_simple_path(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Navigation2D_navpoly_add(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation2D *caller = (Navigation2D *) state->lookup_object(caller_id);
if(caller){
return caller->navpoly_add(&(NavigationPolygon *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1), &(Object *)lookup_object(arg2));
}
}
}
static void wasgo_Navigation2D_navpoly_remove(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation2D *caller = (Navigation2D *) state->lookup_object(caller_id);
if(caller){
caller->navpoly_remove(arg0);
}
}
}
static void wasgo_Navigation2D_navpoly_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Navigation2D *caller = (Navigation2D *) state->lookup_object(caller_id);
if(caller){
caller->navpoly_set_transform(arg0, &(Transform2D *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_NavigationMesh__get_polygons(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_polygons();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NavigationMesh__set_polygons(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->_set_polygons(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_NavigationMesh_add_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->add_polygon(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationMesh_clear_polygons(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->clear_polygons();
}
}
}
static void wasgo_NavigationMesh_create_from_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->create_from_mesh(&(Mesh *)lookup_object(arg0));
}
}
}
static float wasgo_NavigationMesh_get_agent_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_agent_height();
}
}
}
static float wasgo_NavigationMesh_get_agent_max_climb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_agent_max_climb();
}
}
}
static float wasgo_NavigationMesh_get_agent_max_slope(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_agent_max_slope();
}
}
}
static float wasgo_NavigationMesh_get_agent_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_agent_radius();
}
}
}
static float wasgo_NavigationMesh_get_cell_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell_height();
}
}
}
static float wasgo_NavigationMesh_get_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell_size();
}
}
}
static int wasgo_NavigationMesh_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_NavigationMesh_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_NavigationMesh_get_detail_sample_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_detail_sample_distance();
}
}
}
static float wasgo_NavigationMesh_get_detail_sample_max_error(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_detail_sample_max_error();
}
}
}
static float wasgo_NavigationMesh_get_edge_max_error(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_edge_max_error();
}
}
}
static float wasgo_NavigationMesh_get_edge_max_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_edge_max_length();
}
}
}
static WasGoId wasgo_NavigationMesh_get_filter_ledge_spans(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_filter_ledge_spans();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NavigationMesh_get_filter_low_hanging_obstacles(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_filter_low_hanging_obstacles();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NavigationMesh_get_filter_walkable_low_height_spans(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_filter_walkable_low_height_spans();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NavigationMesh_get_parsed_geometry_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_parsed_geometry_type();
}
}
}
static WasGoId wasgo_NavigationMesh_get_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_polygon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NavigationMesh_get_polygon_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_polygon_count();
}
}
}
static float wasgo_NavigationMesh_get_region_merge_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_region_merge_size();
}
}
}
static float wasgo_NavigationMesh_get_region_min_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_region_min_size();
}
}
}
static int wasgo_NavigationMesh_get_sample_partition_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_sample_partition_type();
}
}
}
static int wasgo_NavigationMesh_get_source_geometry_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_source_geometry_mode();
}
}
}
static WasGoId wasgo_NavigationMesh_get_source_group_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_source_group_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NavigationMesh_get_vertices(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_vertices();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_NavigationMesh_get_verts_per_poly(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_verts_per_poly();
}
}
}
static void wasgo_NavigationMesh_set_agent_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_agent_height(arg0);
}
}
}
static void wasgo_NavigationMesh_set_agent_max_climb(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_agent_max_climb(arg0);
}
}
}
static void wasgo_NavigationMesh_set_agent_max_slope(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_agent_max_slope(arg0);
}
}
}
static void wasgo_NavigationMesh_set_agent_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_agent_radius(arg0);
}
}
}
static void wasgo_NavigationMesh_set_cell_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_height(arg0);
}
}
}
static void wasgo_NavigationMesh_set_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_size(arg0);
}
}
}
static void wasgo_NavigationMesh_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_NavigationMesh_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_NavigationMesh_set_detail_sample_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_detail_sample_distance(arg0);
}
}
}
static void wasgo_NavigationMesh_set_detail_sample_max_error(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_detail_sample_max_error(arg0);
}
}
}
static void wasgo_NavigationMesh_set_edge_max_error(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_edge_max_error(arg0);
}
}
}
static void wasgo_NavigationMesh_set_edge_max_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_edge_max_length(arg0);
}
}
}
static void wasgo_NavigationMesh_set_filter_ledge_spans(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_filter_ledge_spans(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationMesh_set_filter_low_hanging_obstacles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_filter_low_hanging_obstacles(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationMesh_set_filter_walkable_low_height_spans(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_filter_walkable_low_height_spans(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationMesh_set_parsed_geometry_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_parsed_geometry_type(arg0);
}
}
}
static void wasgo_NavigationMesh_set_region_merge_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_region_merge_size(arg0);
}
}
}
static void wasgo_NavigationMesh_set_region_min_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_region_min_size(arg0);
}
}
}
static void wasgo_NavigationMesh_set_sample_partition_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_sample_partition_type(arg0);
}
}
}
static void wasgo_NavigationMesh_set_source_geometry_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_source_geometry_mode(arg0);
}
}
}
static void wasgo_NavigationMesh_set_source_group_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_source_group_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationMesh_set_vertices(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_vertices(&(PoolVector3Array *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationMesh_set_verts_per_poly(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMesh *caller = (NavigationMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_verts_per_poly(arg0);
}
}
}
static WasGoId wasgo_NavigationMeshInstance_get_navigation_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMeshInstance *caller = (NavigationMeshInstance *) state->lookup_object(caller_id);
if(caller){
NavigationMesh ret_value = caller->get_navigation_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NavigationMeshInstance_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMeshInstance *caller = (NavigationMeshInstance *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NavigationMeshInstance_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMeshInstance *caller = (NavigationMeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationMeshInstance_set_navigation_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationMeshInstance *caller = (NavigationMeshInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_navigation_mesh(&(NavigationMesh *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_NavigationPolygon__get_outlines(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_outlines();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NavigationPolygon__get_polygons(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_polygons();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NavigationPolygon__set_outlines(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->_set_outlines(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_NavigationPolygon__set_polygons(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->_set_polygons(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_NavigationPolygon_add_outline(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->add_outline(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationPolygon_add_outline_at_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->add_outline_at_index(&(PoolVector2Array *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_NavigationPolygon_add_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->add_polygon(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationPolygon_clear_outlines(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->clear_outlines();
}
}
}
static void wasgo_NavigationPolygon_clear_polygons(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->clear_polygons();
}
}
}
static WasGoId wasgo_NavigationPolygon_get_outline(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_outline(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NavigationPolygon_get_outline_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
return caller->get_outline_count();
}
}
}
static WasGoId wasgo_NavigationPolygon_get_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_polygon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NavigationPolygon_get_polygon_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
return caller->get_polygon_count();
}
}
}
static WasGoId wasgo_NavigationPolygon_get_vertices(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_vertices();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NavigationPolygon_make_polygons_from_outlines(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->make_polygons_from_outlines();
}
}
}
static void wasgo_NavigationPolygon_remove_outline(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->remove_outline(arg0);
}
}
}
static void wasgo_NavigationPolygon_set_outline(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_outline(arg0, &(PoolVector2Array *)lookup_object(arg1));
}
}
}
static void wasgo_NavigationPolygon_set_vertices(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygon *caller = (NavigationPolygon *) state->lookup_object(caller_id);
if(caller){
caller->set_vertices(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationPolygonInstance__navpoly_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygonInstance *caller = (NavigationPolygonInstance *) state->lookup_object(caller_id);
if(caller){
caller->_navpoly_changed();
}
}
}
static WasGoId wasgo_NavigationPolygonInstance_get_navigation_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygonInstance *caller = (NavigationPolygonInstance *) state->lookup_object(caller_id);
if(caller){
NavigationPolygon ret_value = caller->get_navigation_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NavigationPolygonInstance_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygonInstance *caller = (NavigationPolygonInstance *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NavigationPolygonInstance_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygonInstance *caller = (NavigationPolygonInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NavigationPolygonInstance_set_navigation_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NavigationPolygonInstance *caller = (NavigationPolygonInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_navigation_polygon(&(NavigationPolygon *)lookup_object(arg0));
}
}
}
static void wasgo_NetworkedMultiplayerENet_close_connection(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->close_connection(arg0);
}
}
}
static WasGoId wasgo_NetworkedMultiplayerENet_create_client(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->create_client(&(String *)lookup_object(arg0), arg1, arg2, arg3, arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NetworkedMultiplayerENet_create_server(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->create_server(arg0, arg1, arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NetworkedMultiplayerENet_disconnect_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_peer(arg0, &(bool *)lookup_object(arg1));
}
}
}
static int wasgo_NetworkedMultiplayerENet_get_channel_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
return caller->get_channel_count();
}
}
}
static WasGoId wasgo_NetworkedMultiplayerENet_get_compression_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
enum.NetworkedMultiplayerENet::CompressionMode ret_value = caller->get_compression_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NetworkedMultiplayerENet_get_last_packet_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
return caller->get_last_packet_channel();
}
}
}
static int wasgo_NetworkedMultiplayerENet_get_packet_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
return caller->get_packet_channel();
}
}
}
static WasGoId wasgo_NetworkedMultiplayerENet_get_peer_address(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_peer_address(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NetworkedMultiplayerENet_get_peer_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
return caller->get_peer_port(arg0);
}
}
}
static int wasgo_NetworkedMultiplayerENet_get_transfer_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
return caller->get_transfer_channel();
}
}
}
static WasGoId wasgo_NetworkedMultiplayerENet_is_always_ordered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_always_ordered();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NetworkedMultiplayerENet_is_server_relay_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_server_relay_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NetworkedMultiplayerENet_set_always_ordered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->set_always_ordered(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NetworkedMultiplayerENet_set_bind_ip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->set_bind_ip(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_NetworkedMultiplayerENet_set_channel_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->set_channel_count(arg0);
}
}
}
static void wasgo_NetworkedMultiplayerENet_set_compression_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->set_compression_mode(arg0);
}
}
}
static void wasgo_NetworkedMultiplayerENet_set_server_relay_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->set_server_relay_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NetworkedMultiplayerENet_set_transfer_channel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerENet *caller = (NetworkedMultiplayerENet *) state->lookup_object(caller_id);
if(caller){
caller->set_transfer_channel(arg0);
}
}
}
static WasGoId wasgo_NetworkedMultiplayerPeer_get_connection_status(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
enum.NetworkedMultiplayerPeer::ConnectionStatus ret_value = caller->get_connection_status();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NetworkedMultiplayerPeer_get_packet_peer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_packet_peer();
}
}
}
static WasGoId wasgo_NetworkedMultiplayerPeer_get_transfer_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
enum.NetworkedMultiplayerPeer::TransferMode ret_value = caller->get_transfer_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NetworkedMultiplayerPeer_get_unique_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_unique_id();
}
}
}
static WasGoId wasgo_NetworkedMultiplayerPeer_is_refusing_new_connections(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_refusing_new_connections();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NetworkedMultiplayerPeer_poll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
caller->poll();
}
}
}
static void wasgo_NetworkedMultiplayerPeer_set_refuse_new_connections(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_refuse_new_connections(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NetworkedMultiplayerPeer_set_target_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_target_peer(arg0);
}
}
}
static void wasgo_NetworkedMultiplayerPeer_set_transfer_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NetworkedMultiplayerPeer *caller = (NetworkedMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_transfer_mode(arg0);
}
}
}
static WasGoId wasgo_NinePatchRect_get_h_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
enum.NinePatchRect::AxisStretchMode ret_value = caller->get_h_axis_stretch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_NinePatchRect_get_patch_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
return caller->get_patch_margin(arg0);
}
}
}
static WasGoId wasgo_NinePatchRect_get_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_region_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NinePatchRect_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NinePatchRect_get_v_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
enum.NinePatchRect::AxisStretchMode ret_value = caller->get_v_axis_stretch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NinePatchRect_is_draw_center_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_draw_center_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NinePatchRect_set_draw_center(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_center(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NinePatchRect_set_h_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
caller->set_h_axis_stretch_mode(arg0);
}
}
}
static void wasgo_NinePatchRect_set_patch_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
caller->set_patch_margin(arg0, arg1);
}
}
}
static void wasgo_NinePatchRect_set_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
caller->set_region_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_NinePatchRect_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_NinePatchRect_set_v_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NinePatchRect *caller = (NinePatchRect *) state->lookup_object(caller_id);
if(caller){
caller->set_v_axis_stretch_mode(arg0);
}
}
}
static void wasgo_Node__enter_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_enter_tree();
}
}
}
static void wasgo_Node__exit_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_exit_tree();
}
}
}
static WasGoId wasgo_Node__get_configuration_warning(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_configuration_warning();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node__get_editor_description(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_editor_description();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node__get_import_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->_get_import_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Node__input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Node__physics_process(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_physics_process(arg0);
}
}
}
static void wasgo_Node__process(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_process(arg0);
}
}
}
static void wasgo_Node__ready(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_ready();
}
}
}
static void wasgo_Node__set_editor_description(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_set_editor_description(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Node__set_import_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_set_import_path(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_Node__unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Node__unhandled_key_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_key_input(&(InputEventKey *)lookup_object(arg0));
}
}
}
static void wasgo_Node_add_child(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->add_child(&(Node *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Node_add_child_below_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->add_child_below_node(&(Node *)lookup_object(arg0), &(Node *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_Node_add_to_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->add_to_group(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Node_can_process(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_process();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_duplicate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->duplicate(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_find_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->find_node(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_find_parent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->find_parent(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_child(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_child(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Node_get_child_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
return caller->get_child_count();
}
}
}
static WasGoId wasgo_Node_get_children(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_children();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_custom_multiplayer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
MultiplayerAPI ret_value = caller->get_custom_multiplayer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_filename(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_filename();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_groups(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_groups();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Node_get_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
return caller->get_index();
}
}
}
static WasGoId wasgo_Node_get_multiplayer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
MultiplayerAPI ret_value = caller->get_multiplayer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Node_get_network_master(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
return caller->get_network_master();
}
}
}
static WasGoId wasgo_Node_get_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_node(&(NodePath *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_node_and_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_node_and_resource(&(NodePath *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_node_or_null(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_node_or_null(&(NodePath *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_owner(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_owner();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_parent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_parent();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_path_to(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_path_to(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_pause_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
enum.Node::PauseMode ret_value = caller->get_pause_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Node_get_physics_process_delta_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
return caller->get_physics_process_delta_time();
}
}
}
static int wasgo_Node_get_position_in_parent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
return caller->get_position_in_parent();
}
}
}
static float wasgo_Node_get_process_delta_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
return caller->get_process_delta_time();
}
}
}
static int wasgo_Node_get_process_priority(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
return caller->get_process_priority();
}
}
}
static WasGoId wasgo_Node_get_scene_instance_load_placeholder(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_scene_instance_load_placeholder();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
SceneTree ret_value = caller->get_tree();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_get_viewport(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Viewport ret_value = caller->get_viewport();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_has_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_node(&(NodePath *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_has_node_and_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_node_and_resource(&(NodePath *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_a_parent_of(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_a_parent_of(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_displayed_folded(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_displayed_folded();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_greater_than(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_greater_than(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_in_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_in_group(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_inside_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_inside_tree();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_network_master(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_network_master();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_physics_processing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_physics_processing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_physics_processing_internal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_physics_processing_internal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_processing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_processing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_processing_input(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_processing_input();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_processing_internal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_processing_internal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_processing_unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_processing_unhandled_input();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_is_processing_unhandled_key_input(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_processing_unhandled_key_input();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Node_move_child(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->move_child(&(Node *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Node_print_stray_nodes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->print_stray_nodes();
}
}
}
static void wasgo_Node_print_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->print_tree();
}
}
}
static void wasgo_Node_print_tree_pretty(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->print_tree_pretty();
}
}
}
static void wasgo_Node_propagate_call(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->propagate_call(&(String *)lookup_object(arg0), &(Array *)lookup_array(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_Node_propagate_notification(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->propagate_notification(arg0);
}
}
}
static void wasgo_Node_queue_free(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->queue_free();
}
}
}
static void wasgo_Node_raise(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->raise();
}
}
}
static void wasgo_Node_remove_and_skip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->remove_and_skip();
}
}
}
static void wasgo_Node_remove_child(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->remove_child(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_Node_remove_from_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->remove_from_group(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Node_replace_by(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->replace_by(&(Node *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Node_request_ready(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->request_ready();
}
}
}
static WasGoId wasgo_Node_rpc(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->rpc(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Node_rpc_config(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->rpc_config(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_Node_rpc_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->rpc_id(arg0, &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_rpc_unreliable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->rpc_unreliable(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node_rpc_unreliable_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->rpc_unreliable_id(arg0, &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Node_rset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->rset(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_Node_rset_config(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->rset_config(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Node_rset_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->rset_id(arg0, &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_Node_rset_unreliable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->rset_unreliable(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_Node_rset_unreliable_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->rset_unreliable_id(arg0, &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_Node_set_custom_multiplayer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_multiplayer(&(MultiplayerAPI *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_display_folded(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_display_folded(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_filename(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_filename(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_network_master(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_network_master(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Node_set_owner(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_owner(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_pause_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_pause_mode(arg0);
}
}
}
static void wasgo_Node_set_physics_process(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_process(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_physics_process_internal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_process_internal(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_process(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_process(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_process_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_process_input(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_process_internal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_process_internal(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_process_priority(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_process_priority(arg0);
}
}
}
static void wasgo_Node_set_process_unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_process_unhandled_input(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_process_unhandled_key_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_process_unhandled_key_input(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_set_scene_instance_load_placeholder(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->set_scene_instance_load_placeholder(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node_update_configuration_warning(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node *caller = (Node *) state->lookup_object(caller_id);
if(caller){
caller->update_configuration_warning();
}
}
}
static void wasgo_Node2D_apply_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->apply_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static float wasgo_Node2D_get_angle_to(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_angle_to(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Node2D_get_global_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_global_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Node2D_get_global_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_global_rotation();
}
}
}
static float wasgo_Node2D_get_global_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_global_rotation_degrees();
}
}
}
static WasGoId wasgo_Node2D_get_global_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_global_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node2D_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node2D_get_relative_transform_to_parent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_relative_transform_to_parent(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Node2D_get_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_rotation();
}
}
}
static float wasgo_Node2D_get_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_rotation_degrees();
}
}
}
static WasGoId wasgo_Node2D_get_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Node2D_get_z_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_z_index();
}
}
}
static void wasgo_Node2D_global_translate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->global_translate(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Node2D_is_z_relative(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_z_relative();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Node2D_look_at(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->look_at(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_move_local_x(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->move_local_x(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Node2D_move_local_y(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->move_local_y(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Node2D_rotate(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->rotate(arg0);
}
}
}
static void wasgo_Node2D_set_global_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_global_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_set_global_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_global_rotation(arg0);
}
}
}
static void wasgo_Node2D_set_global_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_global_rotation_degrees(arg0);
}
}
}
static void wasgo_Node2D_set_global_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_global_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_set_global_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_global_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_set_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_set_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation(arg0);
}
}
}
static void wasgo_Node2D_set_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation_degrees(arg0);
}
}
}
static void wasgo_Node2D_set_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_set_z_as_relative(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_z_as_relative(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Node2D_set_z_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->set_z_index(arg0);
}
}
}
static WasGoId wasgo_Node2D_to_global(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->to_global(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Node2D_to_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->to_local(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Node2D_translate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Node2D *caller = (Node2D *) state->lookup_object(caller_id);
if(caller){
caller->translate(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_NoiseTexture__generate_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->_generate_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NoiseTexture__queue_update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->_queue_update();
}
}
}
static void wasgo_NoiseTexture__thread_done(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->_thread_done(&(Image *)lookup_object(arg0));
}
}
}
static void wasgo_NoiseTexture__update_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->_update_texture();
}
}
}
static float wasgo_NoiseTexture_get_bump_strength(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_bump_strength();
}
}
}
static WasGoId wasgo_NoiseTexture_get_noise(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
OpenSimplexNoise ret_value = caller->get_noise();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NoiseTexture_get_seamless(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_seamless();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_NoiseTexture_is_normalmap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_normalmap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_NoiseTexture_set_as_normalmap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_as_normalmap(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NoiseTexture_set_bump_strength(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_bump_strength(arg0);
}
}
}
static void wasgo_NoiseTexture_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_NoiseTexture_set_noise(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_noise(&(OpenSimplexNoise *)lookup_object(arg0));
}
}
}
static void wasgo_NoiseTexture_set_seamless(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_seamless(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_NoiseTexture_set_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
NoiseTexture *caller = (NoiseTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_width(arg0);
}
}
}
static WasGoId wasgo_Object__get(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_get(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object__get_property_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_property_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Object__init(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->_init();
}
}
}
static void wasgo_Object__notification(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->_notification(arg0);
}
}
}
static WasGoId wasgo_Object__set(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_set(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object__to_string(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_to_string();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Object_add_user_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->add_user_signal(&(String *)lookup_object(arg0), &(Array *)lookup_array(arg1));
}
}
}
static WasGoId wasgo_Object_call(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->call(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Object_call_deferred(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->call_deferred(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Object_callv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->callv(&(String *)lookup_object(arg0), &(Array *)lookup_array(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_can_translate_messages(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_translate_messages();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_connect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect(&(String *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Array *)lookup_array(arg3), arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Object_disconnect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->disconnect(&(String *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2));
}
}
}
static void wasgo_Object_emit_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->emit_signal(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Object_free(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->free();
}
}
}
static WasGoId wasgo_Object_get(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_class(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_class();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_incoming_connections(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_incoming_connections();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_indexed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_indexed(&(NodePath *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Object_get_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
return caller->get_instance_id();
}
}
}
static WasGoId wasgo_Object_get_meta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_meta(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_meta_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_meta_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_method_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_method_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_property_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_property_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Reference ret_value = caller->get_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_signal_connection_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_signal_connection_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_get_signal_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_signal_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_has_meta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_meta(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_has_method(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_method(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_has_user_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_user_signal(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_is_blocking_signals(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_blocking_signals();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_is_class(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_class(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_is_connected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_connected(&(String *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_is_queued_for_deletion(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_queued_for_deletion();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Object_notification(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->notification(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Object_property_list_changed_notify(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->property_list_changed_notify();
}
}
}
static void wasgo_Object_remove_meta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->remove_meta(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Object_set(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->set(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_Object_set_block_signals(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->set_block_signals(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Object_set_deferred(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->set_deferred(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_Object_set_indexed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->set_indexed(&(NodePath *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_Object_set_message_translation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->set_message_translation(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Object_set_meta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->set_meta(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_Object_set_script(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
caller->set_script(&(Reference *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Object_to_string(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->to_string();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Object_tr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Object *caller = (Object *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->tr(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_OccluderPolygon2D_get_cull_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OccluderPolygon2D *caller = (OccluderPolygon2D *) state->lookup_object(caller_id);
if(caller){
enum.OccluderPolygon2D::CullMode ret_value = caller->get_cull_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_OccluderPolygon2D_get_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OccluderPolygon2D *caller = (OccluderPolygon2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_OccluderPolygon2D_is_closed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OccluderPolygon2D *caller = (OccluderPolygon2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_closed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_OccluderPolygon2D_set_closed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OccluderPolygon2D *caller = (OccluderPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_closed(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_OccluderPolygon2D_set_cull_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OccluderPolygon2D *caller = (OccluderPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_cull_mode(arg0);
}
}
}
static void wasgo_OccluderPolygon2D_set_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OccluderPolygon2D *caller = (OccluderPolygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_polygon(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_OmniLight_get_shadow_detail(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OmniLight *caller = (OmniLight *) state->lookup_object(caller_id);
if(caller){
enum.OmniLight::ShadowDetail ret_value = caller->get_shadow_detail();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_OmniLight_get_shadow_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OmniLight *caller = (OmniLight *) state->lookup_object(caller_id);
if(caller){
enum.OmniLight::ShadowMode ret_value = caller->get_shadow_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_OmniLight_set_shadow_detail(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OmniLight *caller = (OmniLight *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_detail(arg0);
}
}
}
static void wasgo_OmniLight_set_shadow_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OmniLight *caller = (OmniLight *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_mode(arg0);
}
}
}
static WasGoId wasgo_OpenSimplexNoise_get_image(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->get_image(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_OpenSimplexNoise_get_lacunarity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_lacunarity();
}
}
}
static float wasgo_OpenSimplexNoise_get_noise_1d(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_noise_1d(arg0);
}
}
}
static float wasgo_OpenSimplexNoise_get_noise_2d(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_noise_2d(arg0, arg1);
}
}
}
static float wasgo_OpenSimplexNoise_get_noise_2dv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_noise_2dv(&(Vector2 *)lookup_object(arg0));
}
}
}
static float wasgo_OpenSimplexNoise_get_noise_3d(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_noise_3d(arg0, arg1, arg2);
}
}
}
static float wasgo_OpenSimplexNoise_get_noise_3dv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_noise_3dv(&(Vector3 *)lookup_object(arg0));
}
}
}
static float wasgo_OpenSimplexNoise_get_noise_4d(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_noise_4d(arg0, arg1, arg2, arg3);
}
}
}
static int wasgo_OpenSimplexNoise_get_octaves(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_octaves();
}
}
}
static float wasgo_OpenSimplexNoise_get_period(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_period();
}
}
}
static float wasgo_OpenSimplexNoise_get_persistence(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_persistence();
}
}
}
static WasGoId wasgo_OpenSimplexNoise_get_seamless_image(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->get_seamless_image(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_OpenSimplexNoise_get_seed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
return caller->get_seed();
}
}
}
static void wasgo_OpenSimplexNoise_set_lacunarity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
caller->set_lacunarity(arg0);
}
}
}
static void wasgo_OpenSimplexNoise_set_octaves(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
caller->set_octaves(arg0);
}
}
}
static void wasgo_OpenSimplexNoise_set_period(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
caller->set_period(arg0);
}
}
}
static void wasgo_OpenSimplexNoise_set_persistence(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
caller->set_persistence(arg0);
}
}
}
static void wasgo_OpenSimplexNoise_set_seed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OpenSimplexNoise *caller = (OpenSimplexNoise *) state->lookup_object(caller_id);
if(caller){
caller->set_seed(arg0);
}
}
}
static void wasgo_OptionButton__focused(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->_focused(arg0);
}
}
}
static WasGoId wasgo_OptionButton__get_items(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_items();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_OptionButton__select_int(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->_select_int(arg0);
}
}
}
static void wasgo_OptionButton__selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->_selected(arg0);
}
}
}
static void wasgo_OptionButton__set_items(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->_set_items(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_OptionButton_add_icon_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_item(&(Texture *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_OptionButton_add_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->add_item(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_OptionButton_add_separator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->add_separator();
}
}
}
static void wasgo_OptionButton_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static int wasgo_OptionButton_get_item_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_count();
}
}
}
static WasGoId wasgo_OptionButton_get_item_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_item_icon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_OptionButton_get_item_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_id(arg0);
}
}
}
static int wasgo_OptionButton_get_item_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_index(arg0);
}
}
}
static WasGoId wasgo_OptionButton_get_item_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_item_metadata(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_OptionButton_get_item_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_item_text(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_OptionButton_get_popup(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
PopupMenu ret_value = caller->get_popup();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_OptionButton_get_selected(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_selected();
}
}
}
static int wasgo_OptionButton_get_selected_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
return caller->get_selected_id();
}
}
}
static WasGoId wasgo_OptionButton_get_selected_metadata(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_selected_metadata();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_OptionButton_is_item_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_OptionButton_remove_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->remove_item(arg0);
}
}
}
static void wasgo_OptionButton_select(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->select(arg0);
}
}
}
static void wasgo_OptionButton_set_item_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->set_item_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_OptionButton_set_item_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->set_item_icon(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_OptionButton_set_item_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->set_item_id(arg0, arg1);
}
}
}
static void wasgo_OptionButton_set_item_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->set_item_metadata(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_OptionButton_set_item_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
OptionButton *caller = (OptionButton *) state->lookup_object(caller_id);
if(caller){
caller->set_item_text(arg0, &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_PCKPacker_add_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PCKPacker *caller = (PCKPacker *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->add_file(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PCKPacker_flush(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PCKPacker *caller = (PCKPacker *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->flush(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PCKPacker_pck_start(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PCKPacker *caller = (PCKPacker *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->pck_start(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PHashTranslation_generate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PHashTranslation *caller = (PHashTranslation *) state->lookup_object(caller_id);
if(caller){
caller->generate(&(Translation *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PackedDataContainer__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainer *caller = (PackedDataContainer *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedDataContainer__iter_get(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainer *caller = (PackedDataContainer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_iter_get(&(Variant *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedDataContainer__iter_init(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainer *caller = (PackedDataContainer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_iter_init(&(Array *)lookup_array(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedDataContainer__iter_next(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainer *caller = (PackedDataContainer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_iter_next(&(Array *)lookup_array(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PackedDataContainer__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainer *caller = (PackedDataContainer *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(PoolByteArray *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PackedDataContainer_pack(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainer *caller = (PackedDataContainer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->pack(&(Variant *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PackedDataContainer_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainer *caller = (PackedDataContainer *) state->lookup_object(caller_id);
if(caller){
return caller->size();
}
}
}
static WasGoId wasgo_PackedDataContainerRef__is_dictionary(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainerRef *caller = (PackedDataContainerRef *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_dictionary();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedDataContainerRef__iter_get(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainerRef *caller = (PackedDataContainerRef *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_iter_get(&(Variant *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedDataContainerRef__iter_init(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainerRef *caller = (PackedDataContainerRef *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_iter_init(&(Array *)lookup_array(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedDataContainerRef__iter_next(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainerRef *caller = (PackedDataContainerRef *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_iter_next(&(Array *)lookup_array(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PackedDataContainerRef_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedDataContainerRef *caller = (PackedDataContainerRef *) state->lookup_object(caller_id);
if(caller){
return caller->size();
}
}
}
static WasGoId wasgo_PackedScene__get_bundled_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedScene *caller = (PackedScene *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_bundled_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PackedScene__set_bundled_scene(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedScene *caller = (PackedScene *) state->lookup_object(caller_id);
if(caller){
caller->_set_bundled_scene(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static WasGoId wasgo_PackedScene_can_instance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedScene *caller = (PackedScene *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_instance();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedScene_get_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedScene *caller = (PackedScene *) state->lookup_object(caller_id);
if(caller){
SceneState ret_value = caller->get_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedScene_instance(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedScene *caller = (PackedScene *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->instance(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PackedScene_pack(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PackedScene *caller = (PackedScene *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->pack(&(Node *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PacketPeer_get_available_packet_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_available_packet_count();
}
}
}
static int wasgo_PacketPeer_get_encode_buffer_max_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_encode_buffer_max_size();
}
}
}
static WasGoId wasgo_PacketPeer_get_packet(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_packet();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeer_get_packet_error(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->get_packet_error();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeer_get_var(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_var(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeer_is_object_decoding_allowed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_object_decoding_allowed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeer_put_packet(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->put_packet(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeer_put_var(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->put_var(&(Variant *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PacketPeer_set_allow_object_decoding(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_object_decoding(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PacketPeer_set_encode_buffer_max_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeer *caller = (PacketPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_encode_buffer_max_size(arg0);
}
}
}
static int wasgo_PacketPeerStream_get_input_buffer_max_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerStream *caller = (PacketPeerStream *) state->lookup_object(caller_id);
if(caller){
return caller->get_input_buffer_max_size();
}
}
}
static int wasgo_PacketPeerStream_get_output_buffer_max_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerStream *caller = (PacketPeerStream *) state->lookup_object(caller_id);
if(caller){
return caller->get_output_buffer_max_size();
}
}
}
static WasGoId wasgo_PacketPeerStream_get_stream_peer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerStream *caller = (PacketPeerStream *) state->lookup_object(caller_id);
if(caller){
StreamPeer ret_value = caller->get_stream_peer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PacketPeerStream_set_input_buffer_max_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerStream *caller = (PacketPeerStream *) state->lookup_object(caller_id);
if(caller){
caller->set_input_buffer_max_size(arg0);
}
}
}
static void wasgo_PacketPeerStream_set_output_buffer_max_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerStream *caller = (PacketPeerStream *) state->lookup_object(caller_id);
if(caller){
caller->set_output_buffer_max_size(arg0);
}
}
}
static void wasgo_PacketPeerStream_set_stream_peer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerStream *caller = (PacketPeerStream *) state->lookup_object(caller_id);
if(caller){
caller->set_stream_peer(&(StreamPeer *)lookup_object(arg0));
}
}
}
static void wasgo_PacketPeerUDP_close(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
caller->close();
}
}
}
static WasGoId wasgo_PacketPeerUDP_get_packet_ip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_packet_ip();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PacketPeerUDP_get_packet_port(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
return caller->get_packet_port();
}
}
}
static WasGoId wasgo_PacketPeerUDP_is_listening(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_listening();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeerUDP_join_multicast_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->join_multicast_group(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeerUDP_leave_multicast_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->leave_multicast_group(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeerUDP_listen(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->listen(arg0, &(String *)lookup_object(arg1), arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PacketPeerUDP_set_broadcast_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
caller->set_broadcast_enabled(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PacketPeerUDP_set_dest_address(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->set_dest_address(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PacketPeerUDP_wait(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PacketPeerUDP *caller = (PacketPeerUDP *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->wait();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PanoramaSky_get_panorama(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PanoramaSky *caller = (PanoramaSky *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_panorama();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PanoramaSky_set_panorama(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PanoramaSky *caller = (PanoramaSky *) state->lookup_object(caller_id);
if(caller){
caller->set_panorama(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxBackground__camera_moved(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
caller->_camera_moved(&(Transform2D *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_ParallaxBackground_get_limit_begin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_limit_begin();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParallaxBackground_get_limit_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_limit_end();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParallaxBackground_get_scroll_base_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scroll_base_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParallaxBackground_get_scroll_base_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scroll_base_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParallaxBackground_get_scroll_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scroll_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParallaxBackground_is_ignore_camera_zoom(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ignore_camera_zoom();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ParallaxBackground_set_ignore_camera_zoom(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
caller->set_ignore_camera_zoom(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxBackground_set_limit_begin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
caller->set_limit_begin(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxBackground_set_limit_end(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
caller->set_limit_end(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxBackground_set_scroll_base_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
caller->set_scroll_base_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxBackground_set_scroll_base_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
caller->set_scroll_base_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxBackground_set_scroll_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxBackground *caller = (ParallaxBackground *) state->lookup_object(caller_id);
if(caller){
caller->set_scroll_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ParallaxLayer_get_mirroring(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxLayer *caller = (ParallaxLayer *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_mirroring();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParallaxLayer_get_motion_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxLayer *caller = (ParallaxLayer *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_motion_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParallaxLayer_get_motion_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxLayer *caller = (ParallaxLayer *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_motion_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ParallaxLayer_set_mirroring(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxLayer *caller = (ParallaxLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_mirroring(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxLayer_set_motion_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxLayer *caller = (ParallaxLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_motion_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ParallaxLayer_set_motion_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParallaxLayer *caller = (ParallaxLayer *) state->lookup_object(caller_id);
if(caller){
caller->set_motion_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Particles_capture_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->capture_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Particles_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_amount();
}
}
}
static WasGoId wasgo_Particles_get_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
enum.Particles::DrawOrder ret_value = caller->get_draw_order();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Particles_get_draw_pass_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
Mesh ret_value = caller->get_draw_pass_mesh(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Particles_get_draw_passes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_draw_passes();
}
}
}
static float wasgo_Particles_get_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_explosiveness_ratio();
}
}
}
static int wasgo_Particles_get_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_fixed_fps();
}
}
}
static WasGoId wasgo_Particles_get_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_fractional_delta();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Particles_get_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_lifetime();
}
}
}
static WasGoId wasgo_Particles_get_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_one_shot();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Particles_get_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_pre_process_time();
}
}
}
static WasGoId wasgo_Particles_get_process_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_process_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Particles_get_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_randomness_ratio();
}
}
}
static float wasgo_Particles_get_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed_scale();
}
}
}
static WasGoId wasgo_Particles_get_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_local_coordinates();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Particles_get_visibility_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_visibility_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Particles_is_emitting(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_emitting();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Particles_restart(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->restart();
}
}
}
static void wasgo_Particles_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_amount(arg0);
}
}
}
static void wasgo_Particles_set_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_order(arg0);
}
}
}
static void wasgo_Particles_set_draw_pass_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_pass_mesh(arg0, &(Mesh *)lookup_object(arg1));
}
}
}
static void wasgo_Particles_set_draw_passes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_passes(arg0);
}
}
}
static void wasgo_Particles_set_emitting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_emitting(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles_set_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_explosiveness_ratio(arg0);
}
}
}
static void wasgo_Particles_set_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_fixed_fps(arg0);
}
}
}
static void wasgo_Particles_set_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_fractional_delta(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles_set_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_lifetime(arg0);
}
}
}
static void wasgo_Particles_set_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_one_shot(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles_set_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_pre_process_time(arg0);
}
}
}
static void wasgo_Particles_set_process_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_process_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_Particles_set_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_randomness_ratio(arg0);
}
}
}
static void wasgo_Particles_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_speed_scale(arg0);
}
}
}
static void wasgo_Particles_set_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_use_local_coordinates(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles_set_visibility_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles *caller = (Particles *) state->lookup_object(caller_id);
if(caller){
caller->set_visibility_aabb(&(AABB *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Particles2D_capture_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->capture_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Particles2D_get_amount(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_amount();
}
}
}
static WasGoId wasgo_Particles2D_get_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
enum.Particles2D::DrawOrder ret_value = caller->get_draw_order();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Particles2D_get_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_explosiveness_ratio();
}
}
}
static int wasgo_Particles2D_get_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_fixed_fps();
}
}
}
static WasGoId wasgo_Particles2D_get_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_fractional_delta();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Particles2D_get_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_lifetime();
}
}
}
static WasGoId wasgo_Particles2D_get_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_normal_map();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Particles2D_get_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_one_shot();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Particles2D_get_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_pre_process_time();
}
}
}
static WasGoId wasgo_Particles2D_get_process_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_process_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Particles2D_get_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_randomness_ratio();
}
}
}
static float wasgo_Particles2D_get_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed_scale();
}
}
}
static WasGoId wasgo_Particles2D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Particles2D_get_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_local_coordinates();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Particles2D_get_visibility_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_visibility_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Particles2D_is_emitting(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_emitting();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Particles2D_restart(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->restart();
}
}
}
static void wasgo_Particles2D_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_amount(arg0);
}
}
}
static void wasgo_Particles2D_set_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_order(arg0);
}
}
}
static void wasgo_Particles2D_set_emitting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_emitting(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles2D_set_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_explosiveness_ratio(arg0);
}
}
}
static void wasgo_Particles2D_set_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_fixed_fps(arg0);
}
}
}
static void wasgo_Particles2D_set_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_fractional_delta(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles2D_set_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_lifetime(arg0);
}
}
}
static void wasgo_Particles2D_set_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_map(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Particles2D_set_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_one_shot(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles2D_set_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_pre_process_time(arg0);
}
}
}
static void wasgo_Particles2D_set_process_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_process_material(&(Material *)lookup_object(arg0));
}
}
}
static void wasgo_Particles2D_set_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_randomness_ratio(arg0);
}
}
}
static void wasgo_Particles2D_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_speed_scale(arg0);
}
}
}
static void wasgo_Particles2D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Particles2D_set_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_use_local_coordinates(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Particles2D_set_visibility_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Particles2D *caller = (Particles2D *) state->lookup_object(caller_id);
if(caller){
caller->set_visibility_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_color_ramp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_color_ramp();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_direction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_direction();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_emission_box_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_emission_box_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_emission_color_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_emission_color_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_emission_normal_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_emission_normal_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ParticlesMaterial_get_emission_point_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_emission_point_count();
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_emission_point_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_emission_point_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_emission_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
enum.ParticlesMaterial::EmissionShape ret_value = caller->get_emission_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ParticlesMaterial_get_emission_sphere_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_emission_sphere_radius();
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flag(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ParticlesMaterial_get_flatness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_flatness();
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_gravity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ParticlesMaterial_get_lifetime_randomness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_lifetime_randomness();
}
}
}
static float wasgo_ParticlesMaterial_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static float wasgo_ParticlesMaterial_get_param_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_param_randomness(arg0);
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_param_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_param_texture(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ParticlesMaterial_get_spread(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_spread();
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_trail_color_modifier(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
GradientTexture ret_value = caller->get_trail_color_modifier();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ParticlesMaterial_get_trail_divisor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_trail_divisor();
}
}
}
static WasGoId wasgo_ParticlesMaterial_get_trail_size_modifier(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
CurveTexture ret_value = caller->get_trail_size_modifier();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ParticlesMaterial_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_color_ramp(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_color_ramp(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_direction(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_direction(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_emission_box_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_box_extents(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_emission_color_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_color_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_emission_normal_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_normal_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_emission_point_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_point_count(arg0);
}
}
}
static void wasgo_ParticlesMaterial_set_emission_point_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_point_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_emission_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_shape(arg0);
}
}
}
static void wasgo_ParticlesMaterial_set_emission_sphere_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_sphere_radius(arg0);
}
}
}
static void wasgo_ParticlesMaterial_set_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_flag(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ParticlesMaterial_set_flatness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_flatness(arg0);
}
}
}
static void wasgo_ParticlesMaterial_set_gravity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_lifetime_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_lifetime_randomness(arg0);
}
}
}
static void wasgo_ParticlesMaterial_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static void wasgo_ParticlesMaterial_set_param_randomness(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_param_randomness(arg0, arg1);
}
}
}
static void wasgo_ParticlesMaterial_set_param_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_param_texture(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_ParticlesMaterial_set_spread(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_spread(arg0);
}
}
}
static void wasgo_ParticlesMaterial_set_trail_color_modifier(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_trail_color_modifier(&(GradientTexture *)lookup_object(arg0));
}
}
}
static void wasgo_ParticlesMaterial_set_trail_divisor(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_trail_divisor(arg0);
}
}
}
static void wasgo_ParticlesMaterial_set_trail_size_modifier(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ParticlesMaterial *caller = (ParticlesMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_trail_size_modifier(&(CurveTexture *)lookup_object(arg0));
}
}
}
static void wasgo_Path__curve_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Path *caller = (Path *) state->lookup_object(caller_id);
if(caller){
caller->_curve_changed();
}
}
}
static WasGoId wasgo_Path_get_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Path *caller = (Path *) state->lookup_object(caller_id);
if(caller){
Curve3D ret_value = caller->get_curve();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Path_set_curve(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Path *caller = (Path *) state->lookup_object(caller_id);
if(caller){
caller->set_curve(&(Curve3D *)lookup_object(arg0));
}
}
}
static void wasgo_Path2D__curve_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Path2D *caller = (Path2D *) state->lookup_object(caller_id);
if(caller){
caller->_curve_changed();
}
}
}
static WasGoId wasgo_Path2D_get_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Path2D *caller = (Path2D *) state->lookup_object(caller_id);
if(caller){
Curve2D ret_value = caller->get_curve();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Path2D_set_curve(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Path2D *caller = (Path2D *) state->lookup_object(caller_id);
if(caller){
caller->set_curve(&(Curve2D *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PathFollow_get_cubic_interpolation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_cubic_interpolation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PathFollow_get_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
return caller->get_h_offset();
}
}
}
static float wasgo_PathFollow_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
return caller->get_offset();
}
}
}
static WasGoId wasgo_PathFollow_get_rotation_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
enum.PathFollow::RotationMode ret_value = caller->get_rotation_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PathFollow_get_unit_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
return caller->get_unit_offset();
}
}
}
static float wasgo_PathFollow_get_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_offset();
}
}
}
static WasGoId wasgo_PathFollow_has_loop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_loop();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PathFollow_set_cubic_interpolation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
caller->set_cubic_interpolation(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PathFollow_set_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
caller->set_h_offset(arg0);
}
}
}
static void wasgo_PathFollow_set_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
caller->set_loop(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PathFollow_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(arg0);
}
}
}
static void wasgo_PathFollow_set_rotation_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation_mode(arg0);
}
}
}
static void wasgo_PathFollow_set_unit_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
caller->set_unit_offset(arg0);
}
}
}
static void wasgo_PathFollow_set_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow *caller = (PathFollow *) state->lookup_object(caller_id);
if(caller){
caller->set_v_offset(arg0);
}
}
}
static WasGoId wasgo_PathFollow2D_get_cubic_interpolation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_cubic_interpolation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PathFollow2D_get_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_h_offset();
}
}
}
static float wasgo_PathFollow2D_get_lookahead(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_lookahead();
}
}
}
static float wasgo_PathFollow2D_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_offset();
}
}
}
static float wasgo_PathFollow2D_get_unit_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_unit_offset();
}
}
}
static float wasgo_PathFollow2D_get_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_offset();
}
}
}
static WasGoId wasgo_PathFollow2D_has_loop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_loop();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PathFollow2D_is_rotating(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_rotating();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PathFollow2D_set_cubic_interpolation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_cubic_interpolation(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PathFollow2D_set_h_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_h_offset(arg0);
}
}
}
static void wasgo_PathFollow2D_set_lookahead(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_lookahead(arg0);
}
}
}
static void wasgo_PathFollow2D_set_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_loop(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PathFollow2D_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(arg0);
}
}
}
static void wasgo_PathFollow2D_set_rotate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_rotate(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PathFollow2D_set_unit_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_unit_offset(arg0);
}
}
}
static void wasgo_PathFollow2D_set_v_offset(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PathFollow2D *caller = (PathFollow2D *) state->lookup_object(caller_id);
if(caller){
caller->set_v_offset(arg0);
}
}
}
static float wasgo_Performance_get_monitor(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Performance *caller = (Performance *) state->lookup_object(caller_id);
if(caller){
return caller->get_monitor(arg0);
}
}
}
static void wasgo_PhysicalBone__direct_state_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->_direct_state_changed(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicalBone_apply_central_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->apply_central_impulse(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicalBone_apply_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->apply_impulse(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_PhysicalBone_get_body_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_body_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicalBone_get_bone_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
return caller->get_bone_id();
}
}
}
static float wasgo_PhysicalBone_get_bounce(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
return caller->get_bounce();
}
}
}
static float wasgo_PhysicalBone_get_friction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
return caller->get_friction();
}
}
}
static float wasgo_PhysicalBone_get_gravity_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
return caller->get_gravity_scale();
}
}
}
static WasGoId wasgo_PhysicalBone_get_joint_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_joint_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicalBone_get_joint_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
enum.PhysicalBone::JointType ret_value = caller->get_joint_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicalBone_get_mass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
return caller->get_mass();
}
}
}
static WasGoId wasgo_PhysicalBone_get_simulate_physics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_simulate_physics();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicalBone_get_weight(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
return caller->get_weight();
}
}
}
static WasGoId wasgo_PhysicalBone_is_simulating_physics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_simulating_physics();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicalBone_is_static_body(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_static_body();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicalBone_set_body_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_body_offset(&(Transform *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicalBone_set_bounce(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_bounce(arg0);
}
}
}
static void wasgo_PhysicalBone_set_friction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_friction(arg0);
}
}
}
static void wasgo_PhysicalBone_set_gravity_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_scale(arg0);
}
}
}
static void wasgo_PhysicalBone_set_joint_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_joint_offset(&(Transform *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicalBone_set_joint_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_joint_type(arg0);
}
}
}
static void wasgo_PhysicalBone_set_mass(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_mass(arg0);
}
}
}
static void wasgo_PhysicalBone_set_weight(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicalBone *caller = (PhysicalBone *) state->lookup_object(caller_id);
if(caller){
caller->set_weight(arg0);
}
}
}
static void wasgo_Physics2DDirectBodyState_add_central_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->add_central_force(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DDirectBodyState_add_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->add_force(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DDirectBodyState_add_torque(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->add_torque(arg0);
}
}
}
static void wasgo_Physics2DDirectBodyState_apply_central_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->apply_central_impulse(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DDirectBodyState_apply_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->apply_impulse(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DDirectBodyState_apply_torque_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->apply_torque_impulse(arg0);
}
}
}
static float wasgo_Physics2DDirectBodyState_get_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_angular_velocity();
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_contact_collider(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_contact_collider(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DDirectBodyState_get_contact_collider_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_collider_id(arg0);
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_contact_collider_object(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_contact_collider_object(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_contact_collider_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_contact_collider_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DDirectBodyState_get_contact_collider_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_collider_shape(arg0);
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_contact_collider_shape_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_contact_collider_shape_metadata(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_contact_collider_velocity_at_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_contact_collider_velocity_at_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DDirectBodyState_get_contact_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_count();
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_contact_local_normal(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_contact_local_normal(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_contact_local_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_contact_local_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DDirectBodyState_get_contact_local_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_local_shape(arg0);
}
}
}
static float wasgo_Physics2DDirectBodyState_get_inverse_inertia(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_inverse_inertia();
}
}
}
static float wasgo_Physics2DDirectBodyState_get_inverse_mass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_inverse_mass();
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_linear_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_space_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Physics2DDirectSpaceState ret_value = caller->get_space_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Physics2DDirectBodyState_get_step(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_step();
}
}
}
static float wasgo_Physics2DDirectBodyState_get_total_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_total_angular_damp();
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_total_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_total_gravity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Physics2DDirectBodyState_get_total_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_total_linear_damp();
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DDirectBodyState_integrate_forces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->integrate_forces();
}
}
}
static WasGoId wasgo_Physics2DDirectBodyState_is_sleeping(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_sleeping();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DDirectBodyState_set_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_velocity(arg0);
}
}
}
static void wasgo_Physics2DDirectBodyState_set_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_velocity(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DDirectBodyState_set_sleep_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_sleep_state(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DDirectBodyState_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectBodyState *caller = (Physics2DDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DDirectSpaceState_cast_motion(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectSpaceState *caller = (Physics2DDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->cast_motion(&(Physics2DShapeQueryParameters *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectSpaceState_collide_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectSpaceState *caller = (Physics2DDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->collide_shape(&(Physics2DShapeQueryParameters *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectSpaceState_get_rest_info(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectSpaceState *caller = (Physics2DDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_rest_info(&(Physics2DShapeQueryParameters *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectSpaceState_intersect_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, int arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectSpaceState *caller = (Physics2DDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->intersect_point(&(Vector2 *)lookup_object(arg0), arg1, &(Array *)lookup_array(arg2), arg3, &(bool *)lookup_object(arg4), &(bool *)lookup_object(arg5));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectSpaceState_intersect_point_on_canvas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, WasGoID arg3, int arg4, WasGoID arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectSpaceState *caller = (Physics2DDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->intersect_point_on_canvas(&(Vector2 *)lookup_object(arg0), arg1, arg2, &(Array *)lookup_array(arg3), arg4, &(bool *)lookup_object(arg5), &(bool *)lookup_object(arg6));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectSpaceState_intersect_ray(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectSpaceState *caller = (Physics2DDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->intersect_ray(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Array *)lookup_array(arg2), arg3, &(bool *)lookup_object(arg4), &(bool *)lookup_object(arg5));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DDirectSpaceState_intersect_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DDirectSpaceState *caller = (Physics2DDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->intersect_shape(&(Physics2DShapeQueryParameters *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DServer_area_add_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_add_shape(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(Transform2D *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_Physics2DServer_area_attach_canvas_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_attach_canvas_instance_id(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_area_attach_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_attach_object_instance_id(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_area_clear_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_clear_shapes(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_area_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->area_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DServer_area_get_canvas_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->area_get_canvas_instance_id(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_Physics2DServer_area_get_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->area_get_object_instance_id(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_area_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->area_get_param(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_area_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->area_get_shape(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DServer_area_get_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->area_get_shape_count(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_area_get_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->area_get_shape_transform(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_area_get_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->area_get_space(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_area_get_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
enum.Physics2DServer::AreaSpaceOverrideMode ret_value = caller->area_get_space_override_mode(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_area_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->area_get_transform(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DServer_area_remove_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_remove_shape(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_area_set_area_monitor_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_area_monitor_callback(&(RID *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_area_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_collision_layer(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_area_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_collision_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_area_set_monitor_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_monitor_callback(&(RID *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_area_set_monitorable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_monitorable(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_area_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_param(&(RID *)lookup_object(arg0), arg1, &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_area_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_shape(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_area_set_shape_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_shape_disabled(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_area_set_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_shape_transform(&(RID *)lookup_object(arg0), arg1, &(Transform2D *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_area_set_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_space(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_area_set_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_space_override_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_area_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_transform(&(RID *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_add_central_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_central_force(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_add_collision_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_collision_exception(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_add_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_force(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_body_add_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_shape(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(Transform2D *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_Physics2DServer_body_add_torque(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_torque(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_apply_central_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_apply_central_impulse(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_apply_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_apply_impulse(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_body_apply_torque_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_apply_torque_impulse(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_attach_canvas_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_attach_canvas_instance_id(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_attach_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_attach_object_instance_id(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_clear_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_clear_shapes(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_body_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->body_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DServer_body_get_canvas_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_canvas_instance_id(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_Physics2DServer_body_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_collision_layer(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_Physics2DServer_body_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_collision_mask(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_continuous_collision_detection_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
enum.Physics2DServer::CCDMode ret_value = caller->body_get_continuous_collision_detection_mode(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_direct_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Physics2DDirectBodyState ret_value = caller->body_get_direct_state(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DServer_body_get_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_max_contacts_reported(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
enum.Physics2DServer::BodyMode ret_value = caller->body_get_mode(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DServer_body_get_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_object_instance_id(&(RID *)lookup_object(arg0));
}
}
}
static float wasgo_Physics2DServer_body_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->body_get_shape(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DServer_body_get_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_shape_count(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_shape_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->body_get_shape_metadata(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->body_get_shape_transform(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->body_get_space(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_body_get_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->body_get_state(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_body_is_omitting_force_integration(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->body_is_omitting_force_integration(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DServer_body_remove_collision_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_remove_collision_exception(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_remove_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_remove_shape(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_set_axis_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_axis_velocity(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_collision_layer(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_collision_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_set_continuous_collision_detection_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_continuous_collision_detection_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_set_force_integration_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_force_integration_callback(&(RID *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_Physics2DServer_body_set_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_max_contacts_reported(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_body_set_omit_force_integration(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_omit_force_integration(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_Physics2DServer_body_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_body_set_shape_as_one_way_collision(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape_as_one_way_collision(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2), arg3);
}
}
}
static void wasgo_Physics2DServer_body_set_shape_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape_disabled(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_body_set_shape_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape_metadata(&(RID *)lookup_object(arg0), arg1, &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_body_set_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape_transform(&(RID *)lookup_object(arg0), arg1, &(Transform2D *)lookup_object(arg2));
}
}
}
static void wasgo_Physics2DServer_body_set_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_space(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_body_set_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_state(&(RID *)lookup_object(arg0), arg1, &(Variant *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_Physics2DServer_body_test_motion(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, float arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->body_test_motion(&(RID *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(bool *)lookup_object(arg3), arg4, &(Physics2DTestMotionResult *)lookup_object(arg5));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_capsule_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->capsule_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_circle_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->circle_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_concave_polygon_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->concave_polygon_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_convex_polygon_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->convex_polygon_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_damped_spring_joint_create(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->damped_spring_joint_create(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(RID *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Physics2DServer_damped_string_joint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->damped_string_joint_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Physics2DServer_damped_string_joint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->damped_string_joint_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_Physics2DServer_free_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->free_rid(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_Physics2DServer_get_process_info(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_process_info(arg0);
}
}
}
static WasGoId wasgo_Physics2DServer_groove_joint_create(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->groove_joint_create(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(RID *)lookup_object(arg3), &(RID *)lookup_object(arg4));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Physics2DServer_joint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->joint_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_Physics2DServer_joint_get_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
enum.Physics2DServer::JointType ret_value = caller->joint_get_type(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DServer_joint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->joint_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static WasGoId wasgo_Physics2DServer_line_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->line_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_pin_joint_create(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->pin_joint_create(&(Vector2 *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(RID *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_ray_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->ray_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_rectangle_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->rectangle_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_segment_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->segment_shape_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DServer_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->set_active(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Physics2DServer_shape_get_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->shape_get_data(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_shape_get_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
enum.Physics2DServer::ShapeType ret_value = caller->shape_get_type(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DServer_shape_set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->shape_set_data(&(RID *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Physics2DServer_space_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->space_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DServer_space_get_direct_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
Physics2DDirectSpaceState ret_value = caller->space_get_direct_state(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Physics2DServer_space_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
return caller->space_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_Physics2DServer_space_is_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->space_is_active(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DServer_space_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->space_set_active(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Physics2DServer_space_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DServer *caller = (Physics2DServer *) state->lookup_object(caller_id);
if(caller){
caller->space_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static int wasgo_Physics2DShapeQueryParameters_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_Physics2DShapeQueryParameters_get_exclude(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_exclude();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Physics2DShapeQueryParameters_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin();
}
}
}
static WasGoId wasgo_Physics2DShapeQueryParameters_get_motion(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_motion();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DShapeQueryParameters_get_shape_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_shape_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DShapeQueryParameters_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DShapeQueryParameters_is_collide_with_areas_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_areas_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DShapeQueryParameters_is_collide_with_bodies_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_bodies_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_collide_with_areas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_areas(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_collide_with_bodies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_bodies(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_exclude(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_exclude(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_margin(arg0);
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_motion(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_motion(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_shape(&(Resource *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_shape_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_shape_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_Physics2DShapeQueryParameters_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryParameters *caller = (Physics2DShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static int wasgo_Physics2DShapeQueryResult_get_result_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryResult *caller = (Physics2DShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_result_count();
}
}
}
static WasGoId wasgo_Physics2DShapeQueryResult_get_result_object(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryResult *caller = (Physics2DShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_result_object(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DShapeQueryResult_get_result_object_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryResult *caller = (Physics2DShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_result_object_id(arg0);
}
}
}
static int wasgo_Physics2DShapeQueryResult_get_result_object_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryResult *caller = (Physics2DShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_result_object_shape(arg0);
}
}
}
static WasGoId wasgo_Physics2DShapeQueryResult_get_result_rid(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DShapeQueryResult *caller = (Physics2DShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_result_rid(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DTestMotionResult_get_collider(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_collider();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DTestMotionResult_get_collider_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_id();
}
}
}
static WasGoId wasgo_Physics2DTestMotionResult_get_collider_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_collider_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Physics2DTestMotionResult_get_collider_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_shape();
}
}
}
static WasGoId wasgo_Physics2DTestMotionResult_get_collider_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_collider_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DTestMotionResult_get_collision_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_collision_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DTestMotionResult_get_collision_point(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_collision_point();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DTestMotionResult_get_motion(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_motion();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Physics2DTestMotionResult_get_motion_remainder(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Physics2DTestMotionResult *caller = (Physics2DTestMotionResult *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_motion_remainder();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsBody__get_layers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
return caller->_get_layers();
}
}
}
static void wasgo_PhysicsBody__set_layers(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
caller->_set_layers(arg0);
}
}
}
static void wasgo_PhysicsBody_add_collision_exception_with(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
caller->add_collision_exception_with(&(Node *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsBody_get_collision_exceptions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_collision_exceptions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsBody_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_PhysicsBody_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsBody_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_PhysicsBody_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsBody_remove_collision_exception_with(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
caller->remove_collision_exception_with(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsBody_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_PhysicsBody_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsBody_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_PhysicsBody_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody *caller = (PhysicsBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static int wasgo_PhysicsBody2D__get_layers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->_get_layers();
}
}
}
static void wasgo_PhysicsBody2D__set_layers(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_layers(arg0);
}
}
}
static void wasgo_PhysicsBody2D_add_collision_exception_with(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
caller->add_collision_exception_with(&(Node *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsBody2D_get_collision_exceptions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_collision_exceptions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsBody2D_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_PhysicsBody2D_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsBody2D_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_PhysicsBody2D_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsBody2D_remove_collision_exception_with(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_collision_exception_with(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsBody2D_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_PhysicsBody2D_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsBody2D_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_PhysicsBody2D_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsBody2D *caller = (PhysicsBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsDirectBodyState_add_central_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->add_central_force(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsDirectBodyState_add_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->add_force(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsDirectBodyState_add_torque(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->add_torque(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsDirectBodyState_apply_central_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->apply_central_impulse(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsDirectBodyState_apply_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->apply_impulse(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsDirectBodyState_apply_torque_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->apply_torque_impulse(&(Vector3 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_angular_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_center_of_mass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_center_of_mass();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_contact_collider(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_contact_collider(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsDirectBodyState_get_contact_collider_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_collider_id(arg0);
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_contact_collider_object(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_contact_collider_object(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_contact_collider_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_contact_collider_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsDirectBodyState_get_contact_collider_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_collider_shape(arg0);
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_contact_collider_velocity_at_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_contact_collider_velocity_at_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsDirectBodyState_get_contact_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_count();
}
}
}
static float wasgo_PhysicsDirectBodyState_get_contact_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_impulse(arg0);
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_contact_local_normal(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_contact_local_normal(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_contact_local_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_contact_local_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsDirectBodyState_get_contact_local_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_contact_local_shape(arg0);
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_inverse_inertia(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_inverse_inertia();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsDirectBodyState_get_inverse_mass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_inverse_mass();
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_linear_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_principal_inertia_axes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Basis ret_value = caller->get_principal_inertia_axes();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_space_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
PhysicsDirectSpaceState ret_value = caller->get_space_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsDirectBodyState_get_step(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_step();
}
}
}
static float wasgo_PhysicsDirectBodyState_get_total_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_total_angular_damp();
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_total_gravity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_total_gravity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsDirectBodyState_get_total_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
return caller->get_total_linear_damp();
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsDirectBodyState_integrate_forces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->integrate_forces();
}
}
}
static WasGoId wasgo_PhysicsDirectBodyState_is_sleeping(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_sleeping();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsDirectBodyState_set_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_velocity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsDirectBodyState_set_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_velocity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsDirectBodyState_set_sleep_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_sleep_state(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsDirectBodyState_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectBodyState *caller = (PhysicsDirectBodyState *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsDirectSpaceState_cast_motion(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectSpaceState *caller = (PhysicsDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->cast_motion(&(PhysicsShapeQueryParameters *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectSpaceState_collide_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectSpaceState *caller = (PhysicsDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->collide_shape(&(PhysicsShapeQueryParameters *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectSpaceState_get_rest_info(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectSpaceState *caller = (PhysicsDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_rest_info(&(PhysicsShapeQueryParameters *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectSpaceState_intersect_ray(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectSpaceState *caller = (PhysicsDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->intersect_ray(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Array *)lookup_array(arg2), arg3, &(bool *)lookup_object(arg4), &(bool *)lookup_object(arg5));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsDirectSpaceState_intersect_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsDirectSpaceState *caller = (PhysicsDirectSpaceState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->intersect_shape(&(PhysicsShapeQueryParameters *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsMaterial_get_bounce(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_bounce();
}
}
}
static float wasgo_PhysicsMaterial_get_friction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_friction();
}
}
}
static WasGoId wasgo_PhysicsMaterial_is_absorbent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_absorbent();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsMaterial_is_rough(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_rough();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsMaterial_set_absorbent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_absorbent(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsMaterial_set_bounce(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_bounce(arg0);
}
}
}
static void wasgo_PhysicsMaterial_set_friction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_friction(arg0);
}
}
}
static void wasgo_PhysicsMaterial_set_rough(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsMaterial *caller = (PhysicsMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_rough(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsServer_area_add_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_add_shape(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(Transform *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_PhysicsServer_area_attach_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_attach_object_instance_id(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_area_clear_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_clear_shapes(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_area_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->area_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsServer_area_get_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->area_get_object_instance_id(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_area_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->area_get_param(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_area_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->area_get_shape(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsServer_area_get_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->area_get_shape_count(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_area_get_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->area_get_shape_transform(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_area_get_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->area_get_space(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_area_get_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
enum.PhysicsServer::AreaSpaceOverrideMode ret_value = caller->area_get_space_override_mode(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_area_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->area_get_transform(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_area_is_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->area_is_ray_pickable(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsServer_area_remove_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_remove_shape(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_area_set_area_monitor_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_area_monitor_callback(&(RID *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_area_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_collision_layer(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_area_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_collision_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_area_set_monitor_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_monitor_callback(&(RID *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_area_set_monitorable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_monitorable(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_area_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_param(&(RID *)lookup_object(arg0), arg1, &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_area_set_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_ray_pickable(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_area_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_shape(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_area_set_shape_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_shape_disabled(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_area_set_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_shape_transform(&(RID *)lookup_object(arg0), arg1, &(Transform *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_area_set_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_space(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_area_set_space_override_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_space_override_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_area_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->area_set_transform(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_add_central_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_central_force(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_add_collision_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_collision_exception(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_add_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_force(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_body_add_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_shape(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(Transform *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_PhysicsServer_body_add_torque(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_add_torque(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_apply_central_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_apply_central_impulse(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_apply_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_apply_impulse(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_body_apply_torque_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_apply_torque_impulse(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_attach_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_attach_object_instance_id(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_body_clear_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_clear_shapes(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_body_create(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->body_create(arg0, &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsServer_body_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_collision_layer(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_PhysicsServer_body_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_collision_mask(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_body_get_direct_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
PhysicsDirectBodyState ret_value = caller->body_get_direct_state(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsServer_body_get_kinematic_safe_margin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_kinematic_safe_margin(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_PhysicsServer_body_get_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_max_contacts_reported(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_body_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
enum.PhysicsServer::BodyMode ret_value = caller->body_get_mode(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsServer_body_get_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_object_instance_id(&(RID *)lookup_object(arg0));
}
}
}
static float wasgo_PhysicsServer_body_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_PhysicsServer_body_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->body_get_shape(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsServer_body_get_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->body_get_shape_count(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_body_get_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->body_get_shape_transform(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_body_get_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->body_get_space(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_body_get_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->body_get_state(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_body_is_axis_locked(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->body_is_axis_locked(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_body_is_continuous_collision_detection_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->body_is_continuous_collision_detection_enabled(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_body_is_omitting_force_integration(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->body_is_omitting_force_integration(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_body_is_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->body_is_ray_pickable(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsServer_body_remove_collision_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_remove_collision_exception(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_remove_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_remove_shape(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_body_set_axis_lock(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_axis_lock(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_body_set_axis_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_axis_velocity(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_collision_layer(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_body_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_collision_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_body_set_enable_continuous_collision_detection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_enable_continuous_collision_detection(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_set_force_integration_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_force_integration_callback(&(RID *)lookup_object(arg0), &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_PhysicsServer_body_set_kinematic_safe_margin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_kinematic_safe_margin(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_body_set_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_max_contacts_reported(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_body_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_body_set_omit_force_integration(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_omit_force_integration(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_PhysicsServer_body_set_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_ray_pickable(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_body_set_shape_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape_disabled(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_body_set_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_shape_transform(&(RID *)lookup_object(arg0), arg1, &(Transform *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_body_set_space(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_space(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_body_set_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->body_set_state(&(RID *)lookup_object(arg0), arg1, &(Variant *)lookup_object(arg2));
}
}
}
static float wasgo_PhysicsServer_cone_twist_joint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->cone_twist_joint_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_cone_twist_joint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->cone_twist_joint_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_PhysicsServer_free_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->free_rid(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_generic_6dof_joint_get_flag(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->generic_6dof_joint_get_flag(&(RID *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsServer_generic_6dof_joint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->generic_6dof_joint_get_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_PhysicsServer_generic_6dof_joint_set_flag(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->generic_6dof_joint_set_flag(&(RID *)lookup_object(arg0), arg1, arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_PhysicsServer_generic_6dof_joint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->generic_6dof_joint_set_param(&(RID *)lookup_object(arg0), arg1, arg2, arg3);
}
}
}
static int wasgo_PhysicsServer_get_process_info(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_process_info(arg0);
}
}
}
static WasGoId wasgo_PhysicsServer_hinge_joint_get_flag(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->hinge_joint_get_flag(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsServer_hinge_joint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->hinge_joint_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_hinge_joint_set_flag(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->hinge_joint_set_flag(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PhysicsServer_hinge_joint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->hinge_joint_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static WasGoId wasgo_PhysicsServer_joint_create_cone_twist(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->joint_create_cone_twist(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(Transform *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_joint_create_generic_6dof(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->joint_create_generic_6dof(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(Transform *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_joint_create_hinge(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->joint_create_hinge(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(Transform *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_joint_create_pin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->joint_create_pin(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(Vector3 *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_joint_create_slider(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->joint_create_slider(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(Transform *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsServer_joint_get_solver_priority(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->joint_get_solver_priority(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_joint_get_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
enum.PhysicsServer::JointType ret_value = caller->joint_get_type(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsServer_joint_set_solver_priority(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->joint_set_solver_priority(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_PhysicsServer_pin_joint_get_local_a(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->pin_joint_get_local_a(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_pin_joint_get_local_b(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->pin_joint_get_local_b(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsServer_pin_joint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->pin_joint_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_pin_joint_set_local_a(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->pin_joint_set_local_a(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_pin_joint_set_local_b(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->pin_joint_set_local_b(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_pin_joint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->pin_joint_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_PhysicsServer_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->set_active(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PhysicsServer_shape_create(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->shape_create(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_shape_get_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->shape_get_data(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_shape_get_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
enum.PhysicsServer::ShapeType ret_value = caller->shape_get_type(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsServer_shape_set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->shape_set_data(&(RID *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static float wasgo_PhysicsServer_slider_joint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->slider_joint_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_PhysicsServer_slider_joint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->slider_joint_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static WasGoId wasgo_PhysicsServer_space_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->space_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsServer_space_get_direct_state(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
PhysicsDirectSpaceState ret_value = caller->space_get_direct_state(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsServer_space_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
return caller->space_get_param(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_PhysicsServer_space_is_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->space_is_active(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsServer_space_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->space_set_active(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PhysicsServer_space_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsServer *caller = (PhysicsServer *) state->lookup_object(caller_id);
if(caller){
caller->space_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static int wasgo_PhysicsShapeQueryParameters_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_PhysicsShapeQueryParameters_get_exclude(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_exclude();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PhysicsShapeQueryParameters_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin();
}
}
}
static WasGoId wasgo_PhysicsShapeQueryParameters_get_shape_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_shape_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsShapeQueryParameters_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsShapeQueryParameters_is_collide_with_areas_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_areas_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PhysicsShapeQueryParameters_is_collide_with_bodies_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_bodies_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_collide_with_areas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_areas(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_collide_with_bodies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_bodies(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_exclude(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_exclude(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_margin(arg0);
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_shape(&(Resource *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_shape_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_shape_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_PhysicsShapeQueryParameters_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryParameters *caller = (PhysicsShapeQueryParameters *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform *)lookup_object(arg0));
}
}
}
static int wasgo_PhysicsShapeQueryResult_get_result_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryResult *caller = (PhysicsShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_result_count();
}
}
}
static WasGoId wasgo_PhysicsShapeQueryResult_get_result_object(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryResult *caller = (PhysicsShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_result_object(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PhysicsShapeQueryResult_get_result_object_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryResult *caller = (PhysicsShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_result_object_id(arg0);
}
}
}
static int wasgo_PhysicsShapeQueryResult_get_result_object_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryResult *caller = (PhysicsShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
return caller->get_result_object_shape(arg0);
}
}
}
static WasGoId wasgo_PhysicsShapeQueryResult_get_result_rid(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PhysicsShapeQueryResult *caller = (PhysicsShapeQueryResult *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_result_rid(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PinJoint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PinJoint *caller = (PinJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static void wasgo_PinJoint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PinJoint *caller = (PinJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static float wasgo_PinJoint2D_get_softness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PinJoint2D *caller = (PinJoint2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_softness();
}
}
}
static void wasgo_PinJoint2D_set_softness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PinJoint2D *caller = (PinJoint2D *) state->lookup_object(caller_id);
if(caller){
caller->set_softness(arg0);
}
}
}
static WasGoId wasgo_PlaneMesh_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneMesh *caller = (PlaneMesh *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PlaneMesh_get_subdivide_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneMesh *caller = (PlaneMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_depth();
}
}
}
static int wasgo_PlaneMesh_get_subdivide_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneMesh *caller = (PlaneMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_width();
}
}
}
static void wasgo_PlaneMesh_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneMesh *caller = (PlaneMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_PlaneMesh_set_subdivide_depth(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneMesh *caller = (PlaneMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_depth(arg0);
}
}
}
static void wasgo_PlaneMesh_set_subdivide_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneMesh *caller = (PlaneMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_width(arg0);
}
}
}
static WasGoId wasgo_PlaneShape_get_plane(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneShape *caller = (PlaneShape *) state->lookup_object(caller_id);
if(caller){
Plane ret_value = caller->get_plane();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PlaneShape_set_plane(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PlaneShape *caller = (PlaneShape *) state->lookup_object(caller_id);
if(caller){
caller->set_plane(&(Plane *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PluginScript_new(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PluginScript *caller = (PluginScript *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->new();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D__get_bones(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_bones();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Polygon2D__set_bones(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_bones(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_Polygon2D__skeleton_bone_setup_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->_skeleton_bone_setup_changed();
}
}
}
static void wasgo_Polygon2D_add_bone(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->add_bone(&(NodePath *)lookup_object(arg0), &(PoolRealArray *)lookup_object(arg1));
}
}
}
static void wasgo_Polygon2D_clear_bones(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->clear_bones();
}
}
}
static void wasgo_Polygon2D_erase_bone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->erase_bone(arg0);
}
}
}
static WasGoId wasgo_Polygon2D_get_antialiased(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_antialiased();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Polygon2D_get_bone_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_bone_count();
}
}
}
static WasGoId wasgo_Polygon2D_get_bone_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_bone_path(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_bone_weights(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
PoolRealArray ret_value = caller->get_bone_weights(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Polygon2D_get_internal_vertex_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_internal_vertex_count();
}
}
}
static WasGoId wasgo_Polygon2D_get_invert(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_invert();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Polygon2D_get_invert_border(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_invert_border();
}
}
}
static WasGoId wasgo_Polygon2D_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_polygon(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_polygon();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_polygons(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_polygons();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_skeleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_skeleton();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_texture_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_texture_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Polygon2D_get_texture_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_texture_rotation();
}
}
}
static float wasgo_Polygon2D_get_texture_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_texture_rotation_degrees();
}
}
}
static WasGoId wasgo_Polygon2D_get_texture_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_texture_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_uv(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_uv();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Polygon2D_get_vertex_colors(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
PoolColorArray ret_value = caller->get_vertex_colors();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Polygon2D_set_antialiased(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_antialiased(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_bone_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_path(arg0, &(NodePath *)lookup_object(arg1));
}
}
}
static void wasgo_Polygon2D_set_bone_weights(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_weights(arg0, &(PoolRealArray *)lookup_object(arg1));
}
}
}
static void wasgo_Polygon2D_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_internal_vertex_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_internal_vertex_count(arg0);
}
}
}
static void wasgo_Polygon2D_set_invert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_invert(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_invert_border(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_invert_border(arg0);
}
}
}
static void wasgo_Polygon2D_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_polygon(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_polygons(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_polygons(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_Polygon2D_set_skeleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_skeleton(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_texture_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_texture_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_rotation(arg0);
}
}
}
static void wasgo_Polygon2D_set_texture_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_rotation_degrees(arg0);
}
}
}
static void wasgo_Polygon2D_set_texture_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_scale(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_uv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_uv(&(PoolVector2Array *)lookup_object(arg0));
}
}
}
static void wasgo_Polygon2D_set_vertex_colors(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Polygon2D *caller = (Polygon2D *) state->lookup_object(caller_id);
if(caller){
caller->set_vertex_colors(&(PoolColorArray *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PolygonPathFinder__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PolygonPathFinder__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static WasGoId wasgo_PolygonPathFinder_find_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->find_path(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PolygonPathFinder_get_bounds(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_bounds();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PolygonPathFinder_get_closest_point(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_closest_point(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PolygonPathFinder_get_intersections(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_intersections(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PolygonPathFinder_get_point_penalty(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_penalty(arg0);
}
}
}
static WasGoId wasgo_PolygonPathFinder_is_point_inside(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_point_inside(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PolygonPathFinder_set_point_penalty(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
caller->set_point_penalty(arg0, arg1);
}
}
}
static void wasgo_PolygonPathFinder_setup(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PolygonPathFinder *caller = (PolygonPathFinder *) state->lookup_object(caller_id);
if(caller){
caller->setup(&(PoolVector2Array *)lookup_object(arg0), &(PoolIntArray *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Popup_is_exclusive(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_exclusive();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Popup_popup(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
caller->popup(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_Popup_popup_centered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
caller->popup_centered(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Popup_popup_centered_clamped(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
caller->popup_centered_clamped(&(Vector2 *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Popup_popup_centered_minsize(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
caller->popup_centered_minsize(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Popup_popup_centered_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
caller->popup_centered_ratio(arg0);
}
}
}
static void wasgo_Popup_set_as_minsize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
caller->set_as_minsize();
}
}
}
static void wasgo_Popup_set_exclusive(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Popup *caller = (Popup *) state->lookup_object(caller_id);
if(caller){
caller->set_exclusive(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_PopupMenu__get_items(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_items();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PopupMenu__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_PopupMenu__set_items(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->_set_items(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_PopupMenu__submenu_timeout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->_submenu_timeout();
}
}
}
static void wasgo_PopupMenu_add_check_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_check_item(&(String *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_PopupMenu_add_check_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_check_shortcut(&(ShortCut *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PopupMenu_add_icon_check_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_check_item(&(Texture *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2, arg3);
}
}
}
static void wasgo_PopupMenu_add_icon_check_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_check_shortcut(&(Texture *)lookup_object(arg0), &(ShortCut *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_PopupMenu_add_icon_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_item(&(Texture *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2, arg3);
}
}
}
static void wasgo_PopupMenu_add_icon_radio_check_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_radio_check_item(&(Texture *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2, arg3);
}
}
}
static void wasgo_PopupMenu_add_icon_radio_check_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_radio_check_shortcut(&(Texture *)lookup_object(arg0), &(ShortCut *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_PopupMenu_add_icon_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_icon_shortcut(&(Texture *)lookup_object(arg0), &(ShortCut *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_PopupMenu_add_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_item(&(String *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_PopupMenu_add_multistate_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_multistate_item(&(String *)lookup_object(arg0), arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_PopupMenu_add_radio_check_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_radio_check_item(&(String *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_PopupMenu_add_radio_check_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_radio_check_shortcut(&(ShortCut *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PopupMenu_add_separator(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_separator(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_PopupMenu_add_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_shortcut(&(ShortCut *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PopupMenu_add_submenu_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->add_submenu_item(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_PopupMenu_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_PopupMenu_get_allow_search(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_allow_search();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PopupMenu_get_item_accelerator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_accelerator(arg0);
}
}
}
static int wasgo_PopupMenu_get_item_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_count();
}
}
}
static WasGoId wasgo_PopupMenu_get_item_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_item_icon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PopupMenu_get_item_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_id(arg0);
}
}
}
static int wasgo_PopupMenu_get_item_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
return caller->get_item_index(arg0);
}
}
}
static WasGoId wasgo_PopupMenu_get_item_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_item_metadata(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_get_item_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
ShortCut ret_value = caller->get_item_shortcut(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_get_item_submenu(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_item_submenu(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_get_item_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_item_text(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_get_item_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_item_tooltip(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_PopupMenu_get_submenu_popup_delay(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
return caller->get_submenu_popup_delay();
}
}
}
static WasGoId wasgo_PopupMenu_is_hide_on_checkable_item_selection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hide_on_checkable_item_selection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_hide_on_item_selection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hide_on_item_selection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_hide_on_state_item_selection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hide_on_state_item_selection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_hide_on_window_lose_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hide_on_window_lose_focus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_item_checkable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_checkable(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_item_checked(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_checked(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_item_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_item_radio_checkable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_radio_checkable(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_item_separator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_separator(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PopupMenu_is_item_shortcut_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_item_shortcut_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PopupMenu_remove_item(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->remove_item(arg0);
}
}
}
static void wasgo_PopupMenu_set_allow_search(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_search(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PopupMenu_set_hide_on_checkable_item_selection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_hide_on_checkable_item_selection(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PopupMenu_set_hide_on_item_selection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_hide_on_item_selection(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PopupMenu_set_hide_on_state_item_selection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_hide_on_state_item_selection(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PopupMenu_set_hide_on_window_lose_focus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_hide_on_window_lose_focus(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PopupMenu_set_item_accelerator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_accelerator(arg0, arg1);
}
}
}
static void wasgo_PopupMenu_set_item_as_checkable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_as_checkable(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_as_radio_checkable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_as_radio_checkable(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_as_separator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_as_separator(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_checked(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_checked(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_icon(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_id(arg0, arg1);
}
}
}
static void wasgo_PopupMenu_set_item_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_metadata(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_multistate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_multistate(arg0, arg1);
}
}
}
static void wasgo_PopupMenu_set_item_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_shortcut(arg0, &(ShortCut *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_PopupMenu_set_item_shortcut_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_shortcut_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_submenu(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_submenu(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_text(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_item_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_item_tooltip(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_PopupMenu_set_submenu_popup_delay(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->set_submenu_popup_delay(arg0);
}
}
}
static void wasgo_PopupMenu_toggle_item_checked(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->toggle_item_checked(arg0);
}
}
}
static void wasgo_PopupMenu_toggle_item_multistate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PopupMenu *caller = (PopupMenu *) state->lookup_object(caller_id);
if(caller){
caller->toggle_item_multistate(arg0);
}
}
}
static float wasgo_Position2D__get_gizmo_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Position2D *caller = (Position2D *) state->lookup_object(caller_id);
if(caller){
return caller->_get_gizmo_extents();
}
}
}
static void wasgo_Position2D__set_gizmo_extents(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Position2D *caller = (Position2D *) state->lookup_object(caller_id);
if(caller){
caller->_set_gizmo_extents(arg0);
}
}
}
static void wasgo_PrimitiveMesh__update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
caller->_update();
}
}
}
static WasGoId wasgo_PrimitiveMesh_get_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_custom_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PrimitiveMesh_get_flip_faces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flip_faces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PrimitiveMesh_get_material(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
Material ret_value = caller->get_material();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_PrimitiveMesh_get_mesh_arrays(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_mesh_arrays();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_PrimitiveMesh_set_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_aabb(&(AABB *)lookup_object(arg0));
}
}
}
static void wasgo_PrimitiveMesh_set_flip_faces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_faces(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_PrimitiveMesh_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrimitiveMesh *caller = (PrimitiveMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static float wasgo_PrismMesh_get_left_to_right(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_left_to_right();
}
}
}
static WasGoId wasgo_PrismMesh_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_PrismMesh_get_subdivide_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_depth();
}
}
}
static int wasgo_PrismMesh_get_subdivide_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_height();
}
}
}
static int wasgo_PrismMesh_get_subdivide_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_subdivide_width();
}
}
}
static void wasgo_PrismMesh_set_left_to_right(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_left_to_right(arg0);
}
}
}
static void wasgo_PrismMesh_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_PrismMesh_set_subdivide_depth(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_depth(arg0);
}
}
}
static void wasgo_PrismMesh_set_subdivide_height(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_height(arg0);
}
}
}
static void wasgo_PrismMesh_set_subdivide_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
PrismMesh *caller = (PrismMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_subdivide_width(arg0);
}
}
}
static void wasgo_ProceduralSky__thread_done(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->_thread_done(&(Image *)lookup_object(arg0));
}
}
}
static void wasgo_ProceduralSky__update_sky(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->_update_sky();
}
}
}
static WasGoId wasgo_ProceduralSky_get_ground_bottom_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_ground_bottom_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ProceduralSky_get_ground_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_ground_curve();
}
}
}
static float wasgo_ProceduralSky_get_ground_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_ground_energy();
}
}
}
static WasGoId wasgo_ProceduralSky_get_ground_horizon_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_ground_horizon_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ProceduralSky_get_sky_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sky_curve();
}
}
}
static float wasgo_ProceduralSky_get_sky_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sky_energy();
}
}
}
static WasGoId wasgo_ProceduralSky_get_sky_horizon_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_sky_horizon_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProceduralSky_get_sky_top_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_sky_top_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ProceduralSky_get_sun_angle_max(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sun_angle_max();
}
}
}
static float wasgo_ProceduralSky_get_sun_angle_min(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sun_angle_min();
}
}
}
static WasGoId wasgo_ProceduralSky_get_sun_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_sun_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ProceduralSky_get_sun_curve(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sun_curve();
}
}
}
static float wasgo_ProceduralSky_get_sun_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sun_energy();
}
}
}
static float wasgo_ProceduralSky_get_sun_latitude(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sun_latitude();
}
}
}
static float wasgo_ProceduralSky_get_sun_longitude(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
return caller->get_sun_longitude();
}
}
}
static WasGoId wasgo_ProceduralSky_get_texture_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
enum.ProceduralSky::TextureSize ret_value = caller->get_texture_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ProceduralSky_set_ground_bottom_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_ground_bottom_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ProceduralSky_set_ground_curve(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_ground_curve(arg0);
}
}
}
static void wasgo_ProceduralSky_set_ground_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_ground_energy(arg0);
}
}
}
static void wasgo_ProceduralSky_set_ground_horizon_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_ground_horizon_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ProceduralSky_set_sky_curve(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_curve(arg0);
}
}
}
static void wasgo_ProceduralSky_set_sky_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_energy(arg0);
}
}
}
static void wasgo_ProceduralSky_set_sky_horizon_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_horizon_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ProceduralSky_set_sky_top_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sky_top_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ProceduralSky_set_sun_angle_max(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sun_angle_max(arg0);
}
}
}
static void wasgo_ProceduralSky_set_sun_angle_min(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sun_angle_min(arg0);
}
}
}
static void wasgo_ProceduralSky_set_sun_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sun_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ProceduralSky_set_sun_curve(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sun_curve(arg0);
}
}
}
static void wasgo_ProceduralSky_set_sun_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sun_energy(arg0);
}
}
}
static void wasgo_ProceduralSky_set_sun_latitude(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sun_latitude(arg0);
}
}
}
static void wasgo_ProceduralSky_set_sun_longitude(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_sun_longitude(arg0);
}
}
}
static void wasgo_ProceduralSky_set_texture_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProceduralSky *caller = (ProceduralSky *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_size(arg0);
}
}
}
static WasGoId wasgo_ProgressBar_is_percent_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProgressBar *caller = (ProgressBar *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_percent_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ProgressBar_set_percent_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProgressBar *caller = (ProgressBar *) state->lookup_object(caller_id);
if(caller){
caller->set_percent_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ProjectSettings_add_property_info(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
caller->add_property_info(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_ProjectSettings_clear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
caller->clear(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_ProjectSettings_get_order(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
return caller->get_order(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ProjectSettings_get_setting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_setting(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_globalize_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->globalize_path(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_has_setting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_setting(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_load_resource_pack(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->load_resource_pack(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_localize_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->localize_path(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_property_can_revert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->property_can_revert(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_property_get_revert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->property_get_revert(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_save(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProjectSettings_save_custom(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save_custom(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ProjectSettings_set_initial_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_initial_value(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_ProjectSettings_set_order(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_order(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_ProjectSettings_set_setting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProjectSettings *caller = (ProjectSettings *) state->lookup_object(caller_id);
if(caller){
caller->set_setting(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_ProximityGroup__proximity_group_broadcast(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
caller->_proximity_group_broadcast(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_ProximityGroup_broadcast(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
caller->broadcast(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_ProximityGroup_get_dispatch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
enum.ProximityGroup::DispatchMode ret_value = caller->get_dispatch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProximityGroup_get_grid_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_grid_radius();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ProximityGroup_get_group_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_group_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ProximityGroup_set_dispatch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
caller->set_dispatch_mode(arg0);
}
}
}
static void wasgo_ProximityGroup_set_grid_radius(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
caller->set_grid_radius(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ProximityGroup_set_group_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProximityGroup *caller = (ProximityGroup *) state->lookup_object(caller_id);
if(caller){
caller->set_group_name(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ProxyTexture_get_base(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProxyTexture *caller = (ProxyTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_base();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ProxyTexture_set_base(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ProxyTexture *caller = (ProxyTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_base(&(Texture *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_QuadMesh_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
QuadMesh *caller = (QuadMesh *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_QuadMesh_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
QuadMesh *caller = (QuadMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static int wasgo_RandomNumberGenerator_get_seed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->get_seed();
}
}
}
static float wasgo_RandomNumberGenerator_randf(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->randf();
}
}
}
static float wasgo_RandomNumberGenerator_randf_range(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->randf_range(arg0, arg1);
}
}
}
static float wasgo_RandomNumberGenerator_randfn(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->randfn(arg0, arg1);
}
}
}
static int wasgo_RandomNumberGenerator_randi(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->randi();
}
}
}
static int wasgo_RandomNumberGenerator_randi_range(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
return caller->randi_range(arg0, arg1);
}
}
}
static void wasgo_RandomNumberGenerator_randomize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
caller->randomize();
}
}
}
static void wasgo_RandomNumberGenerator_set_seed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RandomNumberGenerator *caller = (RandomNumberGenerator *) state->lookup_object(caller_id);
if(caller){
caller->set_seed(arg0);
}
}
}
static float wasgo_Range_get_as_ratio(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
return caller->get_as_ratio();
}
}
}
static float wasgo_Range_get_max(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
return caller->get_max();
}
}
}
static float wasgo_Range_get_min(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
return caller->get_min();
}
}
}
static float wasgo_Range_get_page(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
return caller->get_page();
}
}
}
static float wasgo_Range_get_step(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
return caller->get_step();
}
}
}
static float wasgo_Range_get_value(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
return caller->get_value();
}
}
}
static WasGoId wasgo_Range_is_greater_allowed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_greater_allowed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Range_is_lesser_allowed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_lesser_allowed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Range_is_ratio_exp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ratio_exp();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Range_is_using_rounded_values(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_rounded_values();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Range_set_allow_greater(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_greater(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Range_set_allow_lesser(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_lesser(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Range_set_as_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_as_ratio(arg0);
}
}
}
static void wasgo_Range_set_exp_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_exp_ratio(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Range_set_max(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_max(arg0);
}
}
}
static void wasgo_Range_set_min(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_min(arg0);
}
}
}
static void wasgo_Range_set_page(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_page(arg0);
}
}
}
static void wasgo_Range_set_step(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_step(arg0);
}
}
}
static void wasgo_Range_set_use_rounded_values(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_use_rounded_values(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Range_set_value(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->set_value(arg0);
}
}
}
static void wasgo_Range_share(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->share(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_Range_unshare(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Range *caller = (Range *) state->lookup_object(caller_id);
if(caller){
caller->unshare();
}
}
}
static void wasgo_RayCast_add_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->add_exception(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_add_exception_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->add_exception_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_clear_exceptions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->clear_exceptions();
}
}
}
static void wasgo_RayCast_force_raycast_update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->force_raycast_update();
}
}
}
static WasGoId wasgo_RayCast_get_cast_to(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_cast_to();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_get_collider(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_collider();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RayCast_get_collider_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_shape();
}
}
}
static int wasgo_RayCast_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_RayCast_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_get_collision_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_collision_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_get_collision_point(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_collision_point();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_get_exclude_parent_body(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_exclude_parent_body();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_is_collide_with_areas_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_areas_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_is_collide_with_bodies_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_bodies_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_is_colliding(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_colliding();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RayCast_remove_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->remove_exception(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_remove_exception_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->remove_exception_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_set_cast_to(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->set_cast_to(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_set_collide_with_areas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_areas(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_set_collide_with_bodies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_bodies(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_RayCast_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_RayCast_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->set_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast_set_exclude_parent_body(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast *caller = (RayCast *) state->lookup_object(caller_id);
if(caller){
caller->set_exclude_parent_body(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_add_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->add_exception(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_add_exception_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->add_exception_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_clear_exceptions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->clear_exceptions();
}
}
}
static void wasgo_RayCast2D_force_raycast_update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->force_raycast_update();
}
}
}
static WasGoId wasgo_RayCast2D_get_cast_to(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_cast_to();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_get_collider(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_collider();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RayCast2D_get_collider_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collider_shape();
}
}
}
static int wasgo_RayCast2D_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_RayCast2D_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_get_collision_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_collision_normal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_get_collision_point(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_collision_point();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_get_exclude_parent_body(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_exclude_parent_body();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_is_collide_with_areas_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_areas_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_is_collide_with_bodies_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collide_with_bodies_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_is_colliding(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_colliding();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RayCast2D_is_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RayCast2D_remove_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_exception(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_remove_exception_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->remove_exception_rid(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_set_cast_to(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->set_cast_to(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_set_collide_with_areas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_areas(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_set_collide_with_bodies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collide_with_bodies(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_RayCast2D_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_RayCast2D_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->set_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RayCast2D_set_exclude_parent_body(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayCast2D *caller = (RayCast2D *) state->lookup_object(caller_id);
if(caller){
caller->set_exclude_parent_body(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_RayShape_get_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape *caller = (RayShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_length();
}
}
}
static WasGoId wasgo_RayShape_get_slips_on_slope(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape *caller = (RayShape *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_slips_on_slope();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RayShape_set_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape *caller = (RayShape *) state->lookup_object(caller_id);
if(caller){
caller->set_length(arg0);
}
}
}
static void wasgo_RayShape_set_slips_on_slope(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape *caller = (RayShape *) state->lookup_object(caller_id);
if(caller){
caller->set_slips_on_slope(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_RayShape2D_get_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape2D *caller = (RayShape2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_length();
}
}
}
static WasGoId wasgo_RayShape2D_get_slips_on_slope(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape2D *caller = (RayShape2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_slips_on_slope();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RayShape2D_set_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape2D *caller = (RayShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_length(arg0);
}
}
}
static void wasgo_RayShape2D_set_slips_on_slope(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RayShape2D *caller = (RayShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_slips_on_slope(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_RectangleShape2D_get_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RectangleShape2D *caller = (RectangleShape2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RectangleShape2D_set_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RectangleShape2D *caller = (RectangleShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_extents(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Reference_init_ref(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Reference *caller = (Reference *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->init_ref();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Reference_reference(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Reference *caller = (Reference *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->reference();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Reference_unreference(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Reference *caller = (Reference *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->unreference();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ReferenceRect_get_border_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReferenceRect *caller = (ReferenceRect *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_border_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ReferenceRect_get_editor_only(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReferenceRect *caller = (ReferenceRect *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_editor_only();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ReferenceRect_set_border_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReferenceRect *caller = (ReferenceRect *) state->lookup_object(caller_id);
if(caller){
caller->set_border_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ReferenceRect_set_editor_only(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReferenceRect *caller = (ReferenceRect *) state->lookup_object(caller_id);
if(caller){
caller->set_editor_only(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ReflectionProbe_are_shadows_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_shadows_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ReflectionProbe_get_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_cull_mask();
}
}
}
static WasGoId wasgo_ReflectionProbe_get_extents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_extents();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ReflectionProbe_get_intensity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_intensity();
}
}
}
static WasGoId wasgo_ReflectionProbe_get_interior_ambient(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_interior_ambient();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_ReflectionProbe_get_interior_ambient_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_interior_ambient_energy();
}
}
}
static float wasgo_ReflectionProbe_get_interior_ambient_probe_contribution(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_interior_ambient_probe_contribution();
}
}
}
static float wasgo_ReflectionProbe_get_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_distance();
}
}
}
static WasGoId wasgo_ReflectionProbe_get_origin_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_origin_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ReflectionProbe_get_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
enum.ReflectionProbe::UpdateMode ret_value = caller->get_update_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ReflectionProbe_is_box_projection_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_box_projection_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ReflectionProbe_is_set_as_interior(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_set_as_interior();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ReflectionProbe_set_as_interior(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_as_interior(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ReflectionProbe_set_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_cull_mask(arg0);
}
}
}
static void wasgo_ReflectionProbe_set_enable_box_projection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_enable_box_projection(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ReflectionProbe_set_enable_shadows(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_enable_shadows(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ReflectionProbe_set_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_extents(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ReflectionProbe_set_intensity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_intensity(arg0);
}
}
}
static void wasgo_ReflectionProbe_set_interior_ambient(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_interior_ambient(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_ReflectionProbe_set_interior_ambient_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_interior_ambient_energy(arg0);
}
}
}
static void wasgo_ReflectionProbe_set_interior_ambient_probe_contribution(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_interior_ambient_probe_contribution(arg0);
}
}
}
static void wasgo_ReflectionProbe_set_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_max_distance(arg0);
}
}
}
static void wasgo_ReflectionProbe_set_origin_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_origin_offset(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_ReflectionProbe_set_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ReflectionProbe *caller = (ReflectionProbe *) state->lookup_object(caller_id);
if(caller){
caller->set_update_mode(arg0);
}
}
}
static void wasgo_RegEx_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_RegEx_compile(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->compile(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RegEx_get_group_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
return caller->get_group_count();
}
}
}
static WasGoId wasgo_RegEx_get_names(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_names();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RegEx_get_pattern(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_pattern();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RegEx_is_valid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RegEx_search(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
RegExMatch ret_value = caller->search(&(String *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RegEx_search_all(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->search_all(&(String *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RegEx_sub(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegEx *caller = (RegEx *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->sub(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(bool *)lookup_object(arg2), arg3, arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RegExMatch_get_end(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegExMatch *caller = (RegExMatch *) state->lookup_object(caller_id);
if(caller){
return caller->get_end(&(Variant *)lookup_object(arg0));
}
}
}
static int wasgo_RegExMatch_get_group_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegExMatch *caller = (RegExMatch *) state->lookup_object(caller_id);
if(caller){
return caller->get_group_count();
}
}
}
static WasGoId wasgo_RegExMatch_get_names(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegExMatch *caller = (RegExMatch *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_names();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RegExMatch_get_start(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegExMatch *caller = (RegExMatch *) state->lookup_object(caller_id);
if(caller){
return caller->get_start(&(Variant *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_RegExMatch_get_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegExMatch *caller = (RegExMatch *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_string(&(Variant *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RegExMatch_get_strings(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegExMatch *caller = (RegExMatch *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_strings();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RegExMatch_get_subject(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RegExMatch *caller = (RegExMatch *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_subject();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RemoteTransform_force_update_cache(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
caller->force_update_cache();
}
}
}
static WasGoId wasgo_RemoteTransform_get_remote_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_remote_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform_get_update_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_update_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform_get_update_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_update_rotation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform_get_update_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_update_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform_get_use_global_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_global_coordinates();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RemoteTransform_set_remote_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_remote_node(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform_set_update_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_update_position(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform_set_update_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_update_rotation(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform_set_update_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_update_scale(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform_set_use_global_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform *caller = (RemoteTransform *) state->lookup_object(caller_id);
if(caller){
caller->set_use_global_coordinates(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform2D_force_update_cache(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
caller->force_update_cache();
}
}
}
static WasGoId wasgo_RemoteTransform2D_get_remote_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_remote_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform2D_get_update_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_update_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform2D_get_update_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_update_rotation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform2D_get_update_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_update_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RemoteTransform2D_get_use_global_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_global_coordinates();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RemoteTransform2D_set_remote_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
caller->set_remote_node(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform2D_set_update_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
caller->set_update_position(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform2D_set_update_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
caller->set_update_rotation(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform2D_set_update_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
caller->set_update_scale(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RemoteTransform2D_set_use_global_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RemoteTransform2D *caller = (RemoteTransform2D *) state->lookup_object(caller_id);
if(caller){
caller->set_use_global_coordinates(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Resource__setup_local_to_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
caller->_setup_local_to_scene();
}
}
}
static WasGoId wasgo_Resource_duplicate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
Resource ret_value = caller->duplicate(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Resource_get_local_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_local_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Resource_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Resource_get_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Resource_get_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Resource_is_local_to_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_local_to_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Resource_set_local_to_scene(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
caller->set_local_to_scene(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Resource_set_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
caller->set_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Resource_set_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
caller->set_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Resource_setup_local_to_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
caller->setup_local_to_scene();
}
}
}
static void wasgo_Resource_take_over_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Resource *caller = (Resource *) state->lookup_object(caller_id);
if(caller){
caller->take_over_path(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ResourceFormatLoader_get_dependencies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatLoader *caller = (ResourceFormatLoader *) state->lookup_object(caller_id);
if(caller){
caller->get_dependencies(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_ResourceFormatLoader_get_recognized_extensions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatLoader *caller = (ResourceFormatLoader *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_recognized_extensions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourceFormatLoader_get_resource_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatLoader *caller = (ResourceFormatLoader *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_resource_type(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourceFormatLoader_handles_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatLoader *caller = (ResourceFormatLoader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->handles_type(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourceFormatLoader_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatLoader *caller = (ResourceFormatLoader *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->load(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ResourceFormatLoader_rename_dependencies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatLoader *caller = (ResourceFormatLoader *) state->lookup_object(caller_id);
if(caller){
return caller->rename_dependencies(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_ResourceFormatSaver_get_recognized_extensions(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatSaver *caller = (ResourceFormatSaver *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_recognized_extensions(&(Resource *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourceFormatSaver_recognize(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatSaver *caller = (ResourceFormatSaver *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->recognize(&(Resource *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ResourceFormatSaver_save(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceFormatSaver *caller = (ResourceFormatSaver *) state->lookup_object(caller_id);
if(caller){
return caller->save(&(String *)lookup_object(arg0), &(Resource *)lookup_object(arg1), arg2);
}
}
}
static WasGoId wasgo_ResourceInteractiveLoader_get_resource(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceInteractiveLoader *caller = (ResourceInteractiveLoader *) state->lookup_object(caller_id);
if(caller){
Resource ret_value = caller->get_resource();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ResourceInteractiveLoader_get_stage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceInteractiveLoader *caller = (ResourceInteractiveLoader *) state->lookup_object(caller_id);
if(caller){
return caller->get_stage();
}
}
}
static int wasgo_ResourceInteractiveLoader_get_stage_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceInteractiveLoader *caller = (ResourceInteractiveLoader *) state->lookup_object(caller_id);
if(caller){
return caller->get_stage_count();
}
}
}
static WasGoId wasgo_ResourceInteractiveLoader_poll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceInteractiveLoader *caller = (ResourceInteractiveLoader *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->poll();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourceInteractiveLoader_wait(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourceInteractiveLoader *caller = (ResourceInteractiveLoader *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->wait();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourcePreloader__get_resources(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_resources();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ResourcePreloader__set_resources(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
caller->_set_resources(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_ResourcePreloader_add_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
caller->add_resource(&(String *)lookup_object(arg0), &(Resource *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_ResourcePreloader_get_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
Resource ret_value = caller->get_resource(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourcePreloader_get_resource_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_resource_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ResourcePreloader_has_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_resource(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ResourcePreloader_remove_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
caller->remove_resource(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ResourcePreloader_rename_resource(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ResourcePreloader *caller = (ResourcePreloader *) state->lookup_object(caller_id);
if(caller){
caller->rename_resource(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_RichTextEffect__process_custom_fx(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextEffect *caller = (RichTextEffect *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_process_custom_fx(&(CharFXTransform *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RichTextLabel__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel__scroll_changed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->_scroll_changed(arg0);
}
}
}
static void wasgo_RichTextLabel_add_image(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->add_image(&(Texture *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_RichTextLabel_add_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->add_text(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_RichTextLabel_append_bbcode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->append_bbcode(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RichTextLabel_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_RichTextLabel_get_bbcode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bbcode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RichTextLabel_get_content_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
return caller->get_content_height();
}
}
}
static WasGoId wasgo_RichTextLabel_get_effects(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_effects();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RichTextLabel_get_line_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
return caller->get_line_count();
}
}
}
static float wasgo_RichTextLabel_get_percent_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
return caller->get_percent_visible();
}
}
}
static int wasgo_RichTextLabel_get_tab_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
return caller->get_tab_size();
}
}
}
static WasGoId wasgo_RichTextLabel_get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RichTextLabel_get_total_character_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
return caller->get_total_character_count();
}
}
}
static WasGoId wasgo_RichTextLabel_get_v_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
VScrollBar ret_value = caller->get_v_scroll();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_RichTextLabel_get_visible_characters(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
return caller->get_visible_characters();
}
}
}
static int wasgo_RichTextLabel_get_visible_line_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
return caller->get_visible_line_count();
}
}
}
static void wasgo_RichTextLabel_install_effect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->install_effect(&(Variant *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_RichTextLabel_is_meta_underlined(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_meta_underlined();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RichTextLabel_is_overriding_selected_font_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_overriding_selected_font_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RichTextLabel_is_scroll_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_scroll_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RichTextLabel_is_scroll_following(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_scroll_following();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RichTextLabel_is_selection_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selection_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RichTextLabel_is_using_bbcode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_bbcode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RichTextLabel_newline(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->newline();
}
}
}
static WasGoId wasgo_RichTextLabel_parse_bbcode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->parse_bbcode(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RichTextLabel_parse_expressions_for_values(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->parse_expressions_for_values(&(PoolStringArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RichTextLabel_pop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->pop();
}
}
}
static void wasgo_RichTextLabel_push_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_align(arg0);
}
}
}
static void wasgo_RichTextLabel_push_bold(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_bold();
}
}
}
static void wasgo_RichTextLabel_push_bold_italics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_bold_italics();
}
}
}
static void wasgo_RichTextLabel_push_cell(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_cell();
}
}
}
static void wasgo_RichTextLabel_push_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_push_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_font(&(Font *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_push_indent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_indent(arg0);
}
}
}
static void wasgo_RichTextLabel_push_italics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_italics();
}
}
}
static void wasgo_RichTextLabel_push_list(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_list(arg0);
}
}
}
static void wasgo_RichTextLabel_push_meta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_meta(&(Variant *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_push_mono(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_mono();
}
}
}
static void wasgo_RichTextLabel_push_normal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_normal();
}
}
}
static void wasgo_RichTextLabel_push_strikethrough(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_strikethrough();
}
}
}
static void wasgo_RichTextLabel_push_table(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_table(arg0);
}
}
}
static void wasgo_RichTextLabel_push_underline(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->push_underline();
}
}
}
static WasGoId wasgo_RichTextLabel_remove_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->remove_line(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RichTextLabel_scroll_to_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->scroll_to_line(arg0);
}
}
}
static void wasgo_RichTextLabel_set_bbcode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_bbcode(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_effects(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_effects(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_RichTextLabel_set_meta_underline(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_meta_underline(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_override_selected_font_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_override_selected_font_color(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_percent_visible(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_percent_visible(arg0);
}
}
}
static void wasgo_RichTextLabel_set_scroll_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_scroll_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_scroll_follow(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_scroll_follow(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_selection_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_selection_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_tab_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_size(arg0);
}
}
}
static void wasgo_RichTextLabel_set_table_column_expand(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_table_column_expand(arg0, &(bool *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_RichTextLabel_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_text(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_use_bbcode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_use_bbcode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RichTextLabel_set_visible_characters(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RichTextLabel *caller = (RichTextLabel *) state->lookup_object(caller_id);
if(caller){
caller->set_visible_characters(arg0);
}
}
}
static void wasgo_RigidBody__body_enter_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->_body_enter_tree(arg0);
}
}
}
static void wasgo_RigidBody__body_exit_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->_body_exit_tree(arg0);
}
}
}
static void wasgo_RigidBody__direct_state_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->_direct_state_changed(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody__integrate_forces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->_integrate_forces(&(PhysicsDirectBodyState *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody__reload_physics_characteristics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->_reload_physics_characteristics();
}
}
}
static void wasgo_RigidBody_add_central_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->add_central_force(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_add_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->add_force(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_RigidBody_add_torque(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->add_torque(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_apply_central_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->apply_central_impulse(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_apply_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->apply_impulse(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_RigidBody_apply_torque_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->apply_torque_impulse(&(Vector3 *)lookup_object(arg0));
}
}
}
static float wasgo_RigidBody_get_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_angular_damp();
}
}
}
static WasGoId wasgo_RigidBody_get_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_angular_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody_get_axis_lock(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_axis_lock(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody_get_bounce(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_bounce();
}
}
}
static WasGoId wasgo_RigidBody_get_colliding_bodies(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_colliding_bodies();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody_get_friction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_friction();
}
}
}
static float wasgo_RigidBody_get_gravity_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_gravity_scale();
}
}
}
static float wasgo_RigidBody_get_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_linear_damp();
}
}
}
static WasGoId wasgo_RigidBody_get_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_linear_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody_get_mass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_mass();
}
}
}
static int wasgo_RigidBody_get_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_contacts_reported();
}
}
}
static WasGoId wasgo_RigidBody_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
enum.RigidBody::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody_get_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
PhysicsMaterial ret_value = caller->get_physics_material_override();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody_get_weight(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_weight();
}
}
}
static WasGoId wasgo_RigidBody_is_able_to_sleep(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_able_to_sleep();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody_is_contact_monitor_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_contact_monitor_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody_is_sleeping(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_sleeping();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody_is_using_continuous_collision_detection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_continuous_collision_detection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody_is_using_custom_integrator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_custom_integrator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RigidBody_set_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_damp(arg0);
}
}
}
static void wasgo_RigidBody_set_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_velocity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_axis_lock(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_axis_lock(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_RigidBody_set_axis_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_axis_velocity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_bounce(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_bounce(arg0);
}
}
}
static void wasgo_RigidBody_set_can_sleep(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_can_sleep(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_contact_monitor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_contact_monitor(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_friction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_friction(arg0);
}
}
}
static void wasgo_RigidBody_set_gravity_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_scale(arg0);
}
}
}
static void wasgo_RigidBody_set_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_damp(arg0);
}
}
}
static void wasgo_RigidBody_set_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_velocity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_mass(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_mass(arg0);
}
}
}
static void wasgo_RigidBody_set_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_max_contacts_reported(arg0);
}
}
}
static void wasgo_RigidBody_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_RigidBody_set_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_material_override(&(PhysicsMaterial *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_sleeping(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_sleeping(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_use_continuous_collision_detection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_use_continuous_collision_detection(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_use_custom_integrator(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_use_custom_integrator(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody_set_weight(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody *caller = (RigidBody *) state->lookup_object(caller_id);
if(caller){
caller->set_weight(arg0);
}
}
}
static void wasgo_RigidBody2D__body_enter_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_body_enter_tree(arg0);
}
}
}
static void wasgo_RigidBody2D__body_exit_tree(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_body_exit_tree(arg0);
}
}
}
static void wasgo_RigidBody2D__direct_state_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_direct_state_changed(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D__integrate_forces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_integrate_forces(&(Physics2DDirectBodyState *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D__reload_physics_characteristics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_reload_physics_characteristics();
}
}
}
static void wasgo_RigidBody2D_add_central_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->add_central_force(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_add_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->add_force(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_RigidBody2D_add_torque(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->add_torque(arg0);
}
}
}
static void wasgo_RigidBody2D_apply_central_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->apply_central_impulse(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_apply_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->apply_impulse(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_RigidBody2D_apply_torque_impulse(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->apply_torque_impulse(arg0);
}
}
}
static float wasgo_RigidBody2D_get_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_angular_damp();
}
}
}
static float wasgo_RigidBody2D_get_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_angular_velocity();
}
}
}
static WasGoId wasgo_RigidBody2D_get_applied_force(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_applied_force();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody2D_get_applied_torque(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_applied_torque();
}
}
}
static float wasgo_RigidBody2D_get_bounce(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_bounce();
}
}
}
static WasGoId wasgo_RigidBody2D_get_colliding_bodies(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_colliding_bodies();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody2D_get_continuous_collision_detection_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
enum.RigidBody2D::CCDMode ret_value = caller->get_continuous_collision_detection_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody2D_get_friction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_friction();
}
}
}
static float wasgo_RigidBody2D_get_gravity_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_gravity_scale();
}
}
}
static float wasgo_RigidBody2D_get_inertia(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_inertia();
}
}
}
static float wasgo_RigidBody2D_get_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_linear_damp();
}
}
}
static WasGoId wasgo_RigidBody2D_get_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_linear_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody2D_get_mass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_mass();
}
}
}
static int wasgo_RigidBody2D_get_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_contacts_reported();
}
}
}
static WasGoId wasgo_RigidBody2D_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
enum.RigidBody2D::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody2D_get_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
PhysicsMaterial ret_value = caller->get_physics_material_override();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_RigidBody2D_get_weight(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_weight();
}
}
}
static WasGoId wasgo_RigidBody2D_is_able_to_sleep(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_able_to_sleep();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody2D_is_contact_monitor_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_contact_monitor_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody2D_is_sleeping(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_sleeping();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_RigidBody2D_is_using_custom_integrator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_custom_integrator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_RigidBody2D_set_angular_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_damp(arg0);
}
}
}
static void wasgo_RigidBody2D_set_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_angular_velocity(arg0);
}
}
}
static void wasgo_RigidBody2D_set_applied_force(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_applied_force(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_applied_torque(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_applied_torque(arg0);
}
}
}
static void wasgo_RigidBody2D_set_axis_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_axis_velocity(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_bounce(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_bounce(arg0);
}
}
}
static void wasgo_RigidBody2D_set_can_sleep(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_can_sleep(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_contact_monitor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_contact_monitor(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_continuous_collision_detection_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_continuous_collision_detection_mode(arg0);
}
}
}
static void wasgo_RigidBody2D_set_friction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_friction(arg0);
}
}
}
static void wasgo_RigidBody2D_set_gravity_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_gravity_scale(arg0);
}
}
}
static void wasgo_RigidBody2D_set_inertia(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_inertia(arg0);
}
}
}
static void wasgo_RigidBody2D_set_linear_damp(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_damp(arg0);
}
}
}
static void wasgo_RigidBody2D_set_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_velocity(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_mass(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_mass(arg0);
}
}
}
static void wasgo_RigidBody2D_set_max_contacts_reported(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_max_contacts_reported(arg0);
}
}
}
static void wasgo_RigidBody2D_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_RigidBody2D_set_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_material_override(&(PhysicsMaterial *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_sleeping(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_sleeping(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_use_custom_integrator(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_use_custom_integrator(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_RigidBody2D_set_weight(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_weight(arg0);
}
}
}
static WasGoId wasgo_RigidBody2D_test_motion(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
RigidBody2D *caller = (RigidBody2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->test_motion(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, &(Physics2DTestMotionResult *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_connection_binds(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_connection_binds(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SceneState_get_connection_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
return caller->get_connection_count();
}
}
}
static int wasgo_SceneState_get_connection_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
return caller->get_connection_flags(arg0);
}
}
}
static WasGoId wasgo_SceneState_get_connection_method(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_connection_method(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_connection_signal(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_connection_signal(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_connection_source(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_connection_source(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_connection_target(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_connection_target(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SceneState_get_node_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
return caller->get_node_count();
}
}
}
static WasGoId wasgo_SceneState_get_node_groups(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_node_groups(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SceneState_get_node_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
return caller->get_node_index(arg0);
}
}
}
static WasGoId wasgo_SceneState_get_node_instance(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
PackedScene ret_value = caller->get_node_instance(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_node_instance_placeholder(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_node_instance_placeholder(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_node_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_node_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_node_owner_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_node_owner_path(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_node_path(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_node_path(arg0, &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SceneState_get_node_property_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
return caller->get_node_property_count(arg0);
}
}
}
static WasGoId wasgo_SceneState_get_node_property_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_node_property_name(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_node_property_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_node_property_value(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_get_node_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_node_type(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneState_is_node_instance_placeholder(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneState *caller = (SceneState *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_node_instance_placeholder(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SceneTree__change_scene(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->_change_scene(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree__connected_to_server(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->_connected_to_server();
}
}
}
static void wasgo_SceneTree__connection_failed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->_connection_failed();
}
}
}
static void wasgo_SceneTree__network_peer_connected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->_network_peer_connected(arg0);
}
}
}
static void wasgo_SceneTree__network_peer_disconnected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->_network_peer_disconnected(arg0);
}
}
}
static void wasgo_SceneTree__server_disconnected(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->_server_disconnected();
}
}
}
static WasGoId wasgo_SceneTree_call_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->call_group(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_call_group_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->call_group_flags(arg0, &(String *)lookup_object(arg1), &(String *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_change_scene(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->change_scene(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_change_scene_to(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->change_scene_to(&(PackedScene *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_create_timer(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
SceneTreeTimer ret_value = caller->create_timer(arg0, &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_get_current_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_current_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_get_edited_scene_root(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
Node ret_value = caller->get_edited_scene_root();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SceneTree_get_frame(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
return caller->get_frame();
}
}
}
static WasGoId wasgo_SceneTree_get_multiplayer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
MultiplayerAPI ret_value = caller->get_multiplayer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_get_network_connected_peers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_network_connected_peers();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_get_network_peer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
NetworkedMultiplayerPeer ret_value = caller->get_network_peer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SceneTree_get_network_unique_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
return caller->get_network_unique_id();
}
}
}
static int wasgo_SceneTree_get_node_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
return caller->get_node_count();
}
}
}
static WasGoId wasgo_SceneTree_get_nodes_in_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_nodes_in_group(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_get_root(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
Viewport ret_value = caller->get_root();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SceneTree_get_rpc_sender_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
return caller->get_rpc_sender_id();
}
}
}
static WasGoId wasgo_SceneTree_has_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_group(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_has_network_peer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_network_peer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_debugging_collisions_hint(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_debugging_collisions_hint();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_debugging_navigation_hint(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_debugging_navigation_hint();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_input_handled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_input_handled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_multiplayer_poll_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_multiplayer_poll_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_network_server(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_network_server();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_paused(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_paused();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_refusing_new_network_connections(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_refusing_new_network_connections();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SceneTree_is_using_font_oversampling(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_font_oversampling();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SceneTree_notify_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->notify_group(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_SceneTree_notify_group_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->notify_group_flags(arg0, &(String *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_SceneTree_queue_delete(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->queue_delete(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_quit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->quit(arg0);
}
}
}
static WasGoId wasgo_SceneTree_reload_current_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->reload_current_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SceneTree_set_auto_accept_quit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_auto_accept_quit(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_current_scene(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_current_scene(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_debug_collisions_hint(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_debug_collisions_hint(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_debug_navigation_hint(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_debug_navigation_hint(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_edited_scene_root(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_edited_scene_root(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_group(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_SceneTree_set_group_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_group_flags(arg0, &(String *)lookup_object(arg1), &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo_SceneTree_set_input_as_handled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_input_as_handled();
}
}
}
static void wasgo_SceneTree_set_multiplayer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_multiplayer(&(MultiplayerAPI *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_multiplayer_poll_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_multiplayer_poll_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_network_peer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_network_peer(&(NetworkedMultiplayerPeer *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_pause(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_pause(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_quit_on_go_back(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_quit_on_go_back(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_refuse_new_network_connections(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_refuse_new_network_connections(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SceneTree_set_screen_stretch(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_screen_stretch(arg0, arg1, &(Vector2 *)lookup_object(arg2), arg3);
}
}
}
static void wasgo_SceneTree_set_use_font_oversampling(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTree *caller = (SceneTree *) state->lookup_object(caller_id);
if(caller){
caller->set_use_font_oversampling(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_SceneTreeTimer_get_time_left(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTreeTimer *caller = (SceneTreeTimer *) state->lookup_object(caller_id);
if(caller){
return caller->get_time_left();
}
}
}
static void wasgo_SceneTreeTimer_set_time_left(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SceneTreeTimer *caller = (SceneTreeTimer *) state->lookup_object(caller_id);
if(caller){
caller->set_time_left(arg0);
}
}
}
static WasGoId wasgo_Script_can_instance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_instance();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_base_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
Script ret_value = caller->get_base_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_instance_base_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_instance_base_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_property_default_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_property_default_value(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_script_constant_map(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_script_constant_map();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_script_method_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_script_method_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_script_property_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_script_property_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_script_signal_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_script_signal_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_get_source_code(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_source_code();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_has_script_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_script_signal(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_has_source_code(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_source_code();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_instance_has(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->instance_has(&(Object *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_is_tool(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_tool();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Script_reload(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->reload(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Script_set_source_code(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Script *caller = (Script *) state->lookup_object(caller_id);
if(caller){
caller->set_source_code(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptCreateDialog__browse_class_in_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_browse_class_in_tree();
}
}
}
static void wasgo_ScriptCreateDialog__browse_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_browse_path(&(bool *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ScriptCreateDialog__built_in_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_built_in_pressed();
}
}
}
static void wasgo_ScriptCreateDialog__class_name_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_class_name_changed(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptCreateDialog__create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_create();
}
}
}
static void wasgo_ScriptCreateDialog__file_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_file_selected(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptCreateDialog__lang_changed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_lang_changed(arg0);
}
}
}
static void wasgo_ScriptCreateDialog__parent_name_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_parent_name_changed(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptCreateDialog__path_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_path_changed(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptCreateDialog__path_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_path_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptCreateDialog__path_hbox_sorted(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_path_hbox_sorted();
}
}
}
static void wasgo_ScriptCreateDialog__template_changed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->_template_changed(arg0);
}
}
}
static void wasgo_ScriptCreateDialog_config(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptCreateDialog *caller = (ScriptCreateDialog *) state->lookup_object(caller_id);
if(caller){
caller->config(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_ScriptEditor__add_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_add_callback(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(PoolStringArray *)lookup_object(arg2));
}
}
}
static void wasgo_ScriptEditor__autosave_scripts(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_autosave_scripts();
}
}
}
static void wasgo_ScriptEditor__breaked(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_breaked(&(bool *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_ScriptEditor__clear_execution(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_clear_execution(&(Reference *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__close_all_tabs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_close_all_tabs();
}
}
}
static void wasgo_ScriptEditor__close_current_tab(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_close_current_tab();
}
}
}
static void wasgo_ScriptEditor__close_discard_current_tab(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_close_discard_current_tab(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__close_docs_tab(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_close_docs_tab();
}
}
}
static void wasgo_ScriptEditor__close_other_tabs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_close_other_tabs();
}
}
}
static void wasgo_ScriptEditor__copy_script_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_copy_script_path();
}
}
}
static void wasgo_ScriptEditor__editor_pause(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_editor_pause();
}
}
}
static void wasgo_ScriptEditor__editor_play(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_editor_play();
}
}
}
static void wasgo_ScriptEditor__editor_settings_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_editor_settings_changed();
}
}
}
static void wasgo_ScriptEditor__editor_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_editor_stop();
}
}
}
static void wasgo_ScriptEditor__file_dialog_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_file_dialog_action(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__filter_methods_text_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_filter_methods_text_changed(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__filter_scripts_text_changed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_filter_scripts_text_changed(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_ScriptEditor__get_debug_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_debug_tooltip(&(String *)lookup_object(arg0), &(Node *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ScriptEditor__goto_script_line(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_goto_script_line(&(Reference *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_ScriptEditor__goto_script_line2(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_goto_script_line2(arg0);
}
}
}
static void wasgo_ScriptEditor__help_class_goto(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_help_class_goto(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__help_class_open(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_help_class_open(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__help_overview_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_help_overview_selected(arg0);
}
}
}
static void wasgo_ScriptEditor__help_search(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_help_search(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__history_back(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_history_back();
}
}
}
static void wasgo_ScriptEditor__history_forward(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_history_forward();
}
}
}
static void wasgo_ScriptEditor__live_auto_reload_running_scripts(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_live_auto_reload_running_scripts();
}
}
}
static void wasgo_ScriptEditor__members_overview_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_members_overview_selected(arg0);
}
}
}
static void wasgo_ScriptEditor__menu_option(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_menu_option(arg0);
}
}
}
static void wasgo_ScriptEditor__on_find_in_files_modified_files(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_on_find_in_files_modified_files(&(PoolStringArray *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__on_find_in_files_requested(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_on_find_in_files_requested(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__on_find_in_files_result_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_on_find_in_files_result_selected(&(String *)lookup_object(arg0), arg1, arg2, arg3);
}
}
}
static void wasgo_ScriptEditor__open_recent_script(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_open_recent_script(arg0);
}
}
}
static void wasgo_ScriptEditor__reload_scripts(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_reload_scripts();
}
}
}
static void wasgo_ScriptEditor__request_help(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_request_help(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__res_saved_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_res_saved_callback(&(Resource *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__resave_scripts(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_resave_scripts(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__save_history(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_save_history();
}
}
}
static void wasgo_ScriptEditor__script_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_script_changed();
}
}
}
static void wasgo_ScriptEditor__script_created(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_script_created(&(Script *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__script_list_gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_script_list_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__script_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_script_selected(arg0);
}
}
}
static void wasgo_ScriptEditor__script_split_dragged(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_script_split_dragged(arg0);
}
}
}
static void wasgo_ScriptEditor__set_execution(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_set_execution(&(Reference *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_ScriptEditor__show_debugger(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_show_debugger(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__start_find_in_files(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_start_find_in_files(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__tab_changed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_tab_changed(arg0);
}
}
}
static void wasgo_ScriptEditor__theme_option(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_theme_option(arg0);
}
}
}
static void wasgo_ScriptEditor__toggle_members_overview_alpha_sort(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_toggle_members_overview_alpha_sort(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__tree_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_tree_changed();
}
}
}
static void wasgo_ScriptEditor__unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ScriptEditor__update_autosave_timer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_update_autosave_timer();
}
}
}
static void wasgo_ScriptEditor__update_members_overview(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_update_members_overview();
}
}
}
static void wasgo_ScriptEditor__update_recent_scripts(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_update_recent_scripts();
}
}
}
static void wasgo_ScriptEditor__update_script_connections(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_update_script_connections();
}
}
}
static void wasgo_ScriptEditor__update_script_names(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->_update_script_names();
}
}
}
static WasGoId wasgo_ScriptEditor_can_drop_data_fw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_drop_data_fw(&(Vector2 *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(Control *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ScriptEditor_drop_data_fw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->drop_data_fw(&(Vector2 *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(Control *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_ScriptEditor_get_current_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
Script ret_value = caller->get_current_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ScriptEditor_get_drag_data_fw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_drag_data_fw(&(Vector2 *)lookup_object(arg0), &(Control *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ScriptEditor_get_open_scripts(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_open_scripts();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ScriptEditor_goto_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->goto_line(arg0);
}
}
}
static void wasgo_ScriptEditor_open_script_create_dialog(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScriptEditor *caller = (ScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->open_script_create_dialog(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_ScrollBar__drag_node_exit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollBar *caller = (ScrollBar *) state->lookup_object(caller_id);
if(caller){
caller->_drag_node_exit();
}
}
}
static void wasgo_ScrollBar__drag_node_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollBar *caller = (ScrollBar *) state->lookup_object(caller_id);
if(caller){
caller->_drag_node_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ScrollBar__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollBar *caller = (ScrollBar *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static float wasgo_ScrollBar_get_custom_step(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollBar *caller = (ScrollBar *) state->lookup_object(caller_id);
if(caller){
return caller->get_custom_step();
}
}
}
static void wasgo_ScrollBar_set_custom_step(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollBar *caller = (ScrollBar *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_step(arg0);
}
}
}
static void wasgo_ScrollContainer__ensure_focused_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->_ensure_focused_visible(&(Control *)lookup_object(arg0));
}
}
}
static void wasgo_ScrollContainer__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ScrollContainer__scroll_moved(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->_scroll_moved(arg0);
}
}
}
static void wasgo_ScrollContainer__update_scrollbar_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->_update_scrollbar_position();
}
}
}
static int wasgo_ScrollContainer_get_deadzone(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_deadzone();
}
}
}
static int wasgo_ScrollContainer_get_h_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_h_scroll();
}
}
}
static WasGoId wasgo_ScrollContainer_get_h_scrollbar(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
HScrollBar ret_value = caller->get_h_scrollbar();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_ScrollContainer_get_v_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_scroll();
}
}
}
static WasGoId wasgo_ScrollContainer_get_v_scrollbar(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
VScrollBar ret_value = caller->get_v_scrollbar();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ScrollContainer_is_following_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_following_focus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ScrollContainer_is_h_scroll_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_h_scroll_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ScrollContainer_is_v_scroll_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_v_scroll_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ScrollContainer_set_deadzone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_deadzone(arg0);
}
}
}
static void wasgo_ScrollContainer_set_enable_h_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_enable_h_scroll(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ScrollContainer_set_enable_v_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_enable_v_scroll(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ScrollContainer_set_follow_focus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_follow_focus(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ScrollContainer_set_h_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_h_scroll(arg0);
}
}
}
static void wasgo_ScrollContainer_set_v_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ScrollContainer *caller = (ScrollContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_v_scroll(arg0);
}
}
}
static WasGoId wasgo_SegmentShape2D_get_a(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SegmentShape2D *caller = (SegmentShape2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_a();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SegmentShape2D_get_b(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SegmentShape2D *caller = (SegmentShape2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_b();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SegmentShape2D_set_a(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SegmentShape2D *caller = (SegmentShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_a(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_SegmentShape2D_set_b(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SegmentShape2D *caller = (SegmentShape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_b(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Shader_get_code(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shader *caller = (Shader *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_code();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Shader_get_default_texture_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shader *caller = (Shader *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_default_texture_param(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Shader_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shader *caller = (Shader *) state->lookup_object(caller_id);
if(caller){
enum.Shader::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Shader_has_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shader *caller = (Shader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_param(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Shader_set_code(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shader *caller = (Shader *) state->lookup_object(caller_id);
if(caller){
caller->set_code(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Shader_set_default_texture_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shader *caller = (Shader *) state->lookup_object(caller_id);
if(caller){
caller->set_default_texture_param(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_ShaderMaterial__shader_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShaderMaterial *caller = (ShaderMaterial *) state->lookup_object(caller_id);
if(caller){
caller->_shader_changed();
}
}
}
static WasGoId wasgo_ShaderMaterial_get_shader(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShaderMaterial *caller = (ShaderMaterial *) state->lookup_object(caller_id);
if(caller){
Shader ret_value = caller->get_shader();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ShaderMaterial_get_shader_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShaderMaterial *caller = (ShaderMaterial *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_shader_param(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ShaderMaterial_property_can_revert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShaderMaterial *caller = (ShaderMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->property_can_revert(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ShaderMaterial_property_get_revert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShaderMaterial *caller = (ShaderMaterial *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->property_get_revert(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ShaderMaterial_set_shader(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShaderMaterial *caller = (ShaderMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_shader(&(Shader *)lookup_object(arg0));
}
}
}
static void wasgo_ShaderMaterial_set_shader_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShaderMaterial *caller = (ShaderMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_shader_param(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static float wasgo_Shape_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape *caller = (Shape *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin();
}
}
}
static void wasgo_Shape_set_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape *caller = (Shape *) state->lookup_object(caller_id);
if(caller){
caller->set_margin(arg0);
}
}
}
static WasGoId wasgo_Shape2D_collide(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape2D *caller = (Shape2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->collide(&(Transform2D *)lookup_object(arg0), &(Shape2D *)lookup_object(arg1), &(Transform2D *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Shape2D_collide_and_get_contacts(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape2D *caller = (Shape2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->collide_and_get_contacts(&(Transform2D *)lookup_object(arg0), &(Shape2D *)lookup_object(arg1), &(Transform2D *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Shape2D_collide_with_motion(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape2D *caller = (Shape2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->collide_with_motion(&(Transform2D *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Shape2D *)lookup_object(arg2), &(Transform2D *)lookup_object(arg3), &(Vector2 *)lookup_object(arg4));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Shape2D_collide_with_motion_and_get_contacts(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape2D *caller = (Shape2D *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->collide_with_motion_and_get_contacts(&(Transform2D *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Shape2D *)lookup_object(arg2), &(Transform2D *)lookup_object(arg3), &(Vector2 *)lookup_object(arg4));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Shape2D_get_custom_solver_bias(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape2D *caller = (Shape2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_custom_solver_bias();
}
}
}
static void wasgo_Shape2D_set_custom_solver_bias(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Shape2D *caller = (Shape2D *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_solver_bias(arg0);
}
}
}
static WasGoId wasgo_ShortCut_get_as_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShortCut *caller = (ShortCut *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_as_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ShortCut_get_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShortCut *caller = (ShortCut *) state->lookup_object(caller_id);
if(caller){
InputEvent ret_value = caller->get_shortcut();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ShortCut_is_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShortCut *caller = (ShortCut *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shortcut(&(InputEvent *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_ShortCut_is_valid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShortCut *caller = (ShortCut *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ShortCut_set_shortcut(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ShortCut *caller = (ShortCut *) state->lookup_object(caller_id);
if(caller){
caller->set_shortcut(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Skeleton_add_bone(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->add_bone(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Skeleton_bind_child_node_to_bone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->bind_child_node_to_bone(arg0, &(Node *)lookup_object(arg1));
}
}
}
static void wasgo_Skeleton_clear_bones(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->clear_bones();
}
}
}
static int wasgo_Skeleton_find_bone(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
return caller->find_bone(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_Skeleton_get_bone_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
return caller->get_bone_count();
}
}
}
static WasGoId wasgo_Skeleton_get_bone_custom_pose(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_bone_custom_pose(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Skeleton_get_bone_global_pose(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_bone_global_pose(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Skeleton_get_bone_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bone_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Skeleton_get_bone_parent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
return caller->get_bone_parent(arg0);
}
}
}
static WasGoId wasgo_Skeleton_get_bone_pose(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_bone_pose(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Skeleton_get_bone_rest(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_bone_rest(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Skeleton_get_bound_child_nodes_to_bone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_bound_child_nodes_to_bone(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Skeleton_is_bone_rest_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_bone_rest_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Skeleton_localize_rests(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->localize_rests();
}
}
}
static void wasgo_Skeleton_physical_bones_add_collision_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->physical_bones_add_collision_exception(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_Skeleton_physical_bones_remove_collision_exception(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->physical_bones_remove_collision_exception(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_Skeleton_physical_bones_start_simulation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->physical_bones_start_simulation(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_Skeleton_physical_bones_stop_simulation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->physical_bones_stop_simulation();
}
}
}
static WasGoId wasgo_Skeleton_register_skin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
SkinReference ret_value = caller->register_skin(&(Skin *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Skeleton_set_bone_custom_pose(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_custom_pose(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_Skeleton_set_bone_disable_rest(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_disable_rest(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Skeleton_set_bone_global_pose_override(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_global_pose_override(arg0, &(Transform *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_Skeleton_set_bone_parent(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_parent(arg0, arg1);
}
}
}
static void wasgo_Skeleton_set_bone_pose(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_pose(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_Skeleton_set_bone_rest(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->set_bone_rest(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_Skeleton_unbind_child_node_from_bone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->unbind_child_node_from_bone(arg0, &(Node *)lookup_object(arg1));
}
}
}
static void wasgo_Skeleton_unparent_bone_and_rest(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton *caller = (Skeleton *) state->lookup_object(caller_id);
if(caller){
caller->unparent_bone_and_rest(arg0);
}
}
}
static void wasgo_Skeleton2D__update_bone_setup(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton2D *caller = (Skeleton2D *) state->lookup_object(caller_id);
if(caller){
caller->_update_bone_setup();
}
}
}
static void wasgo_Skeleton2D__update_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton2D *caller = (Skeleton2D *) state->lookup_object(caller_id);
if(caller){
caller->_update_transform();
}
}
}
static WasGoId wasgo_Skeleton2D_get_bone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton2D *caller = (Skeleton2D *) state->lookup_object(caller_id);
if(caller){
Bone2D ret_value = caller->get_bone(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Skeleton2D_get_bone_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton2D *caller = (Skeleton2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_bone_count();
}
}
}
static WasGoId wasgo_Skeleton2D_get_skeleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skeleton2D *caller = (Skeleton2D *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_skeleton();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SkeletonIK_get_interpolation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
return caller->get_interpolation();
}
}
}
static WasGoId wasgo_SkeletonIK_get_magnet_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_magnet_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SkeletonIK_get_max_iterations(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_iterations();
}
}
}
static float wasgo_SkeletonIK_get_min_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
return caller->get_min_distance();
}
}
}
static WasGoId wasgo_SkeletonIK_get_parent_skeleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
Skeleton ret_value = caller->get_parent_skeleton();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkeletonIK_get_root_bone(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_root_bone();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkeletonIK_get_target_node(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_target_node();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkeletonIK_get_target_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_target_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkeletonIK_get_tip_bone(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_tip_bone();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkeletonIK_is_override_tip_basis(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_override_tip_basis();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkeletonIK_is_running(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_running();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkeletonIK_is_using_magnet(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_magnet();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SkeletonIK_set_interpolation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_interpolation(arg0);
}
}
}
static void wasgo_SkeletonIK_set_magnet_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_magnet_position(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_set_max_iterations(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_max_iterations(arg0);
}
}
}
static void wasgo_SkeletonIK_set_min_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_min_distance(arg0);
}
}
}
static void wasgo_SkeletonIK_set_override_tip_basis(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_override_tip_basis(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_set_root_bone(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_root_bone(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_set_target_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_target_node(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_set_target_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_target_transform(&(Transform *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_set_tip_bone(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_tip_bone(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_set_use_magnet(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->set_use_magnet(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_start(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->start(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SkeletonIK_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkeletonIK *caller = (SkeletonIK *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static void wasgo_Skin_add_bind(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
caller->add_bind(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_Skin_clear_binds(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
caller->clear_binds();
}
}
}
static int wasgo_Skin_get_bind_bone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
return caller->get_bind_bone(arg0);
}
}
}
static int wasgo_Skin_get_bind_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
return caller->get_bind_count();
}
}
}
static WasGoId wasgo_Skin_get_bind_pose(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_bind_pose(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Skin_set_bind_bone(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
caller->set_bind_bone(arg0, arg1);
}
}
}
static void wasgo_Skin_set_bind_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
caller->set_bind_count(arg0);
}
}
}
static void wasgo_Skin_set_bind_pose(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Skin *caller = (Skin *) state->lookup_object(caller_id);
if(caller){
caller->set_bind_pose(arg0, &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_SkinReference__skin_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkinReference *caller = (SkinReference *) state->lookup_object(caller_id);
if(caller){
caller->_skin_changed();
}
}
}
static WasGoId wasgo_SkinReference_get_skeleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkinReference *caller = (SkinReference *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_skeleton();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SkinReference_get_skin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SkinReference *caller = (SkinReference *) state->lookup_object(caller_id);
if(caller){
Skin ret_value = caller->get_skin();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sky_get_radiance_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sky *caller = (Sky *) state->lookup_object(caller_id);
if(caller){
enum.Sky::RadianceSize ret_value = caller->get_radiance_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Sky_set_radiance_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sky *caller = (Sky *) state->lookup_object(caller_id);
if(caller){
caller->set_radiance_size(arg0);
}
}
}
static void wasgo_Slider__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static int wasgo_Slider_get_ticks(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
return caller->get_ticks();
}
}
}
static WasGoId wasgo_Slider_get_ticks_on_borders(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_ticks_on_borders();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Slider_is_editable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Slider_is_scrollable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_scrollable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Slider_set_editable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
caller->set_editable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Slider_set_scrollable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
caller->set_scrollable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Slider_set_ticks(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
caller->set_ticks(arg0);
}
}
}
static void wasgo_Slider_set_ticks_on_borders(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Slider *caller = (Slider *) state->lookup_object(caller_id);
if(caller){
caller->set_ticks_on_borders(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_SliderJoint__get_lower_limit_angular(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SliderJoint *caller = (SliderJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_lower_limit_angular();
}
}
}
static float wasgo_SliderJoint__get_upper_limit_angular(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SliderJoint *caller = (SliderJoint *) state->lookup_object(caller_id);
if(caller){
return caller->_get_upper_limit_angular();
}
}
}
static void wasgo_SliderJoint__set_lower_limit_angular(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SliderJoint *caller = (SliderJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_lower_limit_angular(arg0);
}
}
}
static void wasgo_SliderJoint__set_upper_limit_angular(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SliderJoint *caller = (SliderJoint *) state->lookup_object(caller_id);
if(caller){
caller->_set_upper_limit_angular(arg0);
}
}
}
static float wasgo_SliderJoint_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SliderJoint *caller = (SliderJoint *) state->lookup_object(caller_id);
if(caller){
return caller->get_param(arg0);
}
}
}
static void wasgo_SliderJoint_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SliderJoint *caller = (SliderJoint *) state->lookup_object(caller_id);
if(caller){
caller->set_param(arg0, arg1);
}
}
}
static void wasgo_SoftBody__draw_soft_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->_draw_soft_mesh();
}
}
}
static void wasgo_SoftBody_add_collision_exception_with(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->add_collision_exception_with(&(Node *)lookup_object(arg0));
}
}
}
static float wasgo_SoftBody_get_areaAngular_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_areaAngular_stiffness();
}
}
}
static WasGoId wasgo_SoftBody_get_collision_exceptions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_collision_exceptions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SoftBody_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_SoftBody_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SoftBody_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_SoftBody_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SoftBody_get_damping_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_damping_coefficient();
}
}
}
static float wasgo_SoftBody_get_drag_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_drag_coefficient();
}
}
}
static float wasgo_SoftBody_get_linear_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_linear_stiffness();
}
}
}
static WasGoId wasgo_SoftBody_get_parent_collision_ignore(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_parent_collision_ignore();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SoftBody_get_pose_matching_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_pose_matching_coefficient();
}
}
}
static float wasgo_SoftBody_get_pressure_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_pressure_coefficient();
}
}
}
static int wasgo_SoftBody_get_simulation_precision(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_simulation_precision();
}
}
}
static float wasgo_SoftBody_get_total_mass(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_total_mass();
}
}
}
static float wasgo_SoftBody_get_volume_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_volume_stiffness();
}
}
}
static WasGoId wasgo_SoftBody_is_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ray_pickable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SoftBody_remove_collision_exception_with(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->remove_collision_exception_with(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_SoftBody_set_areaAngular_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_areaAngular_stiffness(arg0);
}
}
}
static void wasgo_SoftBody_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_SoftBody_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_SoftBody_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_SoftBody_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_SoftBody_set_damping_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_damping_coefficient(arg0);
}
}
}
static void wasgo_SoftBody_set_drag_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_drag_coefficient(arg0);
}
}
}
static void wasgo_SoftBody_set_linear_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_linear_stiffness(arg0);
}
}
}
static void wasgo_SoftBody_set_parent_collision_ignore(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_parent_collision_ignore(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_SoftBody_set_pose_matching_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_pose_matching_coefficient(arg0);
}
}
}
static void wasgo_SoftBody_set_pressure_coefficient(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_pressure_coefficient(arg0);
}
}
}
static void wasgo_SoftBody_set_ray_pickable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_ray_pickable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SoftBody_set_simulation_precision(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_simulation_precision(arg0);
}
}
}
static void wasgo_SoftBody_set_total_mass(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_total_mass(arg0);
}
}
}
static void wasgo_SoftBody_set_volume_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SoftBody *caller = (SoftBody *) state->lookup_object(caller_id);
if(caller){
caller->set_volume_stiffness(arg0);
}
}
}
static void wasgo_Spatial__update_gizmo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->_update_gizmo();
}
}
}
static void wasgo_Spatial_force_update_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->force_update_transform();
}
}
}
static WasGoId wasgo_Spatial_get_gizmo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
SpatialGizmo ret_value = caller->get_gizmo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_global_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_global_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_parent_spatial(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Spatial ret_value = caller->get_parent_spatial();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_rotation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_rotation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_rotation_degrees();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_translation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_translation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_get_world(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
World ret_value = caller->get_world();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Spatial_global_rotate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->global_rotate(&(Vector3 *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Spatial_global_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->global_scale(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_global_translate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->global_translate(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_hide(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->hide();
}
}
}
static WasGoId wasgo_Spatial_is_local_transform_notification_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_local_transform_notification_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_is_scale_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_scale_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_is_set_as_toplevel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_set_as_toplevel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_is_transform_notification_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_transform_notification_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_is_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_is_visible_in_tree(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_visible_in_tree();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Spatial_look_at(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->look_at(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_Spatial_look_at_from_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->look_at_from_position(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2));
}
}
}
static void wasgo_Spatial_orthonormalize(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->orthonormalize();
}
}
}
static void wasgo_Spatial_rotate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->rotate(&(Vector3 *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Spatial_rotate_object_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->rotate_object_local(&(Vector3 *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_Spatial_rotate_x(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->rotate_x(arg0);
}
}
}
static void wasgo_Spatial_rotate_y(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->rotate_y(arg0);
}
}
}
static void wasgo_Spatial_rotate_z(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->rotate_z(arg0);
}
}
}
static void wasgo_Spatial_scale_object_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->scale_object_local(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_as_toplevel(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_as_toplevel(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_disable_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_scale(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_gizmo(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_gizmo(&(SpatialGizmo *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_global_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_global_transform(&(Transform *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_identity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_identity();
}
}
}
static void wasgo_Spatial_set_ignore_transform_notification(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_ignore_transform_notification(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_notify_local_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_notify_local_transform(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_notify_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_notify_transform(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_rotation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_rotation_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_rotation_degrees(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_scale(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_transform(&(Transform *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_translation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_translation(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_set_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->set_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_show(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->show();
}
}
}
static WasGoId wasgo_Spatial_to_global(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->to_global(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Spatial_to_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->to_local(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Spatial_translate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->translate(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_translate_object_local(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->translate_object_local(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_Spatial_update_gizmo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Spatial *caller = (Spatial *) state->lookup_object(caller_id);
if(caller){
caller->update_gizmo();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_albedo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_albedo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_alpha_scissor_threshold(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_alpha_scissor_threshold();
}
}
}
static float wasgo_SpatialMaterial_get_anisotropy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_anisotropy();
}
}
}
static float wasgo_SpatialMaterial_get_ao_light_affect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_ao_light_affect();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_ao_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::TextureChannel ret_value = caller->get_ao_texture_channel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_billboard_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::BillboardMode ret_value = caller->get_billboard_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::BlendMode ret_value = caller->get_blend_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_clearcoat(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_clearcoat();
}
}
}
static float wasgo_SpatialMaterial_get_clearcoat_gloss(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_clearcoat_gloss();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_cull_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::CullMode ret_value = caller->get_cull_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_depth_deep_parallax_flip_binormal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_depth_deep_parallax_flip_binormal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_depth_deep_parallax_flip_tangent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_depth_deep_parallax_flip_tangent();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SpatialMaterial_get_depth_deep_parallax_max_layers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth_deep_parallax_max_layers();
}
}
}
static int wasgo_SpatialMaterial_get_depth_deep_parallax_min_layers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth_deep_parallax_min_layers();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_depth_draw_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::DepthDrawMode ret_value = caller->get_depth_draw_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_depth_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth_scale();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_detail_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::BlendMode ret_value = caller->get_detail_blend_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_detail_uv(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::DetailUV ret_value = caller->get_detail_uv();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_diffuse_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::DiffuseMode ret_value = caller->get_diffuse_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_distance_fade(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::DistanceFadeMode ret_value = caller->get_distance_fade();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_distance_fade_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_distance_fade_max_distance();
}
}
}
static float wasgo_SpatialMaterial_get_distance_fade_min_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_distance_fade_min_distance();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_emission(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_emission();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_emission_energy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_emission_energy();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_emission_operator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::EmissionOperator ret_value = caller->get_emission_operator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_feature(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_feature(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_flag(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_grow(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_grow();
}
}
}
static float wasgo_SpatialMaterial_get_line_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_line_width();
}
}
}
static float wasgo_SpatialMaterial_get_metallic(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_metallic();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_metallic_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::TextureChannel ret_value = caller->get_metallic_texture_channel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_normal_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_normal_scale();
}
}
}
static int wasgo_SpatialMaterial_get_particles_anim_h_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_particles_anim_h_frames();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_particles_anim_loop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_particles_anim_loop();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SpatialMaterial_get_particles_anim_v_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_particles_anim_v_frames();
}
}
}
static float wasgo_SpatialMaterial_get_point_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_point_size();
}
}
}
static float wasgo_SpatialMaterial_get_proximity_fade_distance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_proximity_fade_distance();
}
}
}
static float wasgo_SpatialMaterial_get_refraction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_refraction();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_refraction_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::TextureChannel ret_value = caller->get_refraction_texture_channel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_rim(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_rim();
}
}
}
static float wasgo_SpatialMaterial_get_rim_tint(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_rim_tint();
}
}
}
static float wasgo_SpatialMaterial_get_roughness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_roughness();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_roughness_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::TextureChannel ret_value = caller->get_roughness_texture_channel();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_specular(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_specular();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_specular_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::SpecularMode ret_value = caller->get_specular_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_subsurface_scattering_strength(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_subsurface_scattering_strength();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_transmission(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_transmission();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_uv1_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_uv1_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_uv1_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_uv1_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_uv1_triplanar_blend_sharpness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_uv1_triplanar_blend_sharpness();
}
}
}
static WasGoId wasgo_SpatialMaterial_get_uv2_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_uv2_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_get_uv2_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_uv2_scale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpatialMaterial_get_uv2_triplanar_blend_sharpness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
return caller->get_uv2_triplanar_blend_sharpness();
}
}
}
static WasGoId wasgo_SpatialMaterial_is_depth_deep_parallax_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_depth_deep_parallax_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_is_grow_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_grow_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialMaterial_is_proximity_fade_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_proximity_fade_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SpatialMaterial_set_albedo(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_albedo(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_alpha_scissor_threshold(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_alpha_scissor_threshold(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_anisotropy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_anisotropy(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_ao_light_affect(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_ao_light_affect(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_ao_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_ao_texture_channel(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_billboard_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_billboard_mode(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_blend_mode(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_clearcoat(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_clearcoat(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_clearcoat_gloss(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_clearcoat_gloss(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_cull_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_cull_mode(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_depth_deep_parallax(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_depth_deep_parallax(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_depth_deep_parallax_flip_binormal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_depth_deep_parallax_flip_binormal(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_depth_deep_parallax_flip_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_depth_deep_parallax_flip_tangent(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_depth_deep_parallax_max_layers(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_depth_deep_parallax_max_layers(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_depth_deep_parallax_min_layers(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_depth_deep_parallax_min_layers(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_depth_draw_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_depth_draw_mode(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_depth_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_depth_scale(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_detail_blend_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_detail_blend_mode(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_detail_uv(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_detail_uv(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_diffuse_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_diffuse_mode(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_distance_fade(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_distance_fade(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_distance_fade_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_distance_fade_max_distance(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_distance_fade_min_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_distance_fade_min_distance(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_emission(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_emission_energy(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_energy(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_emission_operator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_emission_operator(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_feature(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_feature(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_SpatialMaterial_set_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_flag(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_SpatialMaterial_set_grow(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_grow(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_grow_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_grow_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_line_width(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_line_width(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_metallic(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_metallic(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_metallic_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_metallic_texture_channel(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_normal_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_scale(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_particles_anim_h_frames(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_particles_anim_h_frames(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_particles_anim_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_particles_anim_loop(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_particles_anim_v_frames(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_particles_anim_v_frames(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_point_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_point_size(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_proximity_fade(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_proximity_fade(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_proximity_fade_distance(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_proximity_fade_distance(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_refraction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_refraction(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_refraction_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_refraction_texture_channel(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_rim(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_rim(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_rim_tint(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_rim_tint(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_roughness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_roughness(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_roughness_texture_channel(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_roughness_texture_channel(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_specular(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_specular(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_specular_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_specular_mode(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_subsurface_scattering_strength(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_subsurface_scattering_strength(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_SpatialMaterial_set_transmission(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_transmission(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_uv1_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_uv1_offset(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_uv1_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_uv1_scale(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_uv1_triplanar_blend_sharpness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_uv1_triplanar_blend_sharpness(arg0);
}
}
}
static void wasgo_SpatialMaterial_set_uv2_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_uv2_offset(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_uv2_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_uv2_scale(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialMaterial_set_uv2_triplanar_blend_sharpness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialMaterial *caller = (SpatialMaterial *) state->lookup_object(caller_id);
if(caller){
caller->set_uv2_triplanar_blend_sharpness(arg0);
}
}
}
static WasGoId wasgo_SpatialVelocityTracker_get_tracked_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialVelocityTracker *caller = (SpatialVelocityTracker *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_tracked_linear_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpatialVelocityTracker_is_tracking_physics_step(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialVelocityTracker *caller = (SpatialVelocityTracker *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_tracking_physics_step();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SpatialVelocityTracker_reset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialVelocityTracker *caller = (SpatialVelocityTracker *) state->lookup_object(caller_id);
if(caller){
caller->reset(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialVelocityTracker_set_track_physics_step(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialVelocityTracker *caller = (SpatialVelocityTracker *) state->lookup_object(caller_id);
if(caller){
caller->set_track_physics_step(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpatialVelocityTracker_update_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpatialVelocityTracker *caller = (SpatialVelocityTracker *) state->lookup_object(caller_id);
if(caller){
caller->update_position(&(Vector3 *)lookup_object(arg0));
}
}
}
static float wasgo_SphereMesh_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static WasGoId wasgo_SphereMesh_get_is_hemisphere(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_is_hemisphere();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SphereMesh_get_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_radial_segments();
}
}
}
static float wasgo_SphereMesh_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static int wasgo_SphereMesh_get_rings(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
return caller->get_rings();
}
}
}
static void wasgo_SphereMesh_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_height(arg0);
}
}
}
static void wasgo_SphereMesh_set_is_hemisphere(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_is_hemisphere(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SphereMesh_set_radial_segments(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_radial_segments(arg0);
}
}
}
static void wasgo_SphereMesh_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static void wasgo_SphereMesh_set_rings(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereMesh *caller = (SphereMesh *) state->lookup_object(caller_id);
if(caller){
caller->set_rings(arg0);
}
}
}
static float wasgo_SphereShape_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereShape *caller = (SphereShape *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static void wasgo_SphereShape_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SphereShape *caller = (SphereShape *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static void wasgo_SpinBox__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_SpinBox__line_edit_focus_exit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->_line_edit_focus_exit();
}
}
}
static void wasgo_SpinBox__line_edit_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->_line_edit_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_SpinBox__range_click_timeout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->_range_click_timeout();
}
}
}
static void wasgo_SpinBox__text_entered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->_text_entered(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SpinBox_apply(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->apply();
}
}
}
static WasGoId wasgo_SpinBox_get_align(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
enum.LineEdit::Align ret_value = caller->get_align();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpinBox_get_line_edit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
LineEdit ret_value = caller->get_line_edit();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpinBox_get_prefix(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_prefix();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpinBox_get_suffix(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_suffix();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpinBox_is_editable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SpinBox_set_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->set_align(arg0);
}
}
}
static void wasgo_SpinBox_set_editable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->set_editable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpinBox_set_prefix(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->set_prefix(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SpinBox_set_suffix(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpinBox *caller = (SpinBox *) state->lookup_object(caller_id);
if(caller){
caller->set_suffix(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SplitContainer__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_SplitContainer_clamp_split_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
caller->clamp_split_offset();
}
}
}
static WasGoId wasgo_SplitContainer_get_dragger_visibility(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
enum.SplitContainer::DraggerVisibility ret_value = caller->get_dragger_visibility();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SplitContainer_get_split_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_split_offset();
}
}
}
static WasGoId wasgo_SplitContainer_is_collapsed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collapsed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SplitContainer_set_collapsed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_collapsed(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SplitContainer_set_dragger_visibility(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_dragger_visibility(arg0);
}
}
}
static void wasgo_SplitContainer_set_split_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SplitContainer *caller = (SplitContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_split_offset(arg0);
}
}
}
static void wasgo_SpringArm_add_excluded_object(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
caller->add_excluded_object(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_SpringArm_clear_excluded_objects(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
caller->clear_excluded_objects();
}
}
}
static int wasgo_SpringArm_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static float wasgo_SpringArm_get_hit_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
return caller->get_hit_length();
}
}
}
static float wasgo_SpringArm_get_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
return caller->get_length();
}
}
}
static float wasgo_SpringArm_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin();
}
}
}
static WasGoId wasgo_SpringArm_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
Shape ret_value = caller->get_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpringArm_remove_excluded_object(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->remove_excluded_object(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SpringArm_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_SpringArm_set_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
caller->set_length(arg0);
}
}
}
static void wasgo_SpringArm_set_margin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
caller->set_margin(arg0);
}
}
}
static void wasgo_SpringArm_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpringArm *caller = (SpringArm *) state->lookup_object(caller_id);
if(caller){
caller->set_shape(&(Shape *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite__texture_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->_texture_changed();
}
}
}
static int wasgo_Sprite_get_frame(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
return caller->get_frame();
}
}
}
static WasGoId wasgo_Sprite_get_frame_coords(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_frame_coords();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Sprite_get_hframes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
return caller->get_hframes();
}
}
}
static WasGoId wasgo_Sprite_get_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_normal_map();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_get_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_get_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_region_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Sprite_get_vframes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
return caller->get_vframes();
}
}
}
static WasGoId wasgo_Sprite_is_centered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_centered();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_is_flipped_h(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_h();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_is_flipped_v(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_v();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_is_pixel_opaque(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_pixel_opaque(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_is_region(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_region();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite_is_region_filter_clip_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_region_filter_clip_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Sprite_set_centered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_centered(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_flip_h(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_h(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_flip_v(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_v(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_frame(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_frame(arg0);
}
}
}
static void wasgo_Sprite_set_frame_coords(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_frame_coords(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_hframes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_hframes(arg0);
}
}
}
static void wasgo_Sprite_set_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_map(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_region(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_region_filter_clip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_region_filter_clip(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_region_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite_set_vframes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite *caller = (Sprite *) state->lookup_object(caller_id);
if(caller){
caller->set_vframes(arg0);
}
}
}
static int wasgo_Sprite3D_get_frame(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_frame();
}
}
}
static WasGoId wasgo_Sprite3D_get_frame_coords(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_frame_coords();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Sprite3D_get_hframes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_hframes();
}
}
}
static WasGoId wasgo_Sprite3D_get_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_region_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Sprite3D_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Sprite3D_get_vframes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_vframes();
}
}
}
static WasGoId wasgo_Sprite3D_is_region(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_region();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Sprite3D_set_frame(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_frame(arg0);
}
}
}
static void wasgo_Sprite3D_set_frame_coords(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_frame_coords(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite3D_set_hframes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_hframes(arg0);
}
}
}
static void wasgo_Sprite3D_set_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_region(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite3D_set_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_region_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite3D_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Sprite3D_set_vframes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Sprite3D *caller = (Sprite3D *) state->lookup_object(caller_id);
if(caller){
caller->set_vframes(arg0);
}
}
}
static void wasgo_SpriteBase3D__im_update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->_im_update();
}
}
}
static void wasgo_SpriteBase3D__queue_update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->_queue_update();
}
}
}
static WasGoId wasgo_SpriteBase3D_generate_triangle_mesh(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
TriangleMesh ret_value = caller->generate_triangle_mesh();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_get_alpha_cut_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
enum.SpriteBase3D::AlphaCutMode ret_value = caller->get_alpha_cut_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_get_axis(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
enum.Vector3::Axis ret_value = caller->get_axis();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_get_billboard_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
enum.SpatialMaterial::BillboardMode ret_value = caller->get_billboard_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_get_draw_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_draw_flag(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_get_item_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_item_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_get_modulate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_modulate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpriteBase3D_get_opacity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_opacity();
}
}
}
static float wasgo_SpriteBase3D_get_pixel_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
return caller->get_pixel_size();
}
}
}
static WasGoId wasgo_SpriteBase3D_is_centered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_centered();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_is_flipped_h(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_h();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteBase3D_is_flipped_v(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_v();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SpriteBase3D_set_alpha_cut_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_alpha_cut_mode(arg0);
}
}
}
static void wasgo_SpriteBase3D_set_axis(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_axis(arg0);
}
}
}
static void wasgo_SpriteBase3D_set_billboard_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_billboard_mode(arg0);
}
}
}
static void wasgo_SpriteBase3D_set_centered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_centered(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteBase3D_set_draw_flag(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_flag(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_SpriteBase3D_set_flip_h(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_h(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteBase3D_set_flip_v(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_v(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteBase3D_set_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_modulate(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteBase3D_set_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteBase3D_set_opacity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_opacity(arg0);
}
}
}
static void wasgo_SpriteBase3D_set_pixel_size(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteBase3D *caller = (SpriteBase3D *) state->lookup_object(caller_id);
if(caller){
caller->set_pixel_size(arg0);
}
}
}
static WasGoId wasgo_SpriteFrames__get_animations(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_animations();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteFrames__get_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_frames();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SpriteFrames__set_animations(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->_set_animations(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_SpriteFrames__set_frames(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->_set_frames(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_SpriteFrames_add_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->add_animation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteFrames_add_frame(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->add_frame(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_SpriteFrames_clear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->clear(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteFrames_clear_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->clear_all();
}
}
}
static WasGoId wasgo_SpriteFrames_get_animation_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_animation_loop(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SpriteFrames_get_animation_names(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_animation_names();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_SpriteFrames_get_animation_speed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
return caller->get_animation_speed(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_SpriteFrames_get_frame(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_frame(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_SpriteFrames_get_frame_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
return caller->get_frame_count(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_SpriteFrames_has_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_animation(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SpriteFrames_remove_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->remove_animation(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_SpriteFrames_remove_frame(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->remove_frame(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_SpriteFrames_rename_animation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->rename_animation(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_SpriteFrames_set_animation_loop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->set_animation_loop(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_SpriteFrames_set_animation_speed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->set_animation_speed(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_SpriteFrames_set_frame(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SpriteFrames *caller = (SpriteFrames *) state->lookup_object(caller_id);
if(caller){
caller->set_frame(&(String *)lookup_object(arg0), arg1, &(Texture *)lookup_object(arg2));
}
}
}
static void wasgo_StaticBody__reload_physics_characteristics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
caller->_reload_physics_characteristics();
}
}
}
static float wasgo_StaticBody_get_bounce(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_bounce();
}
}
}
static WasGoId wasgo_StaticBody_get_constant_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_constant_angular_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StaticBody_get_constant_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_constant_linear_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_StaticBody_get_friction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_friction();
}
}
}
static WasGoId wasgo_StaticBody_get_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
PhysicsMaterial ret_value = caller->get_physics_material_override();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StaticBody_set_bounce(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
caller->set_bounce(arg0);
}
}
}
static void wasgo_StaticBody_set_constant_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
caller->set_constant_angular_velocity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_StaticBody_set_constant_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
caller->set_constant_linear_velocity(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_StaticBody_set_friction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
caller->set_friction(arg0);
}
}
}
static void wasgo_StaticBody_set_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody *caller = (StaticBody *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_material_override(&(PhysicsMaterial *)lookup_object(arg0));
}
}
}
static void wasgo_StaticBody2D__reload_physics_characteristics(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
caller->_reload_physics_characteristics();
}
}
}
static float wasgo_StaticBody2D_get_bounce(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_bounce();
}
}
}
static float wasgo_StaticBody2D_get_constant_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_constant_angular_velocity();
}
}
}
static WasGoId wasgo_StaticBody2D_get_constant_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_constant_linear_velocity();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_StaticBody2D_get_friction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
return caller->get_friction();
}
}
}
static WasGoId wasgo_StaticBody2D_get_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
PhysicsMaterial ret_value = caller->get_physics_material_override();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StaticBody2D_set_bounce(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_bounce(arg0);
}
}
}
static void wasgo_StaticBody2D_set_constant_angular_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_constant_angular_velocity(arg0);
}
}
}
static void wasgo_StaticBody2D_set_constant_linear_velocity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_constant_linear_velocity(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_StaticBody2D_set_friction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_friction(arg0);
}
}
}
static void wasgo_StaticBody2D_set_physics_material_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StaticBody2D *caller = (StaticBody2D *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_material_override(&(PhysicsMaterial *)lookup_object(arg0));
}
}
}
static int wasgo_StreamPeer_get_16(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_16();
}
}
}
static int wasgo_StreamPeer_get_32(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_32();
}
}
}
static int wasgo_StreamPeer_get_64(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_64();
}
}
}
static int wasgo_StreamPeer_get_8(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_8();
}
}
}
static int wasgo_StreamPeer_get_available_bytes(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_available_bytes();
}
}
}
static WasGoId wasgo_StreamPeer_get_data(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_data(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_StreamPeer_get_double(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_double();
}
}
}
static float wasgo_StreamPeer_get_float(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_float();
}
}
}
static WasGoId wasgo_StreamPeer_get_partial_data(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_partial_data(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamPeer_get_string(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_string(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_StreamPeer_get_u16(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_u16();
}
}
}
static int wasgo_StreamPeer_get_u32(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_u32();
}
}
}
static int wasgo_StreamPeer_get_u64(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_u64();
}
}
}
static int wasgo_StreamPeer_get_u8(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_u8();
}
}
}
static WasGoId wasgo_StreamPeer_get_utf8_string(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_utf8_string(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamPeer_get_var(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_var(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamPeer_is_big_endian_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_big_endian_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StreamPeer_put_16(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_16(arg0);
}
}
}
static void wasgo_StreamPeer_put_32(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_32(arg0);
}
}
}
static void wasgo_StreamPeer_put_64(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_64(arg0);
}
}
}
static void wasgo_StreamPeer_put_8(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_8(arg0);
}
}
}
static WasGoId wasgo_StreamPeer_put_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->put_data(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StreamPeer_put_double(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_double(arg0);
}
}
}
static void wasgo_StreamPeer_put_float(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_float(arg0);
}
}
}
static WasGoId wasgo_StreamPeer_put_partial_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->put_partial_data(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StreamPeer_put_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_string(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_StreamPeer_put_u16(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_u16(arg0);
}
}
}
static void wasgo_StreamPeer_put_u32(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_u32(arg0);
}
}
}
static void wasgo_StreamPeer_put_u64(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_u64(arg0);
}
}
}
static void wasgo_StreamPeer_put_u8(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_u8(arg0);
}
}
}
static void wasgo_StreamPeer_put_utf8_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_utf8_string(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_StreamPeer_put_var(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->put_var(&(Variant *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_StreamPeer_set_big_endian(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeer *caller = (StreamPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_big_endian(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_StreamPeerBuffer_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_StreamPeerBuffer_duplicate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
StreamPeerBuffer ret_value = caller->duplicate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamPeerBuffer_get_data_array(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_data_array();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_StreamPeerBuffer_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
return caller->get_position();
}
}
}
static int wasgo_StreamPeerBuffer_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
return caller->get_size();
}
}
}
static void wasgo_StreamPeerBuffer_resize(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
caller->resize(arg0);
}
}
}
static void wasgo_StreamPeerBuffer_seek(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
caller->seek(arg0);
}
}
}
static void wasgo_StreamPeerBuffer_set_data_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerBuffer *caller = (StreamPeerBuffer *) state->lookup_object(caller_id);
if(caller){
caller->set_data_array(&(PoolByteArray *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_StreamPeerSSL_accept_stream(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerSSL *caller = (StreamPeerSSL *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->accept_stream(&(StreamPeer *)lookup_object(arg0), &(CryptoKey *)lookup_object(arg1), &(X509Certificate *)lookup_object(arg2), &(X509Certificate *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamPeerSSL_connect_to_stream(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerSSL *caller = (StreamPeerSSL *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect_to_stream(&(StreamPeer *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(String *)lookup_object(arg2), &(X509Certificate *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StreamPeerSSL_disconnect_from_stream(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerSSL *caller = (StreamPeerSSL *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_from_stream();
}
}
}
static WasGoId wasgo_StreamPeerSSL_get_status(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerSSL *caller = (StreamPeerSSL *) state->lookup_object(caller_id);
if(caller){
enum.StreamPeerSSL::Status ret_value = caller->get_status();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamPeerSSL_is_blocking_handshake_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerSSL *caller = (StreamPeerSSL *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_blocking_handshake_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StreamPeerSSL_poll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerSSL *caller = (StreamPeerSSL *) state->lookup_object(caller_id);
if(caller){
caller->poll();
}
}
}
static void wasgo_StreamPeerSSL_set_blocking_handshake_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerSSL *caller = (StreamPeerSSL *) state->lookup_object(caller_id);
if(caller){
caller->set_blocking_handshake_enabled(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_StreamPeerTCP_connect_to_host(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerTCP *caller = (StreamPeerTCP *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect_to_host(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StreamPeerTCP_disconnect_from_host(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerTCP *caller = (StreamPeerTCP *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_from_host();
}
}
}
static WasGoId wasgo_StreamPeerTCP_get_connected_host(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerTCP *caller = (StreamPeerTCP *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_connected_host();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_StreamPeerTCP_get_connected_port(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerTCP *caller = (StreamPeerTCP *) state->lookup_object(caller_id);
if(caller){
return caller->get_connected_port();
}
}
}
static WasGoId wasgo_StreamPeerTCP_get_status(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerTCP *caller = (StreamPeerTCP *) state->lookup_object(caller_id);
if(caller){
enum.StreamPeerTCP::Status ret_value = caller->get_status();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamPeerTCP_is_connected_to_host(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerTCP *caller = (StreamPeerTCP *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_connected_to_host();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StreamPeerTCP_set_no_delay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamPeerTCP *caller = (StreamPeerTCP *) state->lookup_object(caller_id);
if(caller){
caller->set_no_delay(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_StreamTexture_get_load_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamTexture *caller = (StreamTexture *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_load_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StreamTexture_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StreamTexture *caller = (StreamTexture *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StyleBox_draw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
caller->draw(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_StyleBox_get_center_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_center_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBox_get_current_item_drawn(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
CanvasItem ret_value = caller->get_current_item_drawn();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_StyleBox_get_default_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
return caller->get_default_margin(arg0);
}
}
}
static float wasgo_StyleBox_get_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin(arg0);
}
}
}
static WasGoId wasgo_StyleBox_get_minimum_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_minimum_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBox_get_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StyleBox_set_default_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
caller->set_default_margin(arg0, arg1);
}
}
}
static WasGoId wasgo_StyleBox_test_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBox *caller = (StyleBox *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->test_mask(&(Vector2 *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_StyleBoxFlat_get_aa_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
return caller->get_aa_size();
}
}
}
static WasGoId wasgo_StyleBoxFlat_get_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_bg_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxFlat_get_border_blend(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_border_blend();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxFlat_get_border_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_border_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_StyleBoxFlat_get_border_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
return caller->get_border_width(arg0);
}
}
}
static int wasgo_StyleBoxFlat_get_border_width_min(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
return caller->get_border_width_min();
}
}
}
static int wasgo_StyleBoxFlat_get_corner_detail(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
return caller->get_corner_detail();
}
}
}
static int wasgo_StyleBoxFlat_get_corner_radius(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
return caller->get_corner_radius(arg0);
}
}
}
static float wasgo_StyleBoxFlat_get_expand_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
return caller->get_expand_margin(arg0);
}
}
}
static WasGoId wasgo_StyleBoxFlat_get_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_shadow_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxFlat_get_shadow_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_shadow_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_StyleBoxFlat_get_shadow_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
return caller->get_shadow_size();
}
}
}
static WasGoId wasgo_StyleBoxFlat_is_anti_aliased(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_anti_aliased();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxFlat_is_draw_center_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_draw_center_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StyleBoxFlat_set_aa_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_aa_size(arg0);
}
}
}
static void wasgo_StyleBoxFlat_set_anti_aliased(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_anti_aliased(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxFlat_set_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_bg_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxFlat_set_border_blend(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_border_blend(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxFlat_set_border_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_border_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxFlat_set_border_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_border_width(arg0, arg1);
}
}
}
static void wasgo_StyleBoxFlat_set_border_width_all(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_border_width_all(arg0);
}
}
}
static void wasgo_StyleBoxFlat_set_corner_detail(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_corner_detail(arg0);
}
}
}
static void wasgo_StyleBoxFlat_set_corner_radius(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_corner_radius(arg0, arg1);
}
}
}
static void wasgo_StyleBoxFlat_set_corner_radius_all(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_corner_radius_all(arg0);
}
}
}
static void wasgo_StyleBoxFlat_set_corner_radius_individual(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_corner_radius_individual(arg0, arg1, arg2, arg3);
}
}
}
static void wasgo_StyleBoxFlat_set_draw_center(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_center(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxFlat_set_expand_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_margin(arg0, arg1);
}
}
}
static void wasgo_StyleBoxFlat_set_expand_margin_all(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_margin_all(arg0);
}
}
}
static void wasgo_StyleBoxFlat_set_expand_margin_individual(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_margin_individual(arg0, arg1, arg2, arg3);
}
}
}
static void wasgo_StyleBoxFlat_set_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxFlat_set_shadow_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxFlat_set_shadow_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxFlat *caller = (StyleBoxFlat *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_size(arg0);
}
}
}
static WasGoId wasgo_StyleBoxLine_get_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_StyleBoxLine_get_grow_begin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
return caller->get_grow_begin();
}
}
}
static float wasgo_StyleBoxLine_get_grow_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
return caller->get_grow_end();
}
}
}
static int wasgo_StyleBoxLine_get_thickness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
return caller->get_thickness();
}
}
}
static WasGoId wasgo_StyleBoxLine_is_vertical(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_vertical();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StyleBoxLine_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxLine_set_grow_begin(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
caller->set_grow_begin(arg0);
}
}
}
static void wasgo_StyleBoxLine_set_grow_end(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
caller->set_grow_end(arg0);
}
}
}
static void wasgo_StyleBoxLine_set_thickness(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
caller->set_thickness(arg0);
}
}
}
static void wasgo_StyleBoxLine_set_vertical(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxLine *caller = (StyleBoxLine *) state->lookup_object(caller_id);
if(caller){
caller->set_vertical(&(bool *)lookup_object(arg0));
}
}
}
static float wasgo_StyleBoxTexture_get_expand_margin_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_expand_margin_size(arg0);
}
}
}
static WasGoId wasgo_StyleBoxTexture_get_h_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
enum.StyleBoxTexture::AxisStretchMode ret_value = caller->get_h_axis_stretch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_StyleBoxTexture_get_margin_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
return caller->get_margin_size(arg0);
}
}
}
static WasGoId wasgo_StyleBoxTexture_get_modulate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_modulate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxTexture_get_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_normal_map();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxTexture_get_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_region_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxTexture_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxTexture_get_v_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
enum.StyleBoxTexture::AxisStretchMode ret_value = caller->get_v_axis_stretch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_StyleBoxTexture_is_draw_center_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_draw_center_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_StyleBoxTexture_set_draw_center(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_center(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxTexture_set_expand_margin_all(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_margin_all(arg0);
}
}
}
static void wasgo_StyleBoxTexture_set_expand_margin_individual(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_margin_individual(arg0, arg1, arg2, arg3);
}
}
}
static void wasgo_StyleBoxTexture_set_expand_margin_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_margin_size(arg0, arg1);
}
}
}
static void wasgo_StyleBoxTexture_set_h_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_h_axis_stretch_mode(arg0);
}
}
}
static void wasgo_StyleBoxTexture_set_margin_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_margin_size(arg0, arg1);
}
}
}
static void wasgo_StyleBoxTexture_set_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_modulate(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxTexture_set_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_map(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxTexture_set_region_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_region_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxTexture_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_StyleBoxTexture_set_v_axis_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
StyleBoxTexture *caller = (StyleBoxTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_v_axis_stretch_mode(arg0);
}
}
}
static void wasgo_SurfaceTool_add_bones(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_bones(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_color(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_index(arg0);
}
}
}
static void wasgo_SurfaceTool_add_normal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_normal(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_smooth_group(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_smooth_group(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_tangent(&(Plane *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_triangle_fan(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_triangle_fan(&(PoolVector3Array *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1), &(PoolColorArray *)lookup_object(arg2), &(PoolVector2Array *)lookup_object(arg3), &(PoolVector3Array *)lookup_object(arg4), &(Array *)lookup_array(arg5));
}
}
}
static void wasgo_SurfaceTool_add_uv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_uv(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_uv2(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_uv2(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_vertex(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_vertex(&(Vector3 *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_add_weights(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->add_weights(&(PoolRealArray *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_append_from(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->append_from(&(Mesh *)lookup_object(arg0), arg1, &(Transform *)lookup_object(arg2));
}
}
}
static void wasgo_SurfaceTool_begin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->begin(arg0);
}
}
}
static void wasgo_SurfaceTool_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_SurfaceTool_commit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
ArrayMesh ret_value = caller->commit(&(ArrayMesh *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_SurfaceTool_commit_to_arrays(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->commit_to_arrays();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_SurfaceTool_create_from(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->create_from(&(Mesh *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_SurfaceTool_create_from_blend_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->create_from_blend_shape(&(Mesh *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2));
}
}
}
static void wasgo_SurfaceTool_deindex(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->deindex();
}
}
}
static void wasgo_SurfaceTool_generate_normals(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->generate_normals(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_SurfaceTool_generate_tangents(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->generate_tangents();
}
}
}
static void wasgo_SurfaceTool_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->index();
}
}
}
static void wasgo_SurfaceTool_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
SurfaceTool *caller = (SurfaceTool *) state->lookup_object(caller_id);
if(caller){
caller->set_material(&(Material *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_TCP_Server_is_connection_available(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TCP_Server *caller = (TCP_Server *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_connection_available();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TCP_Server_is_listening(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TCP_Server *caller = (TCP_Server *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_listening();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TCP_Server_listen(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TCP_Server *caller = (TCP_Server *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->listen(arg0, &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TCP_Server_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TCP_Server *caller = (TCP_Server *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static WasGoId wasgo_TCP_Server_take_connection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TCP_Server *caller = (TCP_Server *) state->lookup_object(caller_id);
if(caller){
StreamPeerTCP ret_value = caller->take_connection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TabContainer__child_renamed_callback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->_child_renamed_callback();
}
}
}
static void wasgo_TabContainer__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_TabContainer__on_mouse_exited(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->_on_mouse_exited();
}
}
}
static void wasgo_TabContainer__on_theme_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->_on_theme_changed();
}
}
}
static void wasgo_TabContainer__update_current_tab(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->_update_current_tab();
}
}
}
static WasGoId wasgo_TabContainer_are_tabs_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_tabs_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TabContainer_get_current_tab(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_current_tab();
}
}
}
static WasGoId wasgo_TabContainer_get_current_tab_control(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
Control ret_value = caller->get_current_tab_control();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TabContainer_get_drag_to_rearrange_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_drag_to_rearrange_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TabContainer_get_popup(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
Popup ret_value = caller->get_popup();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TabContainer_get_previous_tab(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_previous_tab();
}
}
}
static WasGoId wasgo_TabContainer_get_tab_align(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
enum.TabContainer::TabAlign ret_value = caller->get_tab_align();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TabContainer_get_tab_control(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
Control ret_value = caller->get_tab_control(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TabContainer_get_tab_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_tab_count();
}
}
}
static WasGoId wasgo_TabContainer_get_tab_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_tab_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TabContainer_get_tab_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_tab_icon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TabContainer_get_tab_title(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_tab_title(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TabContainer_get_tabs_rearrange_group(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_tabs_rearrange_group();
}
}
}
static WasGoId wasgo_TabContainer_get_use_hidden_tabs_for_min_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_use_hidden_tabs_for_min_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TabContainer_set_current_tab(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_current_tab(arg0);
}
}
}
static void wasgo_TabContainer_set_drag_to_rearrange_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_drag_to_rearrange_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TabContainer_set_popup(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_popup(&(Node *)lookup_object(arg0));
}
}
}
static void wasgo_TabContainer_set_tab_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_align(arg0);
}
}
}
static void wasgo_TabContainer_set_tab_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TabContainer_set_tab_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_icon(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_TabContainer_set_tab_title(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_title(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_TabContainer_set_tabs_rearrange_group(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_tabs_rearrange_group(arg0);
}
}
}
static void wasgo_TabContainer_set_tabs_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_tabs_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TabContainer_set_use_hidden_tabs_for_min_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TabContainer *caller = (TabContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_use_hidden_tabs_for_min_size(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tabs__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Tabs__on_mouse_exited(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->_on_mouse_exited();
}
}
}
static void wasgo_Tabs__update_hover(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->_update_hover();
}
}
}
static void wasgo_Tabs_add_tab(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->add_tab(&(String *)lookup_object(arg0), &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_Tabs_ensure_tab_visible(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->ensure_tab_visible(arg0);
}
}
}
static int wasgo_Tabs_get_current_tab(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
return caller->get_current_tab();
}
}
}
static WasGoId wasgo_Tabs_get_drag_to_rearrange_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_drag_to_rearrange_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tabs_get_offset_buttons_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_offset_buttons_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tabs_get_scrolling_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_scrolling_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tabs_get_select_with_rmb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_select_with_rmb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tabs_get_tab_align(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
enum.Tabs::TabAlign ret_value = caller->get_tab_align();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tabs_get_tab_close_display_policy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
enum.Tabs::CloseButtonDisplayPolicy ret_value = caller->get_tab_close_display_policy();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tabs_get_tab_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
return caller->get_tab_count();
}
}
}
static WasGoId wasgo_Tabs_get_tab_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_tab_disabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tabs_get_tab_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_tab_icon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tabs_get_tab_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
return caller->get_tab_offset();
}
}
}
static WasGoId wasgo_Tabs_get_tab_rect(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_tab_rect(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tabs_get_tab_title(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_tab_title(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tabs_get_tabs_rearrange_group(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
return caller->get_tabs_rearrange_group();
}
}
}
static void wasgo_Tabs_move_tab(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->move_tab(arg0, arg1);
}
}
}
static void wasgo_Tabs_remove_tab(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->remove_tab(arg0);
}
}
}
static void wasgo_Tabs_set_current_tab(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_current_tab(arg0);
}
}
}
static void wasgo_Tabs_set_drag_to_rearrange_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_drag_to_rearrange_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tabs_set_scrolling_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_scrolling_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tabs_set_select_with_rmb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_select_with_rmb(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tabs_set_tab_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_align(arg0);
}
}
}
static void wasgo_Tabs_set_tab_close_display_policy(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_close_display_policy(arg0);
}
}
}
static void wasgo_Tabs_set_tab_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_disabled(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Tabs_set_tab_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_icon(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_Tabs_set_tab_title(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_tab_title(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Tabs_set_tabs_rearrange_group(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tabs *caller = (Tabs *) state->lookup_object(caller_id);
if(caller){
caller->set_tabs_rearrange_group(arg0);
}
}
}
static void wasgo_TextEdit__click_selection_held(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_click_selection_held();
}
}
}
static void wasgo_TextEdit__cursor_changed_emit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_cursor_changed_emit();
}
}
}
static void wasgo_TextEdit__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit__push_current_op(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_push_current_op();
}
}
}
static void wasgo_TextEdit__scroll_moved(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_scroll_moved(arg0);
}
}
}
static void wasgo_TextEdit__text_changed_emit(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_text_changed_emit();
}
}
}
static void wasgo_TextEdit__toggle_draw_caret(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_toggle_draw_caret();
}
}
}
static void wasgo_TextEdit__update_wrap_at(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_update_wrap_at();
}
}
}
static void wasgo_TextEdit__v_scroll_input(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->_v_scroll_input();
}
}
}
static void wasgo_TextEdit_add_color_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->add_color_region(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Color *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_TextEdit_add_keyword_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->add_keyword_color(&(String *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_TextEdit_can_fold(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_fold(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextEdit_center_viewport_to_cursor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->center_viewport_to_cursor();
}
}
}
static void wasgo_TextEdit_clear_colors(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->clear_colors();
}
}
}
static void wasgo_TextEdit_clear_undo_history(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->clear_undo_history();
}
}
}
static void wasgo_TextEdit_copy(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->copy();
}
}
}
static WasGoId wasgo_TextEdit_cursor_get_blink_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->cursor_get_blink_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_TextEdit_cursor_get_blink_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->cursor_get_blink_speed();
}
}
}
static int wasgo_TextEdit_cursor_get_column(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->cursor_get_column();
}
}
}
static int wasgo_TextEdit_cursor_get_line(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->cursor_get_line();
}
}
}
static WasGoId wasgo_TextEdit_cursor_is_block_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->cursor_is_block_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextEdit_cursor_set_blink_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->cursor_set_blink_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_cursor_set_blink_speed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->cursor_set_blink_speed(arg0);
}
}
}
static void wasgo_TextEdit_cursor_set_block_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->cursor_set_block_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_cursor_set_column(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->cursor_set_column(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TextEdit_cursor_set_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->cursor_set_line(arg0, &(bool *)lookup_object(arg1), &(bool *)lookup_object(arg2), arg3);
}
}
}
static void wasgo_TextEdit_cut(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->cut();
}
}
}
static void wasgo_TextEdit_deselect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->deselect();
}
}
}
static void wasgo_TextEdit_draw_minimap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->draw_minimap(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_fold_all_lines(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->fold_all_lines();
}
}
}
static void wasgo_TextEdit_fold_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->fold_line(arg0);
}
}
}
static WasGoId wasgo_TextEdit_get_breakpoints(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_breakpoints();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TextEdit_get_h_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_h_scroll();
}
}
}
static WasGoId wasgo_TextEdit_get_keyword_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_keyword_color(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_get_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_line(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TextEdit_get_line_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_line_count();
}
}
}
static WasGoId wasgo_TextEdit_get_menu(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
PopupMenu ret_value = caller->get_menu();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TextEdit_get_minimap_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_minimap_width();
}
}
}
static int wasgo_TextEdit_get_selection_from_column(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_selection_from_column();
}
}
}
static int wasgo_TextEdit_get_selection_from_line(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_selection_from_line();
}
}
}
static WasGoId wasgo_TextEdit_get_selection_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_selection_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TextEdit_get_selection_to_column(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_selection_to_column();
}
}
}
static int wasgo_TextEdit_get_selection_to_line(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_selection_to_line();
}
}
}
static WasGoId wasgo_TextEdit_get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_TextEdit_get_v_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_scroll();
}
}
}
static float wasgo_TextEdit_get_v_scroll_speed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
return caller->get_v_scroll_speed();
}
}
}
static WasGoId wasgo_TextEdit_get_word_under_cursor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_word_under_cursor();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_has_keyword_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_keyword_color(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextEdit_insert_text_at_cursor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->insert_text_at_cursor(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_TextEdit_is_breakpoint_gutter_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_breakpoint_gutter_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_context_menu_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_context_menu_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_drawing_fold_gutter(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_drawing_fold_gutter();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_drawing_minimap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_drawing_minimap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_drawing_spaces(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_drawing_spaces();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_drawing_tabs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_drawing_tabs();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_folded(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_folded(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_hiding_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_hiding_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_highlight_all_occurrences_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_highlight_all_occurrences_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_highlight_current_line_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_highlight_current_line_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_line_hidden(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_line_hidden(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_overriding_selected_font_color(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_overriding_selected_font_color();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_readonly(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_readonly();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_right_click_moving_caret(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_right_click_moving_caret();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_selecting_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selecting_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_selection_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selection_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_shortcut_keys_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shortcut_keys_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_show_line_numbers_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_show_line_numbers_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_smooth_scroll_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_smooth_scroll_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_syntax_coloring_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_syntax_coloring_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextEdit_is_wrap_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_wrap_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextEdit_menu_option(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->menu_option(arg0);
}
}
}
static void wasgo_TextEdit_paste(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->paste();
}
}
}
static void wasgo_TextEdit_redo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->redo();
}
}
}
static void wasgo_TextEdit_remove_breakpoints(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->remove_breakpoints();
}
}
}
static WasGoId wasgo_TextEdit_search(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->search(&(String *)lookup_object(arg0), arg1, arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextEdit_select(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->select(arg0, arg1, arg2, arg3);
}
}
}
static void wasgo_TextEdit_select_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->select_all();
}
}
}
static void wasgo_TextEdit_set_breakpoint_gutter_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_breakpoint_gutter_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_context_menu_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_context_menu_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_draw_fold_gutter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_fold_gutter(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_draw_spaces(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_spaces(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_draw_tabs(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_draw_tabs(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_h_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_h_scroll(arg0);
}
}
}
static void wasgo_TextEdit_set_hiding_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_hiding_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_highlight_all_occurrences(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_highlight_all_occurrences(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_highlight_current_line(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_highlight_current_line(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_line_as_hidden(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_line_as_hidden(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TextEdit_set_minimap_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_minimap_width(arg0);
}
}
}
static void wasgo_TextEdit_set_override_selected_font_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_override_selected_font_color(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_readonly(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_readonly(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_right_click_moves_caret(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_right_click_moves_caret(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_selecting_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_selecting_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_shortcut_keys_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_shortcut_keys_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_show_line_numbers(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_show_line_numbers(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_smooth_scroll_enable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_smooth_scroll_enable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_syntax_coloring(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_syntax_coloring(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_text(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_set_v_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_v_scroll(arg0);
}
}
}
static void wasgo_TextEdit_set_v_scroll_speed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_v_scroll_speed(arg0);
}
}
}
static void wasgo_TextEdit_set_wrap_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->set_wrap_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextEdit_toggle_fold_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->toggle_fold_line(arg0);
}
}
}
static void wasgo_TextEdit_undo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->undo();
}
}
}
static void wasgo_TextEdit_unfold_line(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->unfold_line(arg0);
}
}
}
static void wasgo_TextEdit_unhide_all_lines(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextEdit *caller = (TextEdit *) state->lookup_object(caller_id);
if(caller){
caller->unhide_all_lines();
}
}
}
static void wasgo_Texture_draw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
caller->draw(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Color *)lookup_object(arg2), &(bool *)lookup_object(arg3), &(Texture *)lookup_object(arg4));
}
}
}
static void wasgo_Texture_draw_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
caller->draw_rect(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(Color *)lookup_object(arg3), &(bool *)lookup_object(arg4), &(Texture *)lookup_object(arg5));
}
}
}
static void wasgo_Texture_draw_rect_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
caller->draw_rect_region(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(Rect2 *)lookup_object(arg2), &(Color *)lookup_object(arg3), &(bool *)lookup_object(arg4), &(Texture *)lookup_object(arg5), &(bool *)lookup_object(arg6));
}
}
}
static WasGoId wasgo_Texture_get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Texture_get_flags(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
return caller->get_flags();
}
}
}
static int wasgo_Texture_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static WasGoId wasgo_Texture_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Texture_get_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
return caller->get_width();
}
}
}
static WasGoId wasgo_Texture_has_alpha(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_alpha();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Texture_set_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Texture *caller = (Texture *) state->lookup_object(caller_id);
if(caller){
caller->set_flags(arg0);
}
}
}
static WasGoId wasgo_TextureButton_get_click_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
BitMap ret_value = caller->get_click_mask();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureButton_get_disabled_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_disabled_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureButton_get_expand(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_expand();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureButton_get_focused_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_focused_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureButton_get_hover_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_hover_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureButton_get_normal_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_normal_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureButton_get_pressed_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_pressed_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureButton_get_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
enum.TextureButton::StretchMode ret_value = caller->get_stretch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextureButton_set_click_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_click_mask(&(BitMap *)lookup_object(arg0));
}
}
}
static void wasgo_TextureButton_set_disabled_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_disabled_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureButton_set_expand(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_expand(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextureButton_set_focused_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_focused_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureButton_set_hover_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_hover_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureButton_set_normal_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_normal_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureButton_set_pressed_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_pressed_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureButton_set_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureButton *caller = (TextureButton *) state->lookup_object(caller_id);
if(caller){
caller->set_stretch_mode(arg0);
}
}
}
static WasGoId wasgo_TextureLayered__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextureLayered__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_TextureLayered_create(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
caller->create(arg0, arg1, arg2, arg3, arg4);
}
}
}
static int wasgo_TextureLayered_get_depth(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
return caller->get_depth();
}
}
}
static int wasgo_TextureLayered_get_flags(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
return caller->get_flags();
}
}
}
static WasGoId wasgo_TextureLayered_get_format(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
enum.Image::Format ret_value = caller->get_format();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TextureLayered_get_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
return caller->get_height();
}
}
}
static WasGoId wasgo_TextureLayered_get_layer_data(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->get_layer_data(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TextureLayered_get_width(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
return caller->get_width();
}
}
}
static void wasgo_TextureLayered_set_data_partial(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
caller->set_data_partial(&(Image *)lookup_object(arg0), arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_TextureLayered_set_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
caller->set_flags(arg0);
}
}
}
static void wasgo_TextureLayered_set_layer_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureLayered *caller = (TextureLayered *) state->lookup_object(caller_id);
if(caller){
caller->set_layer_data(&(Image *)lookup_object(arg0), arg1);
}
}
}
static float wasgo_TextureProgress_get_fill_degrees(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
return caller->get_fill_degrees();
}
}
}
static int wasgo_TextureProgress_get_fill_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
return caller->get_fill_mode();
}
}
}
static WasGoId wasgo_TextureProgress_get_nine_patch_stretch(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_nine_patch_stretch();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureProgress_get_over_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_over_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureProgress_get_progress_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_progress_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureProgress_get_radial_center_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_radial_center_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_TextureProgress_get_radial_initial_angle(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
return caller->get_radial_initial_angle();
}
}
}
static int wasgo_TextureProgress_get_stretch_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
return caller->get_stretch_margin(arg0);
}
}
}
static WasGoId wasgo_TextureProgress_get_tint_over(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_tint_over();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureProgress_get_tint_progress(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_tint_progress();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureProgress_get_tint_under(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_tint_under();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureProgress_get_under_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_under_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextureProgress_set_fill_degrees(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_fill_degrees(arg0);
}
}
}
static void wasgo_TextureProgress_set_fill_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_fill_mode(arg0);
}
}
}
static void wasgo_TextureProgress_set_nine_patch_stretch(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_nine_patch_stretch(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextureProgress_set_over_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_over_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureProgress_set_progress_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_progress_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureProgress_set_radial_center_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_radial_center_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_TextureProgress_set_radial_initial_angle(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_radial_initial_angle(arg0);
}
}
}
static void wasgo_TextureProgress_set_stretch_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_stretch_margin(arg0, arg1);
}
}
}
static void wasgo_TextureProgress_set_tint_over(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_tint_over(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_TextureProgress_set_tint_progress(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_tint_progress(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_TextureProgress_set_tint_under(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_tint_under(&(Color *)lookup_object(arg0));
}
}
}
static void wasgo_TextureProgress_set_under_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureProgress *caller = (TextureProgress *) state->lookup_object(caller_id);
if(caller){
caller->set_under_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TextureRect__texture_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
caller->_texture_changed();
}
}
}
static WasGoId wasgo_TextureRect_get_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
enum.TextureRect::StretchMode ret_value = caller->get_stretch_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureRect_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureRect_has_expand(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_expand();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureRect_is_flipped_h(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_h();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TextureRect_is_flipped_v(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_flipped_v();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TextureRect_set_expand(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
caller->set_expand(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextureRect_set_flip_h(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_h(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextureRect_set_flip_v(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
caller->set_flip_v(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TextureRect_set_stretch_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
caller->set_stretch_mode(arg0);
}
}
}
static void wasgo_TextureRect_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TextureRect *caller = (TextureRect *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_Theme__emit_theme_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->_emit_theme_changed();
}
}
}
static void wasgo_Theme_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_Theme_clear_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->clear_color(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Theme_clear_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->clear_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Theme_clear_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->clear_font(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Theme_clear_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->clear_icon(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Theme_clear_stylebox(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->clear_stylebox(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Theme_copy_default_theme(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->copy_default_theme();
}
}
}
static void wasgo_Theme_copy_theme(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->copy_theme(&(Theme *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Theme_get_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_color(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_color_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_color_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Theme_get_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
return caller->get_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_Theme_get_constant_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_constant_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_default_font(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
Font ret_value = caller->get_default_font();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
Font ret_value = caller->get_font(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_font_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_font_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_icon(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_icon_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_icon_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_stylebox(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
StyleBox ret_value = caller->get_stylebox(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_stylebox_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_stylebox_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_stylebox_types(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_stylebox_types();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_get_type_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_type_list(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_has_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_color(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_has_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_has_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_font(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_has_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_icon(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Theme_has_stylebox(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_stylebox(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Theme_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->set_color(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Color *)lookup_object(arg2));
}
}
}
static void wasgo_Theme_set_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->set_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_Theme_set_default_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->set_default_font(&(Font *)lookup_object(arg0));
}
}
}
static void wasgo_Theme_set_font(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->set_font(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Font *)lookup_object(arg2));
}
}
}
static void wasgo_Theme_set_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->set_icon(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Texture *)lookup_object(arg2));
}
}
}
static void wasgo_Theme_set_stylebox(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Theme *caller = (Theme *) state->lookup_object(caller_id);
if(caller){
caller->set_stylebox(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(StyleBox *)lookup_object(arg2));
}
}
}
static void wasgo_TileMap__clear_quadrants(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->_clear_quadrants();
}
}
}
static int wasgo_TileMap__get_old_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->_get_old_cell_size();
}
}
}
static WasGoId wasgo_TileMap__get_tile_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->_get_tile_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TileMap__recreate_quadrants(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->_recreate_quadrants();
}
}
}
static void wasgo_TileMap__set_celld(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->_set_celld(&(Vector2 *)lookup_object(arg0), &(Dictionary *)lookup_dictionary(arg1));
}
}
}
static void wasgo_TileMap__set_old_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->_set_old_cell_size(arg0);
}
}
}
static void wasgo_TileMap__set_tile_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->_set_tile_data(&(PoolIntArray *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_TileMap_fix_invalid_tiles(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->fix_invalid_tiles();
}
}
}
static int wasgo_TileMap_get_cell(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_cell(arg0, arg1);
}
}
}
static WasGoId wasgo_TileMap_get_cell_autotile_coord(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_cell_autotile_coord(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_cell_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TileMap_get_cellv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_cellv(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_TileMap_get_clip_uv(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_clip_uv();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_TileMap_get_collision_bounce(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_bounce();
}
}
}
static float wasgo_TileMap_get_collision_friction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_friction();
}
}
}
static int wasgo_TileMap_get_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_layer();
}
}
}
static WasGoId wasgo_TileMap_get_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_layer_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TileMap_get_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_collision_mask();
}
}
}
static WasGoId wasgo_TileMap_get_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_collision_use_kinematic(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_use_kinematic();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_collision_use_parent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_collision_use_parent();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_custom_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_custom_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_half_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
enum.TileMap::HalfOffset ret_value = caller->get_half_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
enum.TileMap::Mode ret_value = caller->get_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TileMap_get_occluder_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_occluder_light_mask();
}
}
}
static int wasgo_TileMap_get_quadrant_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
return caller->get_quadrant_size();
}
}
}
static WasGoId wasgo_TileMap_get_tile_origin(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
enum.TileMap::TileOrigin ret_value = caller->get_tile_origin();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_tileset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
TileSet ret_value = caller->get_tileset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_used_cells(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_used_cells();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_used_cells_by_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_used_cells_by_id(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_get_used_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_used_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_is_cell_transposed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_cell_transposed(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_is_cell_x_flipped(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_cell_x_flipped(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_is_cell_y_flipped(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_cell_y_flipped(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_is_centered_textures_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_centered_textures_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_is_compatibility_mode_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_compatibility_mode_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_is_y_sort_mode_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_y_sort_mode_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileMap_map_to_world(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->map_to_world(&(Vector2 *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TileMap_set_cell(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_cell(arg0, arg1, arg2, &(bool *)lookup_object(arg3), &(bool *)lookup_object(arg4), &(bool *)lookup_object(arg5), &(Vector2 *)lookup_object(arg6));
}
}
}
static void wasgo_TileMap_set_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_cellv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_cellv(&(Vector2 *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3), &(bool *)lookup_object(arg4));
}
}
}
static void wasgo_TileMap_set_centered_textures(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_centered_textures(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_clip_uv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_clip_uv(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_collision_bounce(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_bounce(arg0);
}
}
}
static void wasgo_TileMap_set_collision_friction(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_friction(arg0);
}
}
}
static void wasgo_TileMap_set_collision_layer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer(arg0);
}
}
}
static void wasgo_TileMap_set_collision_layer_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_layer_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TileMap_set_collision_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask(arg0);
}
}
}
static void wasgo_TileMap_set_collision_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TileMap_set_collision_use_kinematic(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_use_kinematic(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_collision_use_parent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_collision_use_parent(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_compatibility_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_compatibility_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_custom_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_half_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_half_offset(arg0);
}
}
}
static void wasgo_TileMap_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_TileMap_set_occluder_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_occluder_light_mask(arg0);
}
}
}
static void wasgo_TileMap_set_quadrant_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_quadrant_size(arg0);
}
}
}
static void wasgo_TileMap_set_tile_origin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_tile_origin(arg0);
}
}
}
static void wasgo_TileMap_set_tileset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_tileset(&(TileSet *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_set_y_sort_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->set_y_sort_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_update_bitmask_area(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->update_bitmask_area(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_TileMap_update_bitmask_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->update_bitmask_region(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileMap_update_dirty_quadrants(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
caller->update_dirty_quadrants();
}
}
}
static WasGoId wasgo_TileMap_world_to_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileMap *caller = (TileMap *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->world_to_map(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet__forward_atlas_subtile_selection(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->_forward_atlas_subtile_selection(arg0, &(Object *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet__forward_subtile_selection(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->_forward_subtile_selection(arg0, arg1, &(Object *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet__is_tile_bound(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_is_tile_bound(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TileSet_autotile_clear_bitmask_map(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_clear_bitmask_map(arg0);
}
}
}
static int wasgo_TileSet_autotile_get_bitmask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->autotile_get_bitmask(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_TileSet_autotile_get_bitmask_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
enum.TileSet::BitmaskMode ret_value = caller->autotile_get_bitmask_mode(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_autotile_get_icon_coordinate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->autotile_get_icon_coordinate(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_autotile_get_light_occluder(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
OccluderPolygon2D ret_value = caller->autotile_get_light_occluder(arg0, &(Vector2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_autotile_get_navigation_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
NavigationPolygon ret_value = caller->autotile_get_navigation_polygon(arg0, &(Vector2 *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_autotile_get_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->autotile_get_size(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TileSet_autotile_get_spacing(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->autotile_get_spacing(arg0);
}
}
}
static int wasgo_TileSet_autotile_get_subtile_priority(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->autotile_get_subtile_priority(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static int wasgo_TileSet_autotile_get_z_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->autotile_get_z_index(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_autotile_set_bitmask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_bitmask(arg0, &(Vector2 *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_TileSet_autotile_set_bitmask_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_bitmask_mode(arg0, arg1);
}
}
}
static void wasgo_TileSet_autotile_set_icon_coordinate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_icon_coordinate(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_autotile_set_light_occluder(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_light_occluder(arg0, &(OccluderPolygon2D *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_TileSet_autotile_set_navigation_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_navigation_polygon(arg0, &(NavigationPolygon *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_TileSet_autotile_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_size(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_autotile_set_spacing(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_spacing(arg0, arg1);
}
}
}
static void wasgo_TileSet_autotile_set_subtile_priority(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_subtile_priority(arg0, &(Vector2 *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_TileSet_autotile_set_z_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->autotile_set_z_index(arg0, &(Vector2 *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_TileSet_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static void wasgo_TileSet_create_tile(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->create_tile(arg0);
}
}
}
static int wasgo_TileSet_find_tile_by_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->find_tile_by_name(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_TileSet_get_last_unused_tile_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->get_last_unused_tile_id();
}
}
}
static WasGoId wasgo_TileSet_get_tiles_ids(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_tiles_ids();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TileSet_remove_tile(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->remove_tile(arg0);
}
}
}
static void wasgo_TileSet_tile_add_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_add_shape(arg0, &(Shape2D *)lookup_object(arg1), &(Transform2D *)lookup_object(arg2), &(bool *)lookup_object(arg3), &(Vector2 *)lookup_object(arg4));
}
}
}
static WasGoId wasgo_TileSet_tile_get_light_occluder(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
OccluderPolygon2D ret_value = caller->tile_get_light_occluder(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_material(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
ShaderMaterial ret_value = caller->tile_get_material(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->tile_get_modulate(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->tile_get_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_navigation_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
NavigationPolygon ret_value = caller->tile_get_navigation_polygon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_navigation_polygon_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->tile_get_navigation_polygon_offset(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->tile_get_normal_map(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_occluder_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->tile_get_occluder_offset(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_region(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->tile_get_region(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Shape2D ret_value = caller->tile_get_shape(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TileSet_tile_get_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->tile_get_shape_count(arg0);
}
}
}
static WasGoId wasgo_TileSet_tile_get_shape_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->tile_get_shape_offset(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_shape_one_way(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->tile_get_shape_one_way(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_TileSet_tile_get_shape_one_way_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->tile_get_shape_one_way_margin(arg0, arg1);
}
}
}
static WasGoId wasgo_TileSet_tile_get_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->tile_get_shape_transform(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->tile_get_shapes(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->tile_get_texture(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_texture_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->tile_get_texture_offset(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TileSet_tile_get_tile_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
enum.TileSet::TileMode ret_value = caller->tile_get_tile_mode(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TileSet_tile_get_z_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
return caller->tile_get_z_index(arg0);
}
}
}
static void wasgo_TileSet_tile_set_light_occluder(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_light_occluder(arg0, &(OccluderPolygon2D *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_material(arg0, &(ShaderMaterial *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_modulate(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_navigation_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_navigation_polygon(arg0, &(NavigationPolygon *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_navigation_polygon_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_navigation_polygon_offset(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_normal_map(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_normal_map(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_occluder_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_occluder_offset(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_region(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_region(arg0, &(Rect2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_shape(arg0, arg1, &(Shape2D *)lookup_object(arg2));
}
}
}
static void wasgo_TileSet_tile_set_shape_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_shape_offset(arg0, arg1, &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_TileSet_tile_set_shape_one_way(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_shape_one_way(arg0, arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_TileSet_tile_set_shape_one_way_margin(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_shape_one_way_margin(arg0, arg1, arg2);
}
}
}
static void wasgo_TileSet_tile_set_shape_transform(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_shape_transform(arg0, arg1, &(Transform2D *)lookup_object(arg2));
}
}
}
static void wasgo_TileSet_tile_set_shapes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_shapes(arg0, &(Array *)lookup_array(arg1));
}
}
}
static void wasgo_TileSet_tile_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_texture(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_texture_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_texture_offset(arg0, &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_TileSet_tile_set_tile_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_tile_mode(arg0, arg1);
}
}
}
static void wasgo_TileSet_tile_set_z_index(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TileSet *caller = (TileSet *) state->lookup_object(caller_id);
if(caller){
caller->tile_set_z_index(arg0, arg1);
}
}
}
static float wasgo_Timer_get_time_left(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
return caller->get_time_left();
}
}
}
static WasGoId wasgo_Timer_get_timer_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
enum.Timer::TimerProcessMode ret_value = caller->get_timer_process_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Timer_get_wait_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
return caller->get_wait_time();
}
}
}
static WasGoId wasgo_Timer_has_autostart(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_autostart();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Timer_is_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_one_shot();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Timer_is_paused(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_paused();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Timer_is_stopped(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_stopped();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Timer_set_autostart(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
caller->set_autostart(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Timer_set_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
caller->set_one_shot(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Timer_set_paused(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
caller->set_paused(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Timer_set_timer_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
caller->set_timer_process_mode(arg0);
}
}
}
static void wasgo_Timer_set_wait_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
caller->set_wait_time(arg0);
}
}
}
static void wasgo_Timer_start(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
caller->start(arg0);
}
}
}
static void wasgo_Timer_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Timer *caller = (Timer *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static void wasgo_TouchScreenButton__input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_TouchScreenButton_get_action(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_action();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_get_bitmask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
BitMap ret_value = caller->get_bitmask();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_get_shape(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
Shape2D ret_value = caller->get_shape();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_get_texture_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture_pressed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_get_visibility_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
enum.TouchScreenButton::VisibilityMode ret_value = caller->get_visibility_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_is_passby_press_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_passby_press_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_is_pressed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_pressed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_is_shape_centered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shape_centered();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TouchScreenButton_is_shape_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_shape_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TouchScreenButton_set_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_action(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_bitmask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_bitmask(&(BitMap *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_passby_press(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_passby_press(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_shape(&(Shape2D *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_shape_centered(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_shape_centered(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_shape_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_shape_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_texture_pressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_pressed(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_TouchScreenButton_set_visibility_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TouchScreenButton *caller = (TouchScreenButton *) state->lookup_object(caller_id);
if(caller){
caller->set_visibility_mode(arg0);
}
}
}
static WasGoId wasgo_Translation__get_messages(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->_get_messages();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Translation__set_messages(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
caller->_set_messages(&(PoolStringArray *)lookup_object(arg0));
}
}
}
static void wasgo_Translation_add_message(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
caller->add_message(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Translation_erase_message(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
caller->erase_message(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Translation_get_locale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_locale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Translation_get_message(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_message(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Translation_get_message_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
return caller->get_message_count();
}
}
}
static WasGoId wasgo_Translation_get_message_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_message_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Translation_set_locale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Translation *caller = (Translation *) state->lookup_object(caller_id);
if(caller){
caller->set_locale(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_TranslationServer_add_translation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
caller->add_translation(&(Translation *)lookup_object(arg0));
}
}
}
static void wasgo_TranslationServer_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_TranslationServer_get_loaded_locales(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_loaded_locales();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TranslationServer_get_locale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_locale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TranslationServer_get_locale_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_locale_name(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TranslationServer_remove_translation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
caller->remove_translation(&(Translation *)lookup_object(arg0));
}
}
}
static void wasgo_TranslationServer_set_locale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
caller->set_locale(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_TranslationServer_translate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TranslationServer *caller = (TranslationServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->translate(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Tree__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Tree__popup_select(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->_popup_select(arg0);
}
}
}
static void wasgo_Tree__range_click_timeout(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->_range_click_timeout();
}
}
}
static void wasgo_Tree__scroll_moved(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->_scroll_moved(arg0);
}
}
}
static void wasgo_Tree__text_editor_enter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->_text_editor_enter(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Tree__text_editor_modal_close(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->_text_editor_modal_close();
}
}
}
static void wasgo_Tree__value_editor_changed(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->_value_editor_changed(arg0);
}
}
}
static WasGoId wasgo_Tree_are_column_titles_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->are_column_titles_visible();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Tree_clear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->clear();
}
}
}
static WasGoId wasgo_Tree_create_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->create_item(&(Object *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Tree_ensure_cursor_is_visible(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->ensure_cursor_is_visible();
}
}
}
static WasGoId wasgo_Tree_get_allow_reselect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_allow_reselect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tree_get_allow_rmb_select(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_allow_rmb_select();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tree_get_column_at_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_column_at_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Tree_get_column_title(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_column_title(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tree_get_column_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_column_width(arg0);
}
}
}
static int wasgo_Tree_get_columns(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_columns();
}
}
}
static WasGoId wasgo_Tree_get_custom_popup_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_custom_popup_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tree_get_drop_mode_flags(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_drop_mode_flags();
}
}
}
static int wasgo_Tree_get_drop_section_at_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_drop_section_at_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Tree_get_edited(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_edited();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tree_get_edited_column(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_edited_column();
}
}
}
static WasGoId wasgo_Tree_get_item_area_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_item_area_rect(&(Object *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tree_get_item_at_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_item_at_position(&(Vector2 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tree_get_next_selected(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_next_selected(&(Object *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tree_get_pressed_button(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_pressed_button();
}
}
}
static WasGoId wasgo_Tree_get_root(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_root();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tree_get_scroll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_scroll();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tree_get_select_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
enum.Tree::SelectMode ret_value = caller->get_select_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tree_get_selected(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_selected();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Tree_get_selected_column(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
return caller->get_selected_column();
}
}
}
static WasGoId wasgo_Tree_is_folding_hidden(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_folding_hidden();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tree_is_root_hidden(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_root_hidden();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Tree_set_allow_reselect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_reselect(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tree_set_allow_rmb_select(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_allow_rmb_select(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tree_set_column_expand(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_column_expand(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_Tree_set_column_min_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_column_min_width(arg0, arg1);
}
}
}
static void wasgo_Tree_set_column_title(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_column_title(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Tree_set_column_titles_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_column_titles_visible(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tree_set_columns(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_columns(arg0);
}
}
}
static void wasgo_Tree_set_drop_mode_flags(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_drop_mode_flags(arg0);
}
}
}
static void wasgo_Tree_set_hide_folding(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_hide_folding(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tree_set_hide_root(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_hide_root(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tree_set_select_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tree *caller = (Tree *) state->lookup_object(caller_id);
if(caller){
caller->set_select_mode(arg0);
}
}
}
static void wasgo_TreeItem_add_button(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->add_button(arg0, &(Texture *)lookup_object(arg1), arg2, &(bool *)lookup_object(arg3), &(String *)lookup_object(arg4));
}
}
}
static WasGoId wasgo_TreeItem_call_recursive(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->call_recursive(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TreeItem_clear_custom_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->clear_custom_bg_color(arg0);
}
}
}
static void wasgo_TreeItem_clear_custom_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->clear_custom_color(arg0);
}
}
}
static void wasgo_TreeItem_deselect(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->deselect(arg0);
}
}
}
static void wasgo_TreeItem_erase_button(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->erase_button(arg0, arg1);
}
}
}
static WasGoId wasgo_TreeItem_get_button(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_button(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TreeItem_get_button_count(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
return caller->get_button_count(arg0);
}
}
}
static WasGoId wasgo_TreeItem_get_button_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_button_tooltip(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_cell_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
enum.TreeItem::TreeCellMode ret_value = caller->get_cell_mode(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_children(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_children();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_custom_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_custom_bg_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_custom_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_custom_color(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TreeItem_get_custom_minimum_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
return caller->get_custom_minimum_height();
}
}
}
static WasGoId wasgo_TreeItem_get_expand_right(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_expand_right(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_icon(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_TreeItem_get_icon_max_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
return caller->get_icon_max_width(arg0);
}
}
}
static WasGoId wasgo_TreeItem_get_icon_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_icon_modulate(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_icon_region(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_icon_region(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_metadata(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_next(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_next();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_next_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_next_visible(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_parent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_parent();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_prev(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_prev();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_prev_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
TreeItem ret_value = caller->get_prev_visible(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_TreeItem_get_range(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
return caller->get_range(arg0);
}
}
}
static WasGoId wasgo_TreeItem_get_range_config(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_range_config(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_text(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_text_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
enum.TreeItem::TextAlign ret_value = caller->get_text_align(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_get_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_tooltip(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_button_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_button_disabled(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_checked(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_checked(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_collapsed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_collapsed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_custom_set_as_button(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_custom_set_as_button(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_editable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editable(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_folding_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_folding_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_selectable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selectable(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_TreeItem_is_selected(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_selected(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_TreeItem_move_to_bottom(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->move_to_bottom();
}
}
}
static void wasgo_TreeItem_move_to_top(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->move_to_top();
}
}
}
static void wasgo_TreeItem_remove_child(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->remove_child(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_TreeItem_select(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->select(arg0);
}
}
}
static void wasgo_TreeItem_set_button(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_button(arg0, arg1, &(Texture *)lookup_object(arg2));
}
}
}
static void wasgo_TreeItem_set_button_disabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_button_disabled(arg0, arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_TreeItem_set_cell_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_cell_mode(arg0, arg1);
}
}
}
static void wasgo_TreeItem_set_checked(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_checked(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_collapsed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_collapsed(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TreeItem_set_custom_as_button(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_as_button(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_custom_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_bg_color(arg0, &(Color *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_TreeItem_set_custom_color(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_color(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_custom_draw(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_draw(arg0, &(Object *)lookup_object(arg1), &(String *)lookup_object(arg2));
}
}
}
static void wasgo_TreeItem_set_custom_minimum_height(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_custom_minimum_height(arg0);
}
}
}
static void wasgo_TreeItem_set_disable_folding(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_folding(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_TreeItem_set_editable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_editable(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_expand_right(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_expand_right(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_icon(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_icon(arg0, &(Texture *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_icon_max_width(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_icon_max_width(arg0, arg1);
}
}
}
static void wasgo_TreeItem_set_icon_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_icon_modulate(arg0, &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_icon_region(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_icon_region(arg0, &(Rect2 *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_metadata(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_metadata(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_range(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_range(arg0, arg1);
}
}
}
static void wasgo_TreeItem_set_range_config(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, float arg1, float arg2, float arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_range_config(arg0, arg1, arg2, arg3, &(bool *)lookup_object(arg4));
}
}
}
static void wasgo_TreeItem_set_selectable(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_selectable(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_text(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_TreeItem_set_text_align(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_text_align(arg0, arg1);
}
}
}
static void wasgo_TreeItem_set_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
TreeItem *caller = (TreeItem *) state->lookup_object(caller_id);
if(caller){
caller->set_tooltip(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_Tween__remove_by_uid(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
caller->_remove_by_uid(arg0);
}
}
}
static WasGoId wasgo_Tween_follow_method(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, float arg5, int arg6, int arg7, float arg8){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->follow_method(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2), &(Object *)lookup_object(arg3), &(String *)lookup_object(arg4), arg5, arg6, arg7, arg8);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_follow_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, float arg5, int arg6, int arg7, float arg8){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->follow_property(&(Object *)lookup_object(arg0), &(NodePath *)lookup_object(arg1), &(Variant *)lookup_object(arg2), &(Object *)lookup_object(arg3), &(NodePath *)lookup_object(arg4), arg5, arg6, arg7, arg8);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Tween_get_runtime(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
return caller->get_runtime();
}
}
}
static float wasgo_Tween_get_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
return caller->get_speed_scale();
}
}
}
static WasGoId wasgo_Tween_get_tween_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
enum.Tween::TweenProcessMode ret_value = caller->get_tween_process_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_interpolate_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6, WasGoID arg7){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->interpolate_callback(&(Object *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3), &(Variant *)lookup_object(arg4), &(Variant *)lookup_object(arg5), &(Variant *)lookup_object(arg6), &(Variant *)lookup_object(arg7));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_interpolate_deferred_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6, WasGoID arg7){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->interpolate_deferred_callback(&(Object *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), &(Variant *)lookup_object(arg3), &(Variant *)lookup_object(arg4), &(Variant *)lookup_object(arg5), &(Variant *)lookup_object(arg6), &(Variant *)lookup_object(arg7));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_interpolate_method(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, float arg4, int arg5, int arg6, float arg7){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->interpolate_method(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2), &(Variant *)lookup_object(arg3), arg4, arg5, arg6, arg7);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_interpolate_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, float arg4, int arg5, int arg6, float arg7){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->interpolate_property(&(Object *)lookup_object(arg0), &(NodePath *)lookup_object(arg1), &(Variant *)lookup_object(arg2), &(Variant *)lookup_object(arg3), arg4, arg5, arg6, arg7);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_is_repeat(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_repeat();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_remove(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->remove(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_remove_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->remove_all();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_reset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->reset(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_reset_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->reset_all();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_resume(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->resume(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_resume_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->resume_all();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_seek(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->seek(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Tween_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
caller->set_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tween_set_repeat(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
caller->set_repeat(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Tween_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
caller->set_speed_scale(arg0);
}
}
}
static void wasgo_Tween_set_tween_process_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
caller->set_tween_process_mode(arg0);
}
}
}
static WasGoId wasgo_Tween_start(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->start();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_stop(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->stop(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_stop_all(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->stop_all();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_targeting_method(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, float arg5, int arg6, int arg7, float arg8){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->targeting_method(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Object *)lookup_object(arg2), &(String *)lookup_object(arg3), &(Variant *)lookup_object(arg4), arg5, arg6, arg7, arg8);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Tween_targeting_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, float arg5, int arg6, int arg7, float arg8){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->targeting_property(&(Object *)lookup_object(arg0), &(NodePath *)lookup_object(arg1), &(Object *)lookup_object(arg2), &(NodePath *)lookup_object(arg3), &(Variant *)lookup_object(arg4), arg5, arg6, arg7, arg8);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_Tween_tell(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Tween *caller = (Tween *) state->lookup_object(caller_id);
if(caller){
return caller->tell();
}
}
}
static void wasgo_UPNP_add_device(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
caller->add_device(&(UPNPDevice *)lookup_object(arg0));
}
}
}
static int wasgo_UPNP_add_port_mapping(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, WasGoID arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
return caller->add_port_mapping(arg0, arg1, &(String *)lookup_object(arg2), &(String *)lookup_object(arg3), arg4);
}
}
}
static void wasgo_UPNP_clear_devices(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
caller->clear_devices();
}
}
}
static int wasgo_UPNP_delete_port_mapping(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
return caller->delete_port_mapping(arg0, &(String *)lookup_object(arg1));
}
}
}
static int wasgo_UPNP_discover(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
return caller->discover(arg0, arg1, &(String *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_UPNP_get_device(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
UPNPDevice ret_value = caller->get_device(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_UPNP_get_device_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
return caller->get_device_count();
}
}
}
static int wasgo_UPNP_get_discover_local_port(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
return caller->get_discover_local_port();
}
}
}
static WasGoId wasgo_UPNP_get_discover_multicast_if(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_discover_multicast_if();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNP_get_gateway(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
UPNPDevice ret_value = caller->get_gateway();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNP_is_discover_ipv6(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_discover_ipv6();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNP_query_external_address(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->query_external_address();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_UPNP_remove_device(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
caller->remove_device(arg0);
}
}
}
static void wasgo_UPNP_set_device(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
caller->set_device(arg0, &(UPNPDevice *)lookup_object(arg1));
}
}
}
static void wasgo_UPNP_set_discover_ipv6(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
caller->set_discover_ipv6(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_UPNP_set_discover_local_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
caller->set_discover_local_port(arg0);
}
}
}
static void wasgo_UPNP_set_discover_multicast_if(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNP *caller = (UPNP *) state->lookup_object(caller_id);
if(caller){
caller->set_discover_multicast_if(&(String *)lookup_object(arg0));
}
}
}
static int wasgo_UPNPDevice_add_port_mapping(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2, WasGoID arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
return caller->add_port_mapping(arg0, arg1, &(String *)lookup_object(arg2), &(String *)lookup_object(arg3), arg4);
}
}
}
static int wasgo_UPNPDevice_delete_port_mapping(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
return caller->delete_port_mapping(arg0, &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_UPNPDevice_get_description_url(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_description_url();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNPDevice_get_igd_control_url(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_igd_control_url();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNPDevice_get_igd_our_addr(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_igd_our_addr();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNPDevice_get_igd_service_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_igd_service_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNPDevice_get_igd_status(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
enum.UPNPDevice::IGDStatus ret_value = caller->get_igd_status();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNPDevice_get_service_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_service_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNPDevice_is_valid_gateway(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid_gateway();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UPNPDevice_query_external_address(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->query_external_address();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_UPNPDevice_set_description_url(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
caller->set_description_url(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_UPNPDevice_set_igd_control_url(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
caller->set_igd_control_url(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_UPNPDevice_set_igd_our_addr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
caller->set_igd_our_addr(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_UPNPDevice_set_igd_service_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
caller->set_igd_service_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_UPNPDevice_set_igd_status(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
caller->set_igd_status(arg0);
}
}
}
static void wasgo_UPNPDevice_set_service_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UPNPDevice *caller = (UPNPDevice *) state->lookup_object(caller_id);
if(caller){
caller->set_service_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_UndoRedo_add_do_method(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->add_do_method(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_UndoRedo_add_do_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->add_do_property(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_UndoRedo_add_do_reference(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->add_do_reference(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_UndoRedo_add_undo_method(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->add_undo_method(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_UndoRedo_add_undo_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->add_undo_property(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_UndoRedo_add_undo_reference(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->add_undo_reference(&(Object *)lookup_object(arg0));
}
}
}
static void wasgo_UndoRedo_clear_history(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->clear_history(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_UndoRedo_commit_action(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->commit_action();
}
}
}
static void wasgo_UndoRedo_create_action(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
caller->create_action(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_UndoRedo_get_current_action_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_action_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_UndoRedo_get_version(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
return caller->get_version();
}
}
}
static WasGoId wasgo_UndoRedo_has_redo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_redo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UndoRedo_has_undo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_undo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UndoRedo_is_commiting_action(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_commiting_action();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UndoRedo_redo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->redo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_UndoRedo_undo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
UndoRedo *caller = (UndoRedo *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->undo();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_VehicleBody_get_brake(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleBody *caller = (VehicleBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_brake();
}
}
}
static float wasgo_VehicleBody_get_engine_force(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleBody *caller = (VehicleBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_engine_force();
}
}
}
static float wasgo_VehicleBody_get_steering(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleBody *caller = (VehicleBody *) state->lookup_object(caller_id);
if(caller){
return caller->get_steering();
}
}
}
static void wasgo_VehicleBody_set_brake(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleBody *caller = (VehicleBody *) state->lookup_object(caller_id);
if(caller){
caller->set_brake(arg0);
}
}
}
static void wasgo_VehicleBody_set_engine_force(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleBody *caller = (VehicleBody *) state->lookup_object(caller_id);
if(caller){
caller->set_engine_force(arg0);
}
}
}
static void wasgo_VehicleBody_set_steering(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleBody *caller = (VehicleBody *) state->lookup_object(caller_id);
if(caller){
caller->set_steering(arg0);
}
}
}
static float wasgo_VehicleWheel_get_brake(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_brake();
}
}
}
static float wasgo_VehicleWheel_get_damping_compression(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_damping_compression();
}
}
}
static float wasgo_VehicleWheel_get_damping_relaxation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_damping_relaxation();
}
}
}
static float wasgo_VehicleWheel_get_engine_force(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_engine_force();
}
}
}
static float wasgo_VehicleWheel_get_friction_slip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_friction_slip();
}
}
}
static float wasgo_VehicleWheel_get_radius(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_radius();
}
}
}
static float wasgo_VehicleWheel_get_roll_influence(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_roll_influence();
}
}
}
static float wasgo_VehicleWheel_get_rpm(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_rpm();
}
}
}
static float wasgo_VehicleWheel_get_skidinfo(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_skidinfo();
}
}
}
static float wasgo_VehicleWheel_get_steering(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_steering();
}
}
}
static float wasgo_VehicleWheel_get_suspension_max_force(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_suspension_max_force();
}
}
}
static float wasgo_VehicleWheel_get_suspension_rest_length(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_suspension_rest_length();
}
}
}
static float wasgo_VehicleWheel_get_suspension_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_suspension_stiffness();
}
}
}
static float wasgo_VehicleWheel_get_suspension_travel(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
return caller->get_suspension_travel();
}
}
}
static WasGoId wasgo_VehicleWheel_is_in_contact(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_in_contact();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VehicleWheel_is_used_as_steering(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_used_as_steering();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VehicleWheel_is_used_as_traction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_used_as_traction();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VehicleWheel_set_brake(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_brake(arg0);
}
}
}
static void wasgo_VehicleWheel_set_damping_compression(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_damping_compression(arg0);
}
}
}
static void wasgo_VehicleWheel_set_damping_relaxation(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_damping_relaxation(arg0);
}
}
}
static void wasgo_VehicleWheel_set_engine_force(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_engine_force(arg0);
}
}
}
static void wasgo_VehicleWheel_set_friction_slip(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_friction_slip(arg0);
}
}
}
static void wasgo_VehicleWheel_set_radius(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_radius(arg0);
}
}
}
static void wasgo_VehicleWheel_set_roll_influence(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_roll_influence(arg0);
}
}
}
static void wasgo_VehicleWheel_set_steering(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_steering(arg0);
}
}
}
static void wasgo_VehicleWheel_set_suspension_max_force(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_suspension_max_force(arg0);
}
}
}
static void wasgo_VehicleWheel_set_suspension_rest_length(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_suspension_rest_length(arg0);
}
}
}
static void wasgo_VehicleWheel_set_suspension_stiffness(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_suspension_stiffness(arg0);
}
}
}
static void wasgo_VehicleWheel_set_suspension_travel(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_suspension_travel(arg0);
}
}
}
static void wasgo_VehicleWheel_set_use_as_steering(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_use_as_steering(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VehicleWheel_set_use_as_traction(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VehicleWheel *caller = (VehicleWheel *) state->lookup_object(caller_id);
if(caller){
caller->set_use_as_traction(&(bool *)lookup_object(arg0));
}
}
}
static int wasgo_VideoPlayer_get_audio_track(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_audio_track();
}
}
}
static int wasgo_VideoPlayer_get_buffering_msec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_buffering_msec();
}
}
}
static WasGoId wasgo_VideoPlayer_get_bus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bus();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VideoPlayer_get_stream(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
VideoStream ret_value = caller->get_stream();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VideoPlayer_get_stream_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_stream_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_VideoPlayer_get_stream_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_stream_position();
}
}
}
static WasGoId wasgo_VideoPlayer_get_video_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_video_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_VideoPlayer_get_volume(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_volume();
}
}
}
static float wasgo_VideoPlayer_get_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
return caller->get_volume_db();
}
}
}
static WasGoId wasgo_VideoPlayer_has_autoplay(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_autoplay();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VideoPlayer_has_expand(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_expand();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VideoPlayer_is_paused(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_paused();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VideoPlayer_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VideoPlayer_play(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->play();
}
}
}
static void wasgo_VideoPlayer_set_audio_track(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_audio_track(arg0);
}
}
}
static void wasgo_VideoPlayer_set_autoplay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_autoplay(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VideoPlayer_set_buffering_msec(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_buffering_msec(arg0);
}
}
}
static void wasgo_VideoPlayer_set_bus(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_bus(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VideoPlayer_set_expand(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_expand(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VideoPlayer_set_paused(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_paused(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VideoPlayer_set_stream(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_stream(&(VideoStream *)lookup_object(arg0));
}
}
}
static void wasgo_VideoPlayer_set_stream_position(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_stream_position(arg0);
}
}
}
static void wasgo_VideoPlayer_set_volume(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_volume(arg0);
}
}
}
static void wasgo_VideoPlayer_set_volume_db(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->set_volume_db(arg0);
}
}
}
static void wasgo_VideoPlayer_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoPlayer *caller = (VideoPlayer *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static WasGoId wasgo_VideoStreamGDNative_get_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoStreamGDNative *caller = (VideoStreamGDNative *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VideoStreamGDNative_set_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoStreamGDNative *caller = (VideoStreamGDNative *) state->lookup_object(caller_id);
if(caller){
caller->set_file(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VideoStreamTheora_get_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoStreamTheora *caller = (VideoStreamTheora *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VideoStreamTheora_set_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoStreamTheora *caller = (VideoStreamTheora *) state->lookup_object(caller_id);
if(caller){
caller->set_file(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VideoStreamWebm_get_file(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoStreamWebm *caller = (VideoStreamWebm *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_file();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VideoStreamWebm_set_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VideoStreamWebm *caller = (VideoStreamWebm *) state->lookup_object(caller_id);
if(caller){
caller->set_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport__gui_remove_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_gui_remove_focus();
}
}
}
static void wasgo_Viewport__gui_show_tooltip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_gui_show_tooltip();
}
}
}
static void wasgo_Viewport__own_world_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_own_world_changed();
}
}
}
static void wasgo_Viewport__post_gui_grab_click_focus(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_post_gui_grab_click_focus();
}
}
}
static void wasgo_Viewport__subwindow_visibility_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_subwindow_visibility_changed();
}
}
}
static void wasgo_Viewport__vp_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_vp_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport__vp_input_text(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_vp_input_text(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport__vp_unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->_vp_unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Viewport_find_world(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
World ret_value = caller->find_world();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_find_world_2d(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
World2D ret_value = caller->find_world_2d();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_camera(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Camera ret_value = caller->get_camera();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_canvas_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_canvas_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_clear_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
enum.Viewport::ClearMode ret_value = caller->get_clear_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_debug_draw(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
enum.Viewport::DebugDraw ret_value = caller->get_debug_draw();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_final_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_final_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_global_canvas_transform(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->get_global_canvas_transform();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_hdr(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_hdr();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_keep_3d_linear(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_keep_3d_linear();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_modal_stack_top(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Control ret_value = caller->get_modal_stack_top();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_mouse_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_mouse_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_msaa(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
enum.Viewport::MSAA ret_value = caller->get_msaa();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_physics_object_picking(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_physics_object_picking();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Viewport_get_render_info(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
return caller->get_render_info(arg0);
}
}
}
static WasGoId wasgo_Viewport_get_shadow_atlas_quadrant_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
enum.Viewport::ShadowAtlasQuadrantSubdiv ret_value = caller->get_shadow_atlas_quadrant_subdiv(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_Viewport_get_shadow_atlas_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
return caller->get_shadow_atlas_size();
}
}
}
static WasGoId wasgo_Viewport_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_size_override(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size_override();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
ViewportTexture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
enum.Viewport::UpdateMode ret_value = caller->get_update_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_usage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
enum.Viewport::Usage ret_value = caller->get_usage();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_vflip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_vflip();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_viewport_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_viewport_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_visible_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_visible_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_world(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
World ret_value = caller->get_world();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_get_world_2d(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
World2D ret_value = caller->get_world_2d();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_gui_get_drag_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->gui_get_drag_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_gui_has_modal_stack(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->gui_has_modal_stack();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_gui_is_dragging(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->gui_is_dragging();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_has_transparent_background(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_transparent_background();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Viewport_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->input(&(InputEvent *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_Viewport_is_3d_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_3d_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_audio_listener(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_audio_listener();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_audio_listener_2d(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_audio_listener_2d();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_handling_input_locally(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_handling_input_locally();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_input_disabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_input_disabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_input_handled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_input_handled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_size_override_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_size_override_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_size_override_stretch_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_size_override_stretch_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_snap_controls_to_pixels_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_snap_controls_to_pixels_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_using_own_world(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_own_world();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_Viewport_is_using_render_direct_to_screen(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_using_render_direct_to_screen();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Viewport_set_as_audio_listener(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_as_audio_listener(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_as_audio_listener_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_as_audio_listener_2d(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_attach_to_screen_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_attach_to_screen_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_canvas_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_canvas_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_clear_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_clear_mode(arg0);
}
}
}
static void wasgo_Viewport_set_debug_draw(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_debug_draw(arg0);
}
}
}
static void wasgo_Viewport_set_disable_3d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_3d(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_disable_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_disable_input(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_global_canvas_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_global_canvas_transform(&(Transform2D *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_handle_input_locally(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_handle_input_locally(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_hdr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_hdr(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_input_as_handled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_input_as_handled();
}
}
}
static void wasgo_Viewport_set_keep_3d_linear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_keep_3d_linear(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_msaa(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_msaa(arg0);
}
}
}
static void wasgo_Viewport_set_physics_object_picking(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_object_picking(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_shadow_atlas_quadrant_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_atlas_quadrant_subdiv(arg0, arg1);
}
}
}
static void wasgo_Viewport_set_shadow_atlas_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_shadow_atlas_size(arg0);
}
}
}
static void wasgo_Viewport_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_size_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_size_override(&(bool *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_Viewport_set_size_override_stretch(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_size_override_stretch(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_snap_controls_to_pixels(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_snap_controls_to_pixels(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_transparent_background(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_transparent_background(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_update_mode(arg0);
}
}
}
static void wasgo_Viewport_set_usage(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_usage(arg0);
}
}
}
static void wasgo_Viewport_set_use_arvr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_use_arvr(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_use_own_world(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_use_own_world(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_use_render_direct_to_screen(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_use_render_direct_to_screen(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_vflip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_vflip(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_world(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_world(&(World *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_set_world_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->set_world_2d(&(World2D *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_Viewport_update_worlds(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->update_worlds();
}
}
}
static WasGoId wasgo_Viewport_use_arvr(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->use_arvr();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_Viewport_warp_mouse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
Viewport *caller = (Viewport *) state->lookup_object(caller_id);
if(caller){
caller->warp_mouse(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_ViewportContainer__input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportContainer *caller = (ViewportContainer *) state->lookup_object(caller_id);
if(caller){
caller->_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static void wasgo_ViewportContainer__unhandled_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportContainer *caller = (ViewportContainer *) state->lookup_object(caller_id);
if(caller){
caller->_unhandled_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static int wasgo_ViewportContainer_get_stretch_shrink(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportContainer *caller = (ViewportContainer *) state->lookup_object(caller_id);
if(caller){
return caller->get_stretch_shrink();
}
}
}
static WasGoId wasgo_ViewportContainer_is_stretch_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportContainer *caller = (ViewportContainer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_stretch_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ViewportContainer_set_stretch(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportContainer *caller = (ViewportContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_stretch(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_ViewportContainer_set_stretch_shrink(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportContainer *caller = (ViewportContainer *) state->lookup_object(caller_id);
if(caller){
caller->set_stretch_shrink(arg0);
}
}
}
static WasGoId wasgo_ViewportTexture_get_viewport_path_in_scene(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportTexture *caller = (ViewportTexture *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_viewport_path_in_scene();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_ViewportTexture_set_viewport_path_in_scene(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
ViewportTexture *caller = (ViewportTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_viewport_path_in_scene(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_VisibilityEnabler__node_removed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityEnabler *caller = (VisibilityEnabler *) state->lookup_object(caller_id);
if(caller){
caller->_node_removed(&(Node *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisibilityEnabler_is_enabler_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityEnabler *caller = (VisibilityEnabler *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_enabler_enabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisibilityEnabler_set_enabler(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityEnabler *caller = (VisibilityEnabler *) state->lookup_object(caller_id);
if(caller){
caller->set_enabler(arg0, &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisibilityEnabler2D__node_removed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityEnabler2D *caller = (VisibilityEnabler2D *) state->lookup_object(caller_id);
if(caller){
caller->_node_removed(&(Node *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisibilityEnabler2D_is_enabler_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityEnabler2D *caller = (VisibilityEnabler2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_enabler_enabled(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisibilityEnabler2D_set_enabler(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityEnabler2D *caller = (VisibilityEnabler2D *) state->lookup_object(caller_id);
if(caller){
caller->set_enabler(arg0, &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisibilityNotifier_get_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityNotifier *caller = (VisibilityNotifier *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisibilityNotifier_is_on_screen(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityNotifier *caller = (VisibilityNotifier *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_screen();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisibilityNotifier_set_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityNotifier *caller = (VisibilityNotifier *) state->lookup_object(caller_id);
if(caller){
caller->set_aabb(&(AABB *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisibilityNotifier2D_get_rect(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityNotifier2D *caller = (VisibilityNotifier2D *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_rect();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisibilityNotifier2D_is_on_screen(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityNotifier2D *caller = (VisibilityNotifier2D *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_on_screen();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisibilityNotifier2D_set_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisibilityNotifier2D *caller = (VisibilityNotifier2D *) state->lookup_object(caller_id);
if(caller){
caller->set_rect(&(Rect2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualInstance__get_visual_instance_rid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->_get_visual_instance_rid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualInstance_get_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualInstance_get_base(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_base();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualInstance_get_instance(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_instance();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualInstance_get_layer_mask(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
return caller->get_layer_mask();
}
}
}
static WasGoId wasgo_VisualInstance_get_layer_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_layer_mask_bit(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualInstance_get_transformed_aabb(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->get_transformed_aabb();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualInstance_set_base(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_base(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_VisualInstance_set_layer_mask(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_layer_mask(arg0);
}
}
}
static void wasgo_VisualInstance_set_layer_mask_bit(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualInstance *caller = (VisualInstance *) state->lookup_object(caller_id);
if(caller){
caller->set_layer_mask_bit(arg0, &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualScript__get_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScript__node_ports_changed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->_node_ports_changed(arg0);
}
}
}
static void wasgo_VisualScript__set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->_set_data(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_VisualScript_add_custom_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->add_custom_signal(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScript_add_function(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->add_function(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScript_add_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->add_node(&(String *)lookup_object(arg0), arg1, &(VisualScriptNode *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
}
}
}
static void wasgo_VisualScript_add_variable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->add_variable(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_VisualScript_custom_signal_add_argument(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->custom_signal_add_argument(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), arg3);
}
}
}
static int wasgo_VisualScript_custom_signal_get_argument_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
return caller->custom_signal_get_argument_count(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScript_custom_signal_get_argument_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->custom_signal_get_argument_name(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_custom_signal_get_argument_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->custom_signal_get_argument_type(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScript_custom_signal_remove_argument(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->custom_signal_remove_argument(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualScript_custom_signal_set_argument_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->custom_signal_set_argument_name(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2));
}
}
}
static void wasgo_VisualScript_custom_signal_set_argument_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->custom_signal_set_argument_type(&(String *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualScript_custom_signal_swap_argument(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->custom_signal_swap_argument(&(String *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualScript_data_connect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->data_connect(&(String *)lookup_object(arg0), arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_VisualScript_data_disconnect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->data_disconnect(&(String *)lookup_object(arg0), arg1, arg2, arg3, arg4);
}
}
}
static int wasgo_VisualScript_get_function_node_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
return caller->get_function_node_id(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScript_get_function_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_function_scroll(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_get_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
VisualScriptNode ret_value = caller->get_node(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_get_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_node_position(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_get_variable_default_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_variable_default_value(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_get_variable_export(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_variable_export(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_get_variable_info(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_variable_info(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_has_custom_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_custom_signal(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_has_data_connection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_data_connection(&(String *)lookup_object(arg0), arg1, arg2, arg3, arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_has_function(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_function(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_has_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_node(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_has_sequence_connection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_sequence_connection(&(String *)lookup_object(arg0), arg1, arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScript_has_variable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_variable(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScript_remove_custom_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->remove_custom_signal(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScript_remove_function(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->remove_function(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScript_remove_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->remove_node(&(String *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualScript_remove_variable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->remove_variable(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScript_rename_custom_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->rename_custom_signal(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScript_rename_function(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->rename_function(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScript_rename_variable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->rename_variable(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScript_sequence_connect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->sequence_connect(&(String *)lookup_object(arg0), arg1, arg2, arg3);
}
}
}
static void wasgo_VisualScript_sequence_disconnect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->sequence_disconnect(&(String *)lookup_object(arg0), arg1, arg2, arg3);
}
}
}
static void wasgo_VisualScript_set_function_scroll(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->set_function_scroll(&(String *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScript_set_instance_base_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->set_instance_base_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScript_set_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->set_node_position(&(String *)lookup_object(arg0), arg1, &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_VisualScript_set_variable_default_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->set_variable_default_value(&(String *)lookup_object(arg0), &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScript_set_variable_export(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->set_variable_export(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScript_set_variable_info(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScript *caller = (VisualScript *) state->lookup_object(caller_id);
if(caller){
caller->set_variable_info(&(String *)lookup_object(arg0), &(Dictionary *)lookup_dictionary(arg1));
}
}
}
static WasGoId wasgo_VisualScriptBasicTypeConstant_get_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptBasicTypeConstant *caller = (VisualScriptBasicTypeConstant *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_basic_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptBasicTypeConstant_get_basic_type_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptBasicTypeConstant *caller = (VisualScriptBasicTypeConstant *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_basic_type_constant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptBasicTypeConstant_set_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptBasicTypeConstant *caller = (VisualScriptBasicTypeConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_basic_type(arg0);
}
}
}
static void wasgo_VisualScriptBasicTypeConstant_set_basic_type_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptBasicTypeConstant *caller = (VisualScriptBasicTypeConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_basic_type_constant(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptBuiltinFunc_get_func(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptBuiltinFunc *caller = (VisualScriptBuiltinFunc *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptBuiltinFunc::BuiltinFunc ret_value = caller->get_func();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptBuiltinFunc_set_func(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptBuiltinFunc *caller = (VisualScriptBuiltinFunc *) state->lookup_object(caller_id);
if(caller){
caller->set_func(arg0);
}
}
}
static WasGoId wasgo_VisualScriptClassConstant_get_base_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptClassConstant *caller = (VisualScriptClassConstant *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptClassConstant_get_class_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptClassConstant *caller = (VisualScriptClassConstant *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_class_constant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptClassConstant_set_base_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptClassConstant *caller = (VisualScriptClassConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_base_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptClassConstant_set_class_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptClassConstant *caller = (VisualScriptClassConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_class_constant(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptComment_get_description(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptComment *caller = (VisualScriptComment *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_description();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptComment_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptComment *caller = (VisualScriptComment *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptComment_get_title(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptComment *caller = (VisualScriptComment *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_title();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptComment_set_description(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptComment *caller = (VisualScriptComment *) state->lookup_object(caller_id);
if(caller){
caller->set_description(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptComment_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptComment *caller = (VisualScriptComment *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptComment_set_title(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptComment *caller = (VisualScriptComment *) state->lookup_object(caller_id);
if(caller){
caller->set_title(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptConstant_get_constant_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstant *caller = (VisualScriptConstant *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_constant_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptConstant_get_constant_value(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstant *caller = (VisualScriptConstant *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_constant_value();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptConstant_set_constant_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstant *caller = (VisualScriptConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_constant_type(arg0);
}
}
}
static void wasgo_VisualScriptConstant_set_constant_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstant *caller = (VisualScriptConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_constant_value(&(Variant *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptConstructor_get_constructor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstructor *caller = (VisualScriptConstructor *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_constructor();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptConstructor_get_constructor_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstructor *caller = (VisualScriptConstructor *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_constructor_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptConstructor_set_constructor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstructor *caller = (VisualScriptConstructor *) state->lookup_object(caller_id);
if(caller){
caller->set_constructor(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static void wasgo_VisualScriptConstructor_set_constructor_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptConstructor *caller = (VisualScriptConstructor *) state->lookup_object(caller_id);
if(caller){
caller->set_constructor_type(arg0);
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__get_caption(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_caption();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__get_category(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_category();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualScriptCustomNode__get_input_value_port_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
return caller->_get_input_value_port_count();
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__get_input_value_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_input_value_port_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualScriptCustomNode__get_input_value_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
return caller->_get_input_value_port_type(arg0);
}
}
}
static int wasgo_VisualScriptCustomNode__get_output_sequence_port_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
return caller->_get_output_sequence_port_count();
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__get_output_sequence_port_text(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_output_sequence_port_text(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualScriptCustomNode__get_output_value_port_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
return caller->_get_output_value_port_count();
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__get_output_value_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_output_value_port_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualScriptCustomNode__get_output_value_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
return caller->_get_output_value_port_type(arg0);
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__get_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualScriptCustomNode__get_working_memory_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
return caller->_get_working_memory_size();
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__has_input_sequence_port(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->_has_input_sequence_port();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptCustomNode__script_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
caller->_script_changed();
}
}
}
static WasGoId wasgo_VisualScriptCustomNode__step(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptCustomNode *caller = (VisualScriptCustomNode *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_step(&(Array *)lookup_array(arg0), &(Array *)lookup_array(arg1), arg2, &(Array *)lookup_array(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptDeconstruct__get_elem_cache(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptDeconstruct *caller = (VisualScriptDeconstruct *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_elem_cache();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptDeconstruct__set_elem_cache(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptDeconstruct *caller = (VisualScriptDeconstruct *) state->lookup_object(caller_id);
if(caller){
caller->_set_elem_cache(&(Array *)lookup_array(arg0));
}
}
}
static WasGoId wasgo_VisualScriptDeconstruct_get_deconstruct_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptDeconstruct *caller = (VisualScriptDeconstruct *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_deconstruct_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptDeconstruct_set_deconstruct_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptDeconstruct *caller = (VisualScriptDeconstruct *) state->lookup_object(caller_id);
if(caller){
caller->set_deconstruct_type(arg0);
}
}
}
static WasGoId wasgo_VisualScriptEmitSignal_get_signal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptEmitSignal *caller = (VisualScriptEmitSignal *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_signal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptEmitSignal_set_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptEmitSignal *caller = (VisualScriptEmitSignal *) state->lookup_object(caller_id);
if(caller){
caller->set_signal(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptEngineSingleton_get_singleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptEngineSingleton *caller = (VisualScriptEngineSingleton *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_singleton();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptEngineSingleton_set_singleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptEngineSingleton *caller = (VisualScriptEngineSingleton *) state->lookup_object(caller_id);
if(caller){
caller->set_singleton(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall__get_argument_cache(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_argument_cache();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptFunctionCall__set_argument_cache(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->_set_argument_cache(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_base_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_base_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_base_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_base_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_basic_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptFunctionCall::CallMode ret_value = caller->get_call_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_rpc_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptFunctionCall::RPCCallMode ret_value = caller->get_rpc_call_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_singleton(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_singleton();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualScriptFunctionCall_get_use_default_args(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
return caller->get_use_default_args();
}
}
}
static WasGoId wasgo_VisualScriptFunctionCall_get_validate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_validate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptFunctionCall_set_base_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_base_path(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptFunctionCall_set_base_script(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_base_script(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptFunctionCall_set_base_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_base_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptFunctionCall_set_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_basic_type(arg0);
}
}
}
static void wasgo_VisualScriptFunctionCall_set_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_call_mode(arg0);
}
}
}
static void wasgo_VisualScriptFunctionCall_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_function(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptFunctionCall_set_rpc_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_rpc_call_mode(arg0);
}
}
}
static void wasgo_VisualScriptFunctionCall_set_singleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_singleton(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptFunctionCall_set_use_default_args(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_use_default_args(arg0);
}
}
}
static void wasgo_VisualScriptFunctionCall_set_validate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionCall *caller = (VisualScriptFunctionCall *) state->lookup_object(caller_id);
if(caller){
caller->set_validate(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptFunctionState__signal_callback(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionState *caller = (VisualScriptFunctionState *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_signal_callback();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptFunctionState_connect_to_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionState *caller = (VisualScriptFunctionState *) state->lookup_object(caller_id);
if(caller){
caller->connect_to_signal(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Array *)lookup_array(arg2));
}
}
}
static WasGoId wasgo_VisualScriptFunctionState_is_valid(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionState *caller = (VisualScriptFunctionState *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptFunctionState_resume(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptFunctionState *caller = (VisualScriptFunctionState *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->resume(&(Array *)lookup_array(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualScriptGlobalConstant_get_global_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptGlobalConstant *caller = (VisualScriptGlobalConstant *) state->lookup_object(caller_id);
if(caller){
return caller->get_global_constant();
}
}
}
static void wasgo_VisualScriptGlobalConstant_set_global_constant(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptGlobalConstant *caller = (VisualScriptGlobalConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_global_constant(arg0);
}
}
}
static WasGoId wasgo_VisualScriptInputAction_get_action_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptInputAction *caller = (VisualScriptInputAction *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptInputAction::Mode ret_value = caller->get_action_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptInputAction_get_action_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptInputAction *caller = (VisualScriptInputAction *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_action_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptInputAction_set_action_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptInputAction *caller = (VisualScriptInputAction *) state->lookup_object(caller_id);
if(caller){
caller->set_action_mode(arg0);
}
}
}
static void wasgo_VisualScriptInputAction_set_action_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptInputAction *caller = (VisualScriptInputAction *) state->lookup_object(caller_id);
if(caller){
caller->set_action_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptLists_add_input_data_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->add_input_data_port(arg0, &(String *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_VisualScriptLists_add_output_data_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->add_output_data_port(arg0, &(String *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_VisualScriptLists_remove_input_data_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->remove_input_data_port(arg0);
}
}
}
static void wasgo_VisualScriptLists_remove_output_data_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->remove_output_data_port(arg0);
}
}
}
static void wasgo_VisualScriptLists_set_input_data_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->set_input_data_port_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScriptLists_set_input_data_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->set_input_data_port_type(arg0, arg1);
}
}
}
static void wasgo_VisualScriptLists_set_output_data_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->set_output_data_port_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualScriptLists_set_output_data_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLists *caller = (VisualScriptLists *) state->lookup_object(caller_id);
if(caller){
caller->set_output_data_port_type(arg0, arg1);
}
}
}
static WasGoId wasgo_VisualScriptLocalVar_get_var_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVar *caller = (VisualScriptLocalVar *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_var_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptLocalVar_get_var_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVar *caller = (VisualScriptLocalVar *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_var_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptLocalVar_set_var_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVar *caller = (VisualScriptLocalVar *) state->lookup_object(caller_id);
if(caller){
caller->set_var_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptLocalVar_set_var_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVar *caller = (VisualScriptLocalVar *) state->lookup_object(caller_id);
if(caller){
caller->set_var_type(arg0);
}
}
}
static WasGoId wasgo_VisualScriptLocalVarSet_get_var_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVarSet *caller = (VisualScriptLocalVarSet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_var_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptLocalVarSet_get_var_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVarSet *caller = (VisualScriptLocalVarSet *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_var_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptLocalVarSet_set_var_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVarSet *caller = (VisualScriptLocalVarSet *) state->lookup_object(caller_id);
if(caller){
caller->set_var_name(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptLocalVarSet_set_var_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptLocalVarSet *caller = (VisualScriptLocalVarSet *) state->lookup_object(caller_id);
if(caller){
caller->set_var_type(arg0);
}
}
}
static WasGoId wasgo_VisualScriptMathConstant_get_math_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptMathConstant *caller = (VisualScriptMathConstant *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptMathConstant::MathConstant ret_value = caller->get_math_constant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptMathConstant_set_math_constant(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptMathConstant *caller = (VisualScriptMathConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_math_constant(arg0);
}
}
}
static WasGoId wasgo_VisualScriptNode__get_default_input_values(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptNode *caller = (VisualScriptNode *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->_get_default_input_values();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptNode__set_default_input_values(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptNode *caller = (VisualScriptNode *) state->lookup_object(caller_id);
if(caller){
caller->_set_default_input_values(&(Array *)lookup_array(arg0));
}
}
}
static WasGoId wasgo_VisualScriptNode_get_default_input_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptNode *caller = (VisualScriptNode *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_default_input_value(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptNode_get_visual_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptNode *caller = (VisualScriptNode *) state->lookup_object(caller_id);
if(caller){
VisualScript ret_value = caller->get_visual_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptNode_ports_changed_notify(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptNode *caller = (VisualScriptNode *) state->lookup_object(caller_id);
if(caller){
caller->ports_changed_notify();
}
}
}
static void wasgo_VisualScriptNode_set_default_input_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptNode *caller = (VisualScriptNode *) state->lookup_object(caller_id);
if(caller){
caller->set_default_input_value(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualScriptOperator_get_operator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptOperator *caller = (VisualScriptOperator *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Operator ret_value = caller->get_operator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptOperator_get_typed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptOperator *caller = (VisualScriptOperator *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_typed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptOperator_set_operator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptOperator *caller = (VisualScriptOperator *) state->lookup_object(caller_id);
if(caller){
caller->set_operator(arg0);
}
}
}
static void wasgo_VisualScriptOperator_set_typed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptOperator *caller = (VisualScriptOperator *) state->lookup_object(caller_id);
if(caller){
caller->set_typed(arg0);
}
}
}
static WasGoId wasgo_VisualScriptPreload_get_preload(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPreload *caller = (VisualScriptPreload *) state->lookup_object(caller_id);
if(caller){
Resource ret_value = caller->get_preload();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptPreload_set_preload(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPreload *caller = (VisualScriptPreload *) state->lookup_object(caller_id);
if(caller){
caller->set_preload(&(Resource *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet__get_type_cache(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->_get_type_cache();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptPropertyGet__set_type_cache(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->_set_type_cache(arg0);
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet_get_base_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_base_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet_get_base_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet_get_base_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet_get_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_basic_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet_get_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptPropertyGet::CallMode ret_value = caller->get_call_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet_get_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_index();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertyGet_get_property(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_property();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptPropertyGet_set_base_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->set_base_path(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertyGet_set_base_script(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->set_base_script(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertyGet_set_base_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->set_base_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertyGet_set_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->set_basic_type(arg0);
}
}
}
static void wasgo_VisualScriptPropertyGet_set_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->set_call_mode(arg0);
}
}
}
static void wasgo_VisualScriptPropertyGet_set_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->set_index(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertyGet_set_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertyGet *caller = (VisualScriptPropertyGet *) state->lookup_object(caller_id);
if(caller){
caller->set_property(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptPropertySet__get_type_cache(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->_get_type_cache();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptPropertySet__set_type_cache(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->_set_type_cache(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_assign_op(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptPropertySet::AssignOp ret_value = caller->get_assign_op();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_base_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_base_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_base_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_base_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_basic_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptPropertySet::CallMode ret_value = caller->get_call_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_index(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_index();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptPropertySet_get_property(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_property();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptPropertySet_set_assign_op(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_assign_op(arg0);
}
}
}
static void wasgo_VisualScriptPropertySet_set_base_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_base_path(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertySet_set_base_script(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_base_script(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertySet_set_base_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_base_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertySet_set_basic_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_basic_type(arg0);
}
}
}
static void wasgo_VisualScriptPropertySet_set_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_call_mode(arg0);
}
}
}
static void wasgo_VisualScriptPropertySet_set_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_index(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptPropertySet_set_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptPropertySet *caller = (VisualScriptPropertySet *) state->lookup_object(caller_id);
if(caller){
caller->set_property(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptResourcePath_get_resource_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptResourcePath *caller = (VisualScriptResourcePath *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_resource_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptResourcePath_set_resource_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptResourcePath *caller = (VisualScriptResourcePath *) state->lookup_object(caller_id);
if(caller){
caller->set_resource_path(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptReturn_get_return_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptReturn *caller = (VisualScriptReturn *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_return_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptReturn_is_return_value_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptReturn *caller = (VisualScriptReturn *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_return_value_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptReturn_set_enable_return_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptReturn *caller = (VisualScriptReturn *) state->lookup_object(caller_id);
if(caller){
caller->set_enable_return_value(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptReturn_set_return_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptReturn *caller = (VisualScriptReturn *) state->lookup_object(caller_id);
if(caller){
caller->set_return_type(arg0);
}
}
}
static WasGoId wasgo_VisualScriptSceneNode_get_node_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptSceneNode *caller = (VisualScriptSceneNode *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_node_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptSceneNode_set_node_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptSceneNode *caller = (VisualScriptSceneNode *) state->lookup_object(caller_id);
if(caller){
caller->set_node_path(&(NodePath *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptSelect_get_typed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptSelect *caller = (VisualScriptSelect *) state->lookup_object(caller_id);
if(caller){
enum.Variant::Type ret_value = caller->get_typed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptSelect_set_typed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptSelect *caller = (VisualScriptSelect *) state->lookup_object(caller_id);
if(caller){
caller->set_typed(arg0);
}
}
}
static int wasgo_VisualScriptSequence_get_steps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptSequence *caller = (VisualScriptSequence *) state->lookup_object(caller_id);
if(caller){
return caller->get_steps();
}
}
}
static void wasgo_VisualScriptSequence_set_steps(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptSequence *caller = (VisualScriptSequence *) state->lookup_object(caller_id);
if(caller){
caller->set_steps(arg0);
}
}
}
static WasGoId wasgo_VisualScriptSubCall__subcall(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptSubCall *caller = (VisualScriptSubCall *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->_subcall(&(Variant *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptTypeCast_get_base_script(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptTypeCast *caller = (VisualScriptTypeCast *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_script();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptTypeCast_get_base_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptTypeCast *caller = (VisualScriptTypeCast *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptTypeCast_set_base_script(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptTypeCast *caller = (VisualScriptTypeCast *) state->lookup_object(caller_id);
if(caller){
caller->set_base_script(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptTypeCast_set_base_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptTypeCast *caller = (VisualScriptTypeCast *) state->lookup_object(caller_id);
if(caller){
caller->set_base_type(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptVariableGet_get_variable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptVariableGet *caller = (VisualScriptVariableGet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_variable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptVariableGet_set_variable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptVariableGet *caller = (VisualScriptVariableGet *) state->lookup_object(caller_id);
if(caller){
caller->set_variable(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualScriptVariableSet_get_variable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptVariableSet *caller = (VisualScriptVariableSet *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_variable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptVariableSet_set_variable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptVariableSet *caller = (VisualScriptVariableSet *) state->lookup_object(caller_id);
if(caller){
caller->set_variable(&(String *)lookup_object(arg0));
}
}
}
static float wasgo_VisualScriptYield_get_wait_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYield *caller = (VisualScriptYield *) state->lookup_object(caller_id);
if(caller){
return caller->get_wait_time();
}
}
}
static WasGoId wasgo_VisualScriptYield_get_yield_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYield *caller = (VisualScriptYield *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptYield::YieldMode ret_value = caller->get_yield_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptYield_set_wait_time(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYield *caller = (VisualScriptYield *) state->lookup_object(caller_id);
if(caller){
caller->set_wait_time(arg0);
}
}
}
static void wasgo_VisualScriptYield_set_yield_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYield *caller = (VisualScriptYield *) state->lookup_object(caller_id);
if(caller){
caller->set_yield_mode(arg0);
}
}
}
static WasGoId wasgo_VisualScriptYieldSignal_get_base_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
NodePath ret_value = caller->get_base_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptYieldSignal_get_base_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_base_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptYieldSignal_get_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
enum.VisualScriptYieldSignal::CallMode ret_value = caller->get_call_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualScriptYieldSignal_get_signal(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_signal();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualScriptYieldSignal_set_base_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
caller->set_base_path(&(NodePath *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptYieldSignal_set_base_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
caller->set_base_type(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualScriptYieldSignal_set_call_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
caller->set_call_mode(arg0);
}
}
}
static void wasgo_VisualScriptYieldSignal_set_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualScriptYieldSignal *caller = (VisualScriptYieldSignal *) state->lookup_object(caller_id);
if(caller){
caller->set_signal(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_black_bars_set_images(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->black_bars_set_images(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(RID *)lookup_object(arg3));
}
}
}
static void wasgo_VisualServer_black_bars_set_margins(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->black_bars_set_margins(arg0, arg1, arg2, arg3);
}
}
}
static WasGoId wasgo_VisualServer_camera_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->camera_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_camera_set_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->camera_set_cull_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_camera_set_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->camera_set_environment(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_camera_set_frustum(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, WasGoID arg2, float arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->camera_set_frustum(&(RID *)lookup_object(arg0), arg1, &(Vector2 *)lookup_object(arg2), arg3, arg4);
}
}
}
static void wasgo_VisualServer_camera_set_orthogonal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->camera_set_orthogonal(&(RID *)lookup_object(arg0), arg1, arg2, arg3);
}
}
}
static void wasgo_VisualServer_camera_set_perspective(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->camera_set_perspective(&(RID *)lookup_object(arg0), arg1, arg2, arg3);
}
}
}
static void wasgo_VisualServer_camera_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->camera_set_transform(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_camera_set_use_vertical_aspect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->camera_set_use_vertical_aspect(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_canvas_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->canvas_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_canvas_item_add_circle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_circle(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), arg2, &(Color *)lookup_object(arg3));
}
}
}
static void wasgo_VisualServer_canvas_item_add_clip_ignore(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_clip_ignore(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_add_line(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, float arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_line(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(Color *)lookup_object(arg3), arg4, &(bool *)lookup_object(arg5));
}
}
}
static void wasgo_VisualServer_canvas_item_add_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_mesh(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(Transform2D *)lookup_object(arg2), &(Color *)lookup_object(arg3), &(RID *)lookup_object(arg4), &(RID *)lookup_object(arg5));
}
}
}
static void wasgo_VisualServer_canvas_item_add_multimesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_multimesh(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(RID *)lookup_object(arg3));
}
}
}
static void wasgo_VisualServer_canvas_item_add_nine_patch(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, int arg6, int arg7, WasGoID arg8, WasGoID arg9, WasGoID arg10){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_nine_patch(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(Rect2 *)lookup_object(arg2), &(RID *)lookup_object(arg3), &(Vector2 *)lookup_object(arg4), &(Vector2 *)lookup_object(arg5), arg6, arg7, &(bool *)lookup_object(arg8), &(Color *)lookup_object(arg9), &(RID *)lookup_object(arg10));
}
}
}
static void wasgo_VisualServer_canvas_item_add_particles(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_particles(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(RID *)lookup_object(arg3));
}
}
}
static void wasgo_VisualServer_canvas_item_add_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_polygon(&(RID *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1), &(PoolColorArray *)lookup_object(arg2), &(PoolVector2Array *)lookup_object(arg3), &(RID *)lookup_object(arg4), &(RID *)lookup_object(arg5), &(bool *)lookup_object(arg6));
}
}
}
static void wasgo_VisualServer_canvas_item_add_polyline(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, float arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_polyline(&(RID *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1), &(PoolColorArray *)lookup_object(arg2), arg3, &(bool *)lookup_object(arg4));
}
}
}
static void wasgo_VisualServer_canvas_item_add_primitive(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, float arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_primitive(&(RID *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1), &(PoolColorArray *)lookup_object(arg2), &(PoolVector2Array *)lookup_object(arg3), &(RID *)lookup_object(arg4), arg5, &(RID *)lookup_object(arg6));
}
}
}
static void wasgo_VisualServer_canvas_item_add_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_rect(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(Color *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_canvas_item_add_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_set_transform(&(RID *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_add_texture_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_texture_rect(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(bool *)lookup_object(arg3), &(Color *)lookup_object(arg4), &(bool *)lookup_object(arg5), &(RID *)lookup_object(arg6));
}
}
}
static void wasgo_VisualServer_canvas_item_add_texture_rect_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6, WasGoID arg7){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_texture_rect_region(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), &(RID *)lookup_object(arg2), &(Rect2 *)lookup_object(arg3), &(Color *)lookup_object(arg4), &(bool *)lookup_object(arg5), &(RID *)lookup_object(arg6), &(bool *)lookup_object(arg7));
}
}
}
static void wasgo_VisualServer_canvas_item_add_triangle_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4, WasGoID arg5, WasGoID arg6, WasGoID arg7, int arg8, WasGoID arg9, WasGoID arg10, WasGoID arg11){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_add_triangle_array(&(RID *)lookup_object(arg0), &(PoolIntArray *)lookup_object(arg1), &(PoolVector2Array *)lookup_object(arg2), &(PoolColorArray *)lookup_object(arg3), &(PoolVector2Array *)lookup_object(arg4), &(PoolIntArray *)lookup_object(arg5), &(PoolRealArray *)lookup_object(arg6), &(RID *)lookup_object(arg7), arg8, &(RID *)lookup_object(arg9), &(bool *)lookup_object(arg10), &(bool *)lookup_object(arg11));
}
}
}
static void wasgo_VisualServer_canvas_item_clear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_clear(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_canvas_item_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->canvas_item_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_canvas_item_set_clip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_clip(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_copy_to_backbuffer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_copy_to_backbuffer(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(Rect2 *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_canvas_item_set_custom_rect(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_custom_rect(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(Rect2 *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_canvas_item_set_distance_field_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_distance_field_mode(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_draw_behind_parent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_draw_behind_parent(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_draw_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_draw_index(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_item_set_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_light_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_item_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_material(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_modulate(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_parent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_parent(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_self_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_self_modulate(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_sort_children_by_y(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_sort_children_by_y(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_transform(&(RID *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_use_parent_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_use_parent_material(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_visible(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_z_as_relative_to_parent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_z_as_relative_to_parent(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_item_set_z_index(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_item_set_z_index(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_attach_to_canvas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_attach_to_canvas(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_canvas_light_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->canvas_light_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_canvas_light_occluder_attach_to_canvas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_occluder_attach_to_canvas(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_canvas_light_occluder_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->canvas_light_occluder_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_canvas_light_occluder_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_occluder_set_enabled(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_occluder_set_light_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_occluder_set_light_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_occluder_set_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_occluder_set_polygon(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_occluder_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_occluder_set_transform(&(RID *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_color(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_enabled(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_energy(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_height(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_height(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_item_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_item_cull_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_item_shadow_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_item_shadow_cull_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_layer_range(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_layer_range(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualServer_canvas_light_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_scale(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_shadow_buffer_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_shadow_buffer_size(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_shadow_color(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_shadow_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_shadow_enabled(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_shadow_filter(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_shadow_filter(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_shadow_gradient_length(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_shadow_gradient_length(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_shadow_smooth(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_shadow_smooth(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_light_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_texture(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_texture_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_texture_offset(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_transform(&(RID *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_light_set_z_range(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_light_set_z_range(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static WasGoId wasgo_VisualServer_canvas_occluder_polygon_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->canvas_occluder_polygon_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_canvas_occluder_polygon_set_cull_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_occluder_polygon_set_cull_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_canvas_occluder_polygon_set_shape(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_occluder_polygon_set_shape(&(RID *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1), &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_canvas_occluder_polygon_set_shape_as_lines(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_occluder_polygon_set_shape_as_lines(&(RID *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_canvas_set_item_mirroring(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_set_item_mirroring(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_canvas_set_modulate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->canvas_set_modulate(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_directional_light_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->directional_light_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_draw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->draw(&(bool *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_VisualServer_environment_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->environment_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_environment_set_adjustment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3, float arg4, WasGoID arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_adjustment(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4, &(RID *)lookup_object(arg5));
}
}
}
static void wasgo_VisualServer_environment_set_ambient_light(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_ambient_light(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1), arg2, arg3);
}
}
}
static void wasgo_VisualServer_environment_set_background(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_background(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_environment_set_bg_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_bg_color(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_environment_set_bg_energy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_bg_energy(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_environment_set_canvas_max_layer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_canvas_max_layer(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_environment_set_dof_blur_far(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3, float arg4, int arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_dof_blur_far(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4, arg5);
}
}
}
static void wasgo_VisualServer_environment_set_dof_blur_near(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3, float arg4, int arg5){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_dof_blur_near(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4, arg5);
}
}
}
static void wasgo_VisualServer_environment_set_fog(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_fog(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), &(Color *)lookup_object(arg2), &(Color *)lookup_object(arg3), arg4);
}
}
}
static void wasgo_VisualServer_environment_set_fog_depth(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3, float arg4, WasGoID arg5, float arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_fog_depth(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4, &(bool *)lookup_object(arg5), arg6);
}
}
}
static void wasgo_VisualServer_environment_set_fog_height(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_fog_height(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4);
}
}
}
static void wasgo_VisualServer_environment_set_glow(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, float arg3, float arg4, float arg5, int arg6, float arg7, float arg8, float arg9, WasGoID arg10){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_glow(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, &(bool *)lookup_object(arg10));
}
}
}
static void wasgo_VisualServer_environment_set_sky(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_sky(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_environment_set_sky_custom_fov(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_sky_custom_fov(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_environment_set_sky_orientation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_sky_orientation(&(RID *)lookup_object(arg0), &(Basis *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_environment_set_ssao(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, WasGoID arg9, int arg10, int arg11, float arg12){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_ssao(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4, arg5, arg6, arg7, arg8, &(Color *)lookup_object(arg9), arg10, arg11, arg12);
}
}
}
static void wasgo_VisualServer_environment_set_ssr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, float arg3, float arg4, float arg5, WasGoID arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_ssr(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1), arg2, arg3, arg4, arg5, &(bool *)lookup_object(arg6));
}
}
}
static void wasgo_VisualServer_environment_set_tonemap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2, float arg3, WasGoID arg4, float arg5, float arg6, float arg7, float arg8){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->environment_set_tonemap(&(RID *)lookup_object(arg0), arg1, arg2, arg3, &(bool *)lookup_object(arg4), arg5, arg6, arg7, arg8);
}
}
}
static void wasgo_VisualServer_finish(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->finish();
}
}
}
static void wasgo_VisualServer_force_draw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->force_draw(&(bool *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_force_sync(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->force_sync();
}
}
}
static void wasgo_VisualServer_free_rid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->free_rid(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_VisualServer_get_render_info(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_render_info(arg0);
}
}
}
static WasGoId wasgo_VisualServer_get_test_cube(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_test_cube();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_get_test_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_test_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_get_video_adapter_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_video_adapter_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_get_video_adapter_vendor(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_video_adapter_vendor();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_get_white_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_white_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_gi_probe_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->gi_probe_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_VisualServer_gi_probe_get_bias(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->gi_probe_get_bias(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_gi_probe_get_bounds(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->gi_probe_get_bounds(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_VisualServer_gi_probe_get_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->gi_probe_get_cell_size(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_gi_probe_get_dynamic_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->gi_probe_get_dynamic_data(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_gi_probe_get_dynamic_range(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->gi_probe_get_dynamic_range(&(RID *)lookup_object(arg0));
}
}
}
static float wasgo_VisualServer_gi_probe_get_energy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->gi_probe_get_energy(&(RID *)lookup_object(arg0));
}
}
}
static float wasgo_VisualServer_gi_probe_get_normal_bias(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->gi_probe_get_normal_bias(&(RID *)lookup_object(arg0));
}
}
}
static float wasgo_VisualServer_gi_probe_get_propagation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->gi_probe_get_propagation(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_gi_probe_get_to_cell_xform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->gi_probe_get_to_cell_xform(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_gi_probe_is_compressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->gi_probe_is_compressed(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_gi_probe_is_interior(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->gi_probe_is_interior(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_gi_probe_set_bias(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_bias(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_gi_probe_set_bounds(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_bounds(&(RID *)lookup_object(arg0), &(AABB *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_gi_probe_set_cell_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_cell_size(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_gi_probe_set_compress(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_compress(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_gi_probe_set_dynamic_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_dynamic_data(&(RID *)lookup_object(arg0), &(PoolIntArray *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_gi_probe_set_dynamic_range(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_dynamic_range(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_gi_probe_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_energy(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_gi_probe_set_interior(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_interior(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_gi_probe_set_normal_bias(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_normal_bias(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_gi_probe_set_propagation(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_propagation(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_gi_probe_set_to_cell_xform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->gi_probe_set_to_cell_xform(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_has_changed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_changed();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_has_feature(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_feature(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_has_os_feature(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_os_feature(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_immediate_begin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_begin(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_immediate_clear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_clear(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_immediate_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_color(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_immediate_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->immediate_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_immediate_end(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_end(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_immediate_get_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->immediate_get_material(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_immediate_normal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_normal(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_immediate_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_set_material(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_immediate_tangent(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_tangent(&(RID *)lookup_object(arg0), &(Plane *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_immediate_uv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_uv(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_immediate_uv2(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_uv2(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_immediate_vertex(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_vertex(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_immediate_vertex_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->immediate_vertex_2d(&(RID *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_init(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->init();
}
}
}
static void wasgo_VisualServer_instance_attach_object_instance_id(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_attach_object_instance_id(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_instance_attach_skeleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_attach_skeleton(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_instance_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->instance_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_instance_create2(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->instance_create2(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_instance_geometry_set_as_instance_lod(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_geometry_set_as_instance_lod(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_instance_geometry_set_cast_shadows_setting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_geometry_set_cast_shadows_setting(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_instance_geometry_set_draw_range(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, float arg2, float arg3, float arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_geometry_set_draw_range(&(RID *)lookup_object(arg0), arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_VisualServer_instance_geometry_set_flag(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_geometry_set_flag(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_instance_geometry_set_material_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_geometry_set_material_override(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_instance_set_base(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_base(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_instance_set_blend_shape_weight(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_blend_shape_weight(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualServer_instance_set_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_custom_aabb(&(RID *)lookup_object(arg0), &(AABB *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_instance_set_exterior(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_exterior(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_instance_set_extra_visibility_margin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_extra_visibility_margin(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_instance_set_layer_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_layer_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_instance_set_scenario(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_scenario(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_instance_set_surface_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_surface_material(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_instance_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_transform(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_instance_set_use_lightmap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_use_lightmap(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_instance_set_visible(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->instance_set_visible(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_instances_cull_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->instances_cull_aabb(&(AABB *)lookup_object(arg0), &(RID *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_instances_cull_convex(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->instances_cull_convex(&(Array *)lookup_array(arg0), &(RID *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_instances_cull_ray(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->instances_cull_ray(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(RID *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_light_directional_set_blend_splits(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_directional_set_blend_splits(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_light_directional_set_shadow_depth_range_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_directional_set_shadow_depth_range_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_light_directional_set_shadow_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_directional_set_shadow_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_light_omni_set_shadow_detail(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_omni_set_shadow_detail(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_light_omni_set_shadow_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_omni_set_shadow_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_light_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_color(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_light_set_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_cull_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_light_set_negative(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_negative(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_light_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_param(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualServer_light_set_projector(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_projector(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_light_set_reverse_cull_face_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_reverse_cull_face_mode(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_light_set_shadow(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_shadow(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_light_set_shadow_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_shadow_color(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_light_set_use_gi(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->light_set_use_gi(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_lightmap_capture_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->lightmap_capture_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_lightmap_capture_get_bounds(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->lightmap_capture_get_bounds(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo_VisualServer_lightmap_capture_get_energy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->lightmap_capture_get_energy(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_lightmap_capture_get_octree(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->lightmap_capture_get_octree(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_lightmap_capture_get_octree_cell_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->lightmap_capture_get_octree_cell_subdiv(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_lightmap_capture_get_octree_cell_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->lightmap_capture_get_octree_cell_transform(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_lightmap_capture_set_bounds(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->lightmap_capture_set_bounds(&(RID *)lookup_object(arg0), &(AABB *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_lightmap_capture_set_energy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->lightmap_capture_set_energy(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_lightmap_capture_set_octree(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->lightmap_capture_set_octree(&(RID *)lookup_object(arg0), &(PoolByteArray *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_lightmap_capture_set_octree_cell_subdiv(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->lightmap_capture_set_octree_cell_subdiv(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_lightmap_capture_set_octree_cell_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->lightmap_capture_set_octree_cell_transform(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_make_sphere_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->make_sphere_mesh(arg0, arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_material_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->material_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_material_get_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->material_get_param(&(RID *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_material_get_param_default(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->material_get_param_default(&(RID *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_material_get_shader(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->material_get_shader(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_material_set_line_width(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->material_set_line_width(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_material_set_next_pass(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->material_set_next_pass(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_material_set_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->material_set_param(&(RID *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_material_set_render_priority(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->material_set_render_priority(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_material_set_shader(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->material_set_shader(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_mesh_add_surface_from_arrays(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2, WasGoID arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_add_surface_from_arrays(&(RID *)lookup_object(arg0), arg1, &(Array *)lookup_array(arg2), &(Array *)lookup_array(arg3), arg4);
}
}
}
static void wasgo_VisualServer_mesh_clear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_clear(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_mesh_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->mesh_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_mesh_get_blend_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->mesh_get_blend_shape_count(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_mesh_get_blend_shape_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
enum.VisualServer::BlendShapeMode ret_value = caller->mesh_get_blend_shape_mode(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_mesh_get_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->mesh_get_custom_aabb(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_mesh_get_surface_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->mesh_get_surface_count(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_mesh_remove_surface(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_remove_surface(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_mesh_set_blend_shape_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_set_blend_shape_count(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_mesh_set_blend_shape_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_set_blend_shape_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_mesh_set_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_set_custom_aabb(&(RID *)lookup_object(arg0), &(AABB *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->mesh_surface_get_aabb(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->mesh_surface_get_array(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_mesh_surface_get_array_index_len(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->mesh_surface_get_array_index_len(&(RID *)lookup_object(arg0), arg1);
}
}
}
static int wasgo_VisualServer_mesh_surface_get_array_len(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->mesh_surface_get_array_len(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_arrays(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->mesh_surface_get_arrays(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_blend_shape_arrays(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->mesh_surface_get_blend_shape_arrays(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_mesh_surface_get_format(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->mesh_surface_get_format(&(RID *)lookup_object(arg0), arg1);
}
}
}
static int wasgo_VisualServer_mesh_surface_get_format_offset(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->mesh_surface_get_format_offset(arg0, arg1, arg2, arg3);
}
}
}
static int wasgo_VisualServer_mesh_surface_get_format_stride(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->mesh_surface_get_format_stride(arg0, arg1, arg2);
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_index_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->mesh_surface_get_index_array(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->mesh_surface_get_material(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_primitive_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
enum.VisualServer::PrimitiveType ret_value = caller->mesh_surface_get_primitive_type(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_mesh_surface_get_skeleton_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->mesh_surface_get_skeleton_aabb(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_mesh_surface_set_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_surface_set_material(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_mesh_surface_update_region(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->mesh_surface_update_region(&(RID *)lookup_object(arg0), arg1, arg2, &(PoolByteArray *)lookup_object(arg3));
}
}
}
static void wasgo_VisualServer_multimesh_allocate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_allocate(&(RID *)lookup_object(arg0), arg1, arg2, arg3, arg4);
}
}
}
static WasGoId wasgo_VisualServer_multimesh_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->multimesh_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_multimesh_get_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->multimesh_get_aabb(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_multimesh_get_instance_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->multimesh_get_instance_count(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_multimesh_get_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->multimesh_get_mesh(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_multimesh_get_visible_instances(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->multimesh_get_visible_instances(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_multimesh_instance_get_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->multimesh_instance_get_color(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_multimesh_instance_get_custom_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->multimesh_instance_get_custom_data(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_multimesh_instance_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->multimesh_instance_get_transform(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_multimesh_instance_get_transform_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->multimesh_instance_get_transform_2d(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_multimesh_instance_set_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_instance_set_color(&(RID *)lookup_object(arg0), arg1, &(Color *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_multimesh_instance_set_custom_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_instance_set_custom_data(&(RID *)lookup_object(arg0), arg1, &(Color *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_multimesh_instance_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_instance_set_transform(&(RID *)lookup_object(arg0), arg1, &(Transform *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_multimesh_instance_set_transform_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_instance_set_transform_2d(&(RID *)lookup_object(arg0), arg1, &(Transform2D *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_multimesh_set_as_bulk_array(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_set_as_bulk_array(&(RID *)lookup_object(arg0), &(PoolRealArray *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_multimesh_set_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_set_mesh(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_multimesh_set_visible_instances(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->multimesh_set_visible_instances(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_VisualServer_omni_light_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->omni_light_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_particles_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->particles_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_particles_get_current_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
AABB ret_value = caller->particles_get_current_aabb(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_particles_get_emitting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->particles_get_emitting(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_particles_is_inactive(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->particles_is_inactive(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_particles_request_process(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_request_process(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_particles_restart(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_restart(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_particles_set_amount(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_amount(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_custom_aabb(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_custom_aabb(&(RID *)lookup_object(arg0), &(AABB *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_particles_set_draw_order(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_draw_order(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_draw_pass_mesh(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_draw_pass_mesh(&(RID *)lookup_object(arg0), arg1, &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_particles_set_draw_passes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_draw_passes(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_emission_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_emission_transform(&(RID *)lookup_object(arg0), &(Transform *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_particles_set_emitting(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_emitting(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_particles_set_explosiveness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_explosiveness_ratio(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_fixed_fps(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_fixed_fps(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_fractional_delta(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_fractional_delta(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_particles_set_lifetime(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_lifetime(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_one_shot(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_one_shot(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_particles_set_pre_process_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_pre_process_time(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_process_material(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_process_material(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_particles_set_randomness_ratio(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_randomness_ratio(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_speed_scale(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_speed_scale(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_particles_set_use_local_coordinates(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->particles_set_use_local_coordinates(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_VisualServer_reflection_probe_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->reflection_probe_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_reflection_probe_set_as_interior(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_as_interior(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_reflection_probe_set_cull_mask(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_cull_mask(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_reflection_probe_set_enable_box_projection(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_enable_box_projection(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_reflection_probe_set_enable_shadows(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_enable_shadows(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_reflection_probe_set_extents(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_extents(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_reflection_probe_set_intensity(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_intensity(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_reflection_probe_set_interior_ambient(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_interior_ambient(&(RID *)lookup_object(arg0), &(Color *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_reflection_probe_set_interior_ambient_energy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_interior_ambient_energy(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_reflection_probe_set_interior_ambient_probe_contribution(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_interior_ambient_probe_contribution(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_reflection_probe_set_max_distance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_max_distance(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_reflection_probe_set_origin_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_origin_offset(&(RID *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_reflection_probe_set_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->reflection_probe_set_update_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_request_frame_drawn_callback(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->request_frame_drawn_callback(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_VisualServer_scenario_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->scenario_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_scenario_set_debug(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->scenario_set_debug(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_scenario_set_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->scenario_set_environment(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_scenario_set_fallback_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->scenario_set_fallback_environment(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_scenario_set_reflection_atlas_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->scenario_set_reflection_atlas_size(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualServer_set_boot_image(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->set_boot_image(&(Image *)lookup_object(arg0), &(Color *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(bool *)lookup_object(arg3));
}
}
}
static void wasgo_VisualServer_set_debug_generate_wireframes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->set_debug_generate_wireframes(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_set_default_clear_color(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->set_default_clear_color(&(Color *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_shader_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->shader_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_shader_get_code(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->shader_get_code(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_shader_get_default_texture_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->shader_get_default_texture_param(&(RID *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_shader_get_param_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->shader_get_param_list(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_shader_set_code(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->shader_set_code(&(RID *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_shader_set_default_texture_param(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->shader_set_default_texture_param(&(RID *)lookup_object(arg0), &(String *)lookup_object(arg1), &(RID *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_skeleton_allocate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->skeleton_allocate(&(RID *)lookup_object(arg0), arg1, &(bool *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_VisualServer_skeleton_bone_get_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->skeleton_bone_get_transform(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_skeleton_bone_get_transform_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Transform2D ret_value = caller->skeleton_bone_get_transform_2d(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_skeleton_bone_set_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->skeleton_bone_set_transform(&(RID *)lookup_object(arg0), arg1, &(Transform *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_skeleton_bone_set_transform_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->skeleton_bone_set_transform_2d(&(RID *)lookup_object(arg0), arg1, &(Transform2D *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_VisualServer_skeleton_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->skeleton_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_skeleton_get_bone_count(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->skeleton_get_bone_count(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_sky_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->sky_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_sky_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->sky_set_texture(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), arg2);
}
}
}
static WasGoId wasgo_VisualServer_spot_light_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->spot_light_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_sync(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->sync();
}
}
}
static void wasgo_VisualServer_texture_allocate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_allocate(&(RID *)lookup_object(arg0), arg1, arg2, arg3, arg4, arg5, arg6);
}
}
}
static void wasgo_VisualServer_texture_bind(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_bind(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_VisualServer_texture_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->texture_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_texture_create_from_image(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->texture_create_from_image(&(Image *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_texture_debug_usage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->texture_debug_usage();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualServer_texture_get_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
Image ret_value = caller->texture_get_data(&(RID *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_texture_get_depth(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->texture_get_depth(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_VisualServer_texture_get_flags(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->texture_get_flags(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_texture_get_format(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
enum.Image::Format ret_value = caller->texture_get_format(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_texture_get_height(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->texture_get_height(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_texture_get_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->texture_get_path(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_texture_get_texid(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->texture_get_texid(&(RID *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualServer_texture_get_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
enum.VisualServer::TextureType ret_value = caller->texture_get_type(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualServer_texture_get_width(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->texture_get_width(&(RID *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_texture_set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_set_data(&(RID *)lookup_object(arg0), &(Image *)lookup_object(arg1), arg2);
}
}
}
static void wasgo_VisualServer_texture_set_data_partial(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_set_data_partial(&(RID *)lookup_object(arg0), &(Image *)lookup_object(arg1), arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
}
}
static void wasgo_VisualServer_texture_set_flags(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_set_flags(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_texture_set_path(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_set_path(&(RID *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_texture_set_shrink_all_x2_on_set_data(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_set_shrink_all_x2_on_set_data(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_texture_set_size_override(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->texture_set_size_override(&(RID *)lookup_object(arg0), arg1, arg2, arg3);
}
}
}
static void wasgo_VisualServer_textures_keep_original(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->textures_keep_original(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_VisualServer_viewport_attach_camera(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_attach_camera(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_attach_canvas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_attach_canvas(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_attach_to_screen(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_attach_to_screen(&(RID *)lookup_object(arg0), &(Rect2 *)lookup_object(arg1), arg2);
}
}
}
static WasGoId wasgo_VisualServer_viewport_create(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->viewport_create();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_viewport_detach(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_detach(&(RID *)lookup_object(arg0));
}
}
}
static int wasgo_VisualServer_viewport_get_render_info(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
return caller->viewport_get_render_info(&(RID *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo_VisualServer_viewport_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->viewport_get_texture(&(RID *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualServer_viewport_remove_canvas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_remove_canvas(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_active(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_canvas_stacking(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_canvas_stacking(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), arg2, arg3);
}
}
}
static void wasgo_VisualServer_viewport_set_canvas_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_canvas_transform(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1), &(Transform2D *)lookup_object(arg2));
}
}
}
static void wasgo_VisualServer_viewport_set_clear_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_clear_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_viewport_set_debug_draw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_debug_draw(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_viewport_set_disable_3d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_disable_3d(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_disable_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_disable_environment(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_global_canvas_transform(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_global_canvas_transform(&(RID *)lookup_object(arg0), &(Transform2D *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_hdr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_hdr(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_hide_canvas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_hide_canvas(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_hide_scenario(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_hide_scenario(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_msaa(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_msaa(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_viewport_set_parent_viewport(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_parent_viewport(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_render_direct_to_screen(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_render_direct_to_screen(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_scenario(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_scenario(&(RID *)lookup_object(arg0), &(RID *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_shadow_atlas_quadrant_subdivision(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_shadow_atlas_quadrant_subdivision(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualServer_viewport_set_shadow_atlas_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_shadow_atlas_size(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_viewport_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_size(&(RID *)lookup_object(arg0), arg1, arg2);
}
}
}
static void wasgo_VisualServer_viewport_set_transparent_background(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_transparent_background(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_update_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_update_mode(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_viewport_set_usage(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_usage(&(RID *)lookup_object(arg0), arg1);
}
}
}
static void wasgo_VisualServer_viewport_set_use_arvr(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_use_arvr(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualServer_viewport_set_vflip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualServer *caller = (VisualServer *) state->lookup_object(caller_id);
if(caller){
caller->viewport_set_vflip(&(RID *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static void wasgo_VisualShader__input_type_changed(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->_input_type_changed(arg0, arg1);
}
}
}
static void wasgo_VisualShader__queue_update(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->_queue_update();
}
}
}
static void wasgo_VisualShader__update_shader(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->_update_shader();
}
}
}
static void wasgo_VisualShader_add_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->add_node(arg0, &(VisualShaderNode *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), arg3);
}
}
}
static WasGoId wasgo_VisualShader_can_connect_nodes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_connect_nodes(arg0, arg1, arg2, arg3, arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShader_connect_nodes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect_nodes(arg0, arg1, arg2, arg3, arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShader_connect_nodes_forced(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->connect_nodes_forced(arg0, arg1, arg2, arg3, arg4);
}
}
}
static void wasgo_VisualShader_disconnect_nodes(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_nodes(arg0, arg1, arg2, arg3, arg4);
}
}
}
static WasGoId wasgo_VisualShader_get_graph_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_graph_offset();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShader_get_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
VisualShaderNode ret_value = caller->get_node(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShader_get_node_connections(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_node_connections(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShader_get_node_list(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->get_node_list(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShader_get_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_node_position(arg0, arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualShader_get_valid_node_id(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
return caller->get_valid_node_id(arg0);
}
}
}
static WasGoId wasgo_VisualShader_is_node_connection(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_node_connection(arg0, arg1, arg2, arg3, arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShader_remove_node(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->remove_node(arg0, arg1);
}
}
}
static void wasgo_VisualShader_set_graph_offset(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->set_graph_offset(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo_VisualShader_set_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->set_mode(arg0);
}
}
}
static void wasgo_VisualShader_set_node_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShader *caller = (VisualShader *) state->lookup_object(caller_id);
if(caller){
caller->set_node_position(arg0, arg1, &(Vector2 *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_VisualShaderNode_get_default_input_values(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNode *caller = (VisualShaderNode *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_default_input_values();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNode_get_input_port_default_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNode *caller = (VisualShaderNode *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_input_port_default_value(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualShaderNode_get_output_port_for_preview(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNode *caller = (VisualShaderNode *) state->lookup_object(caller_id);
if(caller){
return caller->get_output_port_for_preview();
}
}
}
static void wasgo_VisualShaderNode_set_default_input_values(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNode *caller = (VisualShaderNode *) state->lookup_object(caller_id);
if(caller){
caller->set_default_input_values(&(Array *)lookup_array(arg0));
}
}
}
static void wasgo_VisualShaderNode_set_input_port_default_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNode *caller = (VisualShaderNode *) state->lookup_object(caller_id);
if(caller){
caller->set_input_port_default_value(arg0, &(Variant *)lookup_object(arg1));
}
}
}
static void wasgo_VisualShaderNode_set_output_port_for_preview(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNode *caller = (VisualShaderNode *) state->lookup_object(caller_id);
if(caller){
caller->set_output_port_for_preview(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeBooleanConstant_get_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeBooleanConstant *caller = (VisualShaderNodeBooleanConstant *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_constant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeBooleanConstant_set_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeBooleanConstant *caller = (VisualShaderNodeBooleanConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_constant(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualShaderNodeColorConstant_get_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeColorConstant *caller = (VisualShaderNodeColorConstant *) state->lookup_object(caller_id);
if(caller){
Color ret_value = caller->get_constant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeColorConstant_set_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeColorConstant *caller = (VisualShaderNodeColorConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_constant(&(Color *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualShaderNodeColorFunc_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeColorFunc *caller = (VisualShaderNodeColorFunc *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeColorFunc::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeColorFunc_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeColorFunc *caller = (VisualShaderNodeColorFunc *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeColorOp_get_operator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeColorOp *caller = (VisualShaderNodeColorOp *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeColorOp::Operator ret_value = caller->get_operator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeColorOp_set_operator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeColorOp *caller = (VisualShaderNodeColorOp *) state->lookup_object(caller_id);
if(caller){
caller->set_operator(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeCompare_get_comparison_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCompare *caller = (VisualShaderNodeCompare *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeCompare::ComparisonType ret_value = caller->get_comparison_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeCompare_get_condition(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCompare *caller = (VisualShaderNodeCompare *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeCompare::Condition ret_value = caller->get_condition();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeCompare_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCompare *caller = (VisualShaderNodeCompare *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeCompare::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeCompare_set_comparison_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCompare *caller = (VisualShaderNodeCompare *) state->lookup_object(caller_id);
if(caller){
caller->set_comparison_type(arg0);
}
}
}
static void wasgo_VisualShaderNodeCompare_set_condition(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCompare *caller = (VisualShaderNodeCompare *) state->lookup_object(caller_id);
if(caller){
caller->set_condition(arg0);
}
}
}
static void wasgo_VisualShaderNodeCompare_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCompare *caller = (VisualShaderNodeCompare *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeCubeMap_get_cube_map(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCubeMap *caller = (VisualShaderNodeCubeMap *) state->lookup_object(caller_id);
if(caller){
CubeMap ret_value = caller->get_cube_map();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeCubeMap_get_source(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCubeMap *caller = (VisualShaderNodeCubeMap *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeCubeMap::Source ret_value = caller->get_source();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeCubeMap_get_texture_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCubeMap *caller = (VisualShaderNodeCubeMap *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeCubeMap::TextureType ret_value = caller->get_texture_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeCubeMap_set_cube_map(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCubeMap *caller = (VisualShaderNodeCubeMap *) state->lookup_object(caller_id);
if(caller){
caller->set_cube_map(&(CubeMap *)lookup_object(arg0));
}
}
}
static void wasgo_VisualShaderNodeCubeMap_set_source(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCubeMap *caller = (VisualShaderNodeCubeMap *) state->lookup_object(caller_id);
if(caller){
caller->set_source(arg0);
}
}
}
static void wasgo_VisualShaderNodeCubeMap_set_texture_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCubeMap *caller = (VisualShaderNodeCubeMap *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_type(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_category(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_category();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_code(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_code(&(Array *)lookup_array(arg0), &(Array *)lookup_array(arg1), arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_description(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_description();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_global_code(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_global_code(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualShaderNodeCustom__get_input_port_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
return caller->_get_input_port_count();
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_input_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_input_port_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualShaderNodeCustom__get_input_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
return caller->_get_input_port_type(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualShaderNodeCustom__get_output_port_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
return caller->_get_output_port_count();
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_output_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_output_port_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualShaderNodeCustom__get_output_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
return caller->_get_output_port_type(arg0);
}
}
}
static int wasgo_VisualShaderNodeCustom__get_return_icon_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
return caller->_get_return_icon_type();
}
}
}
static WasGoId wasgo_VisualShaderNodeCustom__get_subcategory(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeCustom *caller = (VisualShaderNodeCustom *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->_get_subcategory();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeExpression_get_expression(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeExpression *caller = (VisualShaderNodeExpression *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_expression();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeExpression_set_expression(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeExpression *caller = (VisualShaderNodeExpression *) state->lookup_object(caller_id);
if(caller){
caller->set_expression(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualShaderNodeGroupBase_add_input_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->add_input_port(arg0, arg1, &(String *)lookup_object(arg2));
}
}
}
static void wasgo_VisualShaderNodeGroupBase_add_output_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->add_output_port(arg0, arg1, &(String *)lookup_object(arg2));
}
}
}
static void wasgo_VisualShaderNodeGroupBase_clear_input_ports(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->clear_input_ports();
}
}
}
static void wasgo_VisualShaderNodeGroupBase_clear_output_ports(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->clear_output_ports();
}
}
}
static int wasgo_VisualShaderNodeGroupBase_get_free_input_port_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
return caller->get_free_input_port_id();
}
}
}
static int wasgo_VisualShaderNodeGroupBase_get_free_output_port_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
return caller->get_free_output_port_id();
}
}
}
static int wasgo_VisualShaderNodeGroupBase_get_input_port_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
return caller->get_input_port_count();
}
}
}
static WasGoId wasgo_VisualShaderNodeGroupBase_get_inputs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_inputs();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_VisualShaderNodeGroupBase_get_output_port_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
return caller->get_output_port_count();
}
}
}
static WasGoId wasgo_VisualShaderNodeGroupBase_get_outputs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_outputs();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeGroupBase_get_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeGroupBase_has_input_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_input_port(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeGroupBase_has_output_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_output_port(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeGroupBase_is_valid_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_valid_port_name(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeGroupBase_remove_input_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->remove_input_port(arg0);
}
}
}
static void wasgo_VisualShaderNodeGroupBase_remove_output_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->remove_output_port(arg0);
}
}
}
static void wasgo_VisualShaderNodeGroupBase_set_input_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->set_input_port_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualShaderNodeGroupBase_set_input_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->set_input_port_type(arg0, arg1);
}
}
}
static void wasgo_VisualShaderNodeGroupBase_set_inputs(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->set_inputs(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualShaderNodeGroupBase_set_output_port_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->set_output_port_name(arg0, &(String *)lookup_object(arg1));
}
}
}
static void wasgo_VisualShaderNodeGroupBase_set_output_port_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->set_output_port_type(arg0, arg1);
}
}
}
static void wasgo_VisualShaderNodeGroupBase_set_outputs(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->set_outputs(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_VisualShaderNodeGroupBase_set_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeGroupBase *caller = (VisualShaderNodeGroupBase *) state->lookup_object(caller_id);
if(caller){
caller->set_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualShaderNodeInput_get_input_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeInput *caller = (VisualShaderNodeInput *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_input_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeInput_get_input_real_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeInput *caller = (VisualShaderNodeInput *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_input_real_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeInput_set_input_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeInput *caller = (VisualShaderNodeInput *) state->lookup_object(caller_id);
if(caller){
caller->set_input_name(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualShaderNodeIs_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeIs *caller = (VisualShaderNodeIs *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeIs::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeIs_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeIs *caller = (VisualShaderNodeIs *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static float wasgo_VisualShaderNodeScalarConstant_get_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarConstant *caller = (VisualShaderNodeScalarConstant *) state->lookup_object(caller_id);
if(caller){
return caller->get_constant();
}
}
}
static void wasgo_VisualShaderNodeScalarConstant_set_constant(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarConstant *caller = (VisualShaderNodeScalarConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_constant(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeScalarDerivativeFunc_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarDerivativeFunc *caller = (VisualShaderNodeScalarDerivativeFunc *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeScalarDerivativeFunc::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeScalarDerivativeFunc_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarDerivativeFunc *caller = (VisualShaderNodeScalarDerivativeFunc *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeScalarFunc_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarFunc *caller = (VisualShaderNodeScalarFunc *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeScalarFunc::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeScalarFunc_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarFunc *caller = (VisualShaderNodeScalarFunc *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeScalarOp_get_operator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarOp *caller = (VisualShaderNodeScalarOp *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeScalarOp::Operator ret_value = caller->get_operator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeScalarOp_set_operator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeScalarOp *caller = (VisualShaderNodeScalarOp *) state->lookup_object(caller_id);
if(caller){
caller->set_operator(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeTexture_get_source(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTexture *caller = (VisualShaderNodeTexture *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeTexture::Source ret_value = caller->get_source();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeTexture_get_texture(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTexture *caller = (VisualShaderNodeTexture *) state->lookup_object(caller_id);
if(caller){
Texture ret_value = caller->get_texture();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeTexture_get_texture_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTexture *caller = (VisualShaderNodeTexture *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeTexture::TextureType ret_value = caller->get_texture_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeTexture_set_source(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTexture *caller = (VisualShaderNodeTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_source(arg0);
}
}
}
static void wasgo_VisualShaderNodeTexture_set_texture(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTexture *caller = (VisualShaderNodeTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_texture(&(Texture *)lookup_object(arg0));
}
}
}
static void wasgo_VisualShaderNodeTexture_set_texture_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTexture *caller = (VisualShaderNodeTexture *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_type(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeTextureUniform_get_color_default(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTextureUniform *caller = (VisualShaderNodeTextureUniform *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeTextureUniform::ColorDefault ret_value = caller->get_color_default();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_VisualShaderNodeTextureUniform_get_texture_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTextureUniform *caller = (VisualShaderNodeTextureUniform *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeTextureUniform::TextureType ret_value = caller->get_texture_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeTextureUniform_set_color_default(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTextureUniform *caller = (VisualShaderNodeTextureUniform *) state->lookup_object(caller_id);
if(caller){
caller->set_color_default(arg0);
}
}
}
static void wasgo_VisualShaderNodeTextureUniform_set_texture_type(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTextureUniform *caller = (VisualShaderNodeTextureUniform *) state->lookup_object(caller_id);
if(caller){
caller->set_texture_type(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeTransformConstant_get_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformConstant *caller = (VisualShaderNodeTransformConstant *) state->lookup_object(caller_id);
if(caller){
Transform ret_value = caller->get_constant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeTransformConstant_set_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformConstant *caller = (VisualShaderNodeTransformConstant *) state->lookup_object(caller_id);
if(caller){
caller->set_constant(&(Transform *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualShaderNodeTransformFunc_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformFunc *caller = (VisualShaderNodeTransformFunc *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeTransformFunc::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeTransformFunc_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformFunc *caller = (VisualShaderNodeTransformFunc *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeTransformMult_get_operator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformMult *caller = (VisualShaderNodeTransformMult *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeTransformMult::Operator ret_value = caller->get_operator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeTransformMult_set_operator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformMult *caller = (VisualShaderNodeTransformMult *) state->lookup_object(caller_id);
if(caller){
caller->set_operator(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeTransformVecMult_get_operator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformVecMult *caller = (VisualShaderNodeTransformVecMult *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeTransformVecMult::Operator ret_value = caller->get_operator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeTransformVecMult_set_operator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeTransformVecMult *caller = (VisualShaderNodeTransformVecMult *) state->lookup_object(caller_id);
if(caller){
caller->set_operator(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeUniform_get_uniform_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeUniform *caller = (VisualShaderNodeUniform *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_uniform_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeUniform_set_uniform_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeUniform *caller = (VisualShaderNodeUniform *) state->lookup_object(caller_id);
if(caller){
caller->set_uniform_name(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualShaderNodeVec3Constant_get_constant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVec3Constant *caller = (VisualShaderNodeVec3Constant *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_constant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeVec3Constant_set_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVec3Constant *caller = (VisualShaderNodeVec3Constant *) state->lookup_object(caller_id);
if(caller){
caller->set_constant(&(Vector3 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_VisualShaderNodeVectorDerivativeFunc_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVectorDerivativeFunc *caller = (VisualShaderNodeVectorDerivativeFunc *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeVectorDerivativeFunc::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeVectorDerivativeFunc_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVectorDerivativeFunc *caller = (VisualShaderNodeVectorDerivativeFunc *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeVectorFunc_get_function(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVectorFunc *caller = (VisualShaderNodeVectorFunc *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeVectorFunc::Function ret_value = caller->get_function();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeVectorFunc_set_function(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVectorFunc *caller = (VisualShaderNodeVectorFunc *) state->lookup_object(caller_id);
if(caller){
caller->set_function(arg0);
}
}
}
static WasGoId wasgo_VisualShaderNodeVectorOp_get_operator(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVectorOp *caller = (VisualShaderNodeVectorOp *) state->lookup_object(caller_id);
if(caller){
enum.VisualShaderNodeVectorOp::Operator ret_value = caller->get_operator();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_VisualShaderNodeVectorOp_set_operator(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
VisualShaderNodeVectorOp *caller = (VisualShaderNodeVectorOp *) state->lookup_object(caller_id);
if(caller){
caller->set_operator(arg0);
}
}
}
static WasGoId wasgo_WeakRef_get_ref(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WeakRef *caller = (WeakRef *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_ref();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebRTCDataChannel_close(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
caller->close();
}
}
}
static int wasgo_WebRTCDataChannel_get_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
return caller->get_id();
}
}
}
static WasGoId wasgo_WebRTCDataChannel_get_label(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_label();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_WebRTCDataChannel_get_max_packet_life_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_packet_life_time();
}
}
}
static int wasgo_WebRTCDataChannel_get_max_retransmits(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
return caller->get_max_retransmits();
}
}
}
static WasGoId wasgo_WebRTCDataChannel_get_protocol(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_protocol();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCDataChannel_get_ready_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
enum.WebRTCDataChannel::ChannelState ret_value = caller->get_ready_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCDataChannel_get_write_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
enum.WebRTCDataChannel::WriteMode ret_value = caller->get_write_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCDataChannel_is_negotiated(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_negotiated();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCDataChannel_is_ordered(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ordered();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCDataChannel_poll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->poll();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebRTCDataChannel_set_write_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
caller->set_write_mode(arg0);
}
}
}
static WasGoId wasgo_WebRTCDataChannel_was_string_packet(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCDataChannel *caller = (WebRTCDataChannel *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->was_string_packet();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCMultiplayer_add_peer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCMultiplayer *caller = (WebRTCMultiplayer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->add_peer(&(WebRTCPeerConnection *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebRTCMultiplayer_close(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCMultiplayer *caller = (WebRTCMultiplayer *) state->lookup_object(caller_id);
if(caller){
caller->close();
}
}
}
static WasGoId wasgo_WebRTCMultiplayer_get_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCMultiplayer *caller = (WebRTCMultiplayer *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_peer(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCMultiplayer_get_peers(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCMultiplayer *caller = (WebRTCMultiplayer *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_peers();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCMultiplayer_has_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCMultiplayer *caller = (WebRTCMultiplayer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_peer(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCMultiplayer_initialize(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCMultiplayer *caller = (WebRTCMultiplayer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->initialize(arg0, &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebRTCMultiplayer_remove_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCMultiplayer *caller = (WebRTCMultiplayer *) state->lookup_object(caller_id);
if(caller){
caller->remove_peer(arg0);
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_add_ice_candidate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->add_ice_candidate(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebRTCPeerConnection_close(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
caller->close();
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_create_data_channel(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
WebRTCDataChannel ret_value = caller->create_data_channel(&(String *)lookup_object(arg0), &(Dictionary *)lookup_dictionary(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_create_offer(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->create_offer();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_get_connection_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
enum.WebRTCPeerConnection::ConnectionState ret_value = caller->get_connection_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_initialize(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->initialize(&(Dictionary *)lookup_dictionary(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_poll(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->poll();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_set_local_description(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->set_local_description(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebRTCPeerConnection_set_remote_description(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebRTCPeerConnection *caller = (WebRTCPeerConnection *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->set_remote_description(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketClient_connect_to_url(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->connect_to_url(&(String *)lookup_object(arg0), &(PoolStringArray *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(PoolStringArray *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebSocketClient_disconnect_from_host(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_from_host(arg0, &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_WebSocketClient_get_connected_host(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_connected_host();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_WebSocketClient_get_connected_port(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
return caller->get_connected_port();
}
}
}
static WasGoId wasgo_WebSocketClient_get_trusted_ssl_certificate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
X509Certificate ret_value = caller->get_trusted_ssl_certificate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketClient_is_verify_ssl_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_verify_ssl_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebSocketClient_set_trusted_ssl_certificate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
caller->set_trusted_ssl_certificate(&(X509Certificate *)lookup_object(arg0));
}
}
}
static void wasgo_WebSocketClient_set_verify_ssl_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketClient *caller = (WebSocketClient *) state->lookup_object(caller_id);
if(caller){
caller->set_verify_ssl_enabled(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_WebSocketMultiplayerPeer_get_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketMultiplayerPeer *caller = (WebSocketMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
WebSocketPeer ret_value = caller->get_peer(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketMultiplayerPeer_set_buffers(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketMultiplayerPeer *caller = (WebSocketMultiplayerPeer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->set_buffers(arg0, arg1, arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebSocketPeer_close(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
caller->close(arg0, &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo_WebSocketPeer_get_connected_host(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_connected_host();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_WebSocketPeer_get_connected_port(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
return caller->get_connected_port();
}
}
}
static WasGoId wasgo_WebSocketPeer_get_write_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
enum.WebSocketPeer::WriteMode ret_value = caller->get_write_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketPeer_is_connected_to_host(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_connected_to_host();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebSocketPeer_set_no_delay(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_no_delay(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_WebSocketPeer_set_write_mode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
caller->set_write_mode(arg0);
}
}
}
static WasGoId wasgo_WebSocketPeer_was_string_packet(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketPeer *caller = (WebSocketPeer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->was_string_packet();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebSocketServer_disconnect_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
caller->disconnect_peer(arg0, arg1, &(String *)lookup_object(arg2));
}
}
}
static WasGoId wasgo_WebSocketServer_get_bind_ip(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_bind_ip();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketServer_get_ca_chain(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
X509Certificate ret_value = caller->get_ca_chain();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketServer_get_peer_address(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_peer_address(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_WebSocketServer_get_peer_port(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
return caller->get_peer_port(arg0);
}
}
}
static WasGoId wasgo_WebSocketServer_get_private_key(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
CryptoKey ret_value = caller->get_private_key();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketServer_get_ssl_certificate(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
X509Certificate ret_value = caller->get_ssl_certificate();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketServer_has_peer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_peer(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketServer_is_listening(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_listening();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WebSocketServer_listen(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->listen(arg0, &(PoolStringArray *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WebSocketServer_set_bind_ip(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
caller->set_bind_ip(&(String *)lookup_object(arg0));
}
}
}
static void wasgo_WebSocketServer_set_ca_chain(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
caller->set_ca_chain(&(X509Certificate *)lookup_object(arg0));
}
}
}
static void wasgo_WebSocketServer_set_private_key(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
caller->set_private_key(&(CryptoKey *)lookup_object(arg0));
}
}
}
static void wasgo_WebSocketServer_set_ssl_certificate(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
caller->set_ssl_certificate(&(X509Certificate *)lookup_object(arg0));
}
}
}
static void wasgo_WebSocketServer_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WebSocketServer *caller = (WebSocketServer *) state->lookup_object(caller_id);
if(caller){
caller->stop();
}
}
}
static void wasgo_WindowDialog__closed(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WindowDialog *caller = (WindowDialog *) state->lookup_object(caller_id);
if(caller){
caller->_closed();
}
}
}
static void wasgo_WindowDialog__gui_input(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WindowDialog *caller = (WindowDialog *) state->lookup_object(caller_id);
if(caller){
caller->_gui_input(&(InputEvent *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_WindowDialog_get_close_button(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WindowDialog *caller = (WindowDialog *) state->lookup_object(caller_id);
if(caller){
TextureButton ret_value = caller->get_close_button();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WindowDialog_get_resizable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WindowDialog *caller = (WindowDialog *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_resizable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WindowDialog_get_title(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WindowDialog *caller = (WindowDialog *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_title();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WindowDialog_set_resizable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WindowDialog *caller = (WindowDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_resizable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo_WindowDialog_set_title(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WindowDialog *caller = (WindowDialog *) state->lookup_object(caller_id);
if(caller){
caller->set_title(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_World_get_direct_space_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World *caller = (World *) state->lookup_object(caller_id);
if(caller){
PhysicsDirectSpaceState ret_value = caller->get_direct_space_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_World_get_environment(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World *caller = (World *) state->lookup_object(caller_id);
if(caller){
Environment ret_value = caller->get_environment();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_World_get_fallback_environment(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World *caller = (World *) state->lookup_object(caller_id);
if(caller){
Environment ret_value = caller->get_fallback_environment();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_World_get_scenario(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World *caller = (World *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_scenario();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_World_get_space(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World *caller = (World *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_space();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_World_set_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World *caller = (World *) state->lookup_object(caller_id);
if(caller){
caller->set_environment(&(Environment *)lookup_object(arg0));
}
}
}
static void wasgo_World_set_fallback_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World *caller = (World *) state->lookup_object(caller_id);
if(caller){
caller->set_fallback_environment(&(Environment *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_World2D_get_canvas(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World2D *caller = (World2D *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_canvas();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_World2D_get_direct_space_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World2D *caller = (World2D *) state->lookup_object(caller_id);
if(caller){
Physics2DDirectSpaceState ret_value = caller->get_direct_space_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_World2D_get_space(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
World2D *caller = (World2D *) state->lookup_object(caller_id);
if(caller){
RID ret_value = caller->get_space();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_WorldEnvironment_get_environment(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WorldEnvironment *caller = (WorldEnvironment *) state->lookup_object(caller_id);
if(caller){
Environment ret_value = caller->get_environment();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_WorldEnvironment_set_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
WorldEnvironment *caller = (WorldEnvironment *) state->lookup_object(caller_id);
if(caller){
caller->set_environment(&(Environment *)lookup_object(arg0));
}
}
}
static WasGoId wasgo_X509Certificate_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
X509Certificate *caller = (X509Certificate *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->load(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_X509Certificate_save(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
X509Certificate *caller = (X509Certificate *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_XMLParser_get_attribute_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
return caller->get_attribute_count();
}
}
}
static WasGoId wasgo_XMLParser_get_attribute_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_attribute_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_get_attribute_value(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_attribute_value(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_XMLParser_get_current_line(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
return caller->get_current_line();
}
}
}
static WasGoId wasgo_XMLParser_get_named_attribute_value(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_named_attribute_value(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_get_named_attribute_value_safe(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_named_attribute_value_safe(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_get_node_data(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_node_data();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_get_node_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_node_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo_XMLParser_get_node_offset(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
return caller->get_node_offset();
}
}
}
static WasGoId wasgo_XMLParser_get_node_type(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
enum.XMLParser::NodeType ret_value = caller->get_node_type();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_has_attribute(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_attribute(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_is_empty(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_empty();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_open(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->open(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_open_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->open_buffer(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_read(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->read();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo_XMLParser_seek(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->seek(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_XMLParser_skip_section(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
XMLParser *caller = (XMLParser *) state->lookup_object(caller_id);
if(caller){
caller->skip_section();
}
}
}
static WasGoId wasgo_YSort_is_sort_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
YSort *caller = (YSort *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_sort_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo_YSort_set_sort_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
YSort *caller = (YSort *) state->lookup_object(caller_id);
if(caller){
caller->set_sort_enabled(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo__ClassDB_can_instance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_instance(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_exists(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->class_exists(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_get_category(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->class_get_category(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__ClassDB_class_get_integer_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
return caller->class_get_integer_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo__ClassDB_class_get_integer_constant_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->class_get_integer_constant_list(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_get_method_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->class_get_method_list(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_get_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->class_get_property(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_get_property_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->class_get_property_list(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_get_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->class_get_signal(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_get_signal_list(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->class_get_signal_list(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_has_integer_constant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->class_has_integer_constant(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_has_method(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->class_has_method(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_has_signal(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->class_has_signal(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_class_set_property(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->class_set_property(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_get_class_list(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_class_list();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_get_inheriters_from_class(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_inheriters_from_class(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_get_parent_class(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_parent_class(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_instance(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->instance(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_is_class_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_class_enabled(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ClassDB_is_parent_class(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ClassDB *caller = (_ClassDB *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_parent_class(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_change_dir(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->change_dir(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_copy(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->copy(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_current_is_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->current_is_dir();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_dir_exists(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->dir_exists(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_file_exists(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->file_exists(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_get_current_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_current_dir();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__Directory_get_current_drive(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
return caller->get_current_drive();
}
}
}
static WasGoId wasgo__Directory_get_drive(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_drive(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__Directory_get_drive_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
return caller->get_drive_count();
}
}
}
static WasGoId wasgo__Directory_get_next(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_next();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__Directory_get_space_left(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
return caller->get_space_left();
}
}
}
static WasGoId wasgo__Directory_list_dir_begin(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->list_dir_begin(&(bool *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__Directory_list_dir_end(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
caller->list_dir_end();
}
}
}
static WasGoId wasgo__Directory_make_dir(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->make_dir(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_make_dir_recursive(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->make_dir_recursive(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_open(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->open(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_remove(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->remove(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Directory_rename(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Directory *caller = (_Directory *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->rename(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_get_author_info(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_author_info();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_get_copyright_info(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->get_copyright_info();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_get_donor_info(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_donor_info();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__Engine_get_frames_drawn(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_frames_drawn();
}
}
}
static float wasgo__Engine_get_frames_per_second(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_frames_per_second();
}
}
}
static int wasgo__Engine_get_idle_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_idle_frames();
}
}
}
static int wasgo__Engine_get_iterations_per_second(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_iterations_per_second();
}
}
}
static WasGoId wasgo__Engine_get_license_info(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_license_info();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_get_license_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_license_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_get_main_loop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
MainLoop ret_value = caller->get_main_loop();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__Engine_get_physics_frames(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_physics_frames();
}
}
}
static float wasgo__Engine_get_physics_interpolation_fraction(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_physics_interpolation_fraction();
}
}
}
static float wasgo__Engine_get_physics_jitter_fix(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_physics_jitter_fix();
}
}
}
static WasGoId wasgo__Engine_get_singleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
Object ret_value = caller->get_singleton(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__Engine_get_target_fps(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_target_fps();
}
}
}
static float wasgo__Engine_get_time_scale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
return caller->get_time_scale();
}
}
}
static WasGoId wasgo__Engine_get_version_info(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_version_info();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_has_singleton(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_singleton(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_is_editor_hint(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_editor_hint();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Engine_is_in_physics_frame(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_in_physics_frame();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__Engine_set_editor_hint(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
caller->set_editor_hint(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__Engine_set_iterations_per_second(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
caller->set_iterations_per_second(arg0);
}
}
}
static void wasgo__Engine_set_physics_jitter_fix(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
caller->set_physics_jitter_fix(arg0);
}
}
}
static void wasgo__Engine_set_target_fps(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
caller->set_target_fps(arg0);
}
}
}
static void wasgo__Engine_set_time_scale(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Engine *caller = (_Engine *) state->lookup_object(caller_id);
if(caller){
caller->set_time_scale(arg0);
}
}
}
static void wasgo__File_close(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->close();
}
}
}
static WasGoId wasgo__File_eof_reached(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->eof_reached();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_file_exists(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->file_exists(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__File_get_16(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_16();
}
}
}
static int wasgo__File_get_32(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_32();
}
}
}
static int wasgo__File_get_64(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_64();
}
}
}
static int wasgo__File_get_8(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_8();
}
}
}
static WasGoId wasgo__File_get_as_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_as_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_get_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->get_buffer(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_get_csv_line(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_csv_line(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo__File_get_double(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_double();
}
}
}
static WasGoId wasgo__File_get_endian_swap(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_endian_swap();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_get_error(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->get_error();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo__File_get_float(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_float();
}
}
}
static int wasgo__File_get_len(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_len();
}
}
}
static WasGoId wasgo__File_get_line(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_line();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_get_md5(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_md5(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__File_get_modified_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_modified_time(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo__File_get_pascal_string(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_pascal_string();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_get_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_get_path_absolute(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_path_absolute();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__File_get_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_position();
}
}
}
static float wasgo__File_get_real(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
return caller->get_real();
}
}
}
static WasGoId wasgo__File_get_sha256(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_sha256(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_get_var(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->get_var(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_is_open(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_open();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_open(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->open(&(String *)lookup_object(arg0), arg1);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_open_compressed(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->open_compressed(&(String *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_open_encrypted(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->open_encrypted(&(String *)lookup_object(arg0), arg1, &(PoolByteArray *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__File_open_encrypted_with_pass(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->open_encrypted_with_pass(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__File_seek(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->seek(arg0);
}
}
}
static void wasgo__File_seek_end(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->seek_end(arg0);
}
}
}
static void wasgo__File_set_endian_swap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->set_endian_swap(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__File_store_16(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_16(arg0);
}
}
}
static void wasgo__File_store_32(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_32(arg0);
}
}
}
static void wasgo__File_store_64(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_64(arg0);
}
}
}
static void wasgo__File_store_8(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_8(arg0);
}
}
}
static void wasgo__File_store_buffer(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_buffer(&(PoolByteArray *)lookup_object(arg0));
}
}
}
static void wasgo__File_store_csv_line(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_csv_line(&(PoolStringArray *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static void wasgo__File_store_double(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_double(arg0);
}
}
}
static void wasgo__File_store_float(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_float(arg0);
}
}
}
static void wasgo__File_store_line(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_line(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__File_store_pascal_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_pascal_string(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__File_store_real(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_real(arg0);
}
}
}
static void wasgo__File_store_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_string(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__File_store_var(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_File *caller = (_File *) state->lookup_object(caller_id);
if(caller){
caller->store_var(&(Variant *)lookup_object(arg0), &(bool *)lookup_object(arg1));
}
}
}
static WasGoId wasgo__Geometry_build_box_planes(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->build_box_planes(&(Vector3 *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_build_capsule_planes(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, int arg2, int arg3, int arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->build_capsule_planes(arg0, arg1, arg2, arg3, arg4);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_build_cylinder_planes(wasm_exec_env_t exec_env, WasGoID caller_id, float arg0, float arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->build_cylinder_planes(arg0, arg1, arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_clip_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->clip_polygon(&(PoolVector3Array *)lookup_object(arg0), &(Plane *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_clip_polygons_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->clip_polygons_2d(&(PoolVector2Array *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_clip_polyline_with_polygon_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->clip_polyline_with_polygon_2d(&(PoolVector2Array *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_convex_hull_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->convex_hull_2d(&(PoolVector2Array *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_exclude_polygons_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->exclude_polygons_2d(&(PoolVector2Array *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_get_closest_point_to_segment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_closest_point_to_segment(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_get_closest_point_to_segment_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_closest_point_to_segment_2d(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_get_closest_point_to_segment_uncapped(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Vector3 ret_value = caller->get_closest_point_to_segment_uncapped(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_get_closest_point_to_segment_uncapped_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_closest_point_to_segment_uncapped_2d(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_get_closest_points_between_segments(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->get_closest_points_between_segments(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2), &(Vector3 *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_get_closest_points_between_segments_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolVector2Array ret_value = caller->get_closest_points_between_segments_2d(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__Geometry_get_uv84_normal_bit(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
return caller->get_uv84_normal_bit(&(Vector3 *)lookup_object(arg0));
}
}
}
static WasGoId wasgo__Geometry_intersect_polygons_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->intersect_polygons_2d(&(PoolVector2Array *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_intersect_polyline_with_polygon_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->intersect_polyline_with_polygon_2d(&(PoolVector2Array *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_is_point_in_circle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_point_in_circle(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_is_point_in_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_point_in_polygon(&(Vector2 *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_is_polygon_clockwise(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_polygon_clockwise(&(PoolVector2Array *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_line_intersects_line_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->line_intersects_line_2d(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_make_atlas(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->make_atlas(&(PoolVector2Array *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_merge_polygons_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->merge_polygons_2d(&(PoolVector2Array *)lookup_object(arg0), &(PoolVector2Array *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_offset_polygon_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->offset_polygon_2d(&(PoolVector2Array *)lookup_object(arg0), arg1, arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_offset_polyline_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, int arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Array ret_value = caller->offset_polyline_2d(&(PoolVector2Array *)lookup_object(arg0), arg1, arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_point_is_inside_triangle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->point_is_inside_triangle(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_ray_intersects_triangle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->ray_intersects_triangle(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2), &(Vector3 *)lookup_object(arg3), &(Vector3 *)lookup_object(arg4));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static float wasgo__Geometry_segment_intersects_circle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
return caller->segment_intersects_circle(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), arg3);
}
}
}
static WasGoId wasgo__Geometry_segment_intersects_convex(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->segment_intersects_convex(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Array *)lookup_array(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_segment_intersects_cylinder(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, float arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->segment_intersects_cylinder(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), arg2, arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_segment_intersects_segment_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->segment_intersects_segment_2d(&(Vector2 *)lookup_object(arg0), &(Vector2 *)lookup_object(arg1), &(Vector2 *)lookup_object(arg2), &(Vector2 *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_segment_intersects_sphere(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, float arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolVector3Array ret_value = caller->segment_intersects_sphere(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2), arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_segment_intersects_triangle(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->segment_intersects_triangle(&(Vector3 *)lookup_object(arg0), &(Vector3 *)lookup_object(arg1), &(Vector3 *)lookup_object(arg2), &(Vector3 *)lookup_object(arg3), &(Vector3 *)lookup_object(arg4));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_triangulate_delaunay_2d(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->triangulate_delaunay_2d(&(PoolVector2Array *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Geometry_triangulate_polygon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Geometry *caller = (_Geometry *) state->lookup_object(caller_id);
if(caller){
PoolIntArray ret_value = caller->triangulate_polygon(&(PoolVector2Array *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__JSON_parse(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_JSON *caller = (_JSON *) state->lookup_object(caller_id);
if(caller){
JSONParseResult ret_value = caller->parse(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__JSON_print(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_JSON *caller = (_JSON *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->print(&(Variant *)lookup_object(arg0), &(String *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Marshalls_base64_to_raw(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Marshalls *caller = (_Marshalls *) state->lookup_object(caller_id);
if(caller){
PoolByteArray ret_value = caller->base64_to_raw(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Marshalls_base64_to_utf8(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Marshalls *caller = (_Marshalls *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->base64_to_utf8(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Marshalls_base64_to_variant(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Marshalls *caller = (_Marshalls *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->base64_to_variant(&(String *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Marshalls_raw_to_base64(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Marshalls *caller = (_Marshalls *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->raw_to_base64(&(PoolByteArray *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Marshalls_utf8_to_base64(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Marshalls *caller = (_Marshalls *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->utf8_to_base64(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Marshalls_variant_to_base64(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Marshalls *caller = (_Marshalls *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->variant_to_base64(&(Variant *)lookup_object(arg0), &(bool *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__Mutex_lock(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Mutex *caller = (_Mutex *) state->lookup_object(caller_id);
if(caller){
caller->lock();
}
}
}
static WasGoId wasgo__Mutex_try_lock(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Mutex *caller = (_Mutex *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->try_lock();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__Mutex_unlock(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Mutex *caller = (_Mutex *) state->lookup_object(caller_id);
if(caller){
caller->unlock();
}
}
}
static void wasgo__OS_alert(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->alert(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}
static WasGoId wasgo__OS_can_draw(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_draw();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_can_use_threads(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->can_use_threads();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_center_window(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->center_window();
}
}
}
static void wasgo__OS_close_midi_inputs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->close_midi_inputs();
}
}
}
static void wasgo__OS_delay_msec(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->delay_msec(arg0);
}
}
}
static void wasgo__OS_delay_usec(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->delay_usec(arg0);
}
}
}
static void wasgo__OS_dump_memory_to_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->dump_memory_to_file(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__OS_dump_resources_to_file(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->dump_resources_to_file(&(String *)lookup_object(arg0));
}
}
}
static int wasgo__OS_execute(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3, WasGoID arg4){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->execute(&(String *)lookup_object(arg0), &(PoolStringArray *)lookup_object(arg1), &(bool *)lookup_object(arg2), &(Array *)lookup_array(arg3), &(bool *)lookup_object(arg4));
}
}
}
static int wasgo__OS_find_scancode_from_string(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->find_scancode_from_string(&(String *)lookup_object(arg0));
}
}
}
static int wasgo__OS_get_audio_driver_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_audio_driver_count();
}
}
}
static WasGoId wasgo__OS_get_audio_driver_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_audio_driver_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_borderless_window(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_borderless_window();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_clipboard(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_clipboard();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_cmdline_args(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_cmdline_args();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_connected_midi_inputs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_connected_midi_inputs();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_current_screen(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_current_screen();
}
}
}
static WasGoId wasgo__OS_get_current_video_driver(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
enum._OS::VideoDriver ret_value = caller->get_current_video_driver();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_date(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_date(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_datetime(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_datetime(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_datetime_from_unix_time(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_datetime_from_unix_time(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_dynamic_memory_usage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_dynamic_memory_usage();
}
}
}
static WasGoId wasgo__OS_get_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_environment(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_executable_path(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_executable_path();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_exit_code(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_exit_code();
}
}
}
static WasGoId wasgo__OS_get_granted_permissions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_granted_permissions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_ime_selection(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_ime_selection();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_ime_text(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_ime_text();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_latin_keyboard_variant(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_latin_keyboard_variant();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_locale(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_locale();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_low_processor_usage_mode_sleep_usec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_low_processor_usage_mode_sleep_usec();
}
}
}
static WasGoId wasgo__OS_get_max_window_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_max_window_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_min_window_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_min_window_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_model_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_model_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_name(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_name();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_power_percent_left(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_power_percent_left();
}
}
}
static int wasgo__OS_get_power_seconds_left(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_power_seconds_left();
}
}
}
static WasGoId wasgo__OS_get_power_state(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
enum._OS::PowerState ret_value = caller->get_power_state();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_process_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_process_id();
}
}
}
static int wasgo__OS_get_processor_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_processor_count();
}
}
}
static WasGoId wasgo__OS_get_real_window_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_real_window_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_scancode_string(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_scancode_string(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_screen_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_screen_count();
}
}
}
static int wasgo__OS_get_screen_dpi(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_screen_dpi(arg0);
}
}
}
static WasGoId wasgo__OS_get_screen_orientation(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
enum._OS::ScreenOrientation ret_value = caller->get_screen_orientation();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_screen_position(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_screen_position(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_screen_size(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_screen_size(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_splash_tick_msec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_splash_tick_msec();
}
}
}
static int wasgo__OS_get_static_memory_peak_usage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_static_memory_peak_usage();
}
}
}
static int wasgo__OS_get_static_memory_usage(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_static_memory_usage();
}
}
}
static WasGoId wasgo__OS_get_system_dir(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_system_dir(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_system_time_msecs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_system_time_msecs();
}
}
}
static int wasgo__OS_get_system_time_secs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_system_time_secs();
}
}
}
static int wasgo__OS_get_ticks_msec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_ticks_msec();
}
}
}
static int wasgo__OS_get_ticks_usec(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_ticks_usec();
}
}
}
static WasGoId wasgo__OS_get_time(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_time(&(bool *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_time_zone_info(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Dictionary ret_value = caller->get_time_zone_info();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_unique_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_unique_id();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_unix_time(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_unix_time();
}
}
}
static int wasgo__OS_get_unix_time_from_datetime(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_unix_time_from_datetime(&(Dictionary *)lookup_dictionary(arg0));
}
}
}
static WasGoId wasgo__OS_get_user_data_dir(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_user_data_dir();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_video_driver_count(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_video_driver_count();
}
}
}
static WasGoId wasgo__OS_get_video_driver_name(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_video_driver_name(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static int wasgo__OS_get_virtual_keyboard_height(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
return caller->get_virtual_keyboard_height();
}
}
}
static WasGoId wasgo__OS_get_window_per_pixel_transparency_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->get_window_per_pixel_transparency_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_window_position(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_window_position();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_window_safe_area(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Rect2 ret_value = caller->get_window_safe_area();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_get_window_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
Vector2 ret_value = caller->get_window_size();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_global_menu_add_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->global_menu_add_item(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2), &(Variant *)lookup_object(arg3));
}
}
}
static void wasgo__OS_global_menu_add_separator(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->global_menu_add_separator(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__OS_global_menu_clear(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->global_menu_clear(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__OS_global_menu_remove_item(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, int arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->global_menu_remove_item(&(String *)lookup_object(arg0), arg1);
}
}
}
static WasGoId wasgo__OS_has_environment(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_environment(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_has_feature(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_feature(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_has_touchscreen_ui_hint(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_touchscreen_ui_hint();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_has_virtual_keyboard(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_virtual_keyboard();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_hide_virtual_keyboard(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->hide_virtual_keyboard();
}
}
}
static WasGoId wasgo__OS_is_debug_build(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_debug_build();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_in_low_processor_usage_mode(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_in_low_processor_usage_mode();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_keep_screen_on(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_keep_screen_on();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_ok_left_and_cancel_right(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_ok_left_and_cancel_right();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_scancode_unicode(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_scancode_unicode(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_stdout_verbose(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_stdout_verbose();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_userfs_persistent(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_userfs_persistent();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_vsync_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_vsync_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_vsync_via_compositor_enabled(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_vsync_via_compositor_enabled();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_window_always_on_top(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_window_always_on_top();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_window_focused(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_window_focused();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_window_fullscreen(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_window_fullscreen();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_window_maximized(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_window_maximized();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_window_minimized(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_window_minimized();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_is_window_resizable(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_window_resizable();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_kill(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->kill(arg0);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_move_window_to_foreground(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->move_window_to_foreground();
}
}
}
static WasGoId wasgo__OS_native_video_is_playing(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->native_video_is_playing();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_native_video_pause(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->native_video_pause();
}
}
}
static WasGoId wasgo__OS_native_video_play(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, float arg1, WasGoID arg2, WasGoID arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->native_video_play(&(String *)lookup_object(arg0), arg1, &(String *)lookup_object(arg2), &(String *)lookup_object(arg3));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_native_video_stop(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->native_video_stop();
}
}
}
static void wasgo__OS_native_video_unpause(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->native_video_unpause();
}
}
}
static void wasgo__OS_open_midi_inputs(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->open_midi_inputs();
}
}
}
static void wasgo__OS_print_all_resources(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->print_all_resources(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__OS_print_all_textures_by_size(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->print_all_textures_by_size();
}
}
}
static void wasgo__OS_print_resources_by_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->print_resources_by_type(&(PoolStringArray *)lookup_object(arg0));
}
}
}
static void wasgo__OS_print_resources_in_use(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->print_resources_in_use(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_request_attention(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->request_attention();
}
}
}
static WasGoId wasgo__OS_request_permission(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->request_permission(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__OS_request_permissions(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->request_permissions();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_set_borderless_window(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_borderless_window(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_clipboard(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_clipboard(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_current_screen(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_current_screen(arg0);
}
}
}
static void wasgo__OS_set_exit_code(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_exit_code(arg0);
}
}
}
static void wasgo__OS_set_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_icon(&(Image *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_ime_active(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_ime_active(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_ime_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_ime_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_keep_screen_on(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_keep_screen_on(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_low_processor_usage_mode(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_low_processor_usage_mode(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_low_processor_usage_mode_sleep_usec(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_low_processor_usage_mode_sleep_usec(arg0);
}
}
}
static void wasgo__OS_set_max_window_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_max_window_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_min_window_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_min_window_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_native_icon(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_native_icon(&(String *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_screen_orientation(wasm_exec_env_t exec_env, WasGoID caller_id, int arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_screen_orientation(arg0);
}
}
}
static WasGoId wasgo__OS_set_thread_name(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->set_thread_name(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_set_use_file_access_save_and_swap(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_use_file_access_save_and_swap(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_use_vsync(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_use_vsync(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_vsync_via_compositor(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_vsync_via_compositor(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_always_on_top(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_always_on_top(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_fullscreen(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_fullscreen(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_maximized(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_maximized(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_minimized(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_minimized(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_per_pixel_transparency_enabled(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_per_pixel_transparency_enabled(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_position(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_position(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_resizable(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_resizable(&(bool *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_size(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_size(&(Vector2 *)lookup_object(arg0));
}
}
}
static void wasgo__OS_set_window_title(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->set_window_title(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo__OS_shell_open(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->shell_open(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__OS_show_virtual_keyboard(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_OS *caller = (_OS *) state->lookup_object(caller_id);
if(caller){
caller->show_virtual_keyboard(&(String *)lookup_object(arg0));
}
}
}
static WasGoId wasgo__ResourceLoader_exists(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->exists(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ResourceLoader_get_dependencies(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_dependencies(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ResourceLoader_get_recognized_extensions_for_type(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_recognized_extensions_for_type(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ResourceLoader_has(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ResourceLoader_has_cached(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->has_cached(&(String *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ResourceLoader_load(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
Resource ret_value = caller->load(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(bool *)lookup_object(arg2));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ResourceLoader_load_interactive(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
ResourceInteractiveLoader ret_value = caller->load_interactive(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__ResourceLoader_set_abort_on_missing_resources(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceLoader *caller = (_ResourceLoader *) state->lookup_object(caller_id);
if(caller){
caller->set_abort_on_missing_resources(&(bool *)lookup_object(arg0));
}
}
}
static WasGoId wasgo__ResourceSaver_get_recognized_extensions(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceSaver *caller = (_ResourceSaver *) state->lookup_object(caller_id);
if(caller){
PoolStringArray ret_value = caller->get_recognized_extensions(&(Resource *)lookup_object(arg0));
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__ResourceSaver_save(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, int arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_ResourceSaver *caller = (_ResourceSaver *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->save(&(String *)lookup_object(arg0), &(Resource *)lookup_object(arg1), arg2);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Semaphore_post(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Semaphore *caller = (_Semaphore *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->post();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Semaphore_wait(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Semaphore *caller = (_Semaphore *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->wait();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Thread_get_id(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Thread *caller = (_Thread *) state->lookup_object(caller_id);
if(caller){
String ret_value = caller->get_id();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Thread_is_active(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Thread *caller = (_Thread *) state->lookup_object(caller_id);
if(caller){
bool ret_value = caller->is_active();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Thread_start(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2, int arg3){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Thread *caller = (_Thread *) state->lookup_object(caller_id);
if(caller){
enum.Error ret_value = caller->start(&(Object *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Variant *)lookup_object(arg2), arg3);
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static WasGoId wasgo__Thread_wait_to_finish(wasm_exec_env_t exec_env, WasGoID caller_id){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_Thread *caller = (_Thread *) state->lookup_object(caller_id);
if(caller){
Variant ret_value = caller->wait_to_finish();
WasGoId new_id = state->generate_id();
referencedObjects.set(new_id, ret_value.get_instance_id())
referencedObjectsReverse.set(ret_value.get_instance_id(), new_id)
return new_id
}
}
}
static void wasgo__VisualScriptEditor_add_custom_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1, WasGoID arg2){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_VisualScriptEditor *caller = (_VisualScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->add_custom_node(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1), &(Script *)lookup_object(arg2));
}
}
}
static void wasgo__VisualScriptEditor_remove_custom_node(wasm_exec_env_t exec_env, WasGoID caller_id, WasGoID arg0, WasGoID arg1){
WasGoState *state = wasm_runtime_get_user_data(exec_env);
if(state){
_VisualScriptEditor *caller = (_VisualScriptEditor *) state->lookup_object(caller_id);
if(caller){
caller->remove_custom_node(&(String *)lookup_object(arg0), &(String *)lookup_object(arg1));
}
}
}