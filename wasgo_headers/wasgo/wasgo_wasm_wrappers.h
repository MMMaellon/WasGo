#ifndef WASM_WRAPPERS_H
#define WASM_WRAPPER_H
#include "Variant.h"
#include "wasgo/wasgo.h"
extern "C" {
int _wasgo_ARVRAnchor_wrapper_get_anchor_id();
WasGo::WasGoId _wasgo_ARVRAnchor_wrapper_get_anchor_name();
int _wasgo_ARVRAnchor_wrapper_get_is_active();
WasGo::WasGoId _wasgo_ARVRAnchor_wrapper_get_mesh();
WasGo::WasGoId _wasgo_ARVRAnchor_wrapper_get_plane();
WasGo::WasGoId _wasgo_ARVRAnchor_wrapper_get_size();
void _wasgo_ARVRAnchor_wrapper_set_anchor_id(int p_anchor_id);
int _wasgo_ARVRController_wrapper_get_controller_id();
WasGo::WasGoId _wasgo_ARVRController_wrapper_get_controller_name();
WasGo::WasGoId _wasgo_ARVRController_wrapper_get_hand();
int _wasgo_ARVRController_wrapper_get_is_active();
float _wasgo_ARVRController_wrapper_get_joystick_axis(int p_axis);
int _wasgo_ARVRController_wrapper_get_joystick_id();
WasGo::WasGoId _wasgo_ARVRController_wrapper_get_mesh();
float _wasgo_ARVRController_wrapper_get_rumble();
int _wasgo_ARVRController_wrapper_is_button_pressed(int p_button);
void _wasgo_ARVRController_wrapper_set_controller_id(int p_controller_id);
void _wasgo_ARVRController_wrapper_set_rumble(float p_rumble);
int _wasgo_ARVRInterface_wrapper_get_anchor_detection_is_enabled();
int _wasgo_ARVRInterface_wrapper_get_camera_feed_id();
int _wasgo_ARVRInterface_wrapper_get_capabilities();
WasGo::WasGoId _wasgo_ARVRInterface_wrapper_get_name();
WasGo::WasGoId _wasgo_ARVRInterface_wrapper_get_render_targetsize();
WasGo::WasGoId _wasgo_ARVRInterface_wrapper_get_tracking_status();
int _wasgo_ARVRInterface_wrapper_initialize();
int _wasgo_ARVRInterface_wrapper_is_initialized();
int _wasgo_ARVRInterface_wrapper_is_primary();
int _wasgo_ARVRInterface_wrapper_is_stereo();
void _wasgo_ARVRInterface_wrapper_set_anchor_detection_is_enabled(bool p_enable);
void _wasgo_ARVRInterface_wrapper_set_is_initialized(bool p_initialized);
void _wasgo_ARVRInterface_wrapper_set_is_primary(bool p_enable);
void _wasgo_ARVRInterface_wrapper_uninitialize();
float _wasgo_ARVROrigin_wrapper_get_world_scale();
void _wasgo_ARVROrigin_wrapper_set_world_scale(float p_world_scale);
WasGo::WasGoId _wasgo_ARVRPositionalTracker_wrapper_get_hand();
int _wasgo_ARVRPositionalTracker_wrapper_get_joy_id();
WasGo::WasGoId _wasgo_ARVRPositionalTracker_wrapper_get_mesh();
WasGo::WasGoId _wasgo_ARVRPositionalTracker_wrapper_get_name();
WasGo::WasGoId _wasgo_ARVRPositionalTracker_wrapper_get_orientation();
WasGo::WasGoId _wasgo_ARVRPositionalTracker_wrapper_get_position();
int _wasgo_ARVRPositionalTracker_wrapper_get_tracker_id();
int _wasgo_ARVRPositionalTracker_wrapper_get_tracks_orientation();
int _wasgo_ARVRPositionalTracker_wrapper_get_tracks_position();
WasGo::WasGoId _wasgo_ARVRPositionalTracker_wrapper_get_transform(bool p_adjust_by_reference_frame);
WasGo::WasGoId _wasgo_ARVRPositionalTracker_wrapper_get_type();
void _wasgo_ARVRServer_wrapper_center_on_hmd(WasGo::WasGoId p_rotation_mode, bool p_keep_height);
WasGo::WasGoId _wasgo_ARVRServer_wrapper_find_interface(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_ARVRServer_wrapper_get_hmd_transform();
WasGo::WasGoId _wasgo_ARVRServer_wrapper_get_interface(int p_idx);
int _wasgo_ARVRServer_wrapper_get_interface_count();
WasGo::WasGoId _wasgo_ARVRServer_wrapper_get_interfaces();
int _wasgo_ARVRServer_wrapper_get_last_commit_usec();
int _wasgo_ARVRServer_wrapper_get_last_frame_usec();
int _wasgo_ARVRServer_wrapper_get_last_process_usec();
WasGo::WasGoId _wasgo_ARVRServer_wrapper_get_primary_interface();
WasGo::WasGoId _wasgo_ARVRServer_wrapper_get_reference_frame();
WasGo::WasGoId _wasgo_ARVRServer_wrapper_get_tracker(int p_idx);
int _wasgo_ARVRServer_wrapper_get_tracker_count();
float _wasgo_ARVRServer_wrapper_get_world_scale();
void _wasgo_ARVRServer_wrapper_set_primary_interface(WasGo::WasGoId p_interface);
void _wasgo_ARVRServer_wrapper_set_world_scale(float p_arg0);
WasGo::WasGoId _wasgo_AnimatedSprite_wrapper_get_animation();
WasGo::WasGoId _wasgo_AnimatedSprite_wrapper_get_sprite_frames();
void _wasgo_AnimatedSprite_wrapper_set_animation(WasGo::WasGoId p_animation);
void _wasgo_AnimatedSprite_wrapper_set_sprite_frames(WasGo::WasGoId p_sprite_frames);
WasGo::WasGoId _wasgo_AnimatedSprite3D_wrapper_get_animation();
WasGo::WasGoId _wasgo_AnimatedSprite3D_wrapper_get_sprite_frames();
void _wasgo_AnimatedSprite3D_wrapper_set_animation(WasGo::WasGoId p_animation);
void _wasgo_AnimatedSprite3D_wrapper_set_sprite_frames(WasGo::WasGoId p_sprite_frames);
int _wasgo_AnimatedTexture_wrapper_get_current_frame();
float _wasgo_AnimatedTexture_wrapper_get_fps();
float _wasgo_AnimatedTexture_wrapper_get_frame_delay(int p_frame);
WasGo::WasGoId _wasgo_AnimatedTexture_wrapper_get_frame_texture(int p_frame);
int _wasgo_AnimatedTexture_wrapper_get_frames();
int _wasgo_AnimatedTexture_wrapper_get_oneshot();
int _wasgo_AnimatedTexture_wrapper_get_pause();
void _wasgo_AnimatedTexture_wrapper_set_current_frame(int p_frame);
void _wasgo_AnimatedTexture_wrapper_set_fps(float p_fps);
void _wasgo_AnimatedTexture_wrapper_set_frame_delay(int p_frame, float p_delay);
void _wasgo_AnimatedTexture_wrapper_set_frame_texture(int p_frame, WasGo::WasGoId p_texture);
void _wasgo_AnimatedTexture_wrapper_set_frames(int p_frames);
void _wasgo_AnimatedTexture_wrapper_set_oneshot(bool p_oneshot);
void _wasgo_AnimatedTexture_wrapper_set_pause(bool p_pause);
int _wasgo_Animation_wrapper_add_track(WasGo::WasGoId p_type, int p_at_position);
WasGo::WasGoId _wasgo_Animation_wrapper_animation_track_get_key_animation(int p_track_idx, int p_key_idx);
int _wasgo_Animation_wrapper_animation_track_insert_key(int p_track_idx, float p_time, WasGo::WasGoId p_animation);
void _wasgo_Animation_wrapper_animation_track_set_key_animation(int p_track_idx, int p_key_idx, WasGo::WasGoId p_animation);
float _wasgo_Animation_wrapper_audio_track_get_key_end_offset(int p_track_idx, int p_key_idx);
float _wasgo_Animation_wrapper_audio_track_get_key_start_offset(int p_track_idx, int p_key_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_audio_track_get_key_stream(int p_track_idx, int p_key_idx);
int _wasgo_Animation_wrapper_audio_track_insert_key(int p_track_idx, float p_time, WasGo::WasGoId p_stream, float p_start_offset, float p_end_offset);
void _wasgo_Animation_wrapper_audio_track_set_key_end_offset(int p_track_idx, int p_key_idx, float p_offset);
void _wasgo_Animation_wrapper_audio_track_set_key_start_offset(int p_track_idx, int p_key_idx, float p_offset);
void _wasgo_Animation_wrapper_audio_track_set_key_stream(int p_track_idx, int p_key_idx, WasGo::WasGoId p_stream);
WasGo::WasGoId _wasgo_Animation_wrapper_bezier_track_get_key_in_handle(int p_track_idx, int p_key_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_bezier_track_get_key_out_handle(int p_track_idx, int p_key_idx);
float _wasgo_Animation_wrapper_bezier_track_get_key_value(int p_track_idx, int p_key_idx);
int _wasgo_Animation_wrapper_bezier_track_insert_key(int p_track_idx, float p_time, float p_value, WasGo::WasGoId p_in_handle, WasGo::WasGoId p_out_handle);
float _wasgo_Animation_wrapper_bezier_track_interpolate(int p_track_idx, float p_time);
void _wasgo_Animation_wrapper_bezier_track_set_key_in_handle(int p_track_idx, int p_key_idx, WasGo::WasGoId p_in_handle);
void _wasgo_Animation_wrapper_bezier_track_set_key_out_handle(int p_track_idx, int p_key_idx, WasGo::WasGoId p_out_handle);
void _wasgo_Animation_wrapper_bezier_track_set_key_value(int p_track_idx, int p_key_idx, float p_value);
void _wasgo_Animation_wrapper_clear();
void _wasgo_Animation_wrapper_copy_track(int p_track_idx, WasGo::WasGoId p_to_animation);
int _wasgo_Animation_wrapper_find_track(WasGo::WasGoId p_path);
float _wasgo_Animation_wrapper_get_length();
float _wasgo_Animation_wrapper_get_step();
int _wasgo_Animation_wrapper_get_track_count();
int _wasgo_Animation_wrapper_has_loop();
WasGo::WasGoId _wasgo_Animation_wrapper_method_track_get_key_indices(int p_track_idx, float p_time_sec, float p_delta);
WasGo::WasGoId _wasgo_Animation_wrapper_method_track_get_name(int p_track_idx, int p_key_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_method_track_get_params(int p_track_idx, int p_key_idx);
void _wasgo_Animation_wrapper_remove_track(int p_track_idx);
void _wasgo_Animation_wrapper_set_length(float p_time_sec);
void _wasgo_Animation_wrapper_set_loop(bool p_enabled);
void _wasgo_Animation_wrapper_set_step(float p_size_sec);
int _wasgo_Animation_wrapper_track_find_key(int p_track_idx, float p_time, bool p_exact);
int _wasgo_Animation_wrapper_track_get_interpolation_loop_wrap(int p_track_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_track_get_interpolation_type(int p_track_idx);
int _wasgo_Animation_wrapper_track_get_key_count(int p_track_idx);
float _wasgo_Animation_wrapper_track_get_key_time(int p_track_idx, int p_key_idx);
float _wasgo_Animation_wrapper_track_get_key_transition(int p_track_idx, int p_key_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_track_get_key_value(int p_track_idx, int p_key_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_track_get_path(int p_track_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_track_get_type(int p_track_idx);
void _wasgo_Animation_wrapper_track_insert_key(int p_track_idx, float p_time, WasGo::WasGoId p_key, float p_transition);
int _wasgo_Animation_wrapper_track_is_enabled(int p_track_idx);
int _wasgo_Animation_wrapper_track_is_imported(int p_track_idx);
void _wasgo_Animation_wrapper_track_move_down(int p_track_idx);
void _wasgo_Animation_wrapper_track_move_to(int p_track_idx, int p_to_idx);
void _wasgo_Animation_wrapper_track_move_up(int p_track_idx);
void _wasgo_Animation_wrapper_track_remove_key(int p_track_idx, int p_key_idx);
void _wasgo_Animation_wrapper_track_remove_key_at_position(int p_track_idx, float p_position);
void _wasgo_Animation_wrapper_track_set_enabled(int p_track_idx, bool p_enabled);
void _wasgo_Animation_wrapper_track_set_imported(int p_track_idx, bool p_imported);
void _wasgo_Animation_wrapper_track_set_interpolation_loop_wrap(int p_track_idx, bool p_interpolation);
void _wasgo_Animation_wrapper_track_set_interpolation_type(int p_track_idx, WasGo::WasGoId p_interpolation);
void _wasgo_Animation_wrapper_track_set_key_time(int p_track_idx, int p_key_idx, float p_time);
void _wasgo_Animation_wrapper_track_set_key_transition(int p_track_idx, int p_key_idx, float p_transition);
void _wasgo_Animation_wrapper_track_set_key_value(int p_track_idx, int p_key, WasGo::WasGoId p_value);
void _wasgo_Animation_wrapper_track_set_path(int p_track_idx, WasGo::WasGoId p_path);
void _wasgo_Animation_wrapper_track_swap(int p_track_idx, int p_with_idx);
int _wasgo_Animation_wrapper_transform_track_insert_key(int p_track_idx, float p_time, WasGo::WasGoId p_location, WasGo::WasGoId p_rotation, WasGo::WasGoId p_scale);
WasGo::WasGoId _wasgo_Animation_wrapper_transform_track_interpolate(int p_track_idx, float p_time_sec);
WasGo::WasGoId _wasgo_Animation_wrapper_value_track_get_key_indices(int p_track_idx, float p_time_sec, float p_delta);
WasGo::WasGoId _wasgo_Animation_wrapper_value_track_get_update_mode(int p_track_idx);
WasGo::WasGoId _wasgo_Animation_wrapper_value_track_interpolate(int p_track_idx, float p_time_sec);
void _wasgo_Animation_wrapper_value_track_set_update_mode(int p_track_idx, WasGo::WasGoId p_mode);
void _wasgo_AnimationNode_wrapper_add_input(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AnimationNode_wrapper_get_caption();
WasGo::WasGoId _wasgo_AnimationNode_wrapper_get_child_by_name(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AnimationNode_wrapper_get_child_nodes();
int _wasgo_AnimationNode_wrapper_get_input_count();
WasGo::WasGoId _wasgo_AnimationNode_wrapper_get_input_name(int p_input);
WasGo::WasGoId _wasgo_AnimationNode_wrapper_get_parameter_default_value(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AnimationNode_wrapper_get_parameter_list();
WasGo::WasGoId _wasgo_AnimationNode_wrapper_has_filter();
int _wasgo_AnimationNode_wrapper_is_filter_enabled();
int _wasgo_AnimationNode_wrapper_is_path_filtered(WasGo::WasGoId p_path);
void _wasgo_AnimationNode_wrapper_process(float p_time, bool p_seek);
void _wasgo_AnimationNode_wrapper_remove_input(int p_index);
void _wasgo_AnimationNode_wrapper_set_filter_enabled(bool p_enable);
void _wasgo_AnimationNode_wrapper_set_filter_path(WasGo::WasGoId p_path, bool p_enable);
int _wasgo_AnimationNodeAdd2_wrapper_is_using_sync();
void _wasgo_AnimationNodeAdd2_wrapper_set_use_sync(bool p_enable);
int _wasgo_AnimationNodeAdd3_wrapper_is_using_sync();
void _wasgo_AnimationNodeAdd3_wrapper_set_use_sync(bool p_enable);
WasGo::WasGoId _wasgo_AnimationNodeAnimation_wrapper_get_animation();
void _wasgo_AnimationNodeAnimation_wrapper_set_animation(WasGo::WasGoId p_name);
int _wasgo_AnimationNodeBlend2_wrapper_is_using_sync();
void _wasgo_AnimationNodeBlend2_wrapper_set_use_sync(bool p_enable);
int _wasgo_AnimationNodeBlend3_wrapper_is_using_sync();
void _wasgo_AnimationNodeBlend3_wrapper_set_use_sync(bool p_enable);
void _wasgo_AnimationNodeBlendSpace1D_wrapper_add_blend_point(WasGo::WasGoId p_node, float p_pos, int p_at_index);
int _wasgo_AnimationNodeBlendSpace1D_wrapper_get_blend_point_count();
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace1D_wrapper_get_blend_point_node(int p_point);
float _wasgo_AnimationNodeBlendSpace1D_wrapper_get_blend_point_position(int p_point);
float _wasgo_AnimationNodeBlendSpace1D_wrapper_get_max_space();
float _wasgo_AnimationNodeBlendSpace1D_wrapper_get_min_space();
float _wasgo_AnimationNodeBlendSpace1D_wrapper_get_snap();
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace1D_wrapper_get_value_label();
void _wasgo_AnimationNodeBlendSpace1D_wrapper_remove_blend_point(int p_point);
void _wasgo_AnimationNodeBlendSpace1D_wrapper_set_blend_point_node(int p_point, WasGo::WasGoId p_node);
void _wasgo_AnimationNodeBlendSpace1D_wrapper_set_blend_point_position(int p_point, float p_pos);
void _wasgo_AnimationNodeBlendSpace1D_wrapper_set_max_space(float p_max_space);
void _wasgo_AnimationNodeBlendSpace1D_wrapper_set_min_space(float p_min_space);
void _wasgo_AnimationNodeBlendSpace1D_wrapper_set_snap(float p_snap);
void _wasgo_AnimationNodeBlendSpace1D_wrapper_set_value_label(WasGo::WasGoId p_text);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_add_blend_point(WasGo::WasGoId p_node, WasGo::WasGoId p_pos, int p_at_index);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_add_triangle(int p_x, int p_y, int p_z, int p_at_index);
int _wasgo_AnimationNodeBlendSpace2D_wrapper_get_blend_point_count();
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace2D_wrapper_get_blend_point_node(int p_point);
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace2D_wrapper_get_blend_point_position(int p_point);
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace2D_wrapper_get_max_space();
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace2D_wrapper_get_min_space();
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace2D_wrapper_get_snap();
int _wasgo_AnimationNodeBlendSpace2D_wrapper_get_triangle_count();
int _wasgo_AnimationNodeBlendSpace2D_wrapper_get_triangle_point(int p_triangle, int p_point);
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace2D_wrapper_get_x_label();
WasGo::WasGoId _wasgo_AnimationNodeBlendSpace2D_wrapper_get_y_label();
void _wasgo_AnimationNodeBlendSpace2D_wrapper_remove_blend_point(int p_point);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_remove_triangle(int p_triangle);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_set_blend_point_node(int p_point, WasGo::WasGoId p_node);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_set_blend_point_position(int p_point, WasGo::WasGoId p_pos);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_set_max_space(WasGo::WasGoId p_max_space);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_set_min_space(WasGo::WasGoId p_min_space);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_set_snap(WasGo::WasGoId p_snap);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_set_x_label(WasGo::WasGoId p_text);
void _wasgo_AnimationNodeBlendSpace2D_wrapper_set_y_label(WasGo::WasGoId p_text);
void _wasgo_AnimationNodeBlendTree_wrapper_add_node(WasGo::WasGoId p_name, WasGo::WasGoId p_node, WasGo::WasGoId p_position);
void _wasgo_AnimationNodeBlendTree_wrapper_connect_node(WasGo::WasGoId p_input_node, int p_input_index, WasGo::WasGoId p_output_node);
void _wasgo_AnimationNodeBlendTree_wrapper_disconnect_node(WasGo::WasGoId p_input_node, int p_input_index);
WasGo::WasGoId _wasgo_AnimationNodeBlendTree_wrapper_get_graph_offset();
WasGo::WasGoId _wasgo_AnimationNodeBlendTree_wrapper_get_node(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AnimationNodeBlendTree_wrapper_get_node_position(WasGo::WasGoId p_name);
int _wasgo_AnimationNodeBlendTree_wrapper_has_node(WasGo::WasGoId p_name);
void _wasgo_AnimationNodeBlendTree_wrapper_remove_node(WasGo::WasGoId p_name);
void _wasgo_AnimationNodeBlendTree_wrapper_rename_node(WasGo::WasGoId p_name, WasGo::WasGoId p_new_name);
void _wasgo_AnimationNodeBlendTree_wrapper_set_graph_offset(WasGo::WasGoId p_offset);
void _wasgo_AnimationNodeBlendTree_wrapper_set_node_position(WasGo::WasGoId p_name, WasGo::WasGoId p_position);
float _wasgo_AnimationNodeOneShot_wrapper_get_autorestart_delay();
float _wasgo_AnimationNodeOneShot_wrapper_get_autorestart_random_delay();
float _wasgo_AnimationNodeOneShot_wrapper_get_fadein_time();
float _wasgo_AnimationNodeOneShot_wrapper_get_fadeout_time();
WasGo::WasGoId _wasgo_AnimationNodeOneShot_wrapper_get_mix_mode();
int _wasgo_AnimationNodeOneShot_wrapper_has_autorestart();
int _wasgo_AnimationNodeOneShot_wrapper_is_using_sync();
void _wasgo_AnimationNodeOneShot_wrapper_set_autorestart(bool p_enable);
void _wasgo_AnimationNodeOneShot_wrapper_set_autorestart_delay(float p_enable);
void _wasgo_AnimationNodeOneShot_wrapper_set_autorestart_random_delay(float p_enable);
void _wasgo_AnimationNodeOneShot_wrapper_set_fadein_time(float p_time);
void _wasgo_AnimationNodeOneShot_wrapper_set_fadeout_time(float p_time);
void _wasgo_AnimationNodeOneShot_wrapper_set_mix_mode(WasGo::WasGoId p_mode);
void _wasgo_AnimationNodeOneShot_wrapper_set_use_sync(bool p_enable);
void _wasgo_AnimationNodeStateMachine_wrapper_add_node(WasGo::WasGoId p_name, WasGo::WasGoId p_node, WasGo::WasGoId p_position);
void _wasgo_AnimationNodeStateMachine_wrapper_add_transition(WasGo::WasGoId p_from, WasGo::WasGoId p_to, WasGo::WasGoId p_transition);
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_end_node();
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_graph_offset();
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_node(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_node_name(WasGo::WasGoId p_node);
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_node_position(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_start_node();
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_transition(int p_idx);
int _wasgo_AnimationNodeStateMachine_wrapper_get_transition_count();
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_transition_from(int p_idx);
WasGo::WasGoId _wasgo_AnimationNodeStateMachine_wrapper_get_transition_to(int p_idx);
int _wasgo_AnimationNodeStateMachine_wrapper_has_node(WasGo::WasGoId p_name);
int _wasgo_AnimationNodeStateMachine_wrapper_has_transition(WasGo::WasGoId p_from, WasGo::WasGoId p_to);
void _wasgo_AnimationNodeStateMachine_wrapper_remove_node(WasGo::WasGoId p_name);
void _wasgo_AnimationNodeStateMachine_wrapper_remove_transition(WasGo::WasGoId p_from, WasGo::WasGoId p_to);
void _wasgo_AnimationNodeStateMachine_wrapper_remove_transition_by_index(int p_idx);
void _wasgo_AnimationNodeStateMachine_wrapper_rename_node(WasGo::WasGoId p_name, WasGo::WasGoId p_new_name);
void _wasgo_AnimationNodeStateMachine_wrapper_replace_node(WasGo::WasGoId p_name, WasGo::WasGoId p_node);
void _wasgo_AnimationNodeStateMachine_wrapper_set_end_node(WasGo::WasGoId p_name);
void _wasgo_AnimationNodeStateMachine_wrapper_set_graph_offset(WasGo::WasGoId p_offset);
void _wasgo_AnimationNodeStateMachine_wrapper_set_node_position(WasGo::WasGoId p_name, WasGo::WasGoId p_position);
void _wasgo_AnimationNodeStateMachine_wrapper_set_start_node(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AnimationNodeStateMachinePlayback_wrapper_get_current_node();
WasGo::WasGoId _wasgo_AnimationNodeStateMachinePlayback_wrapper_get_travel_path();
int _wasgo_AnimationNodeStateMachinePlayback_wrapper_is_playing();
void _wasgo_AnimationNodeStateMachinePlayback_wrapper_start(WasGo::WasGoId p_node);
void _wasgo_AnimationNodeStateMachinePlayback_wrapper_stop();
void _wasgo_AnimationNodeStateMachinePlayback_wrapper_travel(WasGo::WasGoId p_to_node);
WasGo::WasGoId _wasgo_AnimationNodeStateMachineTransition_wrapper_get_advance_condition();
int _wasgo_AnimationNodeStateMachineTransition_wrapper_get_priority();
WasGo::WasGoId _wasgo_AnimationNodeStateMachineTransition_wrapper_get_switch_mode();
float _wasgo_AnimationNodeStateMachineTransition_wrapper_get_xfade_time();
int _wasgo_AnimationNodeStateMachineTransition_wrapper_has_auto_advance();
int _wasgo_AnimationNodeStateMachineTransition_wrapper_is_disabled();
void _wasgo_AnimationNodeStateMachineTransition_wrapper_set_advance_condition(WasGo::WasGoId p_name);
void _wasgo_AnimationNodeStateMachineTransition_wrapper_set_auto_advance(bool p_auto_advance);
void _wasgo_AnimationNodeStateMachineTransition_wrapper_set_disabled(bool p_disabled);
void _wasgo_AnimationNodeStateMachineTransition_wrapper_set_priority(int p_priority);
void _wasgo_AnimationNodeStateMachineTransition_wrapper_set_switch_mode(WasGo::WasGoId p_mode);
void _wasgo_AnimationNodeStateMachineTransition_wrapper_set_xfade_time(float p_secs);
float _wasgo_AnimationNodeTransition_wrapper_get_cross_fade_time();
int _wasgo_AnimationNodeTransition_wrapper_get_enabled_inputs();
WasGo::WasGoId _wasgo_AnimationNodeTransition_wrapper_get_input_caption(int p_input);
int _wasgo_AnimationNodeTransition_wrapper_is_input_set_as_auto_advance(int p_input);
void _wasgo_AnimationNodeTransition_wrapper_set_cross_fade_time(float p_time);
void _wasgo_AnimationNodeTransition_wrapper_set_enabled_inputs(int p_amount);
void _wasgo_AnimationNodeTransition_wrapper_set_input_as_auto_advance(int p_input, bool p_enable);
void _wasgo_AnimationNodeTransition_wrapper_set_input_caption(int p_input, WasGo::WasGoId p_caption);
WasGo::WasGoId _wasgo_AnimationTree_wrapper_get_animation_player();
WasGo::WasGoId _wasgo_AnimationTree_wrapper_get_process_mode();
WasGo::WasGoId _wasgo_AnimationTree_wrapper_get_root_motion_track();
WasGo::WasGoId _wasgo_AnimationTree_wrapper_get_root_motion_transform();
WasGo::WasGoId _wasgo_AnimationTree_wrapper_get_tree_root();
int _wasgo_AnimationTree_wrapper_is_active();
void _wasgo_AnimationTree_wrapper_set_active(bool p_active);
void _wasgo_AnimationTree_wrapper_set_animation_player(WasGo::WasGoId p_root);
void _wasgo_AnimationTree_wrapper_set_process_mode(WasGo::WasGoId p_mode);
void _wasgo_AnimationTree_wrapper_set_root_motion_track(WasGo::WasGoId p_path);
void _wasgo_AnimationTree_wrapper_set_tree_root(WasGo::WasGoId p_root);
void _wasgo_AnimationTreePlayer_wrapper_add_node(WasGo::WasGoId p_type, WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_advance(float p_delta);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_animation_node_get_animation(WasGo::WasGoId p_id);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_animation_node_get_master_animation(WasGo::WasGoId p_id);
float _wasgo_AnimationTreePlayer_wrapper_animation_node_get_position(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_animation_node_set_animation(WasGo::WasGoId p_id, WasGo::WasGoId p_animation);
void _wasgo_AnimationTreePlayer_wrapper_animation_node_set_filter_path(WasGo::WasGoId p_id, WasGo::WasGoId p_path, bool p_enable);
void _wasgo_AnimationTreePlayer_wrapper_animation_node_set_master_animation(WasGo::WasGoId p_id, WasGo::WasGoId p_source);
int _wasgo_AnimationTreePlayer_wrapper_are_nodes_connected(WasGo::WasGoId p_id, WasGo::WasGoId p_dst_id, int p_dst_input_idx);
float _wasgo_AnimationTreePlayer_wrapper_blend2_node_get_amount(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_blend2_node_set_amount(WasGo::WasGoId p_id, float p_blend);
void _wasgo_AnimationTreePlayer_wrapper_blend2_node_set_filter_path(WasGo::WasGoId p_id, WasGo::WasGoId p_path, bool p_enable);
float _wasgo_AnimationTreePlayer_wrapper_blend3_node_get_amount(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_blend3_node_set_amount(WasGo::WasGoId p_id, float p_blend);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_blend4_node_get_amount(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_blend4_node_set_amount(WasGo::WasGoId p_id, WasGo::WasGoId p_blend);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_connect_nodes(WasGo::WasGoId p_id, WasGo::WasGoId p_dst_id, int p_dst_input_idx);
void _wasgo_AnimationTreePlayer_wrapper_disconnect_nodes(WasGo::WasGoId p_id, int p_dst_input_idx);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_get_animation_process_mode();
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_get_base_path();
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_get_master_player();
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_get_node_list();
int _wasgo_AnimationTreePlayer_wrapper_is_active();
float _wasgo_AnimationTreePlayer_wrapper_mix_node_get_amount(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_mix_node_set_amount(WasGo::WasGoId p_id, float p_ratio);
int _wasgo_AnimationTreePlayer_wrapper_node_exists(WasGo::WasGoId p_node);
int _wasgo_AnimationTreePlayer_wrapper_node_get_input_count(WasGo::WasGoId p_id);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_node_get_input_source(WasGo::WasGoId p_id, int p_idx);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_node_get_position(WasGo::WasGoId p_id);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_node_get_type(WasGo::WasGoId p_id);
WasGo::WasGoId _wasgo_AnimationTreePlayer_wrapper_node_rename(WasGo::WasGoId p_node, WasGo::WasGoId p_new_name);
void _wasgo_AnimationTreePlayer_wrapper_node_set_position(WasGo::WasGoId p_id, WasGo::WasGoId p_screen_position);
float _wasgo_AnimationTreePlayer_wrapper_oneshot_node_get_autorestart_delay(WasGo::WasGoId p_id);
float _wasgo_AnimationTreePlayer_wrapper_oneshot_node_get_autorestart_random_delay(WasGo::WasGoId p_id);
float _wasgo_AnimationTreePlayer_wrapper_oneshot_node_get_fadein_time(WasGo::WasGoId p_id);
float _wasgo_AnimationTreePlayer_wrapper_oneshot_node_get_fadeout_time(WasGo::WasGoId p_id);
int _wasgo_AnimationTreePlayer_wrapper_oneshot_node_has_autorestart(WasGo::WasGoId p_id);
int _wasgo_AnimationTreePlayer_wrapper_oneshot_node_is_active(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_set_autorestart(WasGo::WasGoId p_id, bool p_enable);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_set_autorestart_delay(WasGo::WasGoId p_id, float p_delay_sec);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_set_autorestart_random_delay(WasGo::WasGoId p_id, float p_rand_sec);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_set_fadein_time(WasGo::WasGoId p_id, float p_time_sec);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_set_fadeout_time(WasGo::WasGoId p_id, float p_time_sec);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_set_filter_path(WasGo::WasGoId p_id, WasGo::WasGoId p_path, bool p_enable);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_start(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_oneshot_node_stop(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_recompute_caches();
void _wasgo_AnimationTreePlayer_wrapper_remove_node(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_reset();
void _wasgo_AnimationTreePlayer_wrapper_set_active(bool p_enabled);
void _wasgo_AnimationTreePlayer_wrapper_set_animation_process_mode(WasGo::WasGoId p_mode);
void _wasgo_AnimationTreePlayer_wrapper_set_base_path(WasGo::WasGoId p_path);
void _wasgo_AnimationTreePlayer_wrapper_set_master_player(WasGo::WasGoId p_nodepath);
float _wasgo_AnimationTreePlayer_wrapper_timescale_node_get_scale(WasGo::WasGoId p_id);
void _wasgo_AnimationTreePlayer_wrapper_timescale_node_set_scale(WasGo::WasGoId p_id, float p_scale);
void _wasgo_AnimationTreePlayer_wrapper_timeseek_node_seek(WasGo::WasGoId p_id, float p_seconds);
void _wasgo_AnimationTreePlayer_wrapper_transition_node_delete_input(WasGo::WasGoId p_id, int p_input_idx);
int _wasgo_AnimationTreePlayer_wrapper_transition_node_get_current(WasGo::WasGoId p_id);
int _wasgo_AnimationTreePlayer_wrapper_transition_node_get_input_count(WasGo::WasGoId p_id);
float _wasgo_AnimationTreePlayer_wrapper_transition_node_get_xfade_time(WasGo::WasGoId p_id);
int _wasgo_AnimationTreePlayer_wrapper_transition_node_has_input_auto_advance(WasGo::WasGoId p_id, int p_input_idx);
void _wasgo_AnimationTreePlayer_wrapper_transition_node_set_current(WasGo::WasGoId p_id, int p_input_idx);
void _wasgo_AnimationTreePlayer_wrapper_transition_node_set_input_auto_advance(WasGo::WasGoId p_id, int p_input_idx, bool p_enable);
void _wasgo_AnimationTreePlayer_wrapper_transition_node_set_input_count(WasGo::WasGoId p_id, int p_count);
void _wasgo_AnimationTreePlayer_wrapper_transition_node_set_xfade_time(WasGo::WasGoId p_id, float p_time_sec);
void _wasgo_ArrayMesh_wrapper_add_blend_shape(WasGo::WasGoId p_name);
void _wasgo_ArrayMesh_wrapper_add_surface_from_arrays(WasGo::WasGoId p_primitive, WasGo::WasGoId p_arrays, WasGo::WasGoId p_blend_shapes, int p_compress_flags);
void _wasgo_ArrayMesh_wrapper_clear_blend_shapes();
int _wasgo_ArrayMesh_wrapper_get_blend_shape_count();
WasGo::WasGoId _wasgo_ArrayMesh_wrapper_get_blend_shape_mode();
WasGo::WasGoId _wasgo_ArrayMesh_wrapper_get_blend_shape_name(int p_index);
WasGo::WasGoId _wasgo_ArrayMesh_wrapper_get_custom_aabb();
WasGo::WasGoId _wasgo_ArrayMesh_wrapper_lightmap_unwrap(WasGo::WasGoId p_transform, float p_texel_size);
void _wasgo_ArrayMesh_wrapper_regen_normalmaps();
void _wasgo_ArrayMesh_wrapper_set_blend_shape_mode(WasGo::WasGoId p_mode);
void _wasgo_ArrayMesh_wrapper_set_custom_aabb(WasGo::WasGoId p_aabb);
int _wasgo_ArrayMesh_wrapper_surface_find_by_name(WasGo::WasGoId p_name);
int _wasgo_ArrayMesh_wrapper_surface_get_array_index_len(int p_surf_idx);
int _wasgo_ArrayMesh_wrapper_surface_get_array_len(int p_surf_idx);
int _wasgo_ArrayMesh_wrapper_surface_get_format(int p_surf_idx);
WasGo::WasGoId _wasgo_ArrayMesh_wrapper_surface_get_name(int p_surf_idx);
WasGo::WasGoId _wasgo_ArrayMesh_wrapper_surface_get_primitive_type(int p_surf_idx);
void _wasgo_ArrayMesh_wrapper_surface_remove(int p_surf_idx);
void _wasgo_ArrayMesh_wrapper_surface_set_name(int p_surf_idx, WasGo::WasGoId p_name);
void _wasgo_ArrayMesh_wrapper_surface_update_region(int p_surf_idx, int p_offset, WasGo::WasGoId p_data);
WasGo::WasGoId _wasgo_AtlasTexture_wrapper_get_atlas();
WasGo::WasGoId _wasgo_AtlasTexture_wrapper_get_margin();
WasGo::WasGoId _wasgo_AtlasTexture_wrapper_get_region();
int _wasgo_AtlasTexture_wrapper_has_filter_clip();
void _wasgo_AtlasTexture_wrapper_set_atlas(WasGo::WasGoId p_atlas);
void _wasgo_AtlasTexture_wrapper_set_filter_clip(bool p_enable);
void _wasgo_AtlasTexture_wrapper_set_margin(WasGo::WasGoId p_margin);
void _wasgo_AtlasTexture_wrapper_set_region(WasGo::WasGoId p_region);
float _wasgo_AudioEffectAmplify_wrapper_get_volume_db();
void _wasgo_AudioEffectAmplify_wrapper_set_volume_db(float p_volume);
float _wasgo_AudioEffectChorus_wrapper_get_dry();
int _wasgo_AudioEffectChorus_wrapper_get_voice_count();
float _wasgo_AudioEffectChorus_wrapper_get_voice_cutoff_hz(int p_voice_idx);
float _wasgo_AudioEffectChorus_wrapper_get_voice_delay_ms(int p_voice_idx);
float _wasgo_AudioEffectChorus_wrapper_get_voice_depth_ms(int p_voice_idx);
float _wasgo_AudioEffectChorus_wrapper_get_voice_level_db(int p_voice_idx);
float _wasgo_AudioEffectChorus_wrapper_get_voice_pan(int p_voice_idx);
float _wasgo_AudioEffectChorus_wrapper_get_voice_rate_hz(int p_voice_idx);
float _wasgo_AudioEffectChorus_wrapper_get_wet();
void _wasgo_AudioEffectChorus_wrapper_set_dry(float p_amount);
void _wasgo_AudioEffectChorus_wrapper_set_voice_count(int p_voices);
void _wasgo_AudioEffectChorus_wrapper_set_voice_cutoff_hz(int p_voice_idx, float p_cutoff_hz);
void _wasgo_AudioEffectChorus_wrapper_set_voice_delay_ms(int p_voice_idx, float p_delay_ms);
void _wasgo_AudioEffectChorus_wrapper_set_voice_depth_ms(int p_voice_idx, float p_depth_ms);
void _wasgo_AudioEffectChorus_wrapper_set_voice_level_db(int p_voice_idx, float p_level_db);
void _wasgo_AudioEffectChorus_wrapper_set_voice_pan(int p_voice_idx, float p_pan);
void _wasgo_AudioEffectChorus_wrapper_set_voice_rate_hz(int p_voice_idx, float p_rate_hz);
void _wasgo_AudioEffectChorus_wrapper_set_wet(float p_amount);
float _wasgo_AudioEffectCompressor_wrapper_get_attack_us();
float _wasgo_AudioEffectCompressor_wrapper_get_gain();
float _wasgo_AudioEffectCompressor_wrapper_get_mix();
float _wasgo_AudioEffectCompressor_wrapper_get_ratio();
float _wasgo_AudioEffectCompressor_wrapper_get_release_ms();
WasGo::WasGoId _wasgo_AudioEffectCompressor_wrapper_get_sidechain();
float _wasgo_AudioEffectCompressor_wrapper_get_threshold();
void _wasgo_AudioEffectCompressor_wrapper_set_attack_us(float p_attack_us);
void _wasgo_AudioEffectCompressor_wrapper_set_gain(float p_gain);
void _wasgo_AudioEffectCompressor_wrapper_set_mix(float p_mix);
void _wasgo_AudioEffectCompressor_wrapper_set_ratio(float p_ratio);
void _wasgo_AudioEffectCompressor_wrapper_set_release_ms(float p_release_ms);
void _wasgo_AudioEffectCompressor_wrapper_set_sidechain(WasGo::WasGoId p_sidechain);
void _wasgo_AudioEffectCompressor_wrapper_set_threshold(float p_threshold);
float _wasgo_AudioEffectDelay_wrapper_get_dry();
float _wasgo_AudioEffectDelay_wrapper_get_feedback_delay_ms();
float _wasgo_AudioEffectDelay_wrapper_get_feedback_level_db();
float _wasgo_AudioEffectDelay_wrapper_get_feedback_lowpass();
float _wasgo_AudioEffectDelay_wrapper_get_tap1_delay_ms();
float _wasgo_AudioEffectDelay_wrapper_get_tap1_level_db();
float _wasgo_AudioEffectDelay_wrapper_get_tap1_pan();
float _wasgo_AudioEffectDelay_wrapper_get_tap2_delay_ms();
float _wasgo_AudioEffectDelay_wrapper_get_tap2_level_db();
float _wasgo_AudioEffectDelay_wrapper_get_tap2_pan();
int _wasgo_AudioEffectDelay_wrapper_is_feedback_active();
int _wasgo_AudioEffectDelay_wrapper_is_tap1_active();
int _wasgo_AudioEffectDelay_wrapper_is_tap2_active();
void _wasgo_AudioEffectDelay_wrapper_set_dry(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_feedback_active(bool p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_feedback_delay_ms(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_feedback_level_db(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_feedback_lowpass(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap1_active(bool p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap1_delay_ms(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap1_level_db(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap1_pan(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap2_active(bool p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap2_delay_ms(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap2_level_db(float p_amount);
void _wasgo_AudioEffectDelay_wrapper_set_tap2_pan(float p_amount);
float _wasgo_AudioEffectDistortion_wrapper_get_drive();
float _wasgo_AudioEffectDistortion_wrapper_get_keep_hf_hz();
WasGo::WasGoId _wasgo_AudioEffectDistortion_wrapper_get_mode();
float _wasgo_AudioEffectDistortion_wrapper_get_post_gain();
float _wasgo_AudioEffectDistortion_wrapper_get_pre_gain();
void _wasgo_AudioEffectDistortion_wrapper_set_drive(float p_drive);
void _wasgo_AudioEffectDistortion_wrapper_set_keep_hf_hz(float p_keep_hf_hz);
void _wasgo_AudioEffectDistortion_wrapper_set_mode(WasGo::WasGoId p_mode);
void _wasgo_AudioEffectDistortion_wrapper_set_post_gain(float p_post_gain);
void _wasgo_AudioEffectDistortion_wrapper_set_pre_gain(float p_pre_gain);
int _wasgo_AudioEffectEQ_wrapper_get_band_count();
float _wasgo_AudioEffectEQ_wrapper_get_band_gain_db(int p_band_idx);
void _wasgo_AudioEffectEQ_wrapper_set_band_gain_db(int p_band_idx, float p_volume_db);
float _wasgo_AudioEffectFilter_wrapper_get_cutoff();
WasGo::WasGoId _wasgo_AudioEffectFilter_wrapper_get_db();
float _wasgo_AudioEffectFilter_wrapper_get_gain();
float _wasgo_AudioEffectFilter_wrapper_get_resonance();
void _wasgo_AudioEffectFilter_wrapper_set_cutoff(float p_freq);
void _wasgo_AudioEffectFilter_wrapper_set_db(WasGo::WasGoId p_amount);
void _wasgo_AudioEffectFilter_wrapper_set_gain(float p_amount);
void _wasgo_AudioEffectFilter_wrapper_set_resonance(float p_amount);
float _wasgo_AudioEffectLimiter_wrapper_get_ceiling_db();
float _wasgo_AudioEffectLimiter_wrapper_get_soft_clip_db();
float _wasgo_AudioEffectLimiter_wrapper_get_soft_clip_ratio();
float _wasgo_AudioEffectLimiter_wrapper_get_threshold_db();
void _wasgo_AudioEffectLimiter_wrapper_set_ceiling_db(float p_ceiling);
void _wasgo_AudioEffectLimiter_wrapper_set_soft_clip_db(float p_soft_clip);
void _wasgo_AudioEffectLimiter_wrapper_set_soft_clip_ratio(float p_soft_clip);
void _wasgo_AudioEffectLimiter_wrapper_set_threshold_db(float p_threshold);
float _wasgo_AudioEffectPanner_wrapper_get_pan();
void _wasgo_AudioEffectPanner_wrapper_set_pan(float p_cpanume);
float _wasgo_AudioEffectPhaser_wrapper_get_depth();
float _wasgo_AudioEffectPhaser_wrapper_get_feedback();
float _wasgo_AudioEffectPhaser_wrapper_get_range_max_hz();
float _wasgo_AudioEffectPhaser_wrapper_get_range_min_hz();
float _wasgo_AudioEffectPhaser_wrapper_get_rate_hz();
void _wasgo_AudioEffectPhaser_wrapper_set_depth(float p_depth);
void _wasgo_AudioEffectPhaser_wrapper_set_feedback(float p_fbk);
void _wasgo_AudioEffectPhaser_wrapper_set_range_max_hz(float p_hz);
void _wasgo_AudioEffectPhaser_wrapper_set_range_min_hz(float p_hz);
void _wasgo_AudioEffectPhaser_wrapper_set_rate_hz(float p_hz);
WasGo::WasGoId _wasgo_AudioEffectPitchShift_wrapper_get_fft_size();
int _wasgo_AudioEffectPitchShift_wrapper_get_oversampling();
float _wasgo_AudioEffectPitchShift_wrapper_get_pitch_scale();
void _wasgo_AudioEffectPitchShift_wrapper_set_fft_size(WasGo::WasGoId p_size);
void _wasgo_AudioEffectPitchShift_wrapper_set_oversampling(int p_amount);
void _wasgo_AudioEffectPitchShift_wrapper_set_pitch_scale(float p_rate);
WasGo::WasGoId _wasgo_AudioEffectRecord_wrapper_get_format();
WasGo::WasGoId _wasgo_AudioEffectRecord_wrapper_get_recording();
int _wasgo_AudioEffectRecord_wrapper_is_recording_active();
void _wasgo_AudioEffectRecord_wrapper_set_format(WasGo::WasGoId p_format);
void _wasgo_AudioEffectRecord_wrapper_set_recording_active(bool p_record);
float _wasgo_AudioEffectReverb_wrapper_get_damping();
float _wasgo_AudioEffectReverb_wrapper_get_dry();
float _wasgo_AudioEffectReverb_wrapper_get_hpf();
float _wasgo_AudioEffectReverb_wrapper_get_predelay_feedback();
float _wasgo_AudioEffectReverb_wrapper_get_predelay_msec();
float _wasgo_AudioEffectReverb_wrapper_get_room_size();
float _wasgo_AudioEffectReverb_wrapper_get_spread();
float _wasgo_AudioEffectReverb_wrapper_get_wet();
void _wasgo_AudioEffectReverb_wrapper_set_damping(float p_amount);
void _wasgo_AudioEffectReverb_wrapper_set_dry(float p_amount);
void _wasgo_AudioEffectReverb_wrapper_set_hpf(float p_amount);
void _wasgo_AudioEffectReverb_wrapper_set_predelay_feedback(float p_feedback);
void _wasgo_AudioEffectReverb_wrapper_set_predelay_msec(float p_msec);
void _wasgo_AudioEffectReverb_wrapper_set_room_size(float p_size);
void _wasgo_AudioEffectReverb_wrapper_set_spread(float p_amount);
void _wasgo_AudioEffectReverb_wrapper_set_wet(float p_amount);
float _wasgo_AudioEffectSpectrumAnalyzer_wrapper_get_buffer_length();
WasGo::WasGoId _wasgo_AudioEffectSpectrumAnalyzer_wrapper_get_fft_size();
float _wasgo_AudioEffectSpectrumAnalyzer_wrapper_get_tap_back_pos();
void _wasgo_AudioEffectSpectrumAnalyzer_wrapper_set_buffer_length(float p_seconds);
void _wasgo_AudioEffectSpectrumAnalyzer_wrapper_set_fft_size(WasGo::WasGoId p_size);
void _wasgo_AudioEffectSpectrumAnalyzer_wrapper_set_tap_back_pos(float p_seconds);
WasGo::WasGoId _wasgo_AudioEffectSpectrumAnalyzerInstance_wrapper_get_magnitude_for_frequency_range(float p_from_hz, float p_to_hz, WasGo::WasGoId p_mode);
float _wasgo_AudioEffectStereoEnhance_wrapper_get_pan_pullout();
float _wasgo_AudioEffectStereoEnhance_wrapper_get_surround();
float _wasgo_AudioEffectStereoEnhance_wrapper_get_time_pullout();
void _wasgo_AudioEffectStereoEnhance_wrapper_set_pan_pullout(float p_amount);
void _wasgo_AudioEffectStereoEnhance_wrapper_set_surround(float p_amount);
void _wasgo_AudioEffectStereoEnhance_wrapper_set_time_pullout(float p_amount);
void _wasgo_AudioServer_wrapper_add_bus(int p_at_position);
void _wasgo_AudioServer_wrapper_add_bus_effect(int p_bus_idx, WasGo::WasGoId p_effect, int p_at_position);
WasGo::WasGoId _wasgo_AudioServer_wrapper_capture_get_device();
WasGo::WasGoId _wasgo_AudioServer_wrapper_capture_get_device_list();
void _wasgo_AudioServer_wrapper_capture_set_device(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_AudioServer_wrapper_generate_bus_layout();
int _wasgo_AudioServer_wrapper_get_bus_channels(int p_bus_idx);
int _wasgo_AudioServer_wrapper_get_bus_count();
WasGo::WasGoId _wasgo_AudioServer_wrapper_get_bus_effect(int p_bus_idx, int p_effect_idx);
int _wasgo_AudioServer_wrapper_get_bus_effect_count(int p_bus_idx);
WasGo::WasGoId _wasgo_AudioServer_wrapper_get_bus_effect_instance(int p_bus_idx, int p_effect_idx, int p_channel);
int _wasgo_AudioServer_wrapper_get_bus_index(WasGo::WasGoId p_bus_name);
WasGo::WasGoId _wasgo_AudioServer_wrapper_get_bus_name(int p_bus_idx);
float _wasgo_AudioServer_wrapper_get_bus_peak_volume_left_db(int p_bus_idx, int p_channel);
float _wasgo_AudioServer_wrapper_get_bus_peak_volume_right_db(int p_bus_idx, int p_channel);
WasGo::WasGoId _wasgo_AudioServer_wrapper_get_bus_send(int p_bus_idx);
float _wasgo_AudioServer_wrapper_get_bus_volume_db(int p_bus_idx);
WasGo::WasGoId _wasgo_AudioServer_wrapper_get_device();
WasGo::WasGoId _wasgo_AudioServer_wrapper_get_device_list();
float _wasgo_AudioServer_wrapper_get_global_rate_scale();
float _wasgo_AudioServer_wrapper_get_mix_rate();
float _wasgo_AudioServer_wrapper_get_output_latency();
WasGo::WasGoId _wasgo_AudioServer_wrapper_get_speaker_mode();
float _wasgo_AudioServer_wrapper_get_time_since_last_mix();
float _wasgo_AudioServer_wrapper_get_time_to_next_mix();
int _wasgo_AudioServer_wrapper_is_bus_bypassing_effects(int p_bus_idx);
int _wasgo_AudioServer_wrapper_is_bus_effect_enabled(int p_bus_idx, int p_effect_idx);
int _wasgo_AudioServer_wrapper_is_bus_mute(int p_bus_idx);
int _wasgo_AudioServer_wrapper_is_bus_solo(int p_bus_idx);
void _wasgo_AudioServer_wrapper_lock();
void _wasgo_AudioServer_wrapper_move_bus(int p_index, int p_to_index);
void _wasgo_AudioServer_wrapper_remove_bus(int p_index);
void _wasgo_AudioServer_wrapper_remove_bus_effect(int p_bus_idx, int p_effect_idx);
void _wasgo_AudioServer_wrapper_set_bus_bypass_effects(int p_bus_idx, bool p_enable);
void _wasgo_AudioServer_wrapper_set_bus_count(int p_amount);
void _wasgo_AudioServer_wrapper_set_bus_effect_enabled(int p_bus_idx, int p_effect_idx, bool p_enabled);
void _wasgo_AudioServer_wrapper_set_bus_layout(WasGo::WasGoId p_bus_layout);
void _wasgo_AudioServer_wrapper_set_bus_mute(int p_bus_idx, bool p_enable);
void _wasgo_AudioServer_wrapper_set_bus_name(int p_bus_idx, WasGo::WasGoId p_name);
void _wasgo_AudioServer_wrapper_set_bus_send(int p_bus_idx, WasGo::WasGoId p_send);
void _wasgo_AudioServer_wrapper_set_bus_solo(int p_bus_idx, bool p_enable);
void _wasgo_AudioServer_wrapper_set_bus_volume_db(int p_bus_idx, float p_volume_db);
void _wasgo_AudioServer_wrapper_set_device(WasGo::WasGoId p_device);
void _wasgo_AudioServer_wrapper_set_global_rate_scale(float p_scale);
void _wasgo_AudioServer_wrapper_swap_bus_effects(int p_bus_idx, int p_effect_idx, int p_by_effect_idx);
void _wasgo_AudioServer_wrapper_unlock();
float _wasgo_AudioStream_wrapper_get_length();
float _wasgo_AudioStreamGenerator_wrapper_get_buffer_length();
float _wasgo_AudioStreamGenerator_wrapper_get_mix_rate();
void _wasgo_AudioStreamGenerator_wrapper_set_buffer_length(float p_seconds);
void _wasgo_AudioStreamGenerator_wrapper_set_mix_rate(float p_hz);
int _wasgo_AudioStreamGeneratorPlayback_wrapper_can_push_buffer(int p_amount);
void _wasgo_AudioStreamGeneratorPlayback_wrapper_clear_buffer();
int _wasgo_AudioStreamGeneratorPlayback_wrapper_get_frames_available();
int _wasgo_AudioStreamGeneratorPlayback_wrapper_get_skips();
int _wasgo_AudioStreamGeneratorPlayback_wrapper_push_buffer(WasGo::WasGoId p_frames);
int _wasgo_AudioStreamGeneratorPlayback_wrapper_push_frame(WasGo::WasGoId p_frame);
WasGo::WasGoId _wasgo_AudioStreamPlayer_wrapper_get_bus();
WasGo::WasGoId _wasgo_AudioStreamPlayer_wrapper_get_mix_target();
float _wasgo_AudioStreamPlayer_wrapper_get_pitch_scale();
float _wasgo_AudioStreamPlayer_wrapper_get_playback_position();
WasGo::WasGoId _wasgo_AudioStreamPlayer_wrapper_get_stream();
float _wasgo_AudioStreamPlayer_wrapper_get_volume_db();
int _wasgo_AudioStreamPlayer_wrapper_is_autoplay_enabled();
int _wasgo_AudioStreamPlayer_wrapper_is_playing();
void _wasgo_AudioStreamPlayer_wrapper_play(float p_from_position);
void _wasgo_AudioStreamPlayer_wrapper_seek(float p_to_position);
void _wasgo_AudioStreamPlayer_wrapper_set_autoplay(bool p_enable);
void _wasgo_AudioStreamPlayer_wrapper_set_bus(WasGo::WasGoId p_bus);
void _wasgo_AudioStreamPlayer_wrapper_set_mix_target(WasGo::WasGoId p_mix_target);
void _wasgo_AudioStreamPlayer_wrapper_set_pitch_scale(float p_pitch_scale);
void _wasgo_AudioStreamPlayer_wrapper_set_stream(WasGo::WasGoId p_stream);
void _wasgo_AudioStreamPlayer_wrapper_set_volume_db(float p_volume_db);
void _wasgo_AudioStreamPlayer_wrapper_stop();
WasGo::WasGoId _wasgo_AudioStreamPlayer2D_wrapper_get_bus();
float _wasgo_AudioStreamPlayer2D_wrapper_get_pitch_scale();
float _wasgo_AudioStreamPlayer2D_wrapper_get_playback_position();
WasGo::WasGoId _wasgo_AudioStreamPlayer2D_wrapper_get_stream();
float _wasgo_AudioStreamPlayer2D_wrapper_get_volume_db();
int _wasgo_AudioStreamPlayer2D_wrapper_is_autoplay_enabled();
int _wasgo_AudioStreamPlayer2D_wrapper_is_playing();
void _wasgo_AudioStreamPlayer2D_wrapper_play(float p_from_position);
void _wasgo_AudioStreamPlayer2D_wrapper_seek(float p_to_position);
void _wasgo_AudioStreamPlayer2D_wrapper_set_autoplay(bool p_enable);
void _wasgo_AudioStreamPlayer2D_wrapper_set_bus(WasGo::WasGoId p_bus);
void _wasgo_AudioStreamPlayer2D_wrapper_set_pitch_scale(float p_pitch_scale);
void _wasgo_AudioStreamPlayer2D_wrapper_set_stream(WasGo::WasGoId p_stream);
void _wasgo_AudioStreamPlayer2D_wrapper_set_volume_db(float p_volume_db);
void _wasgo_AudioStreamPlayer2D_wrapper_stop();
WasGo::WasGoId _wasgo_AudioStreamPlayer3D_wrapper_get_bus();
float _wasgo_AudioStreamPlayer3D_wrapper_get_max_db();
float _wasgo_AudioStreamPlayer3D_wrapper_get_pitch_scale();
float _wasgo_AudioStreamPlayer3D_wrapper_get_playback_position();
WasGo::WasGoId _wasgo_AudioStreamPlayer3D_wrapper_get_stream();
float _wasgo_AudioStreamPlayer3D_wrapper_get_unit_db();
float _wasgo_AudioStreamPlayer3D_wrapper_get_unit_size();
int _wasgo_AudioStreamPlayer3D_wrapper_is_autoplay_enabled();
int _wasgo_AudioStreamPlayer3D_wrapper_is_playing();
void _wasgo_AudioStreamPlayer3D_wrapper_play(float p_from_position);
void _wasgo_AudioStreamPlayer3D_wrapper_seek(float p_to_position);
void _wasgo_AudioStreamPlayer3D_wrapper_set_autoplay(bool p_enable);
void _wasgo_AudioStreamPlayer3D_wrapper_set_bus(WasGo::WasGoId p_bus);
void _wasgo_AudioStreamPlayer3D_wrapper_set_max_db(float p_max_db);
void _wasgo_AudioStreamPlayer3D_wrapper_set_pitch_scale(float p_pitch_scale);
void _wasgo_AudioStreamPlayer3D_wrapper_set_stream(WasGo::WasGoId p_stream);
void _wasgo_AudioStreamPlayer3D_wrapper_set_unit_db(float p_unit_db);
void _wasgo_AudioStreamPlayer3D_wrapper_set_unit_size(float p_unit_size);
void _wasgo_AudioStreamPlayer3D_wrapper_stop();
WasGo::WasGoId _wasgo_AudioStreamRandomPitch_wrapper_get_audio_stream();
float _wasgo_AudioStreamRandomPitch_wrapper_get_random_pitch();
void _wasgo_AudioStreamRandomPitch_wrapper_set_audio_stream(WasGo::WasGoId p_stream);
void _wasgo_AudioStreamRandomPitch_wrapper_set_random_pitch(float p_scale);
WasGo::WasGoId _wasgo_AudioStreamSample_wrapper_get_data();
WasGo::WasGoId _wasgo_AudioStreamSample_wrapper_get_format();
int _wasgo_AudioStreamSample_wrapper_get_loop_begin();
int _wasgo_AudioStreamSample_wrapper_get_loop_end();
WasGo::WasGoId _wasgo_AudioStreamSample_wrapper_get_loop_mode();
int _wasgo_AudioStreamSample_wrapper_get_mix_rate();
int _wasgo_AudioStreamSample_wrapper_is_stereo();
WasGo::WasGoId _wasgo_AudioStreamSample_wrapper_save_to_wav(WasGo::WasGoId p_path);
void _wasgo_AudioStreamSample_wrapper_set_data(WasGo::WasGoId p_data);
void _wasgo_AudioStreamSample_wrapper_set_format(WasGo::WasGoId p_format);
void _wasgo_AudioStreamSample_wrapper_set_loop_begin(int p_loop_begin);
void _wasgo_AudioStreamSample_wrapper_set_loop_end(int p_loop_end);
void _wasgo_AudioStreamSample_wrapper_set_loop_mode(WasGo::WasGoId p_loop_mode);
void _wasgo_AudioStreamSample_wrapper_set_mix_rate(int p_mix_rate);
void _wasgo_AudioStreamSample_wrapper_set_stereo(bool p_stereo);
WasGo::WasGoId _wasgo_BackBufferCopy_wrapper_get_copy_mode();
WasGo::WasGoId _wasgo_BackBufferCopy_wrapper_get_rect();
void _wasgo_BackBufferCopy_wrapper_set_copy_mode(WasGo::WasGoId p_copy_mode);
void _wasgo_BackBufferCopy_wrapper_set_rect(WasGo::WasGoId p_rect);
WasGo::WasGoId _wasgo_BakedLightmap_wrapper_bake(WasGo::WasGoId p_from_node, bool p_create_visual_debug);
void _wasgo_BakedLightmap_wrapper_debug_bake();
float _wasgo_BakedLightmap_wrapper_get_bake_cell_size();
float _wasgo_BakedLightmap_wrapper_get_bake_default_texels_per_unit();
WasGo::WasGoId _wasgo_BakedLightmap_wrapper_get_bake_mode();
WasGo::WasGoId _wasgo_BakedLightmap_wrapper_get_bake_quality();
float _wasgo_BakedLightmap_wrapper_get_capture_cell_size();
float _wasgo_BakedLightmap_wrapper_get_energy();
WasGo::WasGoId _wasgo_BakedLightmap_wrapper_get_extents();
WasGo::WasGoId _wasgo_BakedLightmap_wrapper_get_image_path();
WasGo::WasGoId _wasgo_BakedLightmap_wrapper_get_light_data();
float _wasgo_BakedLightmap_wrapper_get_propagation();
int _wasgo_BakedLightmap_wrapper_is_hdr();
void _wasgo_BakedLightmap_wrapper_set_bake_cell_size(float p_bake_cell_size);
void _wasgo_BakedLightmap_wrapper_set_bake_default_texels_per_unit(float p_texels);
void _wasgo_BakedLightmap_wrapper_set_bake_mode(WasGo::WasGoId p_bake_mode);
void _wasgo_BakedLightmap_wrapper_set_bake_quality(WasGo::WasGoId p_bake_quality);
void _wasgo_BakedLightmap_wrapper_set_capture_cell_size(float p_capture_cell_size);
void _wasgo_BakedLightmap_wrapper_set_energy(float p_energy);
void _wasgo_BakedLightmap_wrapper_set_extents(WasGo::WasGoId p_extents);
void _wasgo_BakedLightmap_wrapper_set_hdr(bool p_hdr);
void _wasgo_BakedLightmap_wrapper_set_image_path(WasGo::WasGoId p_image_path);
void _wasgo_BakedLightmap_wrapper_set_light_data(WasGo::WasGoId p_data);
void _wasgo_BakedLightmap_wrapper_set_propagation(float p_propagation);
void _wasgo_BitMap_wrapper_create(WasGo::WasGoId p_size);
void _wasgo_BitMap_wrapper_create_from_image_alpha(WasGo::WasGoId p_image, float p_threshold);
int _wasgo_BitMap_wrapper_get_bit(WasGo::WasGoId p_position);
WasGo::WasGoId _wasgo_BitMap_wrapper_get_size();
int _wasgo_BitMap_wrapper_get_true_bit_count();
void _wasgo_BitMap_wrapper_set_bit(WasGo::WasGoId p_position, bool p_bit);
void _wasgo_BitMap_wrapper_set_bit_rect(WasGo::WasGoId p_rect, bool p_bit);
void _wasgo_BitmapFont_wrapper_add_char(int p_character, int p_texture, WasGo::WasGoId p_rect, WasGo::WasGoId p_align, float p_advance);
void _wasgo_BitmapFont_wrapper_add_kerning_pair(int p_char_a, int p_char_b, int p_kerning);
void _wasgo_BitmapFont_wrapper_add_texture(WasGo::WasGoId p_texture);
void _wasgo_BitmapFont_wrapper_clear();
WasGo::WasGoId _wasgo_BitmapFont_wrapper_create_from_fnt(WasGo::WasGoId p_path);
int _wasgo_BitmapFont_wrapper_get_kerning_pair(int p_char_a, int p_char_b);
WasGo::WasGoId _wasgo_BitmapFont_wrapper_get_texture(int p_idx);
int _wasgo_BitmapFont_wrapper_get_texture_count();
void _wasgo_BitmapFont_wrapper_set_ascent(float p_px);
void _wasgo_BitmapFont_wrapper_set_distance_field_hint(bool p_enable);
void _wasgo_BitmapFont_wrapper_set_height(float p_px);
void _wasgo_Bone2D_wrapper_apply_rest();
float _wasgo_Bone2D_wrapper_get_default_length();
int _wasgo_Bone2D_wrapper_get_index_in_skeleton();
WasGo::WasGoId _wasgo_Bone2D_wrapper_get_rest();
WasGo::WasGoId _wasgo_Bone2D_wrapper_get_skeleton_rest();
void _wasgo_Bone2D_wrapper_set_default_length(float p_default_length);
void _wasgo_Bone2D_wrapper_set_rest(WasGo::WasGoId p_rest);
WasGo::WasGoId _wasgo_BoneAttachment_wrapper_get_bone_name();
void _wasgo_BoneAttachment_wrapper_set_bone_name(WasGo::WasGoId p_bone_name);
void _wasgo_BoxContainer_wrapper_add_spacer(bool p_begin);
WasGo::WasGoId _wasgo_BoxContainer_wrapper_get_alignment();
void _wasgo_BoxContainer_wrapper_set_alignment(WasGo::WasGoId p_alignment);
WasGo::WasGoId _wasgo_BoxShape_wrapper_get_extents();
void _wasgo_BoxShape_wrapper_set_extents(WasGo::WasGoId p_extents);
WasGo::WasGoId _wasgo_Button_wrapper_get_button_icon();
int _wasgo_Button_wrapper_get_clip_text();
WasGo::WasGoId _wasgo_Button_wrapper_get_text();
WasGo::WasGoId _wasgo_Button_wrapper_get_text_align();
int _wasgo_Button_wrapper_is_expand_icon();
int _wasgo_Button_wrapper_is_flat();
void _wasgo_Button_wrapper_set_button_icon(WasGo::WasGoId p_texture);
void _wasgo_Button_wrapper_set_clip_text(bool p_enabled);
void _wasgo_Button_wrapper_set_expand_icon(bool p_arg0);
void _wasgo_Button_wrapper_set_flat(bool p_enabled);
void _wasgo_Button_wrapper_set_text(WasGo::WasGoId p_text);
void _wasgo_Button_wrapper_set_text_align(WasGo::WasGoId p_align);
WasGo::WasGoId _wasgo_ButtonGroup_wrapper_get_buttons();
WasGo::WasGoId _wasgo_ButtonGroup_wrapper_get_pressed_button();
void _wasgo_CPUParticles_wrapper_convert_from_particles(WasGo::WasGoId p_particles);
int _wasgo_CPUParticles_wrapper_get_amount();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_color();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_color_ramp();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_direction();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_draw_order();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_emission_box_extents();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_emission_colors();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_emission_normals();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_emission_points();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_emission_shape();
float _wasgo_CPUParticles_wrapper_get_emission_sphere_radius();
float _wasgo_CPUParticles_wrapper_get_explosiveness_ratio();
int _wasgo_CPUParticles_wrapper_get_fixed_fps();
float _wasgo_CPUParticles_wrapper_get_flatness();
int _wasgo_CPUParticles_wrapper_get_fractional_delta();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_gravity();
float _wasgo_CPUParticles_wrapper_get_lifetime();
float _wasgo_CPUParticles_wrapper_get_lifetime_randomness();
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_mesh();
int _wasgo_CPUParticles_wrapper_get_one_shot();
float _wasgo_CPUParticles_wrapper_get_param(WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_CPUParticles_wrapper_get_param_curve(WasGo::WasGoId p_param);
float _wasgo_CPUParticles_wrapper_get_param_randomness(WasGo::WasGoId p_param);
int _wasgo_CPUParticles_wrapper_get_particle_flag(WasGo::WasGoId p_flag);
float _wasgo_CPUParticles_wrapper_get_pre_process_time();
float _wasgo_CPUParticles_wrapper_get_randomness_ratio();
float _wasgo_CPUParticles_wrapper_get_speed_scale();
float _wasgo_CPUParticles_wrapper_get_spread();
int _wasgo_CPUParticles_wrapper_get_use_local_coordinates();
int _wasgo_CPUParticles_wrapper_is_emitting();
void _wasgo_CPUParticles_wrapper_restart();
void _wasgo_CPUParticles_wrapper_set_amount(int p_amount);
void _wasgo_CPUParticles_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_CPUParticles_wrapper_set_color_ramp(WasGo::WasGoId p_ramp);
void _wasgo_CPUParticles_wrapper_set_direction(WasGo::WasGoId p_direction);
void _wasgo_CPUParticles_wrapper_set_draw_order(WasGo::WasGoId p_order);
void _wasgo_CPUParticles_wrapper_set_emission_box_extents(WasGo::WasGoId p_extents);
void _wasgo_CPUParticles_wrapper_set_emission_colors(WasGo::WasGoId p_array);
void _wasgo_CPUParticles_wrapper_set_emission_normals(WasGo::WasGoId p_array);
void _wasgo_CPUParticles_wrapper_set_emission_points(WasGo::WasGoId p_array);
void _wasgo_CPUParticles_wrapper_set_emission_shape(WasGo::WasGoId p_shape);
void _wasgo_CPUParticles_wrapper_set_emission_sphere_radius(float p_radius);
void _wasgo_CPUParticles_wrapper_set_emitting(bool p_emitting);
void _wasgo_CPUParticles_wrapper_set_explosiveness_ratio(float p_ratio);
void _wasgo_CPUParticles_wrapper_set_fixed_fps(int p_fps);
void _wasgo_CPUParticles_wrapper_set_flatness(float p_amount);
void _wasgo_CPUParticles_wrapper_set_fractional_delta(bool p_enable);
void _wasgo_CPUParticles_wrapper_set_gravity(WasGo::WasGoId p_accel_vec);
void _wasgo_CPUParticles_wrapper_set_lifetime(float p_secs);
void _wasgo_CPUParticles_wrapper_set_lifetime_randomness(float p_random);
void _wasgo_CPUParticles_wrapper_set_mesh(WasGo::WasGoId p_mesh);
void _wasgo_CPUParticles_wrapper_set_one_shot(bool p_enable);
void _wasgo_CPUParticles_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
void _wasgo_CPUParticles_wrapper_set_param_curve(WasGo::WasGoId p_param, WasGo::WasGoId p_curve);
void _wasgo_CPUParticles_wrapper_set_param_randomness(WasGo::WasGoId p_param, float p_randomness);
void _wasgo_CPUParticles_wrapper_set_particle_flag(WasGo::WasGoId p_flag, bool p_enable);
void _wasgo_CPUParticles_wrapper_set_pre_process_time(float p_secs);
void _wasgo_CPUParticles_wrapper_set_randomness_ratio(float p_ratio);
void _wasgo_CPUParticles_wrapper_set_speed_scale(float p_scale);
void _wasgo_CPUParticles_wrapper_set_spread(float p_degrees);
void _wasgo_CPUParticles_wrapper_set_use_local_coordinates(bool p_enable);
void _wasgo_CPUParticles2D_wrapper_convert_from_particles(WasGo::WasGoId p_particles);
int _wasgo_CPUParticles2D_wrapper_get_amount();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_color();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_color_ramp();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_direction();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_draw_order();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_emission_colors();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_emission_normals();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_emission_points();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_emission_rect_extents();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_emission_shape();
float _wasgo_CPUParticles2D_wrapper_get_emission_sphere_radius();
float _wasgo_CPUParticles2D_wrapper_get_explosiveness_ratio();
int _wasgo_CPUParticles2D_wrapper_get_fixed_fps();
int _wasgo_CPUParticles2D_wrapper_get_fractional_delta();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_gravity();
float _wasgo_CPUParticles2D_wrapper_get_lifetime();
float _wasgo_CPUParticles2D_wrapper_get_lifetime_randomness();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_normalmap();
int _wasgo_CPUParticles2D_wrapper_get_one_shot();
float _wasgo_CPUParticles2D_wrapper_get_param(WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_param_curve(WasGo::WasGoId p_param);
float _wasgo_CPUParticles2D_wrapper_get_param_randomness(WasGo::WasGoId p_param);
int _wasgo_CPUParticles2D_wrapper_get_particle_flag(WasGo::WasGoId p_flag);
float _wasgo_CPUParticles2D_wrapper_get_pre_process_time();
float _wasgo_CPUParticles2D_wrapper_get_randomness_ratio();
float _wasgo_CPUParticles2D_wrapper_get_speed_scale();
float _wasgo_CPUParticles2D_wrapper_get_spread();
WasGo::WasGoId _wasgo_CPUParticles2D_wrapper_get_texture();
int _wasgo_CPUParticles2D_wrapper_get_use_local_coordinates();
int _wasgo_CPUParticles2D_wrapper_is_emitting();
void _wasgo_CPUParticles2D_wrapper_restart();
void _wasgo_CPUParticles2D_wrapper_set_amount(int p_amount);
void _wasgo_CPUParticles2D_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_CPUParticles2D_wrapper_set_color_ramp(WasGo::WasGoId p_ramp);
void _wasgo_CPUParticles2D_wrapper_set_direction(WasGo::WasGoId p_direction);
void _wasgo_CPUParticles2D_wrapper_set_draw_order(WasGo::WasGoId p_order);
void _wasgo_CPUParticles2D_wrapper_set_emission_colors(WasGo::WasGoId p_array);
void _wasgo_CPUParticles2D_wrapper_set_emission_normals(WasGo::WasGoId p_array);
void _wasgo_CPUParticles2D_wrapper_set_emission_points(WasGo::WasGoId p_array);
void _wasgo_CPUParticles2D_wrapper_set_emission_rect_extents(WasGo::WasGoId p_extents);
void _wasgo_CPUParticles2D_wrapper_set_emission_shape(WasGo::WasGoId p_shape);
void _wasgo_CPUParticles2D_wrapper_set_emission_sphere_radius(float p_radius);
void _wasgo_CPUParticles2D_wrapper_set_emitting(bool p_emitting);
void _wasgo_CPUParticles2D_wrapper_set_explosiveness_ratio(float p_ratio);
void _wasgo_CPUParticles2D_wrapper_set_fixed_fps(int p_fps);
void _wasgo_CPUParticles2D_wrapper_set_fractional_delta(bool p_enable);
void _wasgo_CPUParticles2D_wrapper_set_gravity(WasGo::WasGoId p_accel_vec);
void _wasgo_CPUParticles2D_wrapper_set_lifetime(float p_secs);
void _wasgo_CPUParticles2D_wrapper_set_lifetime_randomness(float p_random);
void _wasgo_CPUParticles2D_wrapper_set_normalmap(WasGo::WasGoId p_normalmap);
void _wasgo_CPUParticles2D_wrapper_set_one_shot(bool p_enable);
void _wasgo_CPUParticles2D_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
void _wasgo_CPUParticles2D_wrapper_set_param_curve(WasGo::WasGoId p_param, WasGo::WasGoId p_curve);
void _wasgo_CPUParticles2D_wrapper_set_param_randomness(WasGo::WasGoId p_param, float p_randomness);
void _wasgo_CPUParticles2D_wrapper_set_particle_flag(WasGo::WasGoId p_flag, bool p_enable);
void _wasgo_CPUParticles2D_wrapper_set_pre_process_time(float p_secs);
void _wasgo_CPUParticles2D_wrapper_set_randomness_ratio(float p_ratio);
void _wasgo_CPUParticles2D_wrapper_set_speed_scale(float p_scale);
void _wasgo_CPUParticles2D_wrapper_set_spread(float p_degrees);
void _wasgo_CPUParticles2D_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_CPUParticles2D_wrapper_set_use_local_coordinates(bool p_enable);
void _wasgo_Camera_wrapper_clear_current(bool p_enable_next);
WasGo::WasGoId _wasgo_Camera_wrapper_get_camera_rid();
WasGo::WasGoId _wasgo_Camera_wrapper_get_camera_transform();
int _wasgo_Camera_wrapper_get_cull_mask();
int _wasgo_Camera_wrapper_get_cull_mask_bit(int p_layer);
WasGo::WasGoId _wasgo_Camera_wrapper_get_doppler_tracking();
WasGo::WasGoId _wasgo_Camera_wrapper_get_environment();
float _wasgo_Camera_wrapper_get_fov();
WasGo::WasGoId _wasgo_Camera_wrapper_get_frustum();
WasGo::WasGoId _wasgo_Camera_wrapper_get_frustum_offset();
float _wasgo_Camera_wrapper_get_h_offset();
WasGo::WasGoId _wasgo_Camera_wrapper_get_keep_aspect_mode();
WasGo::WasGoId _wasgo_Camera_wrapper_get_projection();
float _wasgo_Camera_wrapper_get_size();
float _wasgo_Camera_wrapper_get_v_offset();
float _wasgo_Camera_wrapper_get_zfar();
float _wasgo_Camera_wrapper_get_znear();
int _wasgo_Camera_wrapper_is_current();
int _wasgo_Camera_wrapper_is_position_behind(WasGo::WasGoId p_world_point);
void _wasgo_Camera_wrapper_make_current();
WasGo::WasGoId _wasgo_Camera_wrapper_project_local_ray_normal(WasGo::WasGoId p_screen_point);
WasGo::WasGoId _wasgo_Camera_wrapper_project_position(WasGo::WasGoId p_screen_point, float p_z_depth);
WasGo::WasGoId _wasgo_Camera_wrapper_project_ray_normal(WasGo::WasGoId p_screen_point);
WasGo::WasGoId _wasgo_Camera_wrapper_project_ray_origin(WasGo::WasGoId p_screen_point);
void _wasgo_Camera_wrapper_set_cull_mask(int p_mask);
void _wasgo_Camera_wrapper_set_cull_mask_bit(int p_layer, bool p_enable);
void _wasgo_Camera_wrapper_set_current(bool p_arg0);
void _wasgo_Camera_wrapper_set_doppler_tracking(WasGo::WasGoId p_mode);
void _wasgo_Camera_wrapper_set_environment(WasGo::WasGoId p_env);
void _wasgo_Camera_wrapper_set_fov(float p_arg0);
void _wasgo_Camera_wrapper_set_frustum(float p_size, WasGo::WasGoId p_offset, float p_z_near, float p_z_far);
void _wasgo_Camera_wrapper_set_frustum_offset(WasGo::WasGoId p_arg0);
void _wasgo_Camera_wrapper_set_h_offset(float p_ofs);
void _wasgo_Camera_wrapper_set_keep_aspect_mode(WasGo::WasGoId p_mode);
void _wasgo_Camera_wrapper_set_orthogonal(float p_size, float p_z_near, float p_z_far);
void _wasgo_Camera_wrapper_set_perspective(float p_fov, float p_z_near, float p_z_far);
void _wasgo_Camera_wrapper_set_projection(WasGo::WasGoId p_arg0);
void _wasgo_Camera_wrapper_set_size(float p_arg0);
void _wasgo_Camera_wrapper_set_v_offset(float p_ofs);
void _wasgo_Camera_wrapper_set_zfar(float p_arg0);
void _wasgo_Camera_wrapper_set_znear(float p_arg0);
WasGo::WasGoId _wasgo_Camera_wrapper_unproject_position(WasGo::WasGoId p_world_point);
void _wasgo_Camera2D_wrapper_clear_current();
WasGo::WasGoId _wasgo_Camera2D_wrapper_get_anchor_mode();
WasGo::WasGoId _wasgo_Camera2D_wrapper_get_offset();
int _wasgo_Camera2D_wrapper_is_rotating();
void _wasgo_Camera2D_wrapper_make_current();
void _wasgo_Camera2D_wrapper_set_anchor_mode(WasGo::WasGoId p_anchor_mode);
void _wasgo_Camera2D_wrapper_set_offset(WasGo::WasGoId p_offset);
void _wasgo_Camera2D_wrapper_set_rotating(bool p_rotating);
int _wasgo_CameraFeed_wrapper_get_id();
WasGo::WasGoId _wasgo_CameraFeed_wrapper_get_name();
void _wasgo_CameraServer_wrapper_add_feed(WasGo::WasGoId p_feed);
WasGo::WasGoId _wasgo_CameraServer_wrapper_feeds();
WasGo::WasGoId _wasgo_CameraServer_wrapper_get_feed(int p_index);
int _wasgo_CameraServer_wrapper_get_feed_count();
void _wasgo_CameraServer_wrapper_remove_feed(WasGo::WasGoId p_feed);
int _wasgo_CameraTexture_wrapper_get_camera_active();
int _wasgo_CameraTexture_wrapper_get_camera_feed_id();
WasGo::WasGoId _wasgo_CameraTexture_wrapper_get_which_feed();
void _wasgo_CameraTexture_wrapper_set_camera_active(bool p_active);
void _wasgo_CameraTexture_wrapper_set_camera_feed_id(int p_feed_id);
void _wasgo_CameraTexture_wrapper_set_which_feed(WasGo::WasGoId p_which_feed);
WasGo::WasGoId _wasgo_CanvasItemMaterial_wrapper_get_blend_mode();
WasGo::WasGoId _wasgo_CanvasItemMaterial_wrapper_get_light_mode();
int _wasgo_CanvasItemMaterial_wrapper_get_particles_anim_h_frames();
int _wasgo_CanvasItemMaterial_wrapper_get_particles_anim_loop();
int _wasgo_CanvasItemMaterial_wrapper_get_particles_anim_v_frames();
int _wasgo_CanvasItemMaterial_wrapper_get_particles_animation();
void _wasgo_CanvasItemMaterial_wrapper_set_blend_mode(WasGo::WasGoId p_blend_mode);
void _wasgo_CanvasItemMaterial_wrapper_set_light_mode(WasGo::WasGoId p_light_mode);
void _wasgo_CanvasItemMaterial_wrapper_set_particles_anim_h_frames(int p_frames);
void _wasgo_CanvasItemMaterial_wrapper_set_particles_anim_loop(bool p_loop);
void _wasgo_CanvasItemMaterial_wrapper_set_particles_anim_v_frames(int p_frames);
void _wasgo_CanvasItemMaterial_wrapper_set_particles_animation(bool p_particles_anim);
WasGo::WasGoId _wasgo_CanvasLayer_wrapper_get_canvas();
WasGo::WasGoId _wasgo_CanvasLayer_wrapper_get_custom_viewport();
float _wasgo_CanvasLayer_wrapper_get_follow_viewport_scale();
int _wasgo_CanvasLayer_wrapper_get_layer();
WasGo::WasGoId _wasgo_CanvasLayer_wrapper_get_offset();
float _wasgo_CanvasLayer_wrapper_get_rotation();
float _wasgo_CanvasLayer_wrapper_get_rotation_degrees();
WasGo::WasGoId _wasgo_CanvasLayer_wrapper_get_scale();
WasGo::WasGoId _wasgo_CanvasLayer_wrapper_get_transform();
int _wasgo_CanvasLayer_wrapper_is_following_viewport();
void _wasgo_CanvasLayer_wrapper_set_custom_viewport(WasGo::WasGoId p_viewport);
void _wasgo_CanvasLayer_wrapper_set_follow_viewport(bool p_enable);
void _wasgo_CanvasLayer_wrapper_set_follow_viewport_scale(float p_scale);
void _wasgo_CanvasLayer_wrapper_set_layer(int p_layer);
void _wasgo_CanvasLayer_wrapper_set_offset(WasGo::WasGoId p_offset);
void _wasgo_CanvasLayer_wrapper_set_rotation(float p_radians);
void _wasgo_CanvasLayer_wrapper_set_rotation_degrees(float p_degrees);
void _wasgo_CanvasLayer_wrapper_set_scale(WasGo::WasGoId p_scale);
void _wasgo_CanvasLayer_wrapper_set_transform(WasGo::WasGoId p_transform);
WasGo::WasGoId _wasgo_CanvasModulate_wrapper_get_color();
void _wasgo_CanvasModulate_wrapper_set_color(WasGo::WasGoId p_color);
float _wasgo_CapsuleMesh_wrapper_get_mid_height();
int _wasgo_CapsuleMesh_wrapper_get_radial_segments();
float _wasgo_CapsuleMesh_wrapper_get_radius();
int _wasgo_CapsuleMesh_wrapper_get_rings();
void _wasgo_CapsuleMesh_wrapper_set_mid_height(float p_mid_height);
void _wasgo_CapsuleMesh_wrapper_set_radial_segments(int p_segments);
void _wasgo_CapsuleMesh_wrapper_set_radius(float p_radius);
void _wasgo_CapsuleMesh_wrapper_set_rings(int p_rings);
float _wasgo_CapsuleShape_wrapper_get_height();
float _wasgo_CapsuleShape_wrapper_get_radius();
void _wasgo_CapsuleShape_wrapper_set_height(float p_height);
void _wasgo_CapsuleShape_wrapper_set_radius(float p_radius);
float _wasgo_CapsuleShape2D_wrapper_get_height();
float _wasgo_CapsuleShape2D_wrapper_get_radius();
void _wasgo_CapsuleShape2D_wrapper_set_height(float p_height);
void _wasgo_CapsuleShape2D_wrapper_set_radius(float p_radius);
int _wasgo_CenterContainer_wrapper_is_using_top_left();
void _wasgo_CenterContainer_wrapper_set_use_top_left(bool p_enable);
int _wasgo_CharFXTransform_wrapper_get_absolute_index();
int _wasgo_CharFXTransform_wrapper_get_character();
WasGo::WasGoId _wasgo_CharFXTransform_wrapper_get_color();
float _wasgo_CharFXTransform_wrapper_get_elapsed_time();
WasGo::WasGoId _wasgo_CharFXTransform_wrapper_get_environment();
WasGo::WasGoId _wasgo_CharFXTransform_wrapper_get_offset();
int _wasgo_CharFXTransform_wrapper_get_relative_index();
int _wasgo_CharFXTransform_wrapper_is_visible();
void _wasgo_CharFXTransform_wrapper_set_absolute_index(int p_index);
void _wasgo_CharFXTransform_wrapper_set_character(int p_character);
void _wasgo_CharFXTransform_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_CharFXTransform_wrapper_set_elapsed_time(float p_time);
void _wasgo_CharFXTransform_wrapper_set_environment(WasGo::WasGoId p_environment);
void _wasgo_CharFXTransform_wrapper_set_offset(WasGo::WasGoId p_offset);
void _wasgo_CharFXTransform_wrapper_set_relative_index(int p_index);
void _wasgo_CharFXTransform_wrapper_set_visibility(bool p_visibility);
float _wasgo_CircleShape2D_wrapper_get_radius();
void _wasgo_CircleShape2D_wrapper_set_radius(float p_radius);
void _wasgo_ClippedCamera_wrapper_add_exception(WasGo::WasGoId p_node);
void _wasgo_ClippedCamera_wrapper_add_exception_rid(WasGo::WasGoId p_rid);
void _wasgo_ClippedCamera_wrapper_clear_exceptions();
float _wasgo_ClippedCamera_wrapper_get_clip_offset();
int _wasgo_ClippedCamera_wrapper_get_collision_mask();
int _wasgo_ClippedCamera_wrapper_get_collision_mask_bit(int p_bit);
float _wasgo_ClippedCamera_wrapper_get_margin();
WasGo::WasGoId _wasgo_ClippedCamera_wrapper_get_process_mode();
int _wasgo_ClippedCamera_wrapper_is_clip_to_areas_enabled();
int _wasgo_ClippedCamera_wrapper_is_clip_to_bodies_enabled();
void _wasgo_ClippedCamera_wrapper_remove_exception(WasGo::WasGoId p_node);
void _wasgo_ClippedCamera_wrapper_remove_exception_rid(WasGo::WasGoId p_rid);
void _wasgo_ClippedCamera_wrapper_set_clip_to_areas(bool p_enable);
void _wasgo_ClippedCamera_wrapper_set_clip_to_bodies(bool p_enable);
void _wasgo_ClippedCamera_wrapper_set_collision_mask(int p_mask);
void _wasgo_ClippedCamera_wrapper_set_collision_mask_bit(int p_bit, bool p_value);
void _wasgo_ClippedCamera_wrapper_set_margin(float p_margin);
void _wasgo_ClippedCamera_wrapper_set_process_mode(WasGo::WasGoId p_process_mode);
float _wasgo_CollisionPolygon_wrapper_get_depth();
WasGo::WasGoId _wasgo_CollisionPolygon_wrapper_get_polygon();
int _wasgo_CollisionPolygon_wrapper_is_disabled();
void _wasgo_CollisionPolygon_wrapper_set_depth(float p_depth);
void _wasgo_CollisionPolygon_wrapper_set_disabled(bool p_disabled);
void _wasgo_CollisionPolygon_wrapper_set_polygon(WasGo::WasGoId p_polygon);
WasGo::WasGoId _wasgo_CollisionPolygon2D_wrapper_get_build_mode();
float _wasgo_CollisionPolygon2D_wrapper_get_one_way_collision_margin();
WasGo::WasGoId _wasgo_CollisionPolygon2D_wrapper_get_polygon();
int _wasgo_CollisionPolygon2D_wrapper_is_disabled();
int _wasgo_CollisionPolygon2D_wrapper_is_one_way_collision_enabled();
void _wasgo_CollisionPolygon2D_wrapper_set_build_mode(WasGo::WasGoId p_build_mode);
void _wasgo_CollisionPolygon2D_wrapper_set_disabled(bool p_disabled);
void _wasgo_CollisionPolygon2D_wrapper_set_one_way_collision(bool p_enabled);
void _wasgo_CollisionPolygon2D_wrapper_set_one_way_collision_margin(float p_margin);
void _wasgo_CollisionPolygon2D_wrapper_set_polygon(WasGo::WasGoId p_polygon);
WasGo::WasGoId _wasgo_CollisionShape_wrapper_get_shape();
int _wasgo_CollisionShape_wrapper_is_disabled();
void _wasgo_CollisionShape_wrapper_make_convex_from_brothers();
void _wasgo_CollisionShape_wrapper_resource_changed(WasGo::WasGoId p_resource);
void _wasgo_CollisionShape_wrapper_set_disabled(bool p_enable);
void _wasgo_CollisionShape_wrapper_set_shape(WasGo::WasGoId p_shape);
float _wasgo_CollisionShape2D_wrapper_get_one_way_collision_margin();
WasGo::WasGoId _wasgo_CollisionShape2D_wrapper_get_shape();
int _wasgo_CollisionShape2D_wrapper_is_disabled();
int _wasgo_CollisionShape2D_wrapper_is_one_way_collision_enabled();
void _wasgo_CollisionShape2D_wrapper_set_disabled(bool p_disabled);
void _wasgo_CollisionShape2D_wrapper_set_one_way_collision(bool p_enabled);
void _wasgo_CollisionShape2D_wrapper_set_one_way_collision_margin(float p_margin);
void _wasgo_CollisionShape2D_wrapper_set_shape(WasGo::WasGoId p_shape);
void _wasgo_ColorPicker_wrapper_add_preset(WasGo::WasGoId p_color);
int _wasgo_ColorPicker_wrapper_are_presets_enabled();
int _wasgo_ColorPicker_wrapper_are_presets_visible();
void _wasgo_ColorPicker_wrapper_erase_preset(WasGo::WasGoId p_color);
WasGo::WasGoId _wasgo_ColorPicker_wrapper_get_pick_color();
WasGo::WasGoId _wasgo_ColorPicker_wrapper_get_presets();
int _wasgo_ColorPicker_wrapper_is_deferred_mode();
int _wasgo_ColorPicker_wrapper_is_editing_alpha();
int _wasgo_ColorPicker_wrapper_is_hsv_mode();
int _wasgo_ColorPicker_wrapper_is_raw_mode();
void _wasgo_ColorPicker_wrapper_set_deferred_mode(bool p_mode);
void _wasgo_ColorPicker_wrapper_set_edit_alpha(bool p_show);
void _wasgo_ColorPicker_wrapper_set_hsv_mode(bool p_mode);
void _wasgo_ColorPicker_wrapper_set_pick_color(WasGo::WasGoId p_color);
void _wasgo_ColorPicker_wrapper_set_presets_enabled(bool p_enabled);
void _wasgo_ColorPicker_wrapper_set_presets_visible(bool p_visible);
void _wasgo_ColorPicker_wrapper_set_raw_mode(bool p_mode);
WasGo::WasGoId _wasgo_ColorPickerButton_wrapper_get_pick_color();
WasGo::WasGoId _wasgo_ColorPickerButton_wrapper_get_picker();
WasGo::WasGoId _wasgo_ColorPickerButton_wrapper_get_popup();
int _wasgo_ColorPickerButton_wrapper_is_editing_alpha();
void _wasgo_ColorPickerButton_wrapper_set_edit_alpha(bool p_show);
void _wasgo_ColorPickerButton_wrapper_set_pick_color(WasGo::WasGoId p_color);
WasGo::WasGoId _wasgo_ColorRect_wrapper_get_frame_color();
void _wasgo_ColorRect_wrapper_set_frame_color(WasGo::WasGoId p_color);
WasGo::WasGoId _wasgo_ConcavePolygonShape_wrapper_get_faces();
void _wasgo_ConcavePolygonShape_wrapper_set_faces(WasGo::WasGoId p_faces);
WasGo::WasGoId _wasgo_ConcavePolygonShape2D_wrapper_get_segments();
void _wasgo_ConcavePolygonShape2D_wrapper_set_segments(WasGo::WasGoId p_segments);
float _wasgo_ConeTwistJoint_wrapper_get_param(WasGo::WasGoId p_param);
void _wasgo_ConeTwistJoint_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
void _wasgo_ConfigFile_wrapper_erase_section(WasGo::WasGoId p_section);
void _wasgo_ConfigFile_wrapper_erase_section_key(WasGo::WasGoId p_section, WasGo::WasGoId p_key);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_get_section_keys(WasGo::WasGoId p_section);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_get_sections();
WasGo::WasGoId _wasgo_ConfigFile_wrapper_get_value(WasGo::WasGoId p_section, WasGo::WasGoId p_key, WasGo::WasGoId p_default);
int _wasgo_ConfigFile_wrapper_has_section(WasGo::WasGoId p_section);
int _wasgo_ConfigFile_wrapper_has_section_key(WasGo::WasGoId p_section, WasGo::WasGoId p_key);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_load(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_load_encrypted(WasGo::WasGoId p_path, WasGo::WasGoId p_key);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_load_encrypted_pass(WasGo::WasGoId p_path, WasGo::WasGoId p_password);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_parse(WasGo::WasGoId p_data);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_save(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_save_encrypted(WasGo::WasGoId p_path, WasGo::WasGoId p_key);
WasGo::WasGoId _wasgo_ConfigFile_wrapper_save_encrypted_pass(WasGo::WasGoId p_path, WasGo::WasGoId p_password);
void _wasgo_ConfigFile_wrapper_set_value(WasGo::WasGoId p_section, WasGo::WasGoId p_key, WasGo::WasGoId p_value);
WasGo::WasGoId _wasgo_ConfirmationDialog_wrapper_get_cancel();
WasGo::WasGoId _wasgo_ConvexPolygonShape_wrapper_get_points();
void _wasgo_ConvexPolygonShape_wrapper_set_points(WasGo::WasGoId p_points);
WasGo::WasGoId _wasgo_ConvexPolygonShape2D_wrapper_get_points();
void _wasgo_ConvexPolygonShape2D_wrapper_set_point_cloud(WasGo::WasGoId p_point_cloud);
void _wasgo_ConvexPolygonShape2D_wrapper_set_points(WasGo::WasGoId p_points);
WasGo::WasGoId _wasgo_Crypto_wrapper_generate_random_bytes(int p_size);
WasGo::WasGoId _wasgo_Crypto_wrapper_generate_rsa(int p_size);
WasGo::WasGoId _wasgo_Crypto_wrapper_generate_self_signed_certificate(WasGo::WasGoId p_key, WasGo::WasGoId p_issuer_name, WasGo::WasGoId p_not_before, WasGo::WasGoId p_not_after);
WasGo::WasGoId _wasgo_CryptoKey_wrapper_load(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_CryptoKey_wrapper_save(WasGo::WasGoId p_path);
int _wasgo_CubeMap_wrapper_get_flags();
int _wasgo_CubeMap_wrapper_get_height();
float _wasgo_CubeMap_wrapper_get_lossy_storage_quality();
WasGo::WasGoId _wasgo_CubeMap_wrapper_get_side(WasGo::WasGoId p_side);
WasGo::WasGoId _wasgo_CubeMap_wrapper_get_storage();
int _wasgo_CubeMap_wrapper_get_width();
void _wasgo_CubeMap_wrapper_set_flags(int p_flags);
void _wasgo_CubeMap_wrapper_set_lossy_storage_quality(float p_quality);
void _wasgo_CubeMap_wrapper_set_side(WasGo::WasGoId p_side, WasGo::WasGoId p_image);
void _wasgo_CubeMap_wrapper_set_storage(WasGo::WasGoId p_mode);
WasGo::WasGoId _wasgo_CubeMesh_wrapper_get_size();
int _wasgo_CubeMesh_wrapper_get_subdivide_depth();
int _wasgo_CubeMesh_wrapper_get_subdivide_height();
int _wasgo_CubeMesh_wrapper_get_subdivide_width();
void _wasgo_CubeMesh_wrapper_set_size(WasGo::WasGoId p_size);
void _wasgo_CubeMesh_wrapper_set_subdivide_depth(int p_divisions);
void _wasgo_CubeMesh_wrapper_set_subdivide_height(int p_divisions);
void _wasgo_CubeMesh_wrapper_set_subdivide_width(int p_subdivide);
int _wasgo_Curve_wrapper_add_point(WasGo::WasGoId p_position, float p_left_tangent, float p_right_tangent, WasGo::WasGoId p_left_mode, WasGo::WasGoId p_right_mode);
void _wasgo_Curve_wrapper_bake();
void _wasgo_Curve_wrapper_clean_dupes();
void _wasgo_Curve_wrapper_clear_points();
int _wasgo_Curve_wrapper_get_bake_resolution();
float _wasgo_Curve_wrapper_get_max_value();
float _wasgo_Curve_wrapper_get_min_value();
int _wasgo_Curve_wrapper_get_point_count();
WasGo::WasGoId _wasgo_Curve_wrapper_get_point_left_mode(int p_index);
float _wasgo_Curve_wrapper_get_point_left_tangent(int p_index);
WasGo::WasGoId _wasgo_Curve_wrapper_get_point_position(int p_index);
WasGo::WasGoId _wasgo_Curve_wrapper_get_point_right_mode(int p_index);
float _wasgo_Curve_wrapper_get_point_right_tangent(int p_index);
float _wasgo_Curve_wrapper_interpolate(float p_offset);
float _wasgo_Curve_wrapper_interpolate_baked(float p_offset);
void _wasgo_Curve_wrapper_remove_point(int p_index);
void _wasgo_Curve_wrapper_set_bake_resolution(int p_resolution);
void _wasgo_Curve_wrapper_set_max_value(float p_max);
void _wasgo_Curve_wrapper_set_min_value(float p_min);
void _wasgo_Curve_wrapper_set_point_left_mode(int p_index, WasGo::WasGoId p_mode);
void _wasgo_Curve_wrapper_set_point_left_tangent(int p_index, float p_tangent);
int _wasgo_Curve_wrapper_set_point_offset(int p_index, float p_offset);
void _wasgo_Curve_wrapper_set_point_right_mode(int p_index, WasGo::WasGoId p_mode);
void _wasgo_Curve_wrapper_set_point_right_tangent(int p_index, float p_tangent);
void _wasgo_Curve_wrapper_set_point_value(int p_index, float p_y);
void _wasgo_Curve2D_wrapper_add_point(WasGo::WasGoId p_position, WasGo::WasGoId p_in, WasGo::WasGoId p_out, int p_at_position);
void _wasgo_Curve2D_wrapper_clear_points();
float _wasgo_Curve2D_wrapper_get_bake_interval();
float _wasgo_Curve2D_wrapper_get_baked_length();
WasGo::WasGoId _wasgo_Curve2D_wrapper_get_baked_points();
float _wasgo_Curve2D_wrapper_get_closest_offset(WasGo::WasGoId p_to_point);
WasGo::WasGoId _wasgo_Curve2D_wrapper_get_closest_point(WasGo::WasGoId p_to_point);
int _wasgo_Curve2D_wrapper_get_point_count();
WasGo::WasGoId _wasgo_Curve2D_wrapper_get_point_in(int p_idx);
WasGo::WasGoId _wasgo_Curve2D_wrapper_get_point_out(int p_idx);
WasGo::WasGoId _wasgo_Curve2D_wrapper_get_point_position(int p_idx);
WasGo::WasGoId _wasgo_Curve2D_wrapper_interpolate(int p_idx, float p_t);
WasGo::WasGoId _wasgo_Curve2D_wrapper_interpolate_baked(float p_offset, bool p_cubic);
WasGo::WasGoId _wasgo_Curve2D_wrapper_interpolatef(float p_fofs);
void _wasgo_Curve2D_wrapper_remove_point(int p_idx);
void _wasgo_Curve2D_wrapper_set_bake_interval(float p_distance);
void _wasgo_Curve2D_wrapper_set_point_in(int p_idx, WasGo::WasGoId p_position);
void _wasgo_Curve2D_wrapper_set_point_out(int p_idx, WasGo::WasGoId p_position);
void _wasgo_Curve2D_wrapper_set_point_position(int p_idx, WasGo::WasGoId p_position);
WasGo::WasGoId _wasgo_Curve2D_wrapper_tessellate(int p_max_stages, float p_tolerance_degrees);
void _wasgo_Curve3D_wrapper_add_point(WasGo::WasGoId p_position, WasGo::WasGoId p_in, WasGo::WasGoId p_out, int p_at_position);
void _wasgo_Curve3D_wrapper_clear_points();
float _wasgo_Curve3D_wrapper_get_bake_interval();
float _wasgo_Curve3D_wrapper_get_baked_length();
WasGo::WasGoId _wasgo_Curve3D_wrapper_get_baked_points();
WasGo::WasGoId _wasgo_Curve3D_wrapper_get_baked_tilts();
WasGo::WasGoId _wasgo_Curve3D_wrapper_get_baked_up_vectors();
float _wasgo_Curve3D_wrapper_get_closest_offset(WasGo::WasGoId p_to_point);
WasGo::WasGoId _wasgo_Curve3D_wrapper_get_closest_point(WasGo::WasGoId p_to_point);
int _wasgo_Curve3D_wrapper_get_point_count();
WasGo::WasGoId _wasgo_Curve3D_wrapper_get_point_in(int p_idx);
WasGo::WasGoId _wasgo_Curve3D_wrapper_get_point_out(int p_idx);
WasGo::WasGoId _wasgo_Curve3D_wrapper_get_point_position(int p_idx);
float _wasgo_Curve3D_wrapper_get_point_tilt(int p_idx);
WasGo::WasGoId _wasgo_Curve3D_wrapper_interpolate(int p_idx, float p_t);
WasGo::WasGoId _wasgo_Curve3D_wrapper_interpolate_baked(float p_offset, bool p_cubic);
WasGo::WasGoId _wasgo_Curve3D_wrapper_interpolate_baked_up_vector(float p_offset, bool p_apply_tilt);
WasGo::WasGoId _wasgo_Curve3D_wrapper_interpolatef(float p_fofs);
int _wasgo_Curve3D_wrapper_is_up_vector_enabled();
void _wasgo_Curve3D_wrapper_remove_point(int p_idx);
void _wasgo_Curve3D_wrapper_set_bake_interval(float p_distance);
void _wasgo_Curve3D_wrapper_set_point_in(int p_idx, WasGo::WasGoId p_position);
void _wasgo_Curve3D_wrapper_set_point_out(int p_idx, WasGo::WasGoId p_position);
void _wasgo_Curve3D_wrapper_set_point_position(int p_idx, WasGo::WasGoId p_position);
void _wasgo_Curve3D_wrapper_set_point_tilt(int p_idx, float p_tilt);
void _wasgo_Curve3D_wrapper_set_up_vector_enabled(bool p_enable);
WasGo::WasGoId _wasgo_Curve3D_wrapper_tessellate(int p_max_stages, float p_tolerance_degrees);
WasGo::WasGoId _wasgo_CurveTexture_wrapper_get_curve();
void _wasgo_CurveTexture_wrapper_set_curve(WasGo::WasGoId p_curve);
void _wasgo_CurveTexture_wrapper_set_width(int p_width);
float _wasgo_CylinderMesh_wrapper_get_bottom_radius();
float _wasgo_CylinderMesh_wrapper_get_height();
int _wasgo_CylinderMesh_wrapper_get_radial_segments();
int _wasgo_CylinderMesh_wrapper_get_rings();
float _wasgo_CylinderMesh_wrapper_get_top_radius();
void _wasgo_CylinderMesh_wrapper_set_bottom_radius(float p_radius);
void _wasgo_CylinderMesh_wrapper_set_height(float p_height);
void _wasgo_CylinderMesh_wrapper_set_radial_segments(int p_segments);
void _wasgo_CylinderMesh_wrapper_set_rings(int p_rings);
void _wasgo_CylinderMesh_wrapper_set_top_radius(float p_radius);
float _wasgo_CylinderShape_wrapper_get_height();
float _wasgo_CylinderShape_wrapper_get_radius();
void _wasgo_CylinderShape_wrapper_set_height(float p_height);
void _wasgo_CylinderShape_wrapper_set_radius(float p_radius);
WasGo::WasGoId _wasgo_DTLSServer_wrapper_setup(WasGo::WasGoId p_key, WasGo::WasGoId p_certificate, WasGo::WasGoId p_chain);
WasGo::WasGoId _wasgo_DTLSServer_wrapper_take_connection(WasGo::WasGoId p_udp_peer);
float _wasgo_DampedSpringJoint2D_wrapper_get_damping();
float _wasgo_DampedSpringJoint2D_wrapper_get_length();
float _wasgo_DampedSpringJoint2D_wrapper_get_rest_length();
float _wasgo_DampedSpringJoint2D_wrapper_get_stiffness();
void _wasgo_DampedSpringJoint2D_wrapper_set_damping(float p_damping);
void _wasgo_DampedSpringJoint2D_wrapper_set_length(float p_length);
void _wasgo_DampedSpringJoint2D_wrapper_set_rest_length(float p_rest_length);
void _wasgo_DampedSpringJoint2D_wrapper_set_stiffness(float p_stiffness);
WasGo::WasGoId _wasgo_DirectionalLight_wrapper_get_shadow_depth_range();
WasGo::WasGoId _wasgo_DirectionalLight_wrapper_get_shadow_mode();
int _wasgo_DirectionalLight_wrapper_is_blend_splits_enabled();
void _wasgo_DirectionalLight_wrapper_set_blend_splits(bool p_enabled);
void _wasgo_DirectionalLight_wrapper_set_shadow_depth_range(WasGo::WasGoId p_mode);
void _wasgo_DirectionalLight_wrapper_set_shadow_mode(WasGo::WasGoId p_mode);
WasGo::WasGoId _wasgo_Directory_wrapper_change_dir(WasGo::WasGoId p_todir);
WasGo::WasGoId _wasgo_Directory_wrapper_copy(WasGo::WasGoId p_from, WasGo::WasGoId p_to);
int _wasgo_Directory_wrapper_current_is_dir();
int _wasgo_Directory_wrapper_dir_exists(WasGo::WasGoId p_path);
int _wasgo_Directory_wrapper_file_exists(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_Directory_wrapper_get_current_dir();
int _wasgo_Directory_wrapper_get_current_drive();
WasGo::WasGoId _wasgo_Directory_wrapper_get_drive(int p_idx);
int _wasgo_Directory_wrapper_get_drive_count();
WasGo::WasGoId _wasgo_Directory_wrapper_get_next();
int _wasgo_Directory_wrapper_get_space_left();
WasGo::WasGoId _wasgo_Directory_wrapper_list_dir_begin(bool p_skip_navigational, bool p_skip_hidden);
void _wasgo_Directory_wrapper_list_dir_end();
WasGo::WasGoId _wasgo_Directory_wrapper_make_dir(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_Directory_wrapper_make_dir_recursive(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_Directory_wrapper_open(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_Directory_wrapper_remove(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_Directory_wrapper_rename(WasGo::WasGoId p_from, WasGo::WasGoId p_to);
void _wasgo_DynamicFont_wrapper_add_fallback(WasGo::WasGoId p_data);
WasGo::WasGoId _wasgo_DynamicFont_wrapper_get_available_chars();
WasGo::WasGoId _wasgo_DynamicFont_wrapper_get_fallback(int p_idx);
int _wasgo_DynamicFont_wrapper_get_fallback_count();
WasGo::WasGoId _wasgo_DynamicFont_wrapper_get_font_data();
WasGo::WasGoId _wasgo_DynamicFont_wrapper_get_outline_color();
int _wasgo_DynamicFont_wrapper_get_outline_size();
int _wasgo_DynamicFont_wrapper_get_size();
int _wasgo_DynamicFont_wrapper_get_spacing(int p_type);
int _wasgo_DynamicFont_wrapper_get_use_filter();
int _wasgo_DynamicFont_wrapper_get_use_mipmaps();
void _wasgo_DynamicFont_wrapper_remove_fallback(int p_idx);
void _wasgo_DynamicFont_wrapper_set_fallback(int p_idx, WasGo::WasGoId p_data);
void _wasgo_DynamicFont_wrapper_set_font_data(WasGo::WasGoId p_data);
void _wasgo_DynamicFont_wrapper_set_outline_color(WasGo::WasGoId p_color);
void _wasgo_DynamicFont_wrapper_set_outline_size(int p_size);
void _wasgo_DynamicFont_wrapper_set_size(int p_data);
void _wasgo_DynamicFont_wrapper_set_spacing(int p_type, int p_value);
void _wasgo_DynamicFont_wrapper_set_use_filter(bool p_enable);
void _wasgo_DynamicFont_wrapper_set_use_mipmaps(bool p_enable);
WasGo::WasGoId _wasgo_DynamicFontData_wrapper_get_font_path();
WasGo::WasGoId _wasgo_DynamicFontData_wrapper_get_hinting();
int _wasgo_DynamicFontData_wrapper_is_antialiased();
void _wasgo_DynamicFontData_wrapper_set_antialiased(bool p_antialiased);
void _wasgo_DynamicFontData_wrapper_set_font_path(WasGo::WasGoId p_path);
void _wasgo_DynamicFontData_wrapper_set_hinting(WasGo::WasGoId p_mode);
int _wasgo_EncodedObjectAsID_wrapper_get_object_id();
void _wasgo_EncodedObjectAsID_wrapper_set_object_id(int p_id);
float _wasgo_Environment_wrapper_get_adjustment_brightness();
WasGo::WasGoId _wasgo_Environment_wrapper_get_adjustment_color_correction();
float _wasgo_Environment_wrapper_get_adjustment_contrast();
float _wasgo_Environment_wrapper_get_adjustment_saturation();
WasGo::WasGoId _wasgo_Environment_wrapper_get_ambient_light_color();
float _wasgo_Environment_wrapper_get_ambient_light_energy();
float _wasgo_Environment_wrapper_get_ambient_light_sky_contribution();
WasGo::WasGoId _wasgo_Environment_wrapper_get_background();
WasGo::WasGoId _wasgo_Environment_wrapper_get_bg_color();
float _wasgo_Environment_wrapper_get_bg_energy();
int _wasgo_Environment_wrapper_get_camera_feed_id();
int _wasgo_Environment_wrapper_get_canvas_max_layer();
float _wasgo_Environment_wrapper_get_dof_blur_far_amount();
float _wasgo_Environment_wrapper_get_dof_blur_far_distance();
WasGo::WasGoId _wasgo_Environment_wrapper_get_dof_blur_far_quality();
float _wasgo_Environment_wrapper_get_dof_blur_far_transition();
float _wasgo_Environment_wrapper_get_dof_blur_near_amount();
float _wasgo_Environment_wrapper_get_dof_blur_near_distance();
WasGo::WasGoId _wasgo_Environment_wrapper_get_dof_blur_near_quality();
float _wasgo_Environment_wrapper_get_dof_blur_near_transition();
WasGo::WasGoId _wasgo_Environment_wrapper_get_fog_color();
float _wasgo_Environment_wrapper_get_fog_depth_begin();
float _wasgo_Environment_wrapper_get_fog_depth_curve();
float _wasgo_Environment_wrapper_get_fog_depth_end();
float _wasgo_Environment_wrapper_get_fog_height_curve();
float _wasgo_Environment_wrapper_get_fog_height_max();
float _wasgo_Environment_wrapper_get_fog_height_min();
float _wasgo_Environment_wrapper_get_fog_sun_amount();
WasGo::WasGoId _wasgo_Environment_wrapper_get_fog_sun_color();
float _wasgo_Environment_wrapper_get_fog_transmit_curve();
WasGo::WasGoId _wasgo_Environment_wrapper_get_glow_blend_mode();
float _wasgo_Environment_wrapper_get_glow_bloom();
float _wasgo_Environment_wrapper_get_glow_hdr_bleed_scale();
float _wasgo_Environment_wrapper_get_glow_hdr_bleed_threshold();
float _wasgo_Environment_wrapper_get_glow_hdr_luminance_cap();
float _wasgo_Environment_wrapper_get_glow_intensity();
float _wasgo_Environment_wrapper_get_glow_strength();
WasGo::WasGoId _wasgo_Environment_wrapper_get_sky();
float _wasgo_Environment_wrapper_get_sky_custom_fov();
WasGo::WasGoId _wasgo_Environment_wrapper_get_sky_orientation();
WasGo::WasGoId _wasgo_Environment_wrapper_get_sky_rotation();
WasGo::WasGoId _wasgo_Environment_wrapper_get_sky_rotation_degrees();
float _wasgo_Environment_wrapper_get_ssao_ao_channel_affect();
float _wasgo_Environment_wrapper_get_ssao_bias();
WasGo::WasGoId _wasgo_Environment_wrapper_get_ssao_blur();
WasGo::WasGoId _wasgo_Environment_wrapper_get_ssao_color();
float _wasgo_Environment_wrapper_get_ssao_direct_light_affect();
float _wasgo_Environment_wrapper_get_ssao_edge_sharpness();
float _wasgo_Environment_wrapper_get_ssao_intensity();
float _wasgo_Environment_wrapper_get_ssao_intensity2();
WasGo::WasGoId _wasgo_Environment_wrapper_get_ssao_quality();
float _wasgo_Environment_wrapper_get_ssao_radius();
float _wasgo_Environment_wrapper_get_ssao_radius2();
float _wasgo_Environment_wrapper_get_ssr_depth_tolerance();
float _wasgo_Environment_wrapper_get_ssr_fade_in();
float _wasgo_Environment_wrapper_get_ssr_fade_out();
int _wasgo_Environment_wrapper_get_ssr_max_steps();
int _wasgo_Environment_wrapper_get_tonemap_auto_exposure();
float _wasgo_Environment_wrapper_get_tonemap_auto_exposure_grey();
float _wasgo_Environment_wrapper_get_tonemap_auto_exposure_max();
float _wasgo_Environment_wrapper_get_tonemap_auto_exposure_min();
float _wasgo_Environment_wrapper_get_tonemap_auto_exposure_speed();
float _wasgo_Environment_wrapper_get_tonemap_exposure();
float _wasgo_Environment_wrapper_get_tonemap_white();
WasGo::WasGoId _wasgo_Environment_wrapper_get_tonemapper();
int _wasgo_Environment_wrapper_is_adjustment_enabled();
int _wasgo_Environment_wrapper_is_dof_blur_far_enabled();
int _wasgo_Environment_wrapper_is_dof_blur_near_enabled();
int _wasgo_Environment_wrapper_is_fog_depth_enabled();
int _wasgo_Environment_wrapper_is_fog_enabled();
int _wasgo_Environment_wrapper_is_fog_height_enabled();
int _wasgo_Environment_wrapper_is_fog_transmit_enabled();
int _wasgo_Environment_wrapper_is_glow_bicubic_upscale_enabled();
int _wasgo_Environment_wrapper_is_glow_enabled();
int _wasgo_Environment_wrapper_is_glow_level_enabled(int p_idx);
int _wasgo_Environment_wrapper_is_ssao_enabled();
int _wasgo_Environment_wrapper_is_ssr_enabled();
int _wasgo_Environment_wrapper_is_ssr_rough();
void _wasgo_Environment_wrapper_set_adjustment_brightness(float p_brightness);
void _wasgo_Environment_wrapper_set_adjustment_color_correction(WasGo::WasGoId p_color_correction);
void _wasgo_Environment_wrapper_set_adjustment_contrast(float p_contrast);
void _wasgo_Environment_wrapper_set_adjustment_enable(bool p_enabled);
void _wasgo_Environment_wrapper_set_adjustment_saturation(float p_saturation);
void _wasgo_Environment_wrapper_set_ambient_light_color(WasGo::WasGoId p_color);
void _wasgo_Environment_wrapper_set_ambient_light_energy(float p_energy);
void _wasgo_Environment_wrapper_set_ambient_light_sky_contribution(float p_energy);
void _wasgo_Environment_wrapper_set_background(WasGo::WasGoId p_mode);
void _wasgo_Environment_wrapper_set_bg_color(WasGo::WasGoId p_color);
void _wasgo_Environment_wrapper_set_bg_energy(float p_energy);
void _wasgo_Environment_wrapper_set_camera_feed_id(int p_camera_feed_id);
void _wasgo_Environment_wrapper_set_canvas_max_layer(int p_layer);
void _wasgo_Environment_wrapper_set_dof_blur_far_amount(float p_intensity);
void _wasgo_Environment_wrapper_set_dof_blur_far_distance(float p_intensity);
void _wasgo_Environment_wrapper_set_dof_blur_far_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_dof_blur_far_quality(WasGo::WasGoId p_intensity);
void _wasgo_Environment_wrapper_set_dof_blur_far_transition(float p_intensity);
void _wasgo_Environment_wrapper_set_dof_blur_near_amount(float p_intensity);
void _wasgo_Environment_wrapper_set_dof_blur_near_distance(float p_intensity);
void _wasgo_Environment_wrapper_set_dof_blur_near_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_dof_blur_near_quality(WasGo::WasGoId p_level);
void _wasgo_Environment_wrapper_set_dof_blur_near_transition(float p_intensity);
void _wasgo_Environment_wrapper_set_fog_color(WasGo::WasGoId p_color);
void _wasgo_Environment_wrapper_set_fog_depth_begin(float p_distance);
void _wasgo_Environment_wrapper_set_fog_depth_curve(float p_curve);
void _wasgo_Environment_wrapper_set_fog_depth_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_fog_depth_end(float p_distance);
void _wasgo_Environment_wrapper_set_fog_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_fog_height_curve(float p_curve);
void _wasgo_Environment_wrapper_set_fog_height_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_fog_height_max(float p_height);
void _wasgo_Environment_wrapper_set_fog_height_min(float p_height);
void _wasgo_Environment_wrapper_set_fog_sun_amount(float p_amount);
void _wasgo_Environment_wrapper_set_fog_sun_color(WasGo::WasGoId p_color);
void _wasgo_Environment_wrapper_set_fog_transmit_curve(float p_curve);
void _wasgo_Environment_wrapper_set_fog_transmit_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_glow_bicubic_upscale(bool p_enabled);
void _wasgo_Environment_wrapper_set_glow_blend_mode(WasGo::WasGoId p_mode);
void _wasgo_Environment_wrapper_set_glow_bloom(float p_amount);
void _wasgo_Environment_wrapper_set_glow_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_glow_hdr_bleed_scale(float p_scale);
void _wasgo_Environment_wrapper_set_glow_hdr_bleed_threshold(float p_threshold);
void _wasgo_Environment_wrapper_set_glow_hdr_luminance_cap(float p_amount);
void _wasgo_Environment_wrapper_set_glow_intensity(float p_intensity);
void _wasgo_Environment_wrapper_set_glow_level(int p_idx, bool p_enabled);
void _wasgo_Environment_wrapper_set_glow_strength(float p_strength);
void _wasgo_Environment_wrapper_set_sky(WasGo::WasGoId p_sky);
void _wasgo_Environment_wrapper_set_sky_custom_fov(float p_scale);
void _wasgo_Environment_wrapper_set_sky_orientation(WasGo::WasGoId p_orientation);
void _wasgo_Environment_wrapper_set_sky_rotation(WasGo::WasGoId p_euler_radians);
void _wasgo_Environment_wrapper_set_sky_rotation_degrees(WasGo::WasGoId p_euler_degrees);
void _wasgo_Environment_wrapper_set_ssao_ao_channel_affect(float p_amount);
void _wasgo_Environment_wrapper_set_ssao_bias(float p_bias);
void _wasgo_Environment_wrapper_set_ssao_blur(WasGo::WasGoId p_mode);
void _wasgo_Environment_wrapper_set_ssao_color(WasGo::WasGoId p_color);
void _wasgo_Environment_wrapper_set_ssao_direct_light_affect(float p_amount);
void _wasgo_Environment_wrapper_set_ssao_edge_sharpness(float p_edge_sharpness);
void _wasgo_Environment_wrapper_set_ssao_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_ssao_intensity(float p_intensity);
void _wasgo_Environment_wrapper_set_ssao_intensity2(float p_intensity);
void _wasgo_Environment_wrapper_set_ssao_quality(WasGo::WasGoId p_quality);
void _wasgo_Environment_wrapper_set_ssao_radius(float p_radius);
void _wasgo_Environment_wrapper_set_ssao_radius2(float p_radius);
void _wasgo_Environment_wrapper_set_ssr_depth_tolerance(float p_depth_tolerance);
void _wasgo_Environment_wrapper_set_ssr_enabled(bool p_enabled);
void _wasgo_Environment_wrapper_set_ssr_fade_in(float p_fade_in);
void _wasgo_Environment_wrapper_set_ssr_fade_out(float p_fade_out);
void _wasgo_Environment_wrapper_set_ssr_max_steps(int p_max_steps);
void _wasgo_Environment_wrapper_set_ssr_rough(bool p_rough);
void _wasgo_Environment_wrapper_set_tonemap_auto_exposure(bool p_auto_exposure);
void _wasgo_Environment_wrapper_set_tonemap_auto_exposure_grey(float p_exposure_grey);
void _wasgo_Environment_wrapper_set_tonemap_auto_exposure_max(float p_exposure_max);
void _wasgo_Environment_wrapper_set_tonemap_auto_exposure_min(float p_exposure_min);
void _wasgo_Environment_wrapper_set_tonemap_auto_exposure_speed(float p_exposure_speed);
void _wasgo_Environment_wrapper_set_tonemap_exposure(float p_exposure);
void _wasgo_Environment_wrapper_set_tonemap_white(float p_white);
void _wasgo_Environment_wrapper_set_tonemapper(WasGo::WasGoId p_mode);
WasGo::WasGoId _wasgo_Expression_wrapper_execute(WasGo::WasGoId p_inputs, WasGo::WasGoId p_base_instance, bool p_show_error);
WasGo::WasGoId _wasgo_Expression_wrapper_get_error_text();
int _wasgo_Expression_wrapper_has_execute_failed();
WasGo::WasGoId _wasgo_Expression_wrapper_parse(WasGo::WasGoId p_expression, WasGo::WasGoId p_input_names);
int _wasgo_ExternalTexture_wrapper_get_external_texture_id();
void _wasgo_ExternalTexture_wrapper_set_size(WasGo::WasGoId p_size);
void _wasgo_File_wrapper_close();
int _wasgo_File_wrapper_eof_reached();
int _wasgo_File_wrapper_file_exists(WasGo::WasGoId p_path);
int _wasgo_File_wrapper_get_16();
int _wasgo_File_wrapper_get_32();
int _wasgo_File_wrapper_get_64();
int _wasgo_File_wrapper_get_8();
WasGo::WasGoId _wasgo_File_wrapper_get_as_text();
WasGo::WasGoId _wasgo_File_wrapper_get_buffer(int p_len);
WasGo::WasGoId _wasgo_File_wrapper_get_csv_line(WasGo::WasGoId p_delim);
float _wasgo_File_wrapper_get_double();
int _wasgo_File_wrapper_get_endian_swap();
WasGo::WasGoId _wasgo_File_wrapper_get_error();
float _wasgo_File_wrapper_get_float();
int _wasgo_File_wrapper_get_len();
WasGo::WasGoId _wasgo_File_wrapper_get_line();
WasGo::WasGoId _wasgo_File_wrapper_get_md5(WasGo::WasGoId p_path);
int _wasgo_File_wrapper_get_modified_time(WasGo::WasGoId p_file);
WasGo::WasGoId _wasgo_File_wrapper_get_pascal_string();
WasGo::WasGoId _wasgo_File_wrapper_get_path();
WasGo::WasGoId _wasgo_File_wrapper_get_path_absolute();
int _wasgo_File_wrapper_get_position();
float _wasgo_File_wrapper_get_real();
WasGo::WasGoId _wasgo_File_wrapper_get_sha256(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_File_wrapper_get_var(bool p_allow_objects);
int _wasgo_File_wrapper_is_open();
WasGo::WasGoId _wasgo_File_wrapper_open(WasGo::WasGoId p_path, WasGo::WasGoId p_flags);
WasGo::WasGoId _wasgo_File_wrapper_open_compressed(WasGo::WasGoId p_path, WasGo::WasGoId p_mode_flags, WasGo::WasGoId p_compression_mode);
WasGo::WasGoId _wasgo_File_wrapper_open_encrypted(WasGo::WasGoId p_path, WasGo::WasGoId p_mode_flags, WasGo::WasGoId p_key);
WasGo::WasGoId _wasgo_File_wrapper_open_encrypted_with_pass(WasGo::WasGoId p_path, WasGo::WasGoId p_mode_flags, WasGo::WasGoId p_pass);
void _wasgo_File_wrapper_seek(int p_position);
void _wasgo_File_wrapper_seek_end(int p_position);
void _wasgo_File_wrapper_set_endian_swap(bool p_enable);
void _wasgo_File_wrapper_store_16(int p_value);
void _wasgo_File_wrapper_store_32(int p_value);
void _wasgo_File_wrapper_store_64(int p_value);
void _wasgo_File_wrapper_store_8(int p_value);
void _wasgo_File_wrapper_store_buffer(WasGo::WasGoId p_buffer);
void _wasgo_File_wrapper_store_csv_line(WasGo::WasGoId p_values, WasGo::WasGoId p_delim);
void _wasgo_File_wrapper_store_double(float p_value);
void _wasgo_File_wrapper_store_float(float p_value);
void _wasgo_File_wrapper_store_line(WasGo::WasGoId p_line);
void _wasgo_File_wrapper_store_pascal_string(WasGo::WasGoId p_string);
void _wasgo_File_wrapper_store_real(float p_value);
void _wasgo_File_wrapper_store_string(WasGo::WasGoId p_string);
void _wasgo_File_wrapper_store_var(WasGo::WasGoId p_value, bool p_full_objects);
void _wasgo_Font_wrapper_draw(WasGo::WasGoId p_canvas_item, WasGo::WasGoId p_position, WasGo::WasGoId p_string, WasGo::WasGoId p_modulate, int p_clip_w, WasGo::WasGoId p_outline_modulate);
float _wasgo_Font_wrapper_draw_char(WasGo::WasGoId p_canvas_item, WasGo::WasGoId p_position, int p_char, int p_next, WasGo::WasGoId p_modulate, bool p_outline);
float _wasgo_Font_wrapper_get_ascent();
WasGo::WasGoId _wasgo_Font_wrapper_get_char_size(int p_char, int p_next);
float _wasgo_Font_wrapper_get_descent();
float _wasgo_Font_wrapper_get_height();
WasGo::WasGoId _wasgo_Font_wrapper_get_string_size(WasGo::WasGoId p_string);
WasGo::WasGoId _wasgo_Font_wrapper_get_wordwrap_string_size(WasGo::WasGoId p_string, float p_width);
int _wasgo_Font_wrapper_has_outline();
int _wasgo_Font_wrapper_is_distance_field_hint();
void _wasgo_Font_wrapper_update_changes();
WasGo::WasGoId _wasgo_FuncRef_wrapper_call_func();
WasGo::WasGoId _wasgo_FuncRef_wrapper_call_funcv(WasGo::WasGoId p_arg_array);
WasGo::WasGoId _wasgo_FuncRef_wrapper_get_function();
int _wasgo_FuncRef_wrapper_is_valid();
void _wasgo_FuncRef_wrapper_set_function(WasGo::WasGoId p_name);
void _wasgo_FuncRef_wrapper_set_instance(WasGo::WasGoId p_instance);
void _wasgo_GIProbe_wrapper_bake(WasGo::WasGoId p_from_node, bool p_create_visual_debug);
void _wasgo_GIProbe_wrapper_debug_bake();
float _wasgo_GIProbe_wrapper_get_bias();
int _wasgo_GIProbe_wrapper_get_dynamic_range();
float _wasgo_GIProbe_wrapper_get_energy();
WasGo::WasGoId _wasgo_GIProbe_wrapper_get_extents();
float _wasgo_GIProbe_wrapper_get_normal_bias();
WasGo::WasGoId _wasgo_GIProbe_wrapper_get_probe_data();
float _wasgo_GIProbe_wrapper_get_propagation();
WasGo::WasGoId _wasgo_GIProbe_wrapper_get_subdiv();
int _wasgo_GIProbe_wrapper_is_compressed();
int _wasgo_GIProbe_wrapper_is_interior();
void _wasgo_GIProbe_wrapper_set_bias(float p_max);
void _wasgo_GIProbe_wrapper_set_compress(bool p_enable);
void _wasgo_GIProbe_wrapper_set_dynamic_range(int p_max);
void _wasgo_GIProbe_wrapper_set_energy(float p_max);
void _wasgo_GIProbe_wrapper_set_extents(WasGo::WasGoId p_extents);
void _wasgo_GIProbe_wrapper_set_interior(bool p_enable);
void _wasgo_GIProbe_wrapper_set_normal_bias(float p_max);
void _wasgo_GIProbe_wrapper_set_probe_data(WasGo::WasGoId p_data);
void _wasgo_GIProbe_wrapper_set_propagation(float p_max);
void _wasgo_GIProbe_wrapper_set_subdiv(WasGo::WasGoId p_subdiv);
float _wasgo_GIProbeData_wrapper_get_bias();
WasGo::WasGoId _wasgo_GIProbeData_wrapper_get_bounds();
float _wasgo_GIProbeData_wrapper_get_cell_size();
WasGo::WasGoId _wasgo_GIProbeData_wrapper_get_dynamic_data();
int _wasgo_GIProbeData_wrapper_get_dynamic_range();
float _wasgo_GIProbeData_wrapper_get_energy();
float _wasgo_GIProbeData_wrapper_get_normal_bias();
float _wasgo_GIProbeData_wrapper_get_propagation();
WasGo::WasGoId _wasgo_GIProbeData_wrapper_get_to_cell_xform();
int _wasgo_GIProbeData_wrapper_is_compressed();
int _wasgo_GIProbeData_wrapper_is_interior();
void _wasgo_GIProbeData_wrapper_set_bias(float p_bias);
void _wasgo_GIProbeData_wrapper_set_bounds(WasGo::WasGoId p_bounds);
void _wasgo_GIProbeData_wrapper_set_cell_size(float p_cell_size);
void _wasgo_GIProbeData_wrapper_set_compress(bool p_compress);
void _wasgo_GIProbeData_wrapper_set_dynamic_data(WasGo::WasGoId p_dynamic_data);
void _wasgo_GIProbeData_wrapper_set_dynamic_range(int p_dynamic_range);
void _wasgo_GIProbeData_wrapper_set_energy(float p_energy);
void _wasgo_GIProbeData_wrapper_set_interior(bool p_interior);
void _wasgo_GIProbeData_wrapper_set_normal_bias(float p_bias);
void _wasgo_GIProbeData_wrapper_set_propagation(float p_propagation);
void _wasgo_GIProbeData_wrapper_set_to_cell_xform(WasGo::WasGoId p_to_cell_xform);
WasGo::WasGoId _wasgo_GeometryInstance_wrapper_get_cast_shadows_setting();
float _wasgo_GeometryInstance_wrapper_get_extra_cull_margin();
int _wasgo_GeometryInstance_wrapper_get_flag(WasGo::WasGoId p_flag);
float _wasgo_GeometryInstance_wrapper_get_lod_max_distance();
float _wasgo_GeometryInstance_wrapper_get_lod_max_hysteresis();
float _wasgo_GeometryInstance_wrapper_get_lod_min_distance();
float _wasgo_GeometryInstance_wrapper_get_lod_min_hysteresis();
WasGo::WasGoId _wasgo_GeometryInstance_wrapper_get_material_override();
void _wasgo_GeometryInstance_wrapper_set_cast_shadows_setting(WasGo::WasGoId p_shadow_casting_setting);
void _wasgo_GeometryInstance_wrapper_set_custom_aabb(WasGo::WasGoId p_aabb);
void _wasgo_GeometryInstance_wrapper_set_extra_cull_margin(float p_margin);
void _wasgo_GeometryInstance_wrapper_set_flag(WasGo::WasGoId p_flag, bool p_value);
void _wasgo_GeometryInstance_wrapper_set_lod_max_distance(float p_mode);
void _wasgo_GeometryInstance_wrapper_set_lod_max_hysteresis(float p_mode);
void _wasgo_GeometryInstance_wrapper_set_lod_min_distance(float p_mode);
void _wasgo_GeometryInstance_wrapper_set_lod_min_hysteresis(float p_mode);
void _wasgo_GeometryInstance_wrapper_set_material_override(WasGo::WasGoId p_material);
void _wasgo_Gradient_wrapper_add_point(float p_offset, WasGo::WasGoId p_color);
WasGo::WasGoId _wasgo_Gradient_wrapper_get_color(int p_point);
WasGo::WasGoId _wasgo_Gradient_wrapper_get_colors();
float _wasgo_Gradient_wrapper_get_offset(int p_point);
WasGo::WasGoId _wasgo_Gradient_wrapper_get_offsets();
int _wasgo_Gradient_wrapper_get_point_count();
WasGo::WasGoId _wasgo_Gradient_wrapper_interpolate(float p_offset);
void _wasgo_Gradient_wrapper_remove_point(int p_offset);
void _wasgo_Gradient_wrapper_set_color(int p_point, WasGo::WasGoId p_color);
void _wasgo_Gradient_wrapper_set_colors(WasGo::WasGoId p_colors);
void _wasgo_Gradient_wrapper_set_offset(int p_point, float p_offset);
void _wasgo_Gradient_wrapper_set_offsets(WasGo::WasGoId p_offsets);
WasGo::WasGoId _wasgo_GradientTexture_wrapper_get_gradient();
void _wasgo_GradientTexture_wrapper_set_gradient(WasGo::WasGoId p_gradient);
void _wasgo_GradientTexture_wrapper_set_width(int p_width);
void _wasgo_GraphEdit_wrapper_add_valid_connection_type(int p_from_type, int p_to_type);
void _wasgo_GraphEdit_wrapper_add_valid_left_disconnect_type(int p_type);
void _wasgo_GraphEdit_wrapper_add_valid_right_disconnect_type(int p_type);
void _wasgo_GraphEdit_wrapper_clear_connections();
WasGo::WasGoId _wasgo_GraphEdit_wrapper_connect_node(WasGo::WasGoId p_from, int p_from_port, WasGo::WasGoId p_to, int p_to_port);
void _wasgo_GraphEdit_wrapper_disconnect_node(WasGo::WasGoId p_from, int p_from_port, WasGo::WasGoId p_to, int p_to_port);
WasGo::WasGoId _wasgo_GraphEdit_wrapper_get_connection_list();
WasGo::WasGoId _wasgo_GraphEdit_wrapper_get_scroll_ofs();
int _wasgo_GraphEdit_wrapper_get_snap();
float _wasgo_GraphEdit_wrapper_get_zoom();
int _wasgo_GraphEdit_wrapper_is_node_connected(WasGo::WasGoId p_from, int p_from_port, WasGo::WasGoId p_to, int p_to_port);
int _wasgo_GraphEdit_wrapper_is_right_disconnects_enabled();
int _wasgo_GraphEdit_wrapper_is_using_snap();
int _wasgo_GraphEdit_wrapper_is_valid_connection_type(int p_from_type, int p_to_type);
void _wasgo_GraphEdit_wrapper_remove_valid_connection_type(int p_from_type, int p_to_type);
void _wasgo_GraphEdit_wrapper_remove_valid_left_disconnect_type(int p_type);
void _wasgo_GraphEdit_wrapper_remove_valid_right_disconnect_type(int p_type);
void _wasgo_GraphEdit_wrapper_set_connection_activity(WasGo::WasGoId p_from, int p_from_port, WasGo::WasGoId p_to, int p_to_port, float p_amount);
void _wasgo_GraphEdit_wrapper_set_right_disconnects(bool p_enable);
void _wasgo_GraphEdit_wrapper_set_scroll_ofs(WasGo::WasGoId p_ofs);
void _wasgo_GraphEdit_wrapper_set_snap(int p_pixels);
void _wasgo_GraphEdit_wrapper_set_use_snap(bool p_enable);
void _wasgo_GraphEdit_wrapper_set_zoom(float p_p_zoom);
WasGo::WasGoId _wasgo_GraphNode_wrapper_get_title();
void _wasgo_GraphNode_wrapper_set_title(WasGo::WasGoId p_title);
int _wasgo_GridContainer_wrapper_get_columns();
void _wasgo_GridContainer_wrapper_set_columns(int p_columns);
float _wasgo_GrooveJoint2D_wrapper_get_initial_offset();
float _wasgo_GrooveJoint2D_wrapper_get_length();
void _wasgo_GrooveJoint2D_wrapper_set_initial_offset(float p_offset);
void _wasgo_GrooveJoint2D_wrapper_set_length(float p_length);
void _wasgo_HTTPClient_wrapper_close();
WasGo::WasGoId _wasgo_HTTPClient_wrapper_connect_to_host(WasGo::WasGoId p_host, int p_port, bool p_use_ssl, bool p_verify_host);
WasGo::WasGoId _wasgo_HTTPClient_wrapper_get_connection();
int _wasgo_HTTPClient_wrapper_get_read_chunk_size();
int _wasgo_HTTPClient_wrapper_get_response_body_length();
int _wasgo_HTTPClient_wrapper_get_response_code();
WasGo::WasGoId _wasgo_HTTPClient_wrapper_get_response_headers();
WasGo::WasGoId _wasgo_HTTPClient_wrapper_get_response_headers_as_dictionary();
WasGo::WasGoId _wasgo_HTTPClient_wrapper_get_status();
int _wasgo_HTTPClient_wrapper_has_response();
int _wasgo_HTTPClient_wrapper_is_blocking_mode_enabled();
int _wasgo_HTTPClient_wrapper_is_response_chunked();
WasGo::WasGoId _wasgo_HTTPClient_wrapper_poll();
WasGo::WasGoId _wasgo_HTTPClient_wrapper_query_string_from_dict(WasGo::WasGoId p_fields);
WasGo::WasGoId _wasgo_HTTPClient_wrapper_read_response_body_chunk();
WasGo::WasGoId _wasgo_HTTPClient_wrapper_request(WasGo::WasGoId p_method, WasGo::WasGoId p_url, WasGo::WasGoId p_headers, WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_HTTPClient_wrapper_request_raw(WasGo::WasGoId p_method, WasGo::WasGoId p_url, WasGo::WasGoId p_headers, WasGo::WasGoId p_body);
void _wasgo_HTTPClient_wrapper_set_blocking_mode(bool p_enabled);
void _wasgo_HTTPClient_wrapper_set_connection(WasGo::WasGoId p_connection);
void _wasgo_HTTPClient_wrapper_set_read_chunk_size(int p_bytes);
void _wasgo_HTTPRequest_wrapper_cancel_request();
int _wasgo_HTTPRequest_wrapper_get_body_size();
int _wasgo_HTTPRequest_wrapper_get_body_size_limit();
WasGo::WasGoId _wasgo_HTTPRequest_wrapper_get_download_file();
int _wasgo_HTTPRequest_wrapper_get_downloaded_bytes();
WasGo::WasGoId _wasgo_HTTPRequest_wrapper_get_http_client_status();
int _wasgo_HTTPRequest_wrapper_get_max_redirects();
int _wasgo_HTTPRequest_wrapper_is_using_threads();
WasGo::WasGoId _wasgo_HTTPRequest_wrapper_request(WasGo::WasGoId p_url, WasGo::WasGoId p_custom_headers, bool p_ssl_validate_domain, WasGo::WasGoId p_method, WasGo::WasGoId p_request_data);
void _wasgo_HTTPRequest_wrapper_set_body_size_limit(int p_bytes);
void _wasgo_HTTPRequest_wrapper_set_download_file(WasGo::WasGoId p_path);
void _wasgo_HTTPRequest_wrapper_set_max_redirects(int p_amount);
void _wasgo_HTTPRequest_wrapper_set_use_threads(bool p_enable);
WasGo::WasGoId _wasgo_HashingContext_wrapper_finish();
WasGo::WasGoId _wasgo_HashingContext_wrapper_start(WasGo::WasGoId p_type);
WasGo::WasGoId _wasgo_HashingContext_wrapper_update(WasGo::WasGoId p_chunk);
WasGo::WasGoId _wasgo_HeightMapShape_wrapper_get_map_data();
int _wasgo_HeightMapShape_wrapper_get_map_depth();
int _wasgo_HeightMapShape_wrapper_get_map_width();
void _wasgo_HeightMapShape_wrapper_set_map_data(WasGo::WasGoId p_data);
void _wasgo_HeightMapShape_wrapper_set_map_depth(int p_height);
void _wasgo_HeightMapShape_wrapper_set_map_width(int p_width);
int _wasgo_HingeJoint_wrapper_get_flag(WasGo::WasGoId p_flag);
float _wasgo_HingeJoint_wrapper_get_param(WasGo::WasGoId p_param);
void _wasgo_HingeJoint_wrapper_set_flag(WasGo::WasGoId p_flag, bool p_enabled);
void _wasgo_HingeJoint_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
void _wasgo_Image_wrapper_blend_rect(WasGo::WasGoId p_src, WasGo::WasGoId p_src_rect, WasGo::WasGoId p_dst);
void _wasgo_Image_wrapper_blend_rect_mask(WasGo::WasGoId p_src, WasGo::WasGoId p_mask, WasGo::WasGoId p_src_rect, WasGo::WasGoId p_dst);
void _wasgo_Image_wrapper_blit_rect(WasGo::WasGoId p_src, WasGo::WasGoId p_src_rect, WasGo::WasGoId p_dst);
void _wasgo_Image_wrapper_blit_rect_mask(WasGo::WasGoId p_src, WasGo::WasGoId p_mask, WasGo::WasGoId p_src_rect, WasGo::WasGoId p_dst);
void _wasgo_Image_wrapper_bumpmap_to_normalmap(float p_bump_scale);
void _wasgo_Image_wrapper_clear_mipmaps();
WasGo::WasGoId _wasgo_Image_wrapper_compress(WasGo::WasGoId p_mode, WasGo::WasGoId p_source, float p_lossy_quality);
void _wasgo_Image_wrapper_convert(WasGo::WasGoId p_format);
void _wasgo_Image_wrapper_copy_from(WasGo::WasGoId p_src);
void _wasgo_Image_wrapper_create(int p_width, int p_height, bool p_use_mipmaps, WasGo::WasGoId p_format);
void _wasgo_Image_wrapper_create_from_data(int p_width, int p_height, bool p_use_mipmaps, WasGo::WasGoId p_format, WasGo::WasGoId p_data);
void _wasgo_Image_wrapper_crop(int p_width, int p_height);
WasGo::WasGoId _wasgo_Image_wrapper_decompress();
WasGo::WasGoId _wasgo_Image_wrapper_detect_alpha();
void _wasgo_Image_wrapper_expand_x2_hq2x();
void _wasgo_Image_wrapper_fill(WasGo::WasGoId p_color);
void _wasgo_Image_wrapper_fix_alpha_edges();
void _wasgo_Image_wrapper_flip_x();
void _wasgo_Image_wrapper_flip_y();
WasGo::WasGoId _wasgo_Image_wrapper_generate_mipmaps(bool p_renormalize);
WasGo::WasGoId _wasgo_Image_wrapper_get_data();
WasGo::WasGoId _wasgo_Image_wrapper_get_format();
int _wasgo_Image_wrapper_get_height();
int _wasgo_Image_wrapper_get_mipmap_offset(int p_mipmap);
WasGo::WasGoId _wasgo_Image_wrapper_get_rect(WasGo::WasGoId p_rect);
WasGo::WasGoId _wasgo_Image_wrapper_get_size();
WasGo::WasGoId _wasgo_Image_wrapper_get_used_rect();
int _wasgo_Image_wrapper_get_width();
int _wasgo_Image_wrapper_has_mipmaps();
int _wasgo_Image_wrapper_is_compressed();
int _wasgo_Image_wrapper_is_empty();
int _wasgo_Image_wrapper_is_invisible();
WasGo::WasGoId _wasgo_Image_wrapper_load(WasGo::WasGoId p_path);
void _wasgo_Image_wrapper_normalmap_to_xy();
void _wasgo_Image_wrapper_premultiply_alpha();
void _wasgo_Image_wrapper_resize(int p_width, int p_height, WasGo::WasGoId p_interpolation);
void _wasgo_Image_wrapper_resize_to_po2(bool p_square);
WasGo::WasGoId _wasgo_Image_wrapper_rgbe_to_srgb();
WasGo::WasGoId _wasgo_Image_wrapper_save_exr(WasGo::WasGoId p_path, bool p_grayscale);
WasGo::WasGoId _wasgo_Image_wrapper_save_png(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_Image_wrapper_save_png_to_buffer();
void _wasgo_Image_wrapper_shrink_x2();
void _wasgo_Image_wrapper_srgb_to_linear();
void _wasgo_ImageTexture_wrapper_create(int p_width, int p_height, WasGo::WasGoId p_format, int p_flags);
void _wasgo_ImageTexture_wrapper_create_from_image(WasGo::WasGoId p_image, int p_flags);
WasGo::WasGoId _wasgo_ImageTexture_wrapper_get_format();
float _wasgo_ImageTexture_wrapper_get_lossy_storage_quality();
WasGo::WasGoId _wasgo_ImageTexture_wrapper_get_storage();
WasGo::WasGoId _wasgo_ImageTexture_wrapper_load(WasGo::WasGoId p_path);
void _wasgo_ImageTexture_wrapper_set_data(WasGo::WasGoId p_image);
void _wasgo_ImageTexture_wrapper_set_lossy_storage_quality(float p_quality);
void _wasgo_ImageTexture_wrapper_set_size_override(WasGo::WasGoId p_size);
void _wasgo_ImageTexture_wrapper_set_storage(WasGo::WasGoId p_mode);
void _wasgo_ImmediateGeometry_wrapper_add_sphere(int p_lats, int p_lons, float p_radius, bool p_add_uv);
void _wasgo_ImmediateGeometry_wrapper_add_vertex(WasGo::WasGoId p_position);
void _wasgo_ImmediateGeometry_wrapper_begin(WasGo::WasGoId p_primitive, WasGo::WasGoId p_texture);
void _wasgo_ImmediateGeometry_wrapper_clear();
void _wasgo_ImmediateGeometry_wrapper_end();
void _wasgo_ImmediateGeometry_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_ImmediateGeometry_wrapper_set_normal(WasGo::WasGoId p_normal);
void _wasgo_ImmediateGeometry_wrapper_set_tangent(WasGo::WasGoId p_tangent);
void _wasgo_ImmediateGeometry_wrapper_set_uv(WasGo::WasGoId p_uv);
void _wasgo_ImmediateGeometry_wrapper_set_uv2(WasGo::WasGoId p_uv);
int _wasgo_InputEvent_wrapper_accumulate(WasGo::WasGoId p_with_event);
WasGo::WasGoId _wasgo_InputEvent_wrapper_as_text();
float _wasgo_InputEvent_wrapper_get_action_strength(WasGo::WasGoId p_action);
int _wasgo_InputEvent_wrapper_get_device();
int _wasgo_InputEvent_wrapper_is_action(WasGo::WasGoId p_action);
int _wasgo_InputEvent_wrapper_is_action_pressed(WasGo::WasGoId p_action, bool p_allow_echo);
int _wasgo_InputEvent_wrapper_is_action_released(WasGo::WasGoId p_action);
int _wasgo_InputEvent_wrapper_is_action_type();
int _wasgo_InputEvent_wrapper_is_echo();
int _wasgo_InputEvent_wrapper_is_pressed();
void _wasgo_InputEvent_wrapper_set_device(int p_device);
int _wasgo_InputEvent_wrapper_shortcut_match(WasGo::WasGoId p_event);
WasGo::WasGoId _wasgo_InputEvent_wrapper_xformed_by(WasGo::WasGoId p_xform, WasGo::WasGoId p_local_ofs);
WasGo::WasGoId _wasgo_InputEventAction_wrapper_get_action();
float _wasgo_InputEventAction_wrapper_get_strength();
void _wasgo_InputEventAction_wrapper_set_action(WasGo::WasGoId p_action);
void _wasgo_InputEventAction_wrapper_set_pressed(bool p_pressed);
void _wasgo_InputEventAction_wrapper_set_strength(float p_strength);
WasGo::WasGoId _wasgo_InputEventGesture_wrapper_get_position();
void _wasgo_InputEventGesture_wrapper_set_position(WasGo::WasGoId p_position);
int _wasgo_InputEventJoypadButton_wrapper_get_button_index();
float _wasgo_InputEventJoypadButton_wrapper_get_pressure();
void _wasgo_InputEventJoypadButton_wrapper_set_button_index(int p_button_index);
void _wasgo_InputEventJoypadButton_wrapper_set_pressed(bool p_pressed);
void _wasgo_InputEventJoypadButton_wrapper_set_pressure(float p_pressure);
int _wasgo_InputEventJoypadMotion_wrapper_get_axis();
float _wasgo_InputEventJoypadMotion_wrapper_get_axis_value();
void _wasgo_InputEventJoypadMotion_wrapper_set_axis(int p_axis);
void _wasgo_InputEventJoypadMotion_wrapper_set_axis_value(float p_axis_value);
int _wasgo_InputEventKey_wrapper_get_scancode();
int _wasgo_InputEventKey_wrapper_get_scancode_with_modifiers();
int _wasgo_InputEventKey_wrapper_get_unicode();
void _wasgo_InputEventKey_wrapper_set_echo(bool p_echo);
void _wasgo_InputEventKey_wrapper_set_pressed(bool p_pressed);
void _wasgo_InputEventKey_wrapper_set_scancode(int p_scancode);
void _wasgo_InputEventKey_wrapper_set_unicode(int p_unicode);
int _wasgo_InputEventMIDI_wrapper_get_channel();
int _wasgo_InputEventMIDI_wrapper_get_controller_number();
int _wasgo_InputEventMIDI_wrapper_get_controller_value();
int _wasgo_InputEventMIDI_wrapper_get_instrument();
int _wasgo_InputEventMIDI_wrapper_get_message();
int _wasgo_InputEventMIDI_wrapper_get_pitch();
int _wasgo_InputEventMIDI_wrapper_get_pressure();
int _wasgo_InputEventMIDI_wrapper_get_velocity();
void _wasgo_InputEventMIDI_wrapper_set_channel(int p_channel);
void _wasgo_InputEventMIDI_wrapper_set_controller_number(int p_controller_number);
void _wasgo_InputEventMIDI_wrapper_set_controller_value(int p_controller_value);
void _wasgo_InputEventMIDI_wrapper_set_instrument(int p_instrument);
void _wasgo_InputEventMIDI_wrapper_set_message(int p_message);
void _wasgo_InputEventMIDI_wrapper_set_pitch(int p_pitch);
void _wasgo_InputEventMIDI_wrapper_set_pressure(int p_pressure);
void _wasgo_InputEventMIDI_wrapper_set_velocity(int p_velocity);
float _wasgo_InputEventMagnifyGesture_wrapper_get_factor();
void _wasgo_InputEventMagnifyGesture_wrapper_set_factor(float p_factor);
int _wasgo_InputEventMouse_wrapper_get_button_mask();
WasGo::WasGoId _wasgo_InputEventMouse_wrapper_get_global_position();
WasGo::WasGoId _wasgo_InputEventMouse_wrapper_get_position();
void _wasgo_InputEventMouse_wrapper_set_button_mask(int p_button_mask);
void _wasgo_InputEventMouse_wrapper_set_global_position(WasGo::WasGoId p_global_position);
void _wasgo_InputEventMouse_wrapper_set_position(WasGo::WasGoId p_position);
int _wasgo_InputEventMouseButton_wrapper_get_button_index();
float _wasgo_InputEventMouseButton_wrapper_get_factor();
int _wasgo_InputEventMouseButton_wrapper_is_doubleclick();
void _wasgo_InputEventMouseButton_wrapper_set_button_index(int p_button_index);
void _wasgo_InputEventMouseButton_wrapper_set_doubleclick(bool p_doubleclick);
void _wasgo_InputEventMouseButton_wrapper_set_factor(float p_factor);
void _wasgo_InputEventMouseButton_wrapper_set_pressed(bool p_pressed);
float _wasgo_InputEventMouseMotion_wrapper_get_pressure();
WasGo::WasGoId _wasgo_InputEventMouseMotion_wrapper_get_relative();
WasGo::WasGoId _wasgo_InputEventMouseMotion_wrapper_get_speed();
WasGo::WasGoId _wasgo_InputEventMouseMotion_wrapper_get_tilt();
void _wasgo_InputEventMouseMotion_wrapper_set_pressure(float p_pressure);
void _wasgo_InputEventMouseMotion_wrapper_set_relative(WasGo::WasGoId p_relative);
void _wasgo_InputEventMouseMotion_wrapper_set_speed(WasGo::WasGoId p_speed);
void _wasgo_InputEventMouseMotion_wrapper_set_tilt(WasGo::WasGoId p_tilt);
WasGo::WasGoId _wasgo_InputEventPanGesture_wrapper_get_delta();
void _wasgo_InputEventPanGesture_wrapper_set_delta(WasGo::WasGoId p_delta);
int _wasgo_InputEventScreenDrag_wrapper_get_index();
WasGo::WasGoId _wasgo_InputEventScreenDrag_wrapper_get_position();
WasGo::WasGoId _wasgo_InputEventScreenDrag_wrapper_get_relative();
WasGo::WasGoId _wasgo_InputEventScreenDrag_wrapper_get_speed();
void _wasgo_InputEventScreenDrag_wrapper_set_index(int p_index);
void _wasgo_InputEventScreenDrag_wrapper_set_position(WasGo::WasGoId p_position);
void _wasgo_InputEventScreenDrag_wrapper_set_relative(WasGo::WasGoId p_relative);
void _wasgo_InputEventScreenDrag_wrapper_set_speed(WasGo::WasGoId p_speed);
int _wasgo_InputEventScreenTouch_wrapper_get_index();
WasGo::WasGoId _wasgo_InputEventScreenTouch_wrapper_get_position();
void _wasgo_InputEventScreenTouch_wrapper_set_index(int p_index);
void _wasgo_InputEventScreenTouch_wrapper_set_position(WasGo::WasGoId p_position);
void _wasgo_InputEventScreenTouch_wrapper_set_pressed(bool p_pressed);
int _wasgo_InputEventWithModifiers_wrapper_get_alt();
int _wasgo_InputEventWithModifiers_wrapper_get_command();
int _wasgo_InputEventWithModifiers_wrapper_get_control();
int _wasgo_InputEventWithModifiers_wrapper_get_metakey();
int _wasgo_InputEventWithModifiers_wrapper_get_shift();
void _wasgo_InputEventWithModifiers_wrapper_set_alt(bool p_enable);
void _wasgo_InputEventWithModifiers_wrapper_set_command(bool p_enable);
void _wasgo_InputEventWithModifiers_wrapper_set_control(bool p_enable);
void _wasgo_InputEventWithModifiers_wrapper_set_metakey(bool p_enable);
void _wasgo_InputEventWithModifiers_wrapper_set_shift(bool p_enable);
WasGo::WasGoId _wasgo_InstancePlaceholder_wrapper_create_instance(bool p_replace, WasGo::WasGoId p_custom_scene);
WasGo::WasGoId _wasgo_InstancePlaceholder_wrapper_get_instance_path();
WasGo::WasGoId _wasgo_InstancePlaceholder_wrapper_get_stored_values(bool p_with_order);
void _wasgo_InstancePlaceholder_wrapper_replace_by_instance(WasGo::WasGoId p_custom_scene);
float _wasgo_InterpolatedCamera_wrapper_get_speed();
WasGo::WasGoId _wasgo_InterpolatedCamera_wrapper_get_target_path();
int _wasgo_InterpolatedCamera_wrapper_is_interpolation_enabled();
void _wasgo_InterpolatedCamera_wrapper_set_interpolation_enabled(bool p_target_path);
void _wasgo_InterpolatedCamera_wrapper_set_speed(float p_speed);
void _wasgo_InterpolatedCamera_wrapper_set_target(WasGo::WasGoId p_target);
void _wasgo_InterpolatedCamera_wrapper_set_target_path(WasGo::WasGoId p_target_path);
void _wasgo_ItemList_wrapper_add_icon_item(WasGo::WasGoId p_icon, bool p_selectable);
void _wasgo_ItemList_wrapper_add_item(WasGo::WasGoId p_text, WasGo::WasGoId p_icon, bool p_selectable);
void _wasgo_ItemList_wrapper_clear();
void _wasgo_ItemList_wrapper_ensure_current_is_visible();
int _wasgo_ItemList_wrapper_get_allow_reselect();
int _wasgo_ItemList_wrapper_get_allow_rmb_select();
int _wasgo_ItemList_wrapper_get_fixed_column_width();
WasGo::WasGoId _wasgo_ItemList_wrapper_get_fixed_icon_size();
WasGo::WasGoId _wasgo_ItemList_wrapper_get_icon_mode();
float _wasgo_ItemList_wrapper_get_icon_scale();
int _wasgo_ItemList_wrapper_get_item_at_position(WasGo::WasGoId p_position, bool p_exact);
int _wasgo_ItemList_wrapper_get_item_count();
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_custom_bg_color(int p_idx);
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_custom_fg_color(int p_idx);
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_icon(int p_idx);
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_icon_modulate(int p_idx);
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_icon_region(int p_idx);
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_metadata(int p_idx);
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_text(int p_idx);
WasGo::WasGoId _wasgo_ItemList_wrapper_get_item_tooltip(int p_idx);
int _wasgo_ItemList_wrapper_get_max_columns();
int _wasgo_ItemList_wrapper_get_max_text_lines();
WasGo::WasGoId _wasgo_ItemList_wrapper_get_select_mode();
WasGo::WasGoId _wasgo_ItemList_wrapper_get_selected_items();
WasGo::WasGoId _wasgo_ItemList_wrapper_get_v_scroll();
int _wasgo_ItemList_wrapper_has_auto_height();
int _wasgo_ItemList_wrapper_is_anything_selected();
int _wasgo_ItemList_wrapper_is_item_disabled(int p_idx);
int _wasgo_ItemList_wrapper_is_item_icon_transposed(int p_idx);
int _wasgo_ItemList_wrapper_is_item_selectable(int p_idx);
int _wasgo_ItemList_wrapper_is_item_tooltip_enabled(int p_idx);
int _wasgo_ItemList_wrapper_is_same_column_width();
int _wasgo_ItemList_wrapper_is_selected(int p_idx);
void _wasgo_ItemList_wrapper_move_item(int p_from_idx, int p_to_idx);
void _wasgo_ItemList_wrapper_remove_item(int p_idx);
void _wasgo_ItemList_wrapper_select(int p_idx, bool p_single);
void _wasgo_ItemList_wrapper_set_allow_reselect(bool p_allow);
void _wasgo_ItemList_wrapper_set_allow_rmb_select(bool p_allow);
void _wasgo_ItemList_wrapper_set_auto_height(bool p_enable);
void _wasgo_ItemList_wrapper_set_fixed_column_width(int p_width);
void _wasgo_ItemList_wrapper_set_fixed_icon_size(WasGo::WasGoId p_size);
void _wasgo_ItemList_wrapper_set_icon_mode(WasGo::WasGoId p_mode);
void _wasgo_ItemList_wrapper_set_icon_scale(float p_scale);
void _wasgo_ItemList_wrapper_set_item_custom_bg_color(int p_idx, WasGo::WasGoId p_custom_bg_color);
void _wasgo_ItemList_wrapper_set_item_custom_fg_color(int p_idx, WasGo::WasGoId p_custom_fg_color);
void _wasgo_ItemList_wrapper_set_item_disabled(int p_idx, bool p_disabled);
void _wasgo_ItemList_wrapper_set_item_icon(int p_idx, WasGo::WasGoId p_icon);
void _wasgo_ItemList_wrapper_set_item_icon_modulate(int p_idx, WasGo::WasGoId p_modulate);
void _wasgo_ItemList_wrapper_set_item_icon_region(int p_idx, WasGo::WasGoId p_rect);
void _wasgo_ItemList_wrapper_set_item_icon_transposed(int p_idx, bool p_transposed);
void _wasgo_ItemList_wrapper_set_item_metadata(int p_idx, WasGo::WasGoId p_metadata);
void _wasgo_ItemList_wrapper_set_item_selectable(int p_idx, bool p_selectable);
void _wasgo_ItemList_wrapper_set_item_text(int p_idx, WasGo::WasGoId p_text);
void _wasgo_ItemList_wrapper_set_item_tooltip(int p_idx, WasGo::WasGoId p_tooltip);
void _wasgo_ItemList_wrapper_set_item_tooltip_enabled(int p_idx, bool p_enable);
void _wasgo_ItemList_wrapper_set_max_columns(int p_amount);
void _wasgo_ItemList_wrapper_set_max_text_lines(int p_lines);
void _wasgo_ItemList_wrapper_set_same_column_width(bool p_enable);
void _wasgo_ItemList_wrapper_set_select_mode(WasGo::WasGoId p_mode);
void _wasgo_ItemList_wrapper_sort_items_by_text();
void _wasgo_ItemList_wrapper_unselect(int p_idx);
void _wasgo_ItemList_wrapper_unselect_all();
WasGo::WasGoId _wasgo_JSONParseResult_wrapper_get_error();
int _wasgo_JSONParseResult_wrapper_get_error_line();
WasGo::WasGoId _wasgo_JSONParseResult_wrapper_get_error_string();
WasGo::WasGoId _wasgo_JSONParseResult_wrapper_get_result();
void _wasgo_JSONParseResult_wrapper_set_error(WasGo::WasGoId p_error);
void _wasgo_JSONParseResult_wrapper_set_error_line(int p_error_line);
void _wasgo_JSONParseResult_wrapper_set_error_string(WasGo::WasGoId p_error_string);
void _wasgo_JSONParseResult_wrapper_set_result(WasGo::WasGoId p_result);
int _wasgo_Joint_wrapper_get_exclude_nodes_from_collision();
WasGo::WasGoId _wasgo_Joint_wrapper_get_node_a();
WasGo::WasGoId _wasgo_Joint_wrapper_get_node_b();
int _wasgo_Joint_wrapper_get_solver_priority();
void _wasgo_Joint_wrapper_set_exclude_nodes_from_collision(bool p_enable);
void _wasgo_Joint_wrapper_set_node_a(WasGo::WasGoId p_node);
void _wasgo_Joint_wrapper_set_node_b(WasGo::WasGoId p_node);
void _wasgo_Joint_wrapper_set_solver_priority(int p_priority);
float _wasgo_Joint2D_wrapper_get_bias();
int _wasgo_Joint2D_wrapper_get_exclude_nodes_from_collision();
WasGo::WasGoId _wasgo_Joint2D_wrapper_get_node_a();
WasGo::WasGoId _wasgo_Joint2D_wrapper_get_node_b();
void _wasgo_Joint2D_wrapper_set_bias(float p_bias);
void _wasgo_Joint2D_wrapper_set_exclude_nodes_from_collision(bool p_enable);
void _wasgo_Joint2D_wrapper_set_node_a(WasGo::WasGoId p_node);
void _wasgo_Joint2D_wrapper_set_node_b(WasGo::WasGoId p_node);
int _wasgo_KinematicBody_wrapper_get_axis_lock(WasGo::WasGoId p_axis);
WasGo::WasGoId _wasgo_KinematicBody_wrapper_get_floor_normal();
WasGo::WasGoId _wasgo_KinematicBody_wrapper_get_floor_velocity();
float _wasgo_KinematicBody_wrapper_get_safe_margin();
WasGo::WasGoId _wasgo_KinematicBody_wrapper_get_slide_collision(int p_slide_idx);
int _wasgo_KinematicBody_wrapper_get_slide_count();
int _wasgo_KinematicBody_wrapper_is_on_ceiling();
int _wasgo_KinematicBody_wrapper_is_on_floor();
int _wasgo_KinematicBody_wrapper_is_on_wall();
WasGo::WasGoId _wasgo_KinematicBody_wrapper_move_and_collide(WasGo::WasGoId p_rel_vec, bool p_infinite_inertia, bool p_exclude_raycast_shapes, bool p_test_only);
WasGo::WasGoId _wasgo_KinematicBody_wrapper_move_and_slide(WasGo::WasGoId p_linear_velocity, WasGo::WasGoId p_up_direction, bool p_stop_on_slope, int p_max_slides, float p_floor_max_angle, bool p_infinite_inertia);
WasGo::WasGoId _wasgo_KinematicBody_wrapper_move_and_slide_with_snap(WasGo::WasGoId p_linear_velocity, WasGo::WasGoId p_snap, WasGo::WasGoId p_up_direction, bool p_stop_on_slope, int p_max_slides, float p_floor_max_angle, bool p_infinite_inertia);
void _wasgo_KinematicBody_wrapper_set_axis_lock(WasGo::WasGoId p_axis, bool p_lock);
void _wasgo_KinematicBody_wrapper_set_safe_margin(float p_pixels);
int _wasgo_KinematicBody_wrapper_test_move(WasGo::WasGoId p_from, WasGo::WasGoId p_rel_vec, bool p_infinite_inertia);
WasGo::WasGoId _wasgo_KinematicBody2D_wrapper_get_floor_normal();
WasGo::WasGoId _wasgo_KinematicBody2D_wrapper_get_floor_velocity();
float _wasgo_KinematicBody2D_wrapper_get_safe_margin();
WasGo::WasGoId _wasgo_KinematicBody2D_wrapper_get_slide_collision(int p_slide_idx);
int _wasgo_KinematicBody2D_wrapper_get_slide_count();
int _wasgo_KinematicBody2D_wrapper_is_on_ceiling();
int _wasgo_KinematicBody2D_wrapper_is_on_floor();
int _wasgo_KinematicBody2D_wrapper_is_on_wall();
int _wasgo_KinematicBody2D_wrapper_is_sync_to_physics_enabled();
WasGo::WasGoId _wasgo_KinematicBody2D_wrapper_move_and_collide(WasGo::WasGoId p_rel_vec, bool p_infinite_inertia, bool p_exclude_raycast_shapes, bool p_test_only);
WasGo::WasGoId _wasgo_KinematicBody2D_wrapper_move_and_slide(WasGo::WasGoId p_linear_velocity, WasGo::WasGoId p_up_direction, bool p_stop_on_slope, int p_max_slides, float p_floor_max_angle, bool p_infinite_inertia);
WasGo::WasGoId _wasgo_KinematicBody2D_wrapper_move_and_slide_with_snap(WasGo::WasGoId p_linear_velocity, WasGo::WasGoId p_snap, WasGo::WasGoId p_up_direction, bool p_stop_on_slope, int p_max_slides, float p_floor_max_angle, bool p_infinite_inertia);
void _wasgo_KinematicBody2D_wrapper_set_safe_margin(float p_pixels);
void _wasgo_KinematicBody2D_wrapper_set_sync_to_physics(bool p_enable);
int _wasgo_KinematicBody2D_wrapper_test_move(WasGo::WasGoId p_from, WasGo::WasGoId p_rel_vec, bool p_infinite_inertia);
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_collider();
int _wasgo_KinematicCollision_wrapper_get_collider_id();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_collider_metadata();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_collider_shape();
int _wasgo_KinematicCollision_wrapper_get_collider_shape_index();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_collider_velocity();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_local_shape();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_normal();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_position();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_remainder();
WasGo::WasGoId _wasgo_KinematicCollision_wrapper_get_travel();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_collider();
int _wasgo_KinematicCollision2D_wrapper_get_collider_id();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_collider_metadata();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_collider_shape();
int _wasgo_KinematicCollision2D_wrapper_get_collider_shape_index();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_collider_velocity();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_local_shape();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_normal();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_position();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_remainder();
WasGo::WasGoId _wasgo_KinematicCollision2D_wrapper_get_travel();
WasGo::WasGoId _wasgo_Label_wrapper_get_align();
int _wasgo_Label_wrapper_get_line_count();
int _wasgo_Label_wrapper_get_line_height();
int _wasgo_Label_wrapper_get_lines_skipped();
int _wasgo_Label_wrapper_get_max_lines_visible();
float _wasgo_Label_wrapper_get_percent_visible();
WasGo::WasGoId _wasgo_Label_wrapper_get_text();
int _wasgo_Label_wrapper_get_total_character_count();
WasGo::WasGoId _wasgo_Label_wrapper_get_valign();
int _wasgo_Label_wrapper_get_visible_characters();
int _wasgo_Label_wrapper_get_visible_line_count();
int _wasgo_Label_wrapper_has_autowrap();
int _wasgo_Label_wrapper_is_clipping_text();
int _wasgo_Label_wrapper_is_uppercase();
void _wasgo_Label_wrapper_set_align(WasGo::WasGoId p_align);
void _wasgo_Label_wrapper_set_autowrap(bool p_enable);
void _wasgo_Label_wrapper_set_clip_text(bool p_enable);
void _wasgo_Label_wrapper_set_lines_skipped(int p_lines_skipped);
void _wasgo_Label_wrapper_set_max_lines_visible(int p_lines_visible);
void _wasgo_Label_wrapper_set_percent_visible(float p_percent_visible);
void _wasgo_Label_wrapper_set_text(WasGo::WasGoId p_text);
void _wasgo_Label_wrapper_set_uppercase(bool p_enable);
void _wasgo_Label_wrapper_set_valign(WasGo::WasGoId p_valign);
void _wasgo_Label_wrapper_set_visible_characters(int p_amount);
int _wasgo_LargeTexture_wrapper_add_piece(WasGo::WasGoId p_ofs, WasGo::WasGoId p_texture);
void _wasgo_LargeTexture_wrapper_clear();
int _wasgo_LargeTexture_wrapper_get_piece_count();
WasGo::WasGoId _wasgo_LargeTexture_wrapper_get_piece_offset(int p_idx);
WasGo::WasGoId _wasgo_LargeTexture_wrapper_get_piece_texture(int p_idx);
void _wasgo_LargeTexture_wrapper_set_piece_offset(int p_idx, WasGo::WasGoId p_ofs);
void _wasgo_LargeTexture_wrapper_set_piece_texture(int p_idx, WasGo::WasGoId p_texture);
void _wasgo_LargeTexture_wrapper_set_size(WasGo::WasGoId p_size);
WasGo::WasGoId _wasgo_Light_wrapper_get_bake_mode();
WasGo::WasGoId _wasgo_Light_wrapper_get_color();
int _wasgo_Light_wrapper_get_cull_mask();
float _wasgo_Light_wrapper_get_param(WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_Light_wrapper_get_shadow_color();
int _wasgo_Light_wrapper_get_shadow_reverse_cull_face();
int _wasgo_Light_wrapper_has_shadow();
int _wasgo_Light_wrapper_is_editor_only();
int _wasgo_Light_wrapper_is_negative();
void _wasgo_Light_wrapper_set_bake_mode(WasGo::WasGoId p_bake_mode);
void _wasgo_Light_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_Light_wrapper_set_cull_mask(int p_cull_mask);
void _wasgo_Light_wrapper_set_editor_only(bool p_editor_only);
void _wasgo_Light_wrapper_set_negative(bool p_enabled);
void _wasgo_Light_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
void _wasgo_Light_wrapper_set_shadow(bool p_enabled);
void _wasgo_Light_wrapper_set_shadow_color(WasGo::WasGoId p_shadow_color);
void _wasgo_Light_wrapper_set_shadow_reverse_cull_face(bool p_enable);
WasGo::WasGoId _wasgo_Light2D_wrapper_get_color();
float _wasgo_Light2D_wrapper_get_energy();
float _wasgo_Light2D_wrapper_get_height();
int _wasgo_Light2D_wrapper_get_item_cull_mask();
int _wasgo_Light2D_wrapper_get_item_shadow_cull_mask();
int _wasgo_Light2D_wrapper_get_layer_range_max();
int _wasgo_Light2D_wrapper_get_layer_range_min();
WasGo::WasGoId _wasgo_Light2D_wrapper_get_mode();
int _wasgo_Light2D_wrapper_get_shadow_buffer_size();
WasGo::WasGoId _wasgo_Light2D_wrapper_get_shadow_color();
WasGo::WasGoId _wasgo_Light2D_wrapper_get_shadow_filter();
float _wasgo_Light2D_wrapper_get_shadow_gradient_length();
float _wasgo_Light2D_wrapper_get_shadow_smooth();
WasGo::WasGoId _wasgo_Light2D_wrapper_get_texture();
WasGo::WasGoId _wasgo_Light2D_wrapper_get_texture_offset();
float _wasgo_Light2D_wrapper_get_texture_scale();
int _wasgo_Light2D_wrapper_get_z_range_max();
int _wasgo_Light2D_wrapper_get_z_range_min();
int _wasgo_Light2D_wrapper_is_editor_only();
int _wasgo_Light2D_wrapper_is_enabled();
int _wasgo_Light2D_wrapper_is_shadow_enabled();
void _wasgo_Light2D_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_Light2D_wrapper_set_editor_only(bool p_editor_only);
void _wasgo_Light2D_wrapper_set_enabled(bool p_enabled);
void _wasgo_Light2D_wrapper_set_energy(float p_energy);
void _wasgo_Light2D_wrapper_set_height(float p_height);
void _wasgo_Light2D_wrapper_set_item_cull_mask(int p_item_cull_mask);
void _wasgo_Light2D_wrapper_set_item_shadow_cull_mask(int p_item_shadow_cull_mask);
void _wasgo_Light2D_wrapper_set_layer_range_max(int p_layer);
void _wasgo_Light2D_wrapper_set_layer_range_min(int p_layer);
void _wasgo_Light2D_wrapper_set_mode(WasGo::WasGoId p_mode);
void _wasgo_Light2D_wrapper_set_shadow_buffer_size(int p_size);
void _wasgo_Light2D_wrapper_set_shadow_color(WasGo::WasGoId p_shadow_color);
void _wasgo_Light2D_wrapper_set_shadow_enabled(bool p_enabled);
void _wasgo_Light2D_wrapper_set_shadow_filter(WasGo::WasGoId p_filter);
void _wasgo_Light2D_wrapper_set_shadow_gradient_length(float p_multiplier);
void _wasgo_Light2D_wrapper_set_shadow_smooth(float p_smooth);
void _wasgo_Light2D_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_Light2D_wrapper_set_texture_offset(WasGo::WasGoId p_texture_offset);
void _wasgo_Light2D_wrapper_set_texture_scale(float p_texture_scale);
void _wasgo_Light2D_wrapper_set_z_range_max(int p_z);
void _wasgo_Light2D_wrapper_set_z_range_min(int p_z);
int _wasgo_LightOccluder2D_wrapper_get_occluder_light_mask();
WasGo::WasGoId _wasgo_LightOccluder2D_wrapper_get_occluder_polygon();
void _wasgo_LightOccluder2D_wrapper_set_occluder_light_mask(int p_mask);
void _wasgo_LightOccluder2D_wrapper_set_occluder_polygon(WasGo::WasGoId p_polygon);
void _wasgo_Line2D_wrapper_add_point(WasGo::WasGoId p_position, int p_at_position);
void _wasgo_Line2D_wrapper_clear_points();
int _wasgo_Line2D_wrapper_get_antialiased();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_begin_cap_mode();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_curve();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_default_color();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_end_cap_mode();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_gradient();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_joint_mode();
int _wasgo_Line2D_wrapper_get_point_count();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_point_position(int p_i);
WasGo::WasGoId _wasgo_Line2D_wrapper_get_points();
int _wasgo_Line2D_wrapper_get_round_precision();
float _wasgo_Line2D_wrapper_get_sharp_limit();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_texture();
WasGo::WasGoId _wasgo_Line2D_wrapper_get_texture_mode();
float _wasgo_Line2D_wrapper_get_width();
void _wasgo_Line2D_wrapper_remove_point(int p_i);
void _wasgo_Line2D_wrapper_set_antialiased(bool p_antialiased);
void _wasgo_Line2D_wrapper_set_begin_cap_mode(WasGo::WasGoId p_mode);
void _wasgo_Line2D_wrapper_set_curve(WasGo::WasGoId p_curve);
void _wasgo_Line2D_wrapper_set_default_color(WasGo::WasGoId p_color);
void _wasgo_Line2D_wrapper_set_end_cap_mode(WasGo::WasGoId p_mode);
void _wasgo_Line2D_wrapper_set_gradient(WasGo::WasGoId p_color);
void _wasgo_Line2D_wrapper_set_joint_mode(WasGo::WasGoId p_mode);
void _wasgo_Line2D_wrapper_set_point_position(int p_i, WasGo::WasGoId p_position);
void _wasgo_Line2D_wrapper_set_points(WasGo::WasGoId p_points);
void _wasgo_Line2D_wrapper_set_round_precision(int p_precision);
void _wasgo_Line2D_wrapper_set_sharp_limit(float p_limit);
void _wasgo_Line2D_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_Line2D_wrapper_set_texture_mode(WasGo::WasGoId p_mode);
void _wasgo_Line2D_wrapper_set_width(float p_width);
float _wasgo_LineShape2D_wrapper_get_d();
WasGo::WasGoId _wasgo_LineShape2D_wrapper_get_normal();
void _wasgo_LineShape2D_wrapper_set_d(float p_d);
void _wasgo_LineShape2D_wrapper_set_normal(WasGo::WasGoId p_normal);
WasGo::WasGoId _wasgo_LinkButton_wrapper_get_text();
WasGo::WasGoId _wasgo_LinkButton_wrapper_get_underline_mode();
void _wasgo_LinkButton_wrapper_set_text(WasGo::WasGoId p_text);
void _wasgo_LinkButton_wrapper_set_underline_mode(WasGo::WasGoId p_underline_mode);
void _wasgo_Listener_wrapper_clear_current();
WasGo::WasGoId _wasgo_Listener_wrapper_get_listener_transform();
int _wasgo_Listener_wrapper_is_current();
void _wasgo_Listener_wrapper_make_current();
WasGo::WasGoId _wasgo_Material_wrapper_get_next_pass();
int _wasgo_Material_wrapper_get_render_priority();
void _wasgo_Material_wrapper_set_next_pass(WasGo::WasGoId p_next_pass);
void _wasgo_Material_wrapper_set_render_priority(int p_priority);
WasGo::WasGoId _wasgo_MenuButton_wrapper_get_popup();
WasGo::WasGoId _wasgo_Mesh_wrapper_create_convex_shape();
WasGo::WasGoId _wasgo_Mesh_wrapper_create_outline(float p_margin);
WasGo::WasGoId _wasgo_Mesh_wrapper_create_trimesh_shape();
WasGo::WasGoId _wasgo_Mesh_wrapper_generate_triangle_mesh();
WasGo::WasGoId _wasgo_Mesh_wrapper_get_aabb();
WasGo::WasGoId _wasgo_Mesh_wrapper_get_faces();
WasGo::WasGoId _wasgo_Mesh_wrapper_get_lightmap_size_hint();
int _wasgo_Mesh_wrapper_get_surface_count();
void _wasgo_Mesh_wrapper_set_lightmap_size_hint(WasGo::WasGoId p_size);
WasGo::WasGoId _wasgo_Mesh_wrapper_surface_get_arrays(int p_surf_idx);
WasGo::WasGoId _wasgo_Mesh_wrapper_surface_get_blend_shape_arrays(int p_surf_idx);
WasGo::WasGoId _wasgo_Mesh_wrapper_surface_get_material(int p_surf_idx);
void _wasgo_Mesh_wrapper_surface_set_material(int p_surf_idx, WasGo::WasGoId p_material);
void _wasgo_MeshDataTool_wrapper_clear();
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_commit_to_surface(WasGo::WasGoId p_mesh);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_create_from_surface(WasGo::WasGoId p_mesh, int p_surface);
int _wasgo_MeshDataTool_wrapper_get_edge_count();
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_edge_faces(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_edge_meta(int p_idx);
int _wasgo_MeshDataTool_wrapper_get_edge_vertex(int p_idx, int p_vertex);
int _wasgo_MeshDataTool_wrapper_get_face_count();
int _wasgo_MeshDataTool_wrapper_get_face_edge(int p_idx, int p_edge);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_face_meta(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_face_normal(int p_idx);
int _wasgo_MeshDataTool_wrapper_get_face_vertex(int p_idx, int p_vertex);
int _wasgo_MeshDataTool_wrapper_get_format();
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_material();
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_bones(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_color(int p_idx);
int _wasgo_MeshDataTool_wrapper_get_vertex_count();
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_edges(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_faces(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_meta(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_normal(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_tangent(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_uv(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_uv2(int p_idx);
WasGo::WasGoId _wasgo_MeshDataTool_wrapper_get_vertex_weights(int p_idx);
void _wasgo_MeshDataTool_wrapper_set_edge_meta(int p_idx, WasGo::WasGoId p_meta);
void _wasgo_MeshDataTool_wrapper_set_face_meta(int p_idx, WasGo::WasGoId p_meta);
void _wasgo_MeshDataTool_wrapper_set_material(WasGo::WasGoId p_material);
void _wasgo_MeshDataTool_wrapper_set_vertex(int p_idx, WasGo::WasGoId p_vertex);
void _wasgo_MeshDataTool_wrapper_set_vertex_bones(int p_idx, WasGo::WasGoId p_bones);
void _wasgo_MeshDataTool_wrapper_set_vertex_color(int p_idx, WasGo::WasGoId p_color);
void _wasgo_MeshDataTool_wrapper_set_vertex_meta(int p_idx, WasGo::WasGoId p_meta);
void _wasgo_MeshDataTool_wrapper_set_vertex_normal(int p_idx, WasGo::WasGoId p_normal);
void _wasgo_MeshDataTool_wrapper_set_vertex_tangent(int p_idx, WasGo::WasGoId p_tangent);
void _wasgo_MeshDataTool_wrapper_set_vertex_uv(int p_idx, WasGo::WasGoId p_uv);
void _wasgo_MeshDataTool_wrapper_set_vertex_uv2(int p_idx, WasGo::WasGoId p_uv2);
void _wasgo_MeshDataTool_wrapper_set_vertex_weights(int p_idx, WasGo::WasGoId p_weights);
void _wasgo_MeshInstance_wrapper_create_convex_collision();
void _wasgo_MeshInstance_wrapper_create_trimesh_collision();
WasGo::WasGoId _wasgo_MeshInstance_wrapper_get_active_material(int p_surface);
WasGo::WasGoId _wasgo_MeshInstance_wrapper_get_mesh();
WasGo::WasGoId _wasgo_MeshInstance_wrapper_get_skeleton_path();
WasGo::WasGoId _wasgo_MeshInstance_wrapper_get_skin();
WasGo::WasGoId _wasgo_MeshInstance_wrapper_get_surface_material(int p_surface);
int _wasgo_MeshInstance_wrapper_get_surface_material_count();
int _wasgo_MeshInstance_wrapper_is_software_skinning_transform_normals_enabled();
void _wasgo_MeshInstance_wrapper_set_mesh(WasGo::WasGoId p_mesh);
void _wasgo_MeshInstance_wrapper_set_skeleton_path(WasGo::WasGoId p_skeleton_path);
void _wasgo_MeshInstance_wrapper_set_skin(WasGo::WasGoId p_skin);
void _wasgo_MeshInstance_wrapper_set_software_skinning_transform_normals(bool p_enabled);
void _wasgo_MeshInstance_wrapper_set_surface_material(int p_surface, WasGo::WasGoId p_material);
WasGo::WasGoId _wasgo_MeshInstance2D_wrapper_get_mesh();
WasGo::WasGoId _wasgo_MeshInstance2D_wrapper_get_normal_map();
WasGo::WasGoId _wasgo_MeshInstance2D_wrapper_get_texture();
void _wasgo_MeshInstance2D_wrapper_set_mesh(WasGo::WasGoId p_mesh);
void _wasgo_MeshInstance2D_wrapper_set_normal_map(WasGo::WasGoId p_normal_map);
void _wasgo_MeshInstance2D_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_MeshLibrary_wrapper_clear();
void _wasgo_MeshLibrary_wrapper_create_item(int p_id);
int _wasgo_MeshLibrary_wrapper_find_item_by_name(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_MeshLibrary_wrapper_get_item_list();
WasGo::WasGoId _wasgo_MeshLibrary_wrapper_get_item_mesh(int p_id);
WasGo::WasGoId _wasgo_MeshLibrary_wrapper_get_item_name(int p_id);
WasGo::WasGoId _wasgo_MeshLibrary_wrapper_get_item_navmesh(int p_id);
WasGo::WasGoId _wasgo_MeshLibrary_wrapper_get_item_navmesh_transform(int p_id);
WasGo::WasGoId _wasgo_MeshLibrary_wrapper_get_item_preview(int p_id);
WasGo::WasGoId _wasgo_MeshLibrary_wrapper_get_item_shapes(int p_id);
int _wasgo_MeshLibrary_wrapper_get_last_unused_item_id();
void _wasgo_MeshLibrary_wrapper_remove_item(int p_id);
void _wasgo_MeshLibrary_wrapper_set_item_mesh(int p_id, WasGo::WasGoId p_mesh);
void _wasgo_MeshLibrary_wrapper_set_item_name(int p_id, WasGo::WasGoId p_name);
void _wasgo_MeshLibrary_wrapper_set_item_navmesh(int p_id, WasGo::WasGoId p_navmesh);
void _wasgo_MeshLibrary_wrapper_set_item_navmesh_transform(int p_id, WasGo::WasGoId p_navmesh);
void _wasgo_MeshLibrary_wrapper_set_item_preview(int p_id, WasGo::WasGoId p_texture);
void _wasgo_MeshLibrary_wrapper_set_item_shapes(int p_id, WasGo::WasGoId p_shapes);
WasGo::WasGoId _wasgo_MeshTexture_wrapper_get_base_texture();
WasGo::WasGoId _wasgo_MeshTexture_wrapper_get_image_size();
WasGo::WasGoId _wasgo_MeshTexture_wrapper_get_mesh();
void _wasgo_MeshTexture_wrapper_set_base_texture(WasGo::WasGoId p_texture);
void _wasgo_MeshTexture_wrapper_set_image_size(WasGo::WasGoId p_size);
void _wasgo_MeshTexture_wrapper_set_mesh(WasGo::WasGoId p_mesh);
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_aabb();
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_color_format();
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_custom_data_format();
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_instance_color(int p_instance);
int _wasgo_MultiMesh_wrapper_get_instance_count();
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_instance_custom_data(int p_instance);
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_instance_transform(int p_instance);
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_instance_transform_2d(int p_instance);
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_mesh();
WasGo::WasGoId _wasgo_MultiMesh_wrapper_get_transform_format();
int _wasgo_MultiMesh_wrapper_get_visible_instance_count();
void _wasgo_MultiMesh_wrapper_set_as_bulk_array(WasGo::WasGoId p_array);
void _wasgo_MultiMesh_wrapper_set_color_format(WasGo::WasGoId p_format);
void _wasgo_MultiMesh_wrapper_set_custom_data_format(WasGo::WasGoId p_format);
void _wasgo_MultiMesh_wrapper_set_instance_color(int p_instance, WasGo::WasGoId p_color);
void _wasgo_MultiMesh_wrapper_set_instance_count(int p_count);
void _wasgo_MultiMesh_wrapper_set_instance_custom_data(int p_instance, WasGo::WasGoId p_custom_data);
void _wasgo_MultiMesh_wrapper_set_instance_transform(int p_instance, WasGo::WasGoId p_transform);
void _wasgo_MultiMesh_wrapper_set_instance_transform_2d(int p_instance, WasGo::WasGoId p_transform);
void _wasgo_MultiMesh_wrapper_set_mesh(WasGo::WasGoId p_mesh);
void _wasgo_MultiMesh_wrapper_set_transform_format(WasGo::WasGoId p_format);
void _wasgo_MultiMesh_wrapper_set_visible_instance_count(int p_count);
WasGo::WasGoId _wasgo_MultiMeshInstance_wrapper_get_multimesh();
void _wasgo_MultiMeshInstance_wrapper_set_multimesh(WasGo::WasGoId p_multimesh);
WasGo::WasGoId _wasgo_MultiMeshInstance2D_wrapper_get_multimesh();
WasGo::WasGoId _wasgo_MultiMeshInstance2D_wrapper_get_normal_map();
WasGo::WasGoId _wasgo_MultiMeshInstance2D_wrapper_get_texture();
void _wasgo_MultiMeshInstance2D_wrapper_set_multimesh(WasGo::WasGoId p_multimesh);
void _wasgo_MultiMeshInstance2D_wrapper_set_normal_map(WasGo::WasGoId p_normal_map);
void _wasgo_MultiMeshInstance2D_wrapper_set_texture(WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_MultiplayerAPI_wrapper_get_network_peer();
int _wasgo_MultiplayerAPI_wrapper_get_network_unique_id();
int _wasgo_MultiplayerAPI_wrapper_get_rpc_sender_id();
int _wasgo_MultiplayerAPI_wrapper_has_network_peer();
int _wasgo_MultiplayerAPI_wrapper_is_network_server();
WasGo::WasGoId _wasgo_MultiplayerAPI_wrapper_send_bytes(WasGo::WasGoId p_bytes, int p_id, WasGo::WasGoId p_mode);
void _wasgo_MultiplayerAPI_wrapper_set_root_node(WasGo::WasGoId p_node);
void _wasgo_Mutex_wrapper_lock();
WasGo::WasGoId _wasgo_Mutex_wrapper_try_lock();
void _wasgo_Mutex_wrapper_unlock();
WasGo::WasGoId _wasgo_Navigation_wrapper_get_closest_point(WasGo::WasGoId p_to_point);
WasGo::WasGoId _wasgo_Navigation_wrapper_get_closest_point_normal(WasGo::WasGoId p_to_point);
WasGo::WasGoId _wasgo_Navigation_wrapper_get_closest_point_owner(WasGo::WasGoId p_to_point);
WasGo::WasGoId _wasgo_Navigation_wrapper_get_closest_point_to_segment(WasGo::WasGoId p_start, WasGo::WasGoId p_end, bool p_use_collision);
WasGo::WasGoId _wasgo_Navigation_wrapper_get_simple_path(WasGo::WasGoId p_start, WasGo::WasGoId p_end, bool p_optimize);
WasGo::WasGoId _wasgo_Navigation_wrapper_get_up_vector();
int _wasgo_Navigation_wrapper_navmesh_add(WasGo::WasGoId p_mesh, WasGo::WasGoId p_xform, WasGo::WasGoId p_owner);
void _wasgo_Navigation_wrapper_navmesh_remove(int p_id);
void _wasgo_Navigation_wrapper_navmesh_set_transform(int p_id, WasGo::WasGoId p_xform);
void _wasgo_Navigation_wrapper_set_up_vector(WasGo::WasGoId p_up);
WasGo::WasGoId _wasgo_Navigation2D_wrapper_get_closest_point(WasGo::WasGoId p_to_point);
WasGo::WasGoId _wasgo_Navigation2D_wrapper_get_closest_point_owner(WasGo::WasGoId p_to_point);
WasGo::WasGoId _wasgo_Navigation2D_wrapper_get_simple_path(WasGo::WasGoId p_start, WasGo::WasGoId p_end, bool p_optimize);
int _wasgo_Navigation2D_wrapper_navpoly_add(WasGo::WasGoId p_mesh, WasGo::WasGoId p_xform, WasGo::WasGoId p_owner);
void _wasgo_Navigation2D_wrapper_navpoly_remove(int p_id);
void _wasgo_Navigation2D_wrapper_navpoly_set_transform(int p_id, WasGo::WasGoId p_xform);
void _wasgo_NavigationMesh_wrapper_add_polygon(WasGo::WasGoId p_polygon);
void _wasgo_NavigationMesh_wrapper_clear_polygons();
void _wasgo_NavigationMesh_wrapper_create_from_mesh(WasGo::WasGoId p_mesh);
float _wasgo_NavigationMesh_wrapper_get_agent_height();
float _wasgo_NavigationMesh_wrapper_get_agent_max_climb();
float _wasgo_NavigationMesh_wrapper_get_agent_max_slope();
float _wasgo_NavigationMesh_wrapper_get_agent_radius();
float _wasgo_NavigationMesh_wrapper_get_cell_height();
float _wasgo_NavigationMesh_wrapper_get_cell_size();
int _wasgo_NavigationMesh_wrapper_get_collision_mask();
int _wasgo_NavigationMesh_wrapper_get_collision_mask_bit(int p_bit);
float _wasgo_NavigationMesh_wrapper_get_detail_sample_distance();
float _wasgo_NavigationMesh_wrapper_get_detail_sample_max_error();
float _wasgo_NavigationMesh_wrapper_get_edge_max_error();
float _wasgo_NavigationMesh_wrapper_get_edge_max_length();
int _wasgo_NavigationMesh_wrapper_get_filter_ledge_spans();
int _wasgo_NavigationMesh_wrapper_get_filter_low_hanging_obstacles();
int _wasgo_NavigationMesh_wrapper_get_filter_walkable_low_height_spans();
int _wasgo_NavigationMesh_wrapper_get_parsed_geometry_type();
WasGo::WasGoId _wasgo_NavigationMesh_wrapper_get_polygon(int p_idx);
int _wasgo_NavigationMesh_wrapper_get_polygon_count();
float _wasgo_NavigationMesh_wrapper_get_region_merge_size();
float _wasgo_NavigationMesh_wrapper_get_region_min_size();
int _wasgo_NavigationMesh_wrapper_get_sample_partition_type();
int _wasgo_NavigationMesh_wrapper_get_source_geometry_mode();
WasGo::WasGoId _wasgo_NavigationMesh_wrapper_get_source_group_name();
WasGo::WasGoId _wasgo_NavigationMesh_wrapper_get_vertices();
float _wasgo_NavigationMesh_wrapper_get_verts_per_poly();
void _wasgo_NavigationMesh_wrapper_set_agent_height(float p_agent_height);
void _wasgo_NavigationMesh_wrapper_set_agent_max_climb(float p_agent_max_climb);
void _wasgo_NavigationMesh_wrapper_set_agent_max_slope(float p_agent_max_slope);
void _wasgo_NavigationMesh_wrapper_set_agent_radius(float p_agent_radius);
void _wasgo_NavigationMesh_wrapper_set_cell_height(float p_cell_height);
void _wasgo_NavigationMesh_wrapper_set_cell_size(float p_cell_size);
void _wasgo_NavigationMesh_wrapper_set_collision_mask(int p_mask);
void _wasgo_NavigationMesh_wrapper_set_collision_mask_bit(int p_bit, bool p_value);
void _wasgo_NavigationMesh_wrapper_set_detail_sample_distance(float p_detail_sample_dist);
void _wasgo_NavigationMesh_wrapper_set_detail_sample_max_error(float p_detail_sample_max_error);
void _wasgo_NavigationMesh_wrapper_set_edge_max_error(float p_edge_max_error);
void _wasgo_NavigationMesh_wrapper_set_edge_max_length(float p_edge_max_length);
void _wasgo_NavigationMesh_wrapper_set_filter_ledge_spans(bool p_filter_ledge_spans);
void _wasgo_NavigationMesh_wrapper_set_filter_low_hanging_obstacles(bool p_filter_low_hanging_obstacles);
void _wasgo_NavigationMesh_wrapper_set_filter_walkable_low_height_spans(bool p_filter_walkable_low_height_spans);
void _wasgo_NavigationMesh_wrapper_set_parsed_geometry_type(int p_geometry_type);
void _wasgo_NavigationMesh_wrapper_set_region_merge_size(float p_region_merge_size);
void _wasgo_NavigationMesh_wrapper_set_region_min_size(float p_region_min_size);
void _wasgo_NavigationMesh_wrapper_set_sample_partition_type(int p_sample_partition_type);
void _wasgo_NavigationMesh_wrapper_set_source_geometry_mode(int p_mask);
void _wasgo_NavigationMesh_wrapper_set_source_group_name(WasGo::WasGoId p_mask);
void _wasgo_NavigationMesh_wrapper_set_vertices(WasGo::WasGoId p_vertices);
void _wasgo_NavigationMesh_wrapper_set_verts_per_poly(float p_verts_per_poly);
WasGo::WasGoId _wasgo_NavigationMeshInstance_wrapper_get_navigation_mesh();
int _wasgo_NavigationMeshInstance_wrapper_is_enabled();
void _wasgo_NavigationMeshInstance_wrapper_set_enabled(bool p_enabled);
void _wasgo_NavigationMeshInstance_wrapper_set_navigation_mesh(WasGo::WasGoId p_navmesh);
void _wasgo_NavigationPolygon_wrapper_add_outline(WasGo::WasGoId p_outline);
void _wasgo_NavigationPolygon_wrapper_add_outline_at_index(WasGo::WasGoId p_outline, int p_index);
void _wasgo_NavigationPolygon_wrapper_add_polygon(WasGo::WasGoId p_polygon);
void _wasgo_NavigationPolygon_wrapper_clear_outlines();
void _wasgo_NavigationPolygon_wrapper_clear_polygons();
WasGo::WasGoId _wasgo_NavigationPolygon_wrapper_get_outline(int p_idx);
int _wasgo_NavigationPolygon_wrapper_get_outline_count();
WasGo::WasGoId _wasgo_NavigationPolygon_wrapper_get_polygon(int p_idx);
int _wasgo_NavigationPolygon_wrapper_get_polygon_count();
WasGo::WasGoId _wasgo_NavigationPolygon_wrapper_get_vertices();
void _wasgo_NavigationPolygon_wrapper_make_polygons_from_outlines();
void _wasgo_NavigationPolygon_wrapper_remove_outline(int p_idx);
void _wasgo_NavigationPolygon_wrapper_set_outline(int p_idx, WasGo::WasGoId p_outline);
void _wasgo_NavigationPolygon_wrapper_set_vertices(WasGo::WasGoId p_vertices);
WasGo::WasGoId _wasgo_NavigationPolygonInstance_wrapper_get_navigation_polygon();
int _wasgo_NavigationPolygonInstance_wrapper_is_enabled();
void _wasgo_NavigationPolygonInstance_wrapper_set_enabled(bool p_enabled);
void _wasgo_NavigationPolygonInstance_wrapper_set_navigation_polygon(WasGo::WasGoId p_navpoly);
WasGo::WasGoId _wasgo_NetworkedMultiplayerPeer_wrapper_get_connection_status();
int _wasgo_NetworkedMultiplayerPeer_wrapper_get_packet_peer();
WasGo::WasGoId _wasgo_NetworkedMultiplayerPeer_wrapper_get_transfer_mode();
int _wasgo_NetworkedMultiplayerPeer_wrapper_get_unique_id();
int _wasgo_NetworkedMultiplayerPeer_wrapper_is_refusing_new_connections();
void _wasgo_NetworkedMultiplayerPeer_wrapper_poll();
void _wasgo_NetworkedMultiplayerPeer_wrapper_set_refuse_new_connections(bool p_enable);
void _wasgo_NetworkedMultiplayerPeer_wrapper_set_target_peer(int p_id);
void _wasgo_NetworkedMultiplayerPeer_wrapper_set_transfer_mode(WasGo::WasGoId p_mode);
WasGo::WasGoId _wasgo_NinePatchRect_wrapper_get_h_axis_stretch_mode();
int _wasgo_NinePatchRect_wrapper_get_patch_margin(WasGo::WasGoId p_margin);
WasGo::WasGoId _wasgo_NinePatchRect_wrapper_get_region_rect();
WasGo::WasGoId _wasgo_NinePatchRect_wrapper_get_texture();
WasGo::WasGoId _wasgo_NinePatchRect_wrapper_get_v_axis_stretch_mode();
int _wasgo_NinePatchRect_wrapper_is_draw_center_enabled();
void _wasgo_NinePatchRect_wrapper_set_draw_center(bool p_draw_center);
void _wasgo_NinePatchRect_wrapper_set_h_axis_stretch_mode(WasGo::WasGoId p_mode);
void _wasgo_NinePatchRect_wrapper_set_patch_margin(WasGo::WasGoId p_margin, int p_value);
void _wasgo_NinePatchRect_wrapper_set_region_rect(WasGo::WasGoId p_rect);
void _wasgo_NinePatchRect_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_NinePatchRect_wrapper_set_v_axis_stretch_mode(WasGo::WasGoId p_mode);
void _wasgo_Node2D_wrapper_apply_scale(WasGo::WasGoId p_ratio);
float _wasgo_Node2D_wrapper_get_angle_to(WasGo::WasGoId p_point);
WasGo::WasGoId _wasgo_Node2D_wrapper_get_global_position();
float _wasgo_Node2D_wrapper_get_global_rotation();
float _wasgo_Node2D_wrapper_get_global_rotation_degrees();
WasGo::WasGoId _wasgo_Node2D_wrapper_get_global_scale();
WasGo::WasGoId _wasgo_Node2D_wrapper_get_position();
WasGo::WasGoId _wasgo_Node2D_wrapper_get_relative_transform_to_parent(WasGo::WasGoId p_parent);
float _wasgo_Node2D_wrapper_get_rotation();
float _wasgo_Node2D_wrapper_get_rotation_degrees();
WasGo::WasGoId _wasgo_Node2D_wrapper_get_scale();
int _wasgo_Node2D_wrapper_get_z_index();
void _wasgo_Node2D_wrapper_global_translate(WasGo::WasGoId p_offset);
int _wasgo_Node2D_wrapper_is_z_relative();
void _wasgo_Node2D_wrapper_look_at(WasGo::WasGoId p_point);
void _wasgo_Node2D_wrapper_move_local_x(float p_delta, bool p_scaled);
void _wasgo_Node2D_wrapper_move_local_y(float p_delta, bool p_scaled);
void _wasgo_Node2D_wrapper_rotate(float p_radians);
void _wasgo_Node2D_wrapper_set_global_position(WasGo::WasGoId p_position);
void _wasgo_Node2D_wrapper_set_global_rotation(float p_radians);
void _wasgo_Node2D_wrapper_set_global_rotation_degrees(float p_degrees);
void _wasgo_Node2D_wrapper_set_global_scale(WasGo::WasGoId p_scale);
void _wasgo_Node2D_wrapper_set_global_transform(WasGo::WasGoId p_xform);
void _wasgo_Node2D_wrapper_set_position(WasGo::WasGoId p_position);
void _wasgo_Node2D_wrapper_set_rotation(float p_radians);
void _wasgo_Node2D_wrapper_set_rotation_degrees(float p_degrees);
void _wasgo_Node2D_wrapper_set_scale(WasGo::WasGoId p_scale);
void _wasgo_Node2D_wrapper_set_transform(WasGo::WasGoId p_xform);
void _wasgo_Node2D_wrapper_set_z_as_relative(bool p_enable);
void _wasgo_Node2D_wrapper_set_z_index(int p_z_index);
WasGo::WasGoId _wasgo_Node2D_wrapper_to_global(WasGo::WasGoId p_local_point);
WasGo::WasGoId _wasgo_Node2D_wrapper_to_local(WasGo::WasGoId p_global_point);
void _wasgo_Node2D_wrapper_translate(WasGo::WasGoId p_offset);
void _wasgo_Object_wrapper_free();
WasGo::WasGoId _wasgo_OccluderPolygon2D_wrapper_get_cull_mode();
WasGo::WasGoId _wasgo_OccluderPolygon2D_wrapper_get_polygon();
int _wasgo_OccluderPolygon2D_wrapper_is_closed();
void _wasgo_OccluderPolygon2D_wrapper_set_closed(bool p_closed);
void _wasgo_OccluderPolygon2D_wrapper_set_cull_mode(WasGo::WasGoId p_cull_mode);
void _wasgo_OccluderPolygon2D_wrapper_set_polygon(WasGo::WasGoId p_polygon);
WasGo::WasGoId _wasgo_OmniLight_wrapper_get_shadow_detail();
WasGo::WasGoId _wasgo_OmniLight_wrapper_get_shadow_mode();
void _wasgo_OmniLight_wrapper_set_shadow_detail(WasGo::WasGoId p_detail);
void _wasgo_OmniLight_wrapper_set_shadow_mode(WasGo::WasGoId p_mode);
WasGo::WasGoId _wasgo_PCKPacker_wrapper_add_file(WasGo::WasGoId p_pck_path, WasGo::WasGoId p_source_path);
WasGo::WasGoId _wasgo_PCKPacker_wrapper_flush(bool p_verbose);
WasGo::WasGoId _wasgo_PCKPacker_wrapper_pck_start(WasGo::WasGoId p_pck_name, int p_alignment);
void _wasgo_PHashTranslation_wrapper_generate(WasGo::WasGoId p_from);
int _wasgo_PackedDataContainerRef_wrapper_size();
int _wasgo_PackedScene_wrapper_can_instance();
WasGo::WasGoId _wasgo_PackedScene_wrapper_instance(WasGo::WasGoId p_edit_state);
WasGo::WasGoId _wasgo_PackedScene_wrapper_pack(WasGo::WasGoId p_path);
int _wasgo_PacketPeer_wrapper_get_available_packet_count();
int _wasgo_PacketPeer_wrapper_get_encode_buffer_max_size();
WasGo::WasGoId _wasgo_PacketPeer_wrapper_get_packet();
WasGo::WasGoId _wasgo_PacketPeer_wrapper_get_packet_error();
WasGo::WasGoId _wasgo_PacketPeer_wrapper_get_var(bool p_allow_objects);
int _wasgo_PacketPeer_wrapper_is_object_decoding_allowed();
WasGo::WasGoId _wasgo_PacketPeer_wrapper_put_packet(WasGo::WasGoId p_buffer);
WasGo::WasGoId _wasgo_PacketPeer_wrapper_put_var(WasGo::WasGoId p_var, bool p_full_objects);
void _wasgo_PacketPeer_wrapper_set_allow_object_decoding(bool p_enable);
void _wasgo_PacketPeer_wrapper_set_encode_buffer_max_size(int p_max_size);
WasGo::WasGoId _wasgo_PacketPeerDTLS_wrapper_connect_to_peer(WasGo::WasGoId p_packet_peer, bool p_validate_certs, WasGo::WasGoId p_for_hostname, WasGo::WasGoId p_valid_certificate);
void _wasgo_PacketPeerDTLS_wrapper_disconnect_from_peer();
WasGo::WasGoId _wasgo_PacketPeerDTLS_wrapper_get_status();
void _wasgo_PacketPeerDTLS_wrapper_poll();
int _wasgo_PacketPeerStream_wrapper_get_input_buffer_max_size();
int _wasgo_PacketPeerStream_wrapper_get_output_buffer_max_size();
WasGo::WasGoId _wasgo_PacketPeerStream_wrapper_get_stream_peer();
void _wasgo_PacketPeerStream_wrapper_set_input_buffer_max_size(int p_max_size_bytes);
void _wasgo_PacketPeerStream_wrapper_set_output_buffer_max_size(int p_max_size_bytes);
void _wasgo_PacketPeerStream_wrapper_set_stream_peer(WasGo::WasGoId p_peer);
void _wasgo_PacketPeerUDP_wrapper_close();
WasGo::WasGoId _wasgo_PacketPeerUDP_wrapper_connect_to_host(WasGo::WasGoId p_host, int p_port);
WasGo::WasGoId _wasgo_PacketPeerUDP_wrapper_get_packet_ip();
int _wasgo_PacketPeerUDP_wrapper_get_packet_port();
int _wasgo_PacketPeerUDP_wrapper_is_connected_to_host();
int _wasgo_PacketPeerUDP_wrapper_is_listening();
WasGo::WasGoId _wasgo_PacketPeerUDP_wrapper_join_multicast_group(WasGo::WasGoId p_multicast_address, WasGo::WasGoId p_interface_name);
WasGo::WasGoId _wasgo_PacketPeerUDP_wrapper_leave_multicast_group(WasGo::WasGoId p_multicast_address, WasGo::WasGoId p_interface_name);
WasGo::WasGoId _wasgo_PacketPeerUDP_wrapper_listen(int p_port, WasGo::WasGoId p_bind_address, int p_recv_buf_size);
void _wasgo_PacketPeerUDP_wrapper_set_broadcast_enabled(bool p_enabled);
WasGo::WasGoId _wasgo_PacketPeerUDP_wrapper_set_dest_address(WasGo::WasGoId p_host, int p_port);
WasGo::WasGoId _wasgo_PacketPeerUDP_wrapper_wait();
WasGo::WasGoId _wasgo_PanoramaSky_wrapper_get_panorama();
void _wasgo_PanoramaSky_wrapper_set_panorama(WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_ParallaxLayer_wrapper_get_mirroring();
WasGo::WasGoId _wasgo_ParallaxLayer_wrapper_get_motion_offset();
WasGo::WasGoId _wasgo_ParallaxLayer_wrapper_get_motion_scale();
void _wasgo_ParallaxLayer_wrapper_set_mirroring(WasGo::WasGoId p_mirror);
void _wasgo_ParallaxLayer_wrapper_set_motion_offset(WasGo::WasGoId p_offset);
void _wasgo_ParallaxLayer_wrapper_set_motion_scale(WasGo::WasGoId p_scale);
WasGo::WasGoId _wasgo_Particles_wrapper_capture_aabb();
int _wasgo_Particles_wrapper_get_amount();
WasGo::WasGoId _wasgo_Particles_wrapper_get_draw_order();
WasGo::WasGoId _wasgo_Particles_wrapper_get_draw_pass_mesh(int p_pass);
int _wasgo_Particles_wrapper_get_draw_passes();
float _wasgo_Particles_wrapper_get_explosiveness_ratio();
int _wasgo_Particles_wrapper_get_fixed_fps();
int _wasgo_Particles_wrapper_get_fractional_delta();
float _wasgo_Particles_wrapper_get_lifetime();
int _wasgo_Particles_wrapper_get_one_shot();
float _wasgo_Particles_wrapper_get_pre_process_time();
WasGo::WasGoId _wasgo_Particles_wrapper_get_process_material();
float _wasgo_Particles_wrapper_get_randomness_ratio();
float _wasgo_Particles_wrapper_get_speed_scale();
int _wasgo_Particles_wrapper_get_use_local_coordinates();
WasGo::WasGoId _wasgo_Particles_wrapper_get_visibility_aabb();
int _wasgo_Particles_wrapper_is_emitting();
void _wasgo_Particles_wrapper_restart();
void _wasgo_Particles_wrapper_set_amount(int p_amount);
void _wasgo_Particles_wrapper_set_draw_order(WasGo::WasGoId p_order);
void _wasgo_Particles_wrapper_set_draw_pass_mesh(int p_pass, WasGo::WasGoId p_mesh);
void _wasgo_Particles_wrapper_set_draw_passes(int p_passes);
void _wasgo_Particles_wrapper_set_emitting(bool p_emitting);
void _wasgo_Particles_wrapper_set_explosiveness_ratio(float p_ratio);
void _wasgo_Particles_wrapper_set_fixed_fps(int p_fps);
void _wasgo_Particles_wrapper_set_fractional_delta(bool p_enable);
void _wasgo_Particles_wrapper_set_lifetime(float p_secs);
void _wasgo_Particles_wrapper_set_one_shot(bool p_enable);
void _wasgo_Particles_wrapper_set_pre_process_time(float p_secs);
void _wasgo_Particles_wrapper_set_process_material(WasGo::WasGoId p_material);
void _wasgo_Particles_wrapper_set_randomness_ratio(float p_ratio);
void _wasgo_Particles_wrapper_set_speed_scale(float p_scale);
void _wasgo_Particles_wrapper_set_use_local_coordinates(bool p_enable);
void _wasgo_Particles_wrapper_set_visibility_aabb(WasGo::WasGoId p_aabb);
WasGo::WasGoId _wasgo_Particles2D_wrapper_capture_rect();
int _wasgo_Particles2D_wrapper_get_amount();
WasGo::WasGoId _wasgo_Particles2D_wrapper_get_draw_order();
float _wasgo_Particles2D_wrapper_get_explosiveness_ratio();
int _wasgo_Particles2D_wrapper_get_fixed_fps();
int _wasgo_Particles2D_wrapper_get_fractional_delta();
float _wasgo_Particles2D_wrapper_get_lifetime();
WasGo::WasGoId _wasgo_Particles2D_wrapper_get_normal_map();
int _wasgo_Particles2D_wrapper_get_one_shot();
float _wasgo_Particles2D_wrapper_get_pre_process_time();
WasGo::WasGoId _wasgo_Particles2D_wrapper_get_process_material();
float _wasgo_Particles2D_wrapper_get_randomness_ratio();
float _wasgo_Particles2D_wrapper_get_speed_scale();
WasGo::WasGoId _wasgo_Particles2D_wrapper_get_texture();
int _wasgo_Particles2D_wrapper_get_use_local_coordinates();
WasGo::WasGoId _wasgo_Particles2D_wrapper_get_visibility_rect();
int _wasgo_Particles2D_wrapper_is_emitting();
void _wasgo_Particles2D_wrapper_restart();
void _wasgo_Particles2D_wrapper_set_amount(int p_amount);
void _wasgo_Particles2D_wrapper_set_draw_order(WasGo::WasGoId p_order);
void _wasgo_Particles2D_wrapper_set_emitting(bool p_emitting);
void _wasgo_Particles2D_wrapper_set_explosiveness_ratio(float p_ratio);
void _wasgo_Particles2D_wrapper_set_fixed_fps(int p_fps);
void _wasgo_Particles2D_wrapper_set_fractional_delta(bool p_enable);
void _wasgo_Particles2D_wrapper_set_lifetime(float p_secs);
void _wasgo_Particles2D_wrapper_set_normal_map(WasGo::WasGoId p_texture);
void _wasgo_Particles2D_wrapper_set_one_shot(bool p_secs);
void _wasgo_Particles2D_wrapper_set_pre_process_time(float p_secs);
void _wasgo_Particles2D_wrapper_set_process_material(WasGo::WasGoId p_material);
void _wasgo_Particles2D_wrapper_set_randomness_ratio(float p_ratio);
void _wasgo_Particles2D_wrapper_set_speed_scale(float p_scale);
void _wasgo_Particles2D_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_Particles2D_wrapper_set_use_local_coordinates(bool p_enable);
void _wasgo_Particles2D_wrapper_set_visibility_rect(WasGo::WasGoId p_visibility_rect);
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_color();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_color_ramp();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_direction();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_emission_box_extents();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_emission_color_texture();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_emission_normal_texture();
int _wasgo_ParticlesMaterial_wrapper_get_emission_point_count();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_emission_point_texture();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_emission_shape();
float _wasgo_ParticlesMaterial_wrapper_get_emission_sphere_radius();
int _wasgo_ParticlesMaterial_wrapper_get_flag(WasGo::WasGoId p_flag);
float _wasgo_ParticlesMaterial_wrapper_get_flatness();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_gravity();
float _wasgo_ParticlesMaterial_wrapper_get_lifetime_randomness();
float _wasgo_ParticlesMaterial_wrapper_get_param(WasGo::WasGoId p_param);
float _wasgo_ParticlesMaterial_wrapper_get_param_randomness(WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_param_texture(WasGo::WasGoId p_param);
float _wasgo_ParticlesMaterial_wrapper_get_spread();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_trail_color_modifier();
int _wasgo_ParticlesMaterial_wrapper_get_trail_divisor();
WasGo::WasGoId _wasgo_ParticlesMaterial_wrapper_get_trail_size_modifier();
void _wasgo_ParticlesMaterial_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_ParticlesMaterial_wrapper_set_color_ramp(WasGo::WasGoId p_ramp);
void _wasgo_ParticlesMaterial_wrapper_set_direction(WasGo::WasGoId p_degrees);
void _wasgo_ParticlesMaterial_wrapper_set_emission_box_extents(WasGo::WasGoId p_extents);
void _wasgo_ParticlesMaterial_wrapper_set_emission_color_texture(WasGo::WasGoId p_texture);
void _wasgo_ParticlesMaterial_wrapper_set_emission_normal_texture(WasGo::WasGoId p_texture);
void _wasgo_ParticlesMaterial_wrapper_set_emission_point_count(int p_point_count);
void _wasgo_ParticlesMaterial_wrapper_set_emission_point_texture(WasGo::WasGoId p_texture);
void _wasgo_ParticlesMaterial_wrapper_set_emission_shape(WasGo::WasGoId p_shape);
void _wasgo_ParticlesMaterial_wrapper_set_emission_sphere_radius(float p_radius);
void _wasgo_ParticlesMaterial_wrapper_set_flag(WasGo::WasGoId p_flag, bool p_enable);
void _wasgo_ParticlesMaterial_wrapper_set_flatness(float p_amount);
void _wasgo_ParticlesMaterial_wrapper_set_gravity(WasGo::WasGoId p_accel_vec);
void _wasgo_ParticlesMaterial_wrapper_set_lifetime_randomness(float p_randomness);
void _wasgo_ParticlesMaterial_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
void _wasgo_ParticlesMaterial_wrapper_set_param_randomness(WasGo::WasGoId p_param, float p_randomness);
void _wasgo_ParticlesMaterial_wrapper_set_param_texture(WasGo::WasGoId p_param, WasGo::WasGoId p_texture);
void _wasgo_ParticlesMaterial_wrapper_set_spread(float p_degrees);
void _wasgo_ParticlesMaterial_wrapper_set_trail_color_modifier(WasGo::WasGoId p_texture);
void _wasgo_ParticlesMaterial_wrapper_set_trail_divisor(int p_divisor);
void _wasgo_ParticlesMaterial_wrapper_set_trail_size_modifier(WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_Path_wrapper_get_curve();
void _wasgo_Path_wrapper_set_curve(WasGo::WasGoId p_curve);
WasGo::WasGoId _wasgo_Path2D_wrapper_get_curve();
void _wasgo_Path2D_wrapper_set_curve(WasGo::WasGoId p_curve);
int _wasgo_PathFollow_wrapper_get_cubic_interpolation();
float _wasgo_PathFollow_wrapper_get_h_offset();
float _wasgo_PathFollow_wrapper_get_offset();
WasGo::WasGoId _wasgo_PathFollow_wrapper_get_rotation_mode();
float _wasgo_PathFollow_wrapper_get_unit_offset();
float _wasgo_PathFollow_wrapper_get_v_offset();
int _wasgo_PathFollow_wrapper_has_loop();
void _wasgo_PathFollow_wrapper_set_cubic_interpolation(bool p_enable);
void _wasgo_PathFollow_wrapper_set_h_offset(float p_h_offset);
void _wasgo_PathFollow_wrapper_set_loop(bool p_loop);
void _wasgo_PathFollow_wrapper_set_offset(float p_offset);
void _wasgo_PathFollow_wrapper_set_rotation_mode(WasGo::WasGoId p_rotation_mode);
void _wasgo_PathFollow_wrapper_set_unit_offset(float p_unit_offset);
void _wasgo_PathFollow_wrapper_set_v_offset(float p_v_offset);
int _wasgo_PathFollow2D_wrapper_get_cubic_interpolation();
float _wasgo_PathFollow2D_wrapper_get_h_offset();
float _wasgo_PathFollow2D_wrapper_get_lookahead();
float _wasgo_PathFollow2D_wrapper_get_offset();
float _wasgo_PathFollow2D_wrapper_get_unit_offset();
float _wasgo_PathFollow2D_wrapper_get_v_offset();
int _wasgo_PathFollow2D_wrapper_has_loop();
int _wasgo_PathFollow2D_wrapper_is_rotating();
void _wasgo_PathFollow2D_wrapper_set_cubic_interpolation(bool p_enable);
void _wasgo_PathFollow2D_wrapper_set_h_offset(float p_h_offset);
void _wasgo_PathFollow2D_wrapper_set_lookahead(float p_lookahead);
void _wasgo_PathFollow2D_wrapper_set_loop(bool p_loop);
void _wasgo_PathFollow2D_wrapper_set_offset(float p_offset);
void _wasgo_PathFollow2D_wrapper_set_rotate(bool p_enable);
void _wasgo_PathFollow2D_wrapper_set_unit_offset(float p_unit_offset);
void _wasgo_PathFollow2D_wrapper_set_v_offset(float p_v_offset);
void _wasgo_PhysicalBone_wrapper_apply_central_impulse(WasGo::WasGoId p_impulse);
void _wasgo_PhysicalBone_wrapper_apply_impulse(WasGo::WasGoId p_position, WasGo::WasGoId p_impulse);
void _wasgo_Physics2DDirectBodyState_wrapper_add_central_force(WasGo::WasGoId p_force);
void _wasgo_Physics2DDirectBodyState_wrapper_add_force(WasGo::WasGoId p_offset, WasGo::WasGoId p_force);
void _wasgo_Physics2DDirectBodyState_wrapper_add_torque(float p_torque);
void _wasgo_Physics2DDirectBodyState_wrapper_apply_central_impulse(WasGo::WasGoId p_impulse);
void _wasgo_Physics2DDirectBodyState_wrapper_apply_impulse(WasGo::WasGoId p_offset, WasGo::WasGoId p_impulse);
void _wasgo_Physics2DDirectBodyState_wrapper_apply_torque_impulse(float p_impulse);
float _wasgo_Physics2DDirectBodyState_wrapper_get_angular_velocity();
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_contact_collider(int p_contact_idx);
int _wasgo_Physics2DDirectBodyState_wrapper_get_contact_collider_id(int p_contact_idx);
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_contact_collider_object(int p_contact_idx);
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_contact_collider_position(int p_contact_idx);
int _wasgo_Physics2DDirectBodyState_wrapper_get_contact_collider_shape(int p_contact_idx);
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_contact_collider_shape_metadata(int p_contact_idx);
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_contact_collider_velocity_at_position(int p_contact_idx);
int _wasgo_Physics2DDirectBodyState_wrapper_get_contact_count();
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_contact_local_normal(int p_contact_idx);
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_contact_local_position(int p_contact_idx);
int _wasgo_Physics2DDirectBodyState_wrapper_get_contact_local_shape(int p_contact_idx);
float _wasgo_Physics2DDirectBodyState_wrapper_get_inverse_inertia();
float _wasgo_Physics2DDirectBodyState_wrapper_get_inverse_mass();
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_linear_velocity();
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_space_state();
float _wasgo_Physics2DDirectBodyState_wrapper_get_step();
float _wasgo_Physics2DDirectBodyState_wrapper_get_total_angular_damp();
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_total_gravity();
float _wasgo_Physics2DDirectBodyState_wrapper_get_total_linear_damp();
WasGo::WasGoId _wasgo_Physics2DDirectBodyState_wrapper_get_transform();
void _wasgo_Physics2DDirectBodyState_wrapper_integrate_forces();
int _wasgo_Physics2DDirectBodyState_wrapper_is_sleeping();
void _wasgo_Physics2DDirectBodyState_wrapper_set_angular_velocity(float p_velocity);
void _wasgo_Physics2DDirectBodyState_wrapper_set_linear_velocity(WasGo::WasGoId p_velocity);
void _wasgo_Physics2DDirectBodyState_wrapper_set_sleep_state(bool p_enabled);
void _wasgo_Physics2DDirectBodyState_wrapper_set_transform(WasGo::WasGoId p_transform);
WasGo::WasGoId _wasgo_Physics2DDirectSpaceState_wrapper_cast_motion(WasGo::WasGoId p_shape);
WasGo::WasGoId _wasgo_Physics2DDirectSpaceState_wrapper_collide_shape(WasGo::WasGoId p_shape, int p_max_results);
WasGo::WasGoId _wasgo_Physics2DDirectSpaceState_wrapper_get_rest_info(WasGo::WasGoId p_shape);
WasGo::WasGoId _wasgo_Physics2DDirectSpaceState_wrapper_intersect_point(WasGo::WasGoId p_point, int p_max_results, WasGo::WasGoId p_exclude, int p_collision_layer, bool p_collide_with_bodies, bool p_collide_with_areas);
WasGo::WasGoId _wasgo_Physics2DDirectSpaceState_wrapper_intersect_point_on_canvas(WasGo::WasGoId p_point, int p_canvas_instance_id, int p_max_results, WasGo::WasGoId p_exclude, int p_collision_layer, bool p_collide_with_bodies, bool p_collide_with_areas);
WasGo::WasGoId _wasgo_Physics2DDirectSpaceState_wrapper_intersect_ray(WasGo::WasGoId p_from, WasGo::WasGoId p_to, WasGo::WasGoId p_exclude, int p_collision_layer, bool p_collide_with_bodies, bool p_collide_with_areas);
WasGo::WasGoId _wasgo_Physics2DDirectSpaceState_wrapper_intersect_shape(WasGo::WasGoId p_shape, int p_max_results);
void _wasgo_Physics2DServer_wrapper_area_add_shape(WasGo::WasGoId p_area, WasGo::WasGoId p_shape, WasGo::WasGoId p_transform, bool p_disabled);
void _wasgo_Physics2DServer_wrapper_area_attach_canvas_instance_id(WasGo::WasGoId p_area, int p_id);
void _wasgo_Physics2DServer_wrapper_area_attach_object_instance_id(WasGo::WasGoId p_area, int p_id);
void _wasgo_Physics2DServer_wrapper_area_clear_shapes(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_area_create();
int _wasgo_Physics2DServer_wrapper_area_get_canvas_instance_id(WasGo::WasGoId p_area);
int _wasgo_Physics2DServer_wrapper_area_get_object_instance_id(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_area_get_param(WasGo::WasGoId p_area, WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_area_get_shape(WasGo::WasGoId p_area, int p_shape_idx);
int _wasgo_Physics2DServer_wrapper_area_get_shape_count(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_area_get_shape_transform(WasGo::WasGoId p_area, int p_shape_idx);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_area_get_space(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_area_get_space_override_mode(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_area_get_transform(WasGo::WasGoId p_area);
void _wasgo_Physics2DServer_wrapper_area_remove_shape(WasGo::WasGoId p_area, int p_shape_idx);
void _wasgo_Physics2DServer_wrapper_area_set_area_monitor_callback(WasGo::WasGoId p_area, WasGo::WasGoId p_receiver, WasGo::WasGoId p_method);
void _wasgo_Physics2DServer_wrapper_area_set_collision_layer(WasGo::WasGoId p_area, int p_layer);
void _wasgo_Physics2DServer_wrapper_area_set_collision_mask(WasGo::WasGoId p_area, int p_mask);
void _wasgo_Physics2DServer_wrapper_area_set_monitor_callback(WasGo::WasGoId p_area, WasGo::WasGoId p_receiver, WasGo::WasGoId p_method);
void _wasgo_Physics2DServer_wrapper_area_set_monitorable(WasGo::WasGoId p_area, bool p_monitorable);
void _wasgo_Physics2DServer_wrapper_area_set_param(WasGo::WasGoId p_area, WasGo::WasGoId p_param, WasGo::WasGoId p_value);
void _wasgo_Physics2DServer_wrapper_area_set_shape(WasGo::WasGoId p_area, int p_shape_idx, WasGo::WasGoId p_shape);
void _wasgo_Physics2DServer_wrapper_area_set_shape_disabled(WasGo::WasGoId p_area, int p_shape_idx, bool p_disabled);
void _wasgo_Physics2DServer_wrapper_area_set_shape_transform(WasGo::WasGoId p_area, int p_shape_idx, WasGo::WasGoId p_transform);
void _wasgo_Physics2DServer_wrapper_area_set_space(WasGo::WasGoId p_area, WasGo::WasGoId p_space);
void _wasgo_Physics2DServer_wrapper_area_set_space_override_mode(WasGo::WasGoId p_area, WasGo::WasGoId p_mode);
void _wasgo_Physics2DServer_wrapper_area_set_transform(WasGo::WasGoId p_area, WasGo::WasGoId p_transform);
void _wasgo_Physics2DServer_wrapper_body_add_central_force(WasGo::WasGoId p_body, WasGo::WasGoId p_force);
void _wasgo_Physics2DServer_wrapper_body_add_collision_exception(WasGo::WasGoId p_body, WasGo::WasGoId p_excepted_body);
void _wasgo_Physics2DServer_wrapper_body_add_force(WasGo::WasGoId p_body, WasGo::WasGoId p_offset, WasGo::WasGoId p_force);
void _wasgo_Physics2DServer_wrapper_body_add_shape(WasGo::WasGoId p_body, WasGo::WasGoId p_shape, WasGo::WasGoId p_transform, bool p_disabled);
void _wasgo_Physics2DServer_wrapper_body_add_torque(WasGo::WasGoId p_body, float p_torque);
void _wasgo_Physics2DServer_wrapper_body_apply_central_impulse(WasGo::WasGoId p_body, WasGo::WasGoId p_impulse);
void _wasgo_Physics2DServer_wrapper_body_apply_impulse(WasGo::WasGoId p_body, WasGo::WasGoId p_position, WasGo::WasGoId p_impulse);
void _wasgo_Physics2DServer_wrapper_body_apply_torque_impulse(WasGo::WasGoId p_body, float p_impulse);
void _wasgo_Physics2DServer_wrapper_body_attach_canvas_instance_id(WasGo::WasGoId p_body, int p_id);
void _wasgo_Physics2DServer_wrapper_body_attach_object_instance_id(WasGo::WasGoId p_body, int p_id);
void _wasgo_Physics2DServer_wrapper_body_clear_shapes(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_create();
int _wasgo_Physics2DServer_wrapper_body_get_canvas_instance_id(WasGo::WasGoId p_body);
int _wasgo_Physics2DServer_wrapper_body_get_collision_layer(WasGo::WasGoId p_body);
int _wasgo_Physics2DServer_wrapper_body_get_collision_mask(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_continuous_collision_detection_mode(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_direct_state(WasGo::WasGoId p_body);
int _wasgo_Physics2DServer_wrapper_body_get_max_contacts_reported(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_mode(WasGo::WasGoId p_body);
int _wasgo_Physics2DServer_wrapper_body_get_object_instance_id(WasGo::WasGoId p_body);
float _wasgo_Physics2DServer_wrapper_body_get_param(WasGo::WasGoId p_body, WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_shape(WasGo::WasGoId p_body, int p_shape_idx);
int _wasgo_Physics2DServer_wrapper_body_get_shape_count(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_shape_metadata(WasGo::WasGoId p_body, int p_shape_idx);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_shape_transform(WasGo::WasGoId p_body, int p_shape_idx);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_space(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_body_get_state(WasGo::WasGoId p_body, WasGo::WasGoId p_state);
int _wasgo_Physics2DServer_wrapper_body_is_omitting_force_integration(WasGo::WasGoId p_body);
void _wasgo_Physics2DServer_wrapper_body_remove_collision_exception(WasGo::WasGoId p_body, WasGo::WasGoId p_excepted_body);
void _wasgo_Physics2DServer_wrapper_body_remove_shape(WasGo::WasGoId p_body, int p_shape_idx);
void _wasgo_Physics2DServer_wrapper_body_set_axis_velocity(WasGo::WasGoId p_body, WasGo::WasGoId p_axis_velocity);
void _wasgo_Physics2DServer_wrapper_body_set_collision_layer(WasGo::WasGoId p_body, int p_layer);
void _wasgo_Physics2DServer_wrapper_body_set_collision_mask(WasGo::WasGoId p_body, int p_mask);
void _wasgo_Physics2DServer_wrapper_body_set_continuous_collision_detection_mode(WasGo::WasGoId p_body, WasGo::WasGoId p_mode);
void _wasgo_Physics2DServer_wrapper_body_set_force_integration_callback(WasGo::WasGoId p_body, WasGo::WasGoId p_receiver, WasGo::WasGoId p_method, WasGo::WasGoId p_userdata);
void _wasgo_Physics2DServer_wrapper_body_set_max_contacts_reported(WasGo::WasGoId p_body, int p_amount);
void _wasgo_Physics2DServer_wrapper_body_set_mode(WasGo::WasGoId p_body, WasGo::WasGoId p_mode);
void _wasgo_Physics2DServer_wrapper_body_set_omit_force_integration(WasGo::WasGoId p_body, bool p_enable);
void _wasgo_Physics2DServer_wrapper_body_set_param(WasGo::WasGoId p_body, WasGo::WasGoId p_param, float p_value);
void _wasgo_Physics2DServer_wrapper_body_set_shape(WasGo::WasGoId p_body, int p_shape_idx, WasGo::WasGoId p_shape);
void _wasgo_Physics2DServer_wrapper_body_set_shape_as_one_way_collision(WasGo::WasGoId p_body, int p_shape_idx, bool p_enable, float p_margin);
void _wasgo_Physics2DServer_wrapper_body_set_shape_disabled(WasGo::WasGoId p_body, int p_shape_idx, bool p_disabled);
void _wasgo_Physics2DServer_wrapper_body_set_shape_metadata(WasGo::WasGoId p_body, int p_shape_idx, WasGo::WasGoId p_metadata);
void _wasgo_Physics2DServer_wrapper_body_set_shape_transform(WasGo::WasGoId p_body, int p_shape_idx, WasGo::WasGoId p_transform);
void _wasgo_Physics2DServer_wrapper_body_set_space(WasGo::WasGoId p_body, WasGo::WasGoId p_space);
void _wasgo_Physics2DServer_wrapper_body_set_state(WasGo::WasGoId p_body, WasGo::WasGoId p_state, WasGo::WasGoId p_value);
int _wasgo_Physics2DServer_wrapper_body_test_motion(WasGo::WasGoId p_body, WasGo::WasGoId p_from, WasGo::WasGoId p_motion, bool p_infinite_inertia, float p_margin, WasGo::WasGoId p_result);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_capsule_shape_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_circle_shape_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_concave_polygon_shape_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_convex_polygon_shape_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_damped_spring_joint_create(WasGo::WasGoId p_anchor_a, WasGo::WasGoId p_anchor_b, WasGo::WasGoId p_body_a, WasGo::WasGoId p_body_b);
float _wasgo_Physics2DServer_wrapper_damped_string_joint_get_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param);
void _wasgo_Physics2DServer_wrapper_damped_string_joint_set_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param, float p_value);
void _wasgo_Physics2DServer_wrapper_free_rid(WasGo::WasGoId p_rid);
int _wasgo_Physics2DServer_wrapper_get_process_info(WasGo::WasGoId p_process_info);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_groove_joint_create(WasGo::WasGoId p_groove1_a, WasGo::WasGoId p_groove2_a, WasGo::WasGoId p_anchor_b, WasGo::WasGoId p_body_a, WasGo::WasGoId p_body_b);
float _wasgo_Physics2DServer_wrapper_joint_get_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_joint_get_type(WasGo::WasGoId p_joint);
void _wasgo_Physics2DServer_wrapper_joint_set_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param, float p_value);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_line_shape_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_pin_joint_create(WasGo::WasGoId p_anchor, WasGo::WasGoId p_body_a, WasGo::WasGoId p_body_b);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_ray_shape_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_rectangle_shape_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_segment_shape_create();
void _wasgo_Physics2DServer_wrapper_set_active(bool p_active);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_shape_get_data(WasGo::WasGoId p_shape);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_shape_get_type(WasGo::WasGoId p_shape);
void _wasgo_Physics2DServer_wrapper_shape_set_data(WasGo::WasGoId p_shape, WasGo::WasGoId p_data);
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_space_create();
WasGo::WasGoId _wasgo_Physics2DServer_wrapper_space_get_direct_state(WasGo::WasGoId p_space);
float _wasgo_Physics2DServer_wrapper_space_get_param(WasGo::WasGoId p_space, WasGo::WasGoId p_param);
int _wasgo_Physics2DServer_wrapper_space_is_active(WasGo::WasGoId p_space);
void _wasgo_Physics2DServer_wrapper_space_set_active(WasGo::WasGoId p_space, bool p_active);
void _wasgo_Physics2DServer_wrapper_space_set_param(WasGo::WasGoId p_space, WasGo::WasGoId p_param, float p_value);
int _wasgo_Physics2DShapeQueryParameters_wrapper_get_collision_layer();
WasGo::WasGoId _wasgo_Physics2DShapeQueryParameters_wrapper_get_exclude();
float _wasgo_Physics2DShapeQueryParameters_wrapper_get_margin();
WasGo::WasGoId _wasgo_Physics2DShapeQueryParameters_wrapper_get_motion();
WasGo::WasGoId _wasgo_Physics2DShapeQueryParameters_wrapper_get_shape_rid();
WasGo::WasGoId _wasgo_Physics2DShapeQueryParameters_wrapper_get_transform();
int _wasgo_Physics2DShapeQueryParameters_wrapper_is_collide_with_areas_enabled();
int _wasgo_Physics2DShapeQueryParameters_wrapper_is_collide_with_bodies_enabled();
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_collide_with_areas(bool p_enable);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_collide_with_bodies(bool p_enable);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_collision_layer(int p_collision_layer);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_exclude(WasGo::WasGoId p_exclude);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_margin(float p_margin);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_motion(WasGo::WasGoId p_motion);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_shape(WasGo::WasGoId p_shape);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_shape_rid(WasGo::WasGoId p_shape);
void _wasgo_Physics2DShapeQueryParameters_wrapper_set_transform(WasGo::WasGoId p_transform);
int _wasgo_Physics2DShapeQueryResult_wrapper_get_result_count();
WasGo::WasGoId _wasgo_Physics2DShapeQueryResult_wrapper_get_result_object(int p_idx);
int _wasgo_Physics2DShapeQueryResult_wrapper_get_result_object_id(int p_idx);
int _wasgo_Physics2DShapeQueryResult_wrapper_get_result_object_shape(int p_idx);
WasGo::WasGoId _wasgo_Physics2DShapeQueryResult_wrapper_get_result_rid(int p_idx);
WasGo::WasGoId _wasgo_Physics2DTestMotionResult_wrapper_get_collider();
int _wasgo_Physics2DTestMotionResult_wrapper_get_collider_id();
WasGo::WasGoId _wasgo_Physics2DTestMotionResult_wrapper_get_collider_rid();
int _wasgo_Physics2DTestMotionResult_wrapper_get_collider_shape();
WasGo::WasGoId _wasgo_Physics2DTestMotionResult_wrapper_get_collider_velocity();
WasGo::WasGoId _wasgo_Physics2DTestMotionResult_wrapper_get_collision_normal();
WasGo::WasGoId _wasgo_Physics2DTestMotionResult_wrapper_get_collision_point();
WasGo::WasGoId _wasgo_Physics2DTestMotionResult_wrapper_get_motion();
WasGo::WasGoId _wasgo_Physics2DTestMotionResult_wrapper_get_motion_remainder();
int _wasgo_PhysicsBody_wrapper_get_collision_layer();
int _wasgo_PhysicsBody_wrapper_get_collision_layer_bit(int p_bit);
int _wasgo_PhysicsBody_wrapper_get_collision_mask();
int _wasgo_PhysicsBody_wrapper_get_collision_mask_bit(int p_bit);
void _wasgo_PhysicsBody_wrapper_set_collision_layer(int p_layer);
void _wasgo_PhysicsBody_wrapper_set_collision_layer_bit(int p_bit, bool p_value);
void _wasgo_PhysicsBody_wrapper_set_collision_mask(int p_mask);
void _wasgo_PhysicsBody_wrapper_set_collision_mask_bit(int p_bit, bool p_value);
int _wasgo_PhysicsBody2D_wrapper_get_collision_layer();
int _wasgo_PhysicsBody2D_wrapper_get_collision_layer_bit(int p_bit);
int _wasgo_PhysicsBody2D_wrapper_get_collision_mask();
int _wasgo_PhysicsBody2D_wrapper_get_collision_mask_bit(int p_bit);
void _wasgo_PhysicsBody2D_wrapper_set_collision_layer(int p_layer);
void _wasgo_PhysicsBody2D_wrapper_set_collision_layer_bit(int p_bit, bool p_value);
void _wasgo_PhysicsBody2D_wrapper_set_collision_mask(int p_mask);
void _wasgo_PhysicsBody2D_wrapper_set_collision_mask_bit(int p_bit, bool p_value);
void _wasgo_PhysicsDirectBodyState_wrapper_add_central_force(WasGo::WasGoId p_force);
void _wasgo_PhysicsDirectBodyState_wrapper_add_force(WasGo::WasGoId p_force, WasGo::WasGoId p_position);
void _wasgo_PhysicsDirectBodyState_wrapper_add_torque(WasGo::WasGoId p_torque);
void _wasgo_PhysicsDirectBodyState_wrapper_apply_central_impulse(WasGo::WasGoId p_j);
void _wasgo_PhysicsDirectBodyState_wrapper_apply_impulse(WasGo::WasGoId p_position, WasGo::WasGoId p_j);
void _wasgo_PhysicsDirectBodyState_wrapper_apply_torque_impulse(WasGo::WasGoId p_j);
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_angular_velocity();
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_center_of_mass();
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_contact_collider(int p_contact_idx);
int _wasgo_PhysicsDirectBodyState_wrapper_get_contact_collider_id(int p_contact_idx);
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_contact_collider_object(int p_contact_idx);
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_contact_collider_position(int p_contact_idx);
int _wasgo_PhysicsDirectBodyState_wrapper_get_contact_collider_shape(int p_contact_idx);
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_contact_collider_velocity_at_position(int p_contact_idx);
int _wasgo_PhysicsDirectBodyState_wrapper_get_contact_count();
float _wasgo_PhysicsDirectBodyState_wrapper_get_contact_impulse(int p_contact_idx);
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_contact_local_normal(int p_contact_idx);
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_contact_local_position(int p_contact_idx);
int _wasgo_PhysicsDirectBodyState_wrapper_get_contact_local_shape(int p_contact_idx);
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_inverse_inertia();
float _wasgo_PhysicsDirectBodyState_wrapper_get_inverse_mass();
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_linear_velocity();
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_principal_inertia_axes();
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_space_state();
float _wasgo_PhysicsDirectBodyState_wrapper_get_step();
float _wasgo_PhysicsDirectBodyState_wrapper_get_total_angular_damp();
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_total_gravity();
float _wasgo_PhysicsDirectBodyState_wrapper_get_total_linear_damp();
WasGo::WasGoId _wasgo_PhysicsDirectBodyState_wrapper_get_transform();
void _wasgo_PhysicsDirectBodyState_wrapper_integrate_forces();
int _wasgo_PhysicsDirectBodyState_wrapper_is_sleeping();
void _wasgo_PhysicsDirectBodyState_wrapper_set_angular_velocity(WasGo::WasGoId p_velocity);
void _wasgo_PhysicsDirectBodyState_wrapper_set_linear_velocity(WasGo::WasGoId p_velocity);
void _wasgo_PhysicsDirectBodyState_wrapper_set_sleep_state(bool p_enabled);
void _wasgo_PhysicsDirectBodyState_wrapper_set_transform(WasGo::WasGoId p_transform);
WasGo::WasGoId _wasgo_PhysicsDirectSpaceState_wrapper_cast_motion(WasGo::WasGoId p_shape, WasGo::WasGoId p_motion);
WasGo::WasGoId _wasgo_PhysicsDirectSpaceState_wrapper_collide_shape(WasGo::WasGoId p_shape, int p_max_results);
WasGo::WasGoId _wasgo_PhysicsDirectSpaceState_wrapper_get_rest_info(WasGo::WasGoId p_shape);
WasGo::WasGoId _wasgo_PhysicsDirectSpaceState_wrapper_intersect_ray(WasGo::WasGoId p_from, WasGo::WasGoId p_to, WasGo::WasGoId p_exclude, int p_collision_mask, bool p_collide_with_bodies, bool p_collide_with_areas);
WasGo::WasGoId _wasgo_PhysicsDirectSpaceState_wrapper_intersect_shape(WasGo::WasGoId p_shape, int p_max_results);
float _wasgo_PhysicsMaterial_wrapper_get_bounce();
float _wasgo_PhysicsMaterial_wrapper_get_friction();
int _wasgo_PhysicsMaterial_wrapper_is_absorbent();
int _wasgo_PhysicsMaterial_wrapper_is_rough();
void _wasgo_PhysicsMaterial_wrapper_set_absorbent(bool p_absorbent);
void _wasgo_PhysicsMaterial_wrapper_set_bounce(float p_bounce);
void _wasgo_PhysicsMaterial_wrapper_set_friction(float p_friction);
void _wasgo_PhysicsMaterial_wrapper_set_rough(bool p_rough);
void _wasgo_PhysicsServer_wrapper_area_add_shape(WasGo::WasGoId p_area, WasGo::WasGoId p_shape, WasGo::WasGoId p_transform, bool p_disabled);
void _wasgo_PhysicsServer_wrapper_area_attach_object_instance_id(WasGo::WasGoId p_area, int p_id);
void _wasgo_PhysicsServer_wrapper_area_clear_shapes(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_area_create();
int _wasgo_PhysicsServer_wrapper_area_get_object_instance_id(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_area_get_param(WasGo::WasGoId p_area, WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_area_get_shape(WasGo::WasGoId p_area, int p_shape_idx);
int _wasgo_PhysicsServer_wrapper_area_get_shape_count(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_area_get_shape_transform(WasGo::WasGoId p_area, int p_shape_idx);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_area_get_space(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_area_get_space_override_mode(WasGo::WasGoId p_area);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_area_get_transform(WasGo::WasGoId p_area);
int _wasgo_PhysicsServer_wrapper_area_is_ray_pickable(WasGo::WasGoId p_area);
void _wasgo_PhysicsServer_wrapper_area_remove_shape(WasGo::WasGoId p_area, int p_shape_idx);
void _wasgo_PhysicsServer_wrapper_area_set_area_monitor_callback(WasGo::WasGoId p_area, WasGo::WasGoId p_receiver, WasGo::WasGoId p_method);
void _wasgo_PhysicsServer_wrapper_area_set_collision_layer(WasGo::WasGoId p_area, int p_layer);
void _wasgo_PhysicsServer_wrapper_area_set_collision_mask(WasGo::WasGoId p_area, int p_mask);
void _wasgo_PhysicsServer_wrapper_area_set_monitor_callback(WasGo::WasGoId p_area, WasGo::WasGoId p_receiver, WasGo::WasGoId p_method);
void _wasgo_PhysicsServer_wrapper_area_set_monitorable(WasGo::WasGoId p_area, bool p_monitorable);
void _wasgo_PhysicsServer_wrapper_area_set_param(WasGo::WasGoId p_area, WasGo::WasGoId p_param, WasGo::WasGoId p_value);
void _wasgo_PhysicsServer_wrapper_area_set_ray_pickable(WasGo::WasGoId p_area, bool p_enable);
void _wasgo_PhysicsServer_wrapper_area_set_shape(WasGo::WasGoId p_area, int p_shape_idx, WasGo::WasGoId p_shape);
void _wasgo_PhysicsServer_wrapper_area_set_shape_disabled(WasGo::WasGoId p_area, int p_shape_idx, bool p_disabled);
void _wasgo_PhysicsServer_wrapper_area_set_shape_transform(WasGo::WasGoId p_area, int p_shape_idx, WasGo::WasGoId p_transform);
void _wasgo_PhysicsServer_wrapper_area_set_space(WasGo::WasGoId p_area, WasGo::WasGoId p_space);
void _wasgo_PhysicsServer_wrapper_area_set_space_override_mode(WasGo::WasGoId p_area, WasGo::WasGoId p_mode);
void _wasgo_PhysicsServer_wrapper_area_set_transform(WasGo::WasGoId p_area, WasGo::WasGoId p_transform);
void _wasgo_PhysicsServer_wrapper_body_add_central_force(WasGo::WasGoId p_body, WasGo::WasGoId p_force);
void _wasgo_PhysicsServer_wrapper_body_add_collision_exception(WasGo::WasGoId p_body, WasGo::WasGoId p_excepted_body);
void _wasgo_PhysicsServer_wrapper_body_add_force(WasGo::WasGoId p_body, WasGo::WasGoId p_force, WasGo::WasGoId p_position);
void _wasgo_PhysicsServer_wrapper_body_add_shape(WasGo::WasGoId p_body, WasGo::WasGoId p_shape, WasGo::WasGoId p_transform, bool p_disabled);
void _wasgo_PhysicsServer_wrapper_body_add_torque(WasGo::WasGoId p_body, WasGo::WasGoId p_torque);
void _wasgo_PhysicsServer_wrapper_body_apply_central_impulse(WasGo::WasGoId p_body, WasGo::WasGoId p_impulse);
void _wasgo_PhysicsServer_wrapper_body_apply_impulse(WasGo::WasGoId p_body, WasGo::WasGoId p_position, WasGo::WasGoId p_impulse);
void _wasgo_PhysicsServer_wrapper_body_apply_torque_impulse(WasGo::WasGoId p_body, WasGo::WasGoId p_impulse);
void _wasgo_PhysicsServer_wrapper_body_attach_object_instance_id(WasGo::WasGoId p_body, int p_id);
void _wasgo_PhysicsServer_wrapper_body_clear_shapes(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_body_create(WasGo::WasGoId p_mode, bool p_init_sleeping);
int _wasgo_PhysicsServer_wrapper_body_get_collision_layer(WasGo::WasGoId p_body);
int _wasgo_PhysicsServer_wrapper_body_get_collision_mask(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_body_get_direct_state(WasGo::WasGoId p_body);
float _wasgo_PhysicsServer_wrapper_body_get_kinematic_safe_margin(WasGo::WasGoId p_body);
int _wasgo_PhysicsServer_wrapper_body_get_max_contacts_reported(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_body_get_mode(WasGo::WasGoId p_body);
int _wasgo_PhysicsServer_wrapper_body_get_object_instance_id(WasGo::WasGoId p_body);
float _wasgo_PhysicsServer_wrapper_body_get_param(WasGo::WasGoId p_body, WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_body_get_shape(WasGo::WasGoId p_body, int p_shape_idx);
int _wasgo_PhysicsServer_wrapper_body_get_shape_count(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_body_get_shape_transform(WasGo::WasGoId p_body, int p_shape_idx);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_body_get_space(WasGo::WasGoId p_body);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_body_get_state(WasGo::WasGoId p_body, WasGo::WasGoId p_state);
int _wasgo_PhysicsServer_wrapper_body_is_axis_locked(WasGo::WasGoId p_body, WasGo::WasGoId p_axis);
int _wasgo_PhysicsServer_wrapper_body_is_continuous_collision_detection_enabled(WasGo::WasGoId p_body);
int _wasgo_PhysicsServer_wrapper_body_is_omitting_force_integration(WasGo::WasGoId p_body);
int _wasgo_PhysicsServer_wrapper_body_is_ray_pickable(WasGo::WasGoId p_body);
void _wasgo_PhysicsServer_wrapper_body_remove_collision_exception(WasGo::WasGoId p_body, WasGo::WasGoId p_excepted_body);
void _wasgo_PhysicsServer_wrapper_body_remove_shape(WasGo::WasGoId p_body, int p_shape_idx);
void _wasgo_PhysicsServer_wrapper_body_set_axis_lock(WasGo::WasGoId p_body, WasGo::WasGoId p_axis, bool p_lock);
void _wasgo_PhysicsServer_wrapper_body_set_axis_velocity(WasGo::WasGoId p_body, WasGo::WasGoId p_axis_velocity);
void _wasgo_PhysicsServer_wrapper_body_set_collision_layer(WasGo::WasGoId p_body, int p_layer);
void _wasgo_PhysicsServer_wrapper_body_set_collision_mask(WasGo::WasGoId p_body, int p_mask);
void _wasgo_PhysicsServer_wrapper_body_set_enable_continuous_collision_detection(WasGo::WasGoId p_body, bool p_enable);
void _wasgo_PhysicsServer_wrapper_body_set_force_integration_callback(WasGo::WasGoId p_body, WasGo::WasGoId p_receiver, WasGo::WasGoId p_method, WasGo::WasGoId p_userdata);
void _wasgo_PhysicsServer_wrapper_body_set_kinematic_safe_margin(WasGo::WasGoId p_body, float p_margin);
void _wasgo_PhysicsServer_wrapper_body_set_max_contacts_reported(WasGo::WasGoId p_body, int p_amount);
void _wasgo_PhysicsServer_wrapper_body_set_mode(WasGo::WasGoId p_body, WasGo::WasGoId p_mode);
void _wasgo_PhysicsServer_wrapper_body_set_omit_force_integration(WasGo::WasGoId p_body, bool p_enable);
void _wasgo_PhysicsServer_wrapper_body_set_param(WasGo::WasGoId p_body, WasGo::WasGoId p_param, float p_value);
void _wasgo_PhysicsServer_wrapper_body_set_ray_pickable(WasGo::WasGoId p_body, bool p_enable);
void _wasgo_PhysicsServer_wrapper_body_set_shape(WasGo::WasGoId p_body, int p_shape_idx, WasGo::WasGoId p_shape);
void _wasgo_PhysicsServer_wrapper_body_set_shape_disabled(WasGo::WasGoId p_body, int p_shape_idx, bool p_disabled);
void _wasgo_PhysicsServer_wrapper_body_set_shape_transform(WasGo::WasGoId p_body, int p_shape_idx, WasGo::WasGoId p_transform);
void _wasgo_PhysicsServer_wrapper_body_set_space(WasGo::WasGoId p_body, WasGo::WasGoId p_space);
void _wasgo_PhysicsServer_wrapper_body_set_state(WasGo::WasGoId p_body, WasGo::WasGoId p_state, WasGo::WasGoId p_value);
float _wasgo_PhysicsServer_wrapper_cone_twist_joint_get_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param);
void _wasgo_PhysicsServer_wrapper_cone_twist_joint_set_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param, float p_value);
void _wasgo_PhysicsServer_wrapper_free_rid(WasGo::WasGoId p_rid);
int _wasgo_PhysicsServer_wrapper_generic_6dof_joint_get_flag(WasGo::WasGoId p_joint, WasGo::WasGoId p_axis, WasGo::WasGoId p_flag);
float _wasgo_PhysicsServer_wrapper_generic_6dof_joint_get_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_axis, WasGo::WasGoId p_param);
void _wasgo_PhysicsServer_wrapper_generic_6dof_joint_set_flag(WasGo::WasGoId p_joint, WasGo::WasGoId p_axis, WasGo::WasGoId p_flag, bool p_enable);
void _wasgo_PhysicsServer_wrapper_generic_6dof_joint_set_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_axis, WasGo::WasGoId p_param, float p_value);
int _wasgo_PhysicsServer_wrapper_get_process_info(WasGo::WasGoId p_process_info);
int _wasgo_PhysicsServer_wrapper_hinge_joint_get_flag(WasGo::WasGoId p_joint, WasGo::WasGoId p_flag);
float _wasgo_PhysicsServer_wrapper_hinge_joint_get_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param);
void _wasgo_PhysicsServer_wrapper_hinge_joint_set_flag(WasGo::WasGoId p_joint, WasGo::WasGoId p_flag, bool p_enabled);
void _wasgo_PhysicsServer_wrapper_hinge_joint_set_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param, float p_value);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_joint_create_cone_twist(WasGo::WasGoId p_body_A, WasGo::WasGoId p_local_ref_A, WasGo::WasGoId p_body_B, WasGo::WasGoId p_local_ref_B);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_joint_create_generic_6dof(WasGo::WasGoId p_body_A, WasGo::WasGoId p_local_ref_A, WasGo::WasGoId p_body_B, WasGo::WasGoId p_local_ref_B);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_joint_create_hinge(WasGo::WasGoId p_body_A, WasGo::WasGoId p_hinge_A, WasGo::WasGoId p_body_B, WasGo::WasGoId p_hinge_B);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_joint_create_pin(WasGo::WasGoId p_body_A, WasGo::WasGoId p_local_A, WasGo::WasGoId p_body_B, WasGo::WasGoId p_local_B);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_joint_create_slider(WasGo::WasGoId p_body_A, WasGo::WasGoId p_local_ref_A, WasGo::WasGoId p_body_B, WasGo::WasGoId p_local_ref_B);
int _wasgo_PhysicsServer_wrapper_joint_get_solver_priority(WasGo::WasGoId p_joint);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_joint_get_type(WasGo::WasGoId p_joint);
void _wasgo_PhysicsServer_wrapper_joint_set_solver_priority(WasGo::WasGoId p_joint, int p_priority);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_pin_joint_get_local_a(WasGo::WasGoId p_joint);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_pin_joint_get_local_b(WasGo::WasGoId p_joint);
float _wasgo_PhysicsServer_wrapper_pin_joint_get_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param);
void _wasgo_PhysicsServer_wrapper_pin_joint_set_local_a(WasGo::WasGoId p_joint, WasGo::WasGoId p_local_A);
void _wasgo_PhysicsServer_wrapper_pin_joint_set_local_b(WasGo::WasGoId p_joint, WasGo::WasGoId p_local_B);
void _wasgo_PhysicsServer_wrapper_pin_joint_set_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param, float p_value);
void _wasgo_PhysicsServer_wrapper_set_active(bool p_active);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_shape_create(WasGo::WasGoId p_type);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_shape_get_data(WasGo::WasGoId p_shape);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_shape_get_type(WasGo::WasGoId p_shape);
void _wasgo_PhysicsServer_wrapper_shape_set_data(WasGo::WasGoId p_shape, WasGo::WasGoId p_data);
float _wasgo_PhysicsServer_wrapper_slider_joint_get_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param);
void _wasgo_PhysicsServer_wrapper_slider_joint_set_param(WasGo::WasGoId p_joint, WasGo::WasGoId p_param, float p_value);
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_space_create();
WasGo::WasGoId _wasgo_PhysicsServer_wrapper_space_get_direct_state(WasGo::WasGoId p_space);
float _wasgo_PhysicsServer_wrapper_space_get_param(WasGo::WasGoId p_space, WasGo::WasGoId p_param);
int _wasgo_PhysicsServer_wrapper_space_is_active(WasGo::WasGoId p_space);
void _wasgo_PhysicsServer_wrapper_space_set_active(WasGo::WasGoId p_space, bool p_active);
void _wasgo_PhysicsServer_wrapper_space_set_param(WasGo::WasGoId p_space, WasGo::WasGoId p_param, float p_value);
int _wasgo_PhysicsShapeQueryParameters_wrapper_get_collision_mask();
WasGo::WasGoId _wasgo_PhysicsShapeQueryParameters_wrapper_get_exclude();
float _wasgo_PhysicsShapeQueryParameters_wrapper_get_margin();
WasGo::WasGoId _wasgo_PhysicsShapeQueryParameters_wrapper_get_shape_rid();
WasGo::WasGoId _wasgo_PhysicsShapeQueryParameters_wrapper_get_transform();
int _wasgo_PhysicsShapeQueryParameters_wrapper_is_collide_with_areas_enabled();
int _wasgo_PhysicsShapeQueryParameters_wrapper_is_collide_with_bodies_enabled();
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_collide_with_areas(bool p_enable);
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_collide_with_bodies(bool p_enable);
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_collision_mask(int p_collision_mask);
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_exclude(WasGo::WasGoId p_exclude);
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_margin(float p_margin);
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_shape(WasGo::WasGoId p_shape);
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_shape_rid(WasGo::WasGoId p_shape);
void _wasgo_PhysicsShapeQueryParameters_wrapper_set_transform(WasGo::WasGoId p_transform);
int _wasgo_PhysicsShapeQueryResult_wrapper_get_result_count();
WasGo::WasGoId _wasgo_PhysicsShapeQueryResult_wrapper_get_result_object(int p_idx);
int _wasgo_PhysicsShapeQueryResult_wrapper_get_result_object_id(int p_idx);
int _wasgo_PhysicsShapeQueryResult_wrapper_get_result_object_shape(int p_idx);
WasGo::WasGoId _wasgo_PhysicsShapeQueryResult_wrapper_get_result_rid(int p_idx);
float _wasgo_PinJoint_wrapper_get_param(WasGo::WasGoId p_param);
void _wasgo_PinJoint_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
float _wasgo_PinJoint2D_wrapper_get_softness();
void _wasgo_PinJoint2D_wrapper_set_softness(float p_softness);
WasGo::WasGoId _wasgo_PlaneMesh_wrapper_get_size();
int _wasgo_PlaneMesh_wrapper_get_subdivide_depth();
int _wasgo_PlaneMesh_wrapper_get_subdivide_width();
void _wasgo_PlaneMesh_wrapper_set_size(WasGo::WasGoId p_size);
void _wasgo_PlaneMesh_wrapper_set_subdivide_depth(int p_subdivide);
void _wasgo_PlaneMesh_wrapper_set_subdivide_width(int p_subdivide);
WasGo::WasGoId _wasgo_PlaneShape_wrapper_get_plane();
void _wasgo_PlaneShape_wrapper_set_plane(WasGo::WasGoId p_plane);
void _wasgo_Polygon2D_wrapper_add_bone(WasGo::WasGoId p_path, WasGo::WasGoId p_weights);
void _wasgo_Polygon2D_wrapper_clear_bones();
void _wasgo_Polygon2D_wrapper_erase_bone(int p_index);
int _wasgo_Polygon2D_wrapper_get_antialiased();
int _wasgo_Polygon2D_wrapper_get_bone_count();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_bone_path(int p_index);
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_bone_weights(int p_index);
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_color();
int _wasgo_Polygon2D_wrapper_get_internal_vertex_count();
int _wasgo_Polygon2D_wrapper_get_invert();
float _wasgo_Polygon2D_wrapper_get_invert_border();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_offset();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_polygon();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_polygons();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_skeleton();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_texture();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_texture_offset();
float _wasgo_Polygon2D_wrapper_get_texture_rotation();
float _wasgo_Polygon2D_wrapper_get_texture_rotation_degrees();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_texture_scale();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_uv();
WasGo::WasGoId _wasgo_Polygon2D_wrapper_get_vertex_colors();
void _wasgo_Polygon2D_wrapper_set_antialiased(bool p_antialiased);
void _wasgo_Polygon2D_wrapper_set_bone_path(int p_index, WasGo::WasGoId p_path);
void _wasgo_Polygon2D_wrapper_set_bone_weights(int p_index, WasGo::WasGoId p_weights);
void _wasgo_Polygon2D_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_Polygon2D_wrapper_set_internal_vertex_count(int p_internal_vertex_count);
void _wasgo_Polygon2D_wrapper_set_invert(bool p_invert);
void _wasgo_Polygon2D_wrapper_set_invert_border(float p_invert_border);
void _wasgo_Polygon2D_wrapper_set_offset(WasGo::WasGoId p_offset);
void _wasgo_Polygon2D_wrapper_set_polygon(WasGo::WasGoId p_polygon);
void _wasgo_Polygon2D_wrapper_set_polygons(WasGo::WasGoId p_polygons);
void _wasgo_Polygon2D_wrapper_set_skeleton(WasGo::WasGoId p_skeleton);
void _wasgo_Polygon2D_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_Polygon2D_wrapper_set_texture_offset(WasGo::WasGoId p_texture_offset);
void _wasgo_Polygon2D_wrapper_set_texture_rotation(float p_texture_rotation);
void _wasgo_Polygon2D_wrapper_set_texture_rotation_degrees(float p_texture_rotation);
void _wasgo_Polygon2D_wrapper_set_texture_scale(WasGo::WasGoId p_texture_scale);
void _wasgo_Polygon2D_wrapper_set_uv(WasGo::WasGoId p_uv);
void _wasgo_Polygon2D_wrapper_set_vertex_colors(WasGo::WasGoId p_vertex_colors);
WasGo::WasGoId _wasgo_PolygonPathFinder_wrapper_find_path(WasGo::WasGoId p_from, WasGo::WasGoId p_to);
WasGo::WasGoId _wasgo_PolygonPathFinder_wrapper_get_bounds();
WasGo::WasGoId _wasgo_PolygonPathFinder_wrapper_get_closest_point(WasGo::WasGoId p_point);
WasGo::WasGoId _wasgo_PolygonPathFinder_wrapper_get_intersections(WasGo::WasGoId p_from, WasGo::WasGoId p_to);
float _wasgo_PolygonPathFinder_wrapper_get_point_penalty(int p_idx);
int _wasgo_PolygonPathFinder_wrapper_is_point_inside(WasGo::WasGoId p_point);
void _wasgo_PolygonPathFinder_wrapper_set_point_penalty(int p_idx, float p_penalty);
void _wasgo_PolygonPathFinder_wrapper_setup(WasGo::WasGoId p_points, WasGo::WasGoId p_connections);
int _wasgo_Popup_wrapper_is_exclusive();
void _wasgo_Popup_wrapper_popup(WasGo::WasGoId p_bounds);
void _wasgo_Popup_wrapper_popup_centered(WasGo::WasGoId p_size);
void _wasgo_Popup_wrapper_popup_centered_clamped(WasGo::WasGoId p_size, float p_fallback_ratio);
void _wasgo_Popup_wrapper_popup_centered_minsize(WasGo::WasGoId p_minsize);
void _wasgo_Popup_wrapper_popup_centered_ratio(float p_ratio);
void _wasgo_Popup_wrapper_set_as_minsize();
void _wasgo_Popup_wrapper_set_exclusive(bool p_enable);
float _wasgo_PrismMesh_wrapper_get_left_to_right();
WasGo::WasGoId _wasgo_PrismMesh_wrapper_get_size();
int _wasgo_PrismMesh_wrapper_get_subdivide_depth();
int _wasgo_PrismMesh_wrapper_get_subdivide_height();
int _wasgo_PrismMesh_wrapper_get_subdivide_width();
void _wasgo_PrismMesh_wrapper_set_left_to_right(float p_left_to_right);
void _wasgo_PrismMesh_wrapper_set_size(WasGo::WasGoId p_size);
void _wasgo_PrismMesh_wrapper_set_subdivide_depth(int p_segments);
void _wasgo_PrismMesh_wrapper_set_subdivide_height(int p_segments);
void _wasgo_PrismMesh_wrapper_set_subdivide_width(int p_segments);
int _wasgo_ProgressBar_wrapper_is_percent_visible();
void _wasgo_ProgressBar_wrapper_set_percent_visible(bool p_visible);
void _wasgo_ProximityGroup_wrapper_broadcast(WasGo::WasGoId p_name, WasGo::WasGoId p_parameters);
WasGo::WasGoId _wasgo_ProximityGroup_wrapper_get_dispatch_mode();
WasGo::WasGoId _wasgo_ProximityGroup_wrapper_get_grid_radius();
WasGo::WasGoId _wasgo_ProximityGroup_wrapper_get_group_name();
void _wasgo_ProximityGroup_wrapper_set_dispatch_mode(WasGo::WasGoId p_mode);
void _wasgo_ProximityGroup_wrapper_set_grid_radius(WasGo::WasGoId p_radius);
void _wasgo_ProximityGroup_wrapper_set_group_name(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_ProxyTexture_wrapper_get_base();
void _wasgo_ProxyTexture_wrapper_set_base(WasGo::WasGoId p_base);
WasGo::WasGoId _wasgo_QuadMesh_wrapper_get_size();
void _wasgo_QuadMesh_wrapper_set_size(WasGo::WasGoId p_size);
int _wasgo_RandomNumberGenerator_wrapper_get_seed();
float _wasgo_RandomNumberGenerator_wrapper_randf();
float _wasgo_RandomNumberGenerator_wrapper_randf_range(float p_from, float p_to);
float _wasgo_RandomNumberGenerator_wrapper_randfn(float p_mean, float p_deviation);
int _wasgo_RandomNumberGenerator_wrapper_randi();
int _wasgo_RandomNumberGenerator_wrapper_randi_range(int p_from, int p_to);
void _wasgo_RandomNumberGenerator_wrapper_randomize();
void _wasgo_RandomNumberGenerator_wrapper_set_seed(int p_seed);
float _wasgo_Range_wrapper_get_as_ratio();
float _wasgo_Range_wrapper_get_max();
float _wasgo_Range_wrapper_get_min();
float _wasgo_Range_wrapper_get_page();
float _wasgo_Range_wrapper_get_step();
float _wasgo_Range_wrapper_get_value();
int _wasgo_Range_wrapper_is_greater_allowed();
int _wasgo_Range_wrapper_is_lesser_allowed();
int _wasgo_Range_wrapper_is_ratio_exp();
int _wasgo_Range_wrapper_is_using_rounded_values();
void _wasgo_Range_wrapper_set_allow_greater(bool p_allow);
void _wasgo_Range_wrapper_set_allow_lesser(bool p_allow);
void _wasgo_Range_wrapper_set_as_ratio(float p_value);
void _wasgo_Range_wrapper_set_exp_ratio(bool p_enabled);
void _wasgo_Range_wrapper_set_max(float p_maximum);
void _wasgo_Range_wrapper_set_min(float p_minimum);
void _wasgo_Range_wrapper_set_page(float p_pagesize);
void _wasgo_Range_wrapper_set_step(float p_step);
void _wasgo_Range_wrapper_set_use_rounded_values(bool p_enabled);
void _wasgo_Range_wrapper_set_value(float p_value);
void _wasgo_Range_wrapper_share(WasGo::WasGoId p_with);
void _wasgo_Range_wrapper_unshare();
void _wasgo_RayCast_wrapper_add_exception(WasGo::WasGoId p_node);
void _wasgo_RayCast_wrapper_add_exception_rid(WasGo::WasGoId p_rid);
void _wasgo_RayCast_wrapper_clear_exceptions();
void _wasgo_RayCast_wrapper_force_raycast_update();
WasGo::WasGoId _wasgo_RayCast_wrapper_get_cast_to();
WasGo::WasGoId _wasgo_RayCast_wrapper_get_collider();
int _wasgo_RayCast_wrapper_get_collider_shape();
int _wasgo_RayCast_wrapper_get_collision_mask();
int _wasgo_RayCast_wrapper_get_collision_mask_bit(int p_bit);
WasGo::WasGoId _wasgo_RayCast_wrapper_get_collision_normal();
WasGo::WasGoId _wasgo_RayCast_wrapper_get_collision_point();
int _wasgo_RayCast_wrapper_get_exclude_parent_body();
int _wasgo_RayCast_wrapper_is_collide_with_areas_enabled();
int _wasgo_RayCast_wrapper_is_collide_with_bodies_enabled();
int _wasgo_RayCast_wrapper_is_colliding();
int _wasgo_RayCast_wrapper_is_enabled();
void _wasgo_RayCast_wrapper_remove_exception(WasGo::WasGoId p_node);
void _wasgo_RayCast_wrapper_remove_exception_rid(WasGo::WasGoId p_rid);
void _wasgo_RayCast_wrapper_set_cast_to(WasGo::WasGoId p_local_point);
void _wasgo_RayCast_wrapper_set_collide_with_areas(bool p_enable);
void _wasgo_RayCast_wrapper_set_collide_with_bodies(bool p_enable);
void _wasgo_RayCast_wrapper_set_collision_mask(int p_mask);
void _wasgo_RayCast_wrapper_set_collision_mask_bit(int p_bit, bool p_value);
void _wasgo_RayCast_wrapper_set_enabled(bool p_enabled);
void _wasgo_RayCast_wrapper_set_exclude_parent_body(bool p_mask);
void _wasgo_RayCast2D_wrapper_add_exception(WasGo::WasGoId p_node);
void _wasgo_RayCast2D_wrapper_add_exception_rid(WasGo::WasGoId p_rid);
void _wasgo_RayCast2D_wrapper_clear_exceptions();
void _wasgo_RayCast2D_wrapper_force_raycast_update();
WasGo::WasGoId _wasgo_RayCast2D_wrapper_get_cast_to();
WasGo::WasGoId _wasgo_RayCast2D_wrapper_get_collider();
int _wasgo_RayCast2D_wrapper_get_collider_shape();
int _wasgo_RayCast2D_wrapper_get_collision_mask();
int _wasgo_RayCast2D_wrapper_get_collision_mask_bit(int p_bit);
WasGo::WasGoId _wasgo_RayCast2D_wrapper_get_collision_normal();
WasGo::WasGoId _wasgo_RayCast2D_wrapper_get_collision_point();
int _wasgo_RayCast2D_wrapper_get_exclude_parent_body();
int _wasgo_RayCast2D_wrapper_is_collide_with_areas_enabled();
int _wasgo_RayCast2D_wrapper_is_collide_with_bodies_enabled();
int _wasgo_RayCast2D_wrapper_is_colliding();
int _wasgo_RayCast2D_wrapper_is_enabled();
void _wasgo_RayCast2D_wrapper_remove_exception(WasGo::WasGoId p_node);
void _wasgo_RayCast2D_wrapper_remove_exception_rid(WasGo::WasGoId p_rid);
void _wasgo_RayCast2D_wrapper_set_cast_to(WasGo::WasGoId p_local_point);
void _wasgo_RayCast2D_wrapper_set_collide_with_areas(bool p_enable);
void _wasgo_RayCast2D_wrapper_set_collide_with_bodies(bool p_enable);
void _wasgo_RayCast2D_wrapper_set_collision_mask(int p_mask);
void _wasgo_RayCast2D_wrapper_set_collision_mask_bit(int p_bit, bool p_value);
void _wasgo_RayCast2D_wrapper_set_enabled(bool p_enabled);
void _wasgo_RayCast2D_wrapper_set_exclude_parent_body(bool p_mask);
float _wasgo_RayShape_wrapper_get_length();
int _wasgo_RayShape_wrapper_get_slips_on_slope();
void _wasgo_RayShape_wrapper_set_length(float p_length);
void _wasgo_RayShape_wrapper_set_slips_on_slope(bool p_active);
float _wasgo_RayShape2D_wrapper_get_length();
int _wasgo_RayShape2D_wrapper_get_slips_on_slope();
void _wasgo_RayShape2D_wrapper_set_length(float p_length);
void _wasgo_RayShape2D_wrapper_set_slips_on_slope(bool p_active);
WasGo::WasGoId _wasgo_RectangleShape2D_wrapper_get_extents();
void _wasgo_RectangleShape2D_wrapper_set_extents(WasGo::WasGoId p_extents);
int _wasgo_Reference_wrapper_init_ref();
int _wasgo_Reference_wrapper_reference();
int _wasgo_Reference_wrapper_unreference();
WasGo::WasGoId _wasgo_ReferenceRect_wrapper_get_border_color();
float _wasgo_ReferenceRect_wrapper_get_border_width();
int _wasgo_ReferenceRect_wrapper_get_editor_only();
void _wasgo_ReferenceRect_wrapper_set_border_color(WasGo::WasGoId p_color);
void _wasgo_ReferenceRect_wrapper_set_border_width(float p_width);
void _wasgo_ReferenceRect_wrapper_set_editor_only(bool p_enabled);
int _wasgo_ReflectionProbe_wrapper_are_shadows_enabled();
int _wasgo_ReflectionProbe_wrapper_get_cull_mask();
WasGo::WasGoId _wasgo_ReflectionProbe_wrapper_get_extents();
float _wasgo_ReflectionProbe_wrapper_get_intensity();
WasGo::WasGoId _wasgo_ReflectionProbe_wrapper_get_interior_ambient();
float _wasgo_ReflectionProbe_wrapper_get_interior_ambient_energy();
float _wasgo_ReflectionProbe_wrapper_get_interior_ambient_probe_contribution();
float _wasgo_ReflectionProbe_wrapper_get_max_distance();
WasGo::WasGoId _wasgo_ReflectionProbe_wrapper_get_origin_offset();
WasGo::WasGoId _wasgo_ReflectionProbe_wrapper_get_update_mode();
int _wasgo_ReflectionProbe_wrapper_is_box_projection_enabled();
int _wasgo_ReflectionProbe_wrapper_is_set_as_interior();
void _wasgo_ReflectionProbe_wrapper_set_as_interior(bool p_enable);
void _wasgo_ReflectionProbe_wrapper_set_cull_mask(int p_layers);
void _wasgo_ReflectionProbe_wrapper_set_enable_box_projection(bool p_enable);
void _wasgo_ReflectionProbe_wrapper_set_enable_shadows(bool p_enable);
void _wasgo_ReflectionProbe_wrapper_set_extents(WasGo::WasGoId p_extents);
void _wasgo_ReflectionProbe_wrapper_set_intensity(float p_intensity);
void _wasgo_ReflectionProbe_wrapper_set_interior_ambient(WasGo::WasGoId p_ambient);
void _wasgo_ReflectionProbe_wrapper_set_interior_ambient_energy(float p_ambient_energy);
void _wasgo_ReflectionProbe_wrapper_set_interior_ambient_probe_contribution(float p_ambient_probe_contribution);
void _wasgo_ReflectionProbe_wrapper_set_max_distance(float p_max_distance);
void _wasgo_ReflectionProbe_wrapper_set_origin_offset(WasGo::WasGoId p_origin_offset);
void _wasgo_ReflectionProbe_wrapper_set_update_mode(WasGo::WasGoId p_mode);
void _wasgo_RemoteTransform_wrapper_force_update_cache();
WasGo::WasGoId _wasgo_RemoteTransform_wrapper_get_remote_node();
int _wasgo_RemoteTransform_wrapper_get_update_position();
int _wasgo_RemoteTransform_wrapper_get_update_rotation();
int _wasgo_RemoteTransform_wrapper_get_update_scale();
int _wasgo_RemoteTransform_wrapper_get_use_global_coordinates();
void _wasgo_RemoteTransform_wrapper_set_remote_node(WasGo::WasGoId p_path);
void _wasgo_RemoteTransform_wrapper_set_update_position(bool p_update_remote_position);
void _wasgo_RemoteTransform_wrapper_set_update_rotation(bool p_update_remote_rotation);
void _wasgo_RemoteTransform_wrapper_set_update_scale(bool p_update_remote_scale);
void _wasgo_RemoteTransform_wrapper_set_use_global_coordinates(bool p_use_global_coordinates);
void _wasgo_RemoteTransform2D_wrapper_force_update_cache();
WasGo::WasGoId _wasgo_RemoteTransform2D_wrapper_get_remote_node();
int _wasgo_RemoteTransform2D_wrapper_get_update_position();
int _wasgo_RemoteTransform2D_wrapper_get_update_rotation();
int _wasgo_RemoteTransform2D_wrapper_get_update_scale();
int _wasgo_RemoteTransform2D_wrapper_get_use_global_coordinates();
void _wasgo_RemoteTransform2D_wrapper_set_remote_node(WasGo::WasGoId p_path);
void _wasgo_RemoteTransform2D_wrapper_set_update_position(bool p_update_remote_position);
void _wasgo_RemoteTransform2D_wrapper_set_update_rotation(bool p_update_remote_rotation);
void _wasgo_RemoteTransform2D_wrapper_set_update_scale(bool p_update_remote_scale);
void _wasgo_RemoteTransform2D_wrapper_set_use_global_coordinates(bool p_use_global_coordinates);
void _wasgo_ResourceFormatLoader_wrapper_get_dependencies(WasGo::WasGoId p_path, WasGo::WasGoId p_add_types);
WasGo::WasGoId _wasgo_ResourceFormatLoader_wrapper_get_recognized_extensions();
WasGo::WasGoId _wasgo_ResourceFormatLoader_wrapper_get_resource_type(WasGo::WasGoId p_path);
int _wasgo_ResourceFormatLoader_wrapper_handles_type(WasGo::WasGoId p_typename);
WasGo::WasGoId _wasgo_ResourceFormatLoader_wrapper_load(WasGo::WasGoId p_path, WasGo::WasGoId p_original_path);
int _wasgo_ResourceFormatLoader_wrapper_rename_dependencies(WasGo::WasGoId p_path, WasGo::WasGoId p_renames);
WasGo::WasGoId _wasgo_ResourceFormatSaver_wrapper_get_recognized_extensions(WasGo::WasGoId p_resource);
int _wasgo_ResourceFormatSaver_wrapper_recognize(WasGo::WasGoId p_resource);
int _wasgo_ResourceFormatSaver_wrapper_save(WasGo::WasGoId p_path, WasGo::WasGoId p_resource, int p_flags);
WasGo::WasGoId _wasgo_ResourceInteractiveLoader_wrapper_get_resource();
int _wasgo_ResourceInteractiveLoader_wrapper_get_stage();
int _wasgo_ResourceInteractiveLoader_wrapper_get_stage_count();
WasGo::WasGoId _wasgo_ResourceInteractiveLoader_wrapper_poll();
WasGo::WasGoId _wasgo_ResourceInteractiveLoader_wrapper_wait();
WasGo::WasGoId _wasgo_SceneState_wrapper_get_connection_binds(int p_idx);
int _wasgo_SceneState_wrapper_get_connection_count();
int _wasgo_SceneState_wrapper_get_connection_flags(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_connection_method(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_connection_signal(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_connection_source(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_connection_target(int p_idx);
int _wasgo_SceneState_wrapper_get_node_count();
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_groups(int p_idx);
int _wasgo_SceneState_wrapper_get_node_index(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_instance(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_instance_placeholder(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_name(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_owner_path(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_path(int p_idx, bool p_for_parent);
int _wasgo_SceneState_wrapper_get_node_property_count(int p_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_property_name(int p_idx, int p_prop_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_property_value(int p_idx, int p_prop_idx);
WasGo::WasGoId _wasgo_SceneState_wrapper_get_node_type(int p_idx);
int _wasgo_SceneState_wrapper_is_node_instance_placeholder(int p_idx);
WasGo::WasGoId _wasgo_SceneTree_wrapper_call_group(WasGo::WasGoId p_group, WasGo::WasGoId p_method);
WasGo::WasGoId _wasgo_SceneTree_wrapper_call_group_flags(int p_flags, WasGo::WasGoId p_group, WasGo::WasGoId p_method);
WasGo::WasGoId _wasgo_SceneTree_wrapper_change_scene(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_SceneTree_wrapper_change_scene_to(WasGo::WasGoId p_packed_scene);
WasGo::WasGoId _wasgo_SceneTree_wrapper_create_timer(float p_time_sec, bool p_pause_mode_process);
WasGo::WasGoId _wasgo_SceneTree_wrapper_get_current_scene();
WasGo::WasGoId _wasgo_SceneTree_wrapper_get_edited_scene_root();
int _wasgo_SceneTree_wrapper_get_frame();
int _wasgo_SceneTree_wrapper_get_node_count();
WasGo::WasGoId _wasgo_SceneTree_wrapper_get_nodes_in_group(WasGo::WasGoId p_group);
WasGo::WasGoId _wasgo_SceneTree_wrapper_get_root();
int _wasgo_SceneTree_wrapper_has_group(WasGo::WasGoId p_name);
int _wasgo_SceneTree_wrapper_is_debugging_collisions_hint();
int _wasgo_SceneTree_wrapper_is_debugging_navigation_hint();
int _wasgo_SceneTree_wrapper_is_input_handled();
int _wasgo_SceneTree_wrapper_is_paused();
void _wasgo_SceneTree_wrapper_notify_group(WasGo::WasGoId p_group, int p_notification);
void _wasgo_SceneTree_wrapper_notify_group_flags(int p_call_flags, WasGo::WasGoId p_group, int p_notification);
void _wasgo_SceneTree_wrapper_queue_delete(WasGo::WasGoId p_obj);
void _wasgo_SceneTree_wrapper_quit(int p_exit_code);
WasGo::WasGoId _wasgo_SceneTree_wrapper_reload_current_scene();
void _wasgo_SceneTree_wrapper_set_auto_accept_quit(bool p_enabled);
void _wasgo_SceneTree_wrapper_set_current_scene(WasGo::WasGoId p_child_node);
void _wasgo_SceneTree_wrapper_set_debug_collisions_hint(bool p_enable);
void _wasgo_SceneTree_wrapper_set_debug_navigation_hint(bool p_enable);
void _wasgo_SceneTree_wrapper_set_edited_scene_root(WasGo::WasGoId p_scene);
void _wasgo_SceneTree_wrapper_set_group(WasGo::WasGoId p_group, WasGo::WasGoId p_property, WasGo::WasGoId p_value);
void _wasgo_SceneTree_wrapper_set_group_flags(int p_call_flags, WasGo::WasGoId p_group, WasGo::WasGoId p_property, WasGo::WasGoId p_value);
void _wasgo_SceneTree_wrapper_set_input_as_handled();
void _wasgo_SceneTree_wrapper_set_pause(bool p_enable);
void _wasgo_SceneTree_wrapper_set_quit_on_go_back(bool p_enabled);
void _wasgo_SceneTree_wrapper_set_screen_stretch(WasGo::WasGoId p_mode, WasGo::WasGoId p_aspect, WasGo::WasGoId p_minsize, float p_shrink);
float _wasgo_SceneTreeTimer_wrapper_get_time_left();
void _wasgo_SceneTreeTimer_wrapper_set_time_left(float p_time);
int _wasgo_Script_wrapper_can_instance();
WasGo::WasGoId _wasgo_Script_wrapper_get_base_script();
WasGo::WasGoId _wasgo_Script_wrapper_get_instance_base_type();
WasGo::WasGoId _wasgo_Script_wrapper_get_property_default_value(WasGo::WasGoId p_property);
WasGo::WasGoId _wasgo_Script_wrapper_get_script_constant_map();
WasGo::WasGoId _wasgo_Script_wrapper_get_script_method_list();
WasGo::WasGoId _wasgo_Script_wrapper_get_script_property_list();
WasGo::WasGoId _wasgo_Script_wrapper_get_script_signal_list();
WasGo::WasGoId _wasgo_Script_wrapper_get_source_code();
int _wasgo_Script_wrapper_has_script_signal(WasGo::WasGoId p_signal_name);
int _wasgo_Script_wrapper_has_source_code();
int _wasgo_Script_wrapper_instance_has(WasGo::WasGoId p_base_object);
int _wasgo_Script_wrapper_is_tool();
WasGo::WasGoId _wasgo_Script_wrapper_reload(bool p_keep_state);
void _wasgo_Script_wrapper_set_source_code(WasGo::WasGoId p_source);
WasGo::WasGoId _wasgo_SegmentShape2D_wrapper_get_a();
WasGo::WasGoId _wasgo_SegmentShape2D_wrapper_get_b();
void _wasgo_SegmentShape2D_wrapper_set_a(WasGo::WasGoId p_a);
void _wasgo_SegmentShape2D_wrapper_set_b(WasGo::WasGoId p_b);
WasGo::WasGoId _wasgo_Semaphore_wrapper_post();
WasGo::WasGoId _wasgo_Semaphore_wrapper_wait();
WasGo::WasGoId _wasgo_Shader_wrapper_get_code();
WasGo::WasGoId _wasgo_Shader_wrapper_get_custom_defines();
WasGo::WasGoId _wasgo_Shader_wrapper_get_default_texture_param(WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_Shader_wrapper_get_mode();
int _wasgo_Shader_wrapper_has_param(WasGo::WasGoId p_name);
void _wasgo_Shader_wrapper_set_code(WasGo::WasGoId p_code);
void _wasgo_Shader_wrapper_set_custom_defines(WasGo::WasGoId p_custom_defines);
void _wasgo_Shader_wrapper_set_default_texture_param(WasGo::WasGoId p_param, WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_ShaderMaterial_wrapper_get_shader();
WasGo::WasGoId _wasgo_ShaderMaterial_wrapper_get_shader_param(WasGo::WasGoId p_param);
void _wasgo_ShaderMaterial_wrapper_set_shader(WasGo::WasGoId p_shader);
void _wasgo_ShaderMaterial_wrapper_set_shader_param(WasGo::WasGoId p_param, WasGo::WasGoId p_value);
float _wasgo_Shape_wrapper_get_margin();
void _wasgo_Shape_wrapper_set_margin(float p_margin);
int _wasgo_Shape2D_wrapper_collide(WasGo::WasGoId p_local_xform, WasGo::WasGoId p_with_shape, WasGo::WasGoId p_shape_xform);
WasGo::WasGoId _wasgo_Shape2D_wrapper_collide_and_get_contacts(WasGo::WasGoId p_local_xform, WasGo::WasGoId p_with_shape, WasGo::WasGoId p_shape_xform);
int _wasgo_Shape2D_wrapper_collide_with_motion(WasGo::WasGoId p_local_xform, WasGo::WasGoId p_local_motion, WasGo::WasGoId p_with_shape, WasGo::WasGoId p_shape_xform, WasGo::WasGoId p_shape_motion);
WasGo::WasGoId _wasgo_Shape2D_wrapper_collide_with_motion_and_get_contacts(WasGo::WasGoId p_local_xform, WasGo::WasGoId p_local_motion, WasGo::WasGoId p_with_shape, WasGo::WasGoId p_shape_xform, WasGo::WasGoId p_shape_motion);
void _wasgo_Shape2D_wrapper_draw(WasGo::WasGoId p_canvas_item, WasGo::WasGoId p_color);
float _wasgo_Shape2D_wrapper_get_custom_solver_bias();
void _wasgo_Shape2D_wrapper_set_custom_solver_bias(float p_bias);
WasGo::WasGoId _wasgo_ShortCut_wrapper_get_as_text();
WasGo::WasGoId _wasgo_ShortCut_wrapper_get_shortcut();
int _wasgo_ShortCut_wrapper_is_shortcut(WasGo::WasGoId p_event);
int _wasgo_ShortCut_wrapper_is_valid();
void _wasgo_ShortCut_wrapper_set_shortcut(WasGo::WasGoId p_event);
void _wasgo_Skeleton_wrapper_add_bone(WasGo::WasGoId p_name);
void _wasgo_Skeleton_wrapper_bind_child_node_to_bone(int p_bone_idx, WasGo::WasGoId p_node);
void _wasgo_Skeleton_wrapper_clear_bones();
void _wasgo_Skeleton_wrapper_clear_bones_global_pose_override();
int _wasgo_Skeleton_wrapper_find_bone(WasGo::WasGoId p_name);
int _wasgo_Skeleton_wrapper_get_bone_count();
WasGo::WasGoId _wasgo_Skeleton_wrapper_get_bone_custom_pose(int p_bone_idx);
WasGo::WasGoId _wasgo_Skeleton_wrapper_get_bone_global_pose(int p_bone_idx);
WasGo::WasGoId _wasgo_Skeleton_wrapper_get_bone_name(int p_bone_idx);
int _wasgo_Skeleton_wrapper_get_bone_parent(int p_bone_idx);
WasGo::WasGoId _wasgo_Skeleton_wrapper_get_bone_pose(int p_bone_idx);
WasGo::WasGoId _wasgo_Skeleton_wrapper_get_bone_rest(int p_bone_idx);
WasGo::WasGoId _wasgo_Skeleton_wrapper_get_bound_child_nodes_to_bone(int p_bone_idx);
int _wasgo_Skeleton_wrapper_is_bone_rest_disabled(int p_bone_idx);
void _wasgo_Skeleton_wrapper_localize_rests();
void _wasgo_Skeleton_wrapper_physical_bones_add_collision_exception(WasGo::WasGoId p_exception);
void _wasgo_Skeleton_wrapper_physical_bones_remove_collision_exception(WasGo::WasGoId p_exception);
void _wasgo_Skeleton_wrapper_physical_bones_start_simulation(WasGo::WasGoId p_bones);
void _wasgo_Skeleton_wrapper_physical_bones_stop_simulation();
WasGo::WasGoId _wasgo_Skeleton_wrapper_register_skin(WasGo::WasGoId p_skin);
void _wasgo_Skeleton_wrapper_set_bone_custom_pose(int p_bone_idx, WasGo::WasGoId p_custom_pose);
void _wasgo_Skeleton_wrapper_set_bone_disable_rest(int p_bone_idx, bool p_disable);
void _wasgo_Skeleton_wrapper_set_bone_global_pose_override(int p_bone_idx, WasGo::WasGoId p_pose, float p_amount, bool p_persistent);
void _wasgo_Skeleton_wrapper_set_bone_parent(int p_bone_idx, int p_parent_idx);
void _wasgo_Skeleton_wrapper_set_bone_pose(int p_bone_idx, WasGo::WasGoId p_pose);
void _wasgo_Skeleton_wrapper_set_bone_rest(int p_bone_idx, WasGo::WasGoId p_rest);
void _wasgo_Skeleton_wrapper_unbind_child_node_from_bone(int p_bone_idx, WasGo::WasGoId p_node);
void _wasgo_Skeleton_wrapper_unparent_bone_and_rest(int p_bone_idx);
float _wasgo_SkeletonIK_wrapper_get_interpolation();
WasGo::WasGoId _wasgo_SkeletonIK_wrapper_get_magnet_position();
int _wasgo_SkeletonIK_wrapper_get_max_iterations();
float _wasgo_SkeletonIK_wrapper_get_min_distance();
WasGo::WasGoId _wasgo_SkeletonIK_wrapper_get_parent_skeleton();
WasGo::WasGoId _wasgo_SkeletonIK_wrapper_get_root_bone();
WasGo::WasGoId _wasgo_SkeletonIK_wrapper_get_target_node();
WasGo::WasGoId _wasgo_SkeletonIK_wrapper_get_target_transform();
WasGo::WasGoId _wasgo_SkeletonIK_wrapper_get_tip_bone();
int _wasgo_SkeletonIK_wrapper_is_override_tip_basis();
int _wasgo_SkeletonIK_wrapper_is_running();
int _wasgo_SkeletonIK_wrapper_is_using_magnet();
void _wasgo_SkeletonIK_wrapper_set_interpolation(float p_interpolation);
void _wasgo_SkeletonIK_wrapper_set_magnet_position(WasGo::WasGoId p_local_position);
void _wasgo_SkeletonIK_wrapper_set_max_iterations(int p_iterations);
void _wasgo_SkeletonIK_wrapper_set_min_distance(float p_min_distance);
void _wasgo_SkeletonIK_wrapper_set_override_tip_basis(bool p_override);
void _wasgo_SkeletonIK_wrapper_set_root_bone(WasGo::WasGoId p_root_bone);
void _wasgo_SkeletonIK_wrapper_set_target_node(WasGo::WasGoId p_node);
void _wasgo_SkeletonIK_wrapper_set_target_transform(WasGo::WasGoId p_target);
void _wasgo_SkeletonIK_wrapper_set_tip_bone(WasGo::WasGoId p_tip_bone);
void _wasgo_SkeletonIK_wrapper_set_use_magnet(bool p_use);
void _wasgo_SkeletonIK_wrapper_start(bool p_one_time);
void _wasgo_SkeletonIK_wrapper_stop();
void _wasgo_Skin_wrapper_add_bind(int p_bone, WasGo::WasGoId p_pose);
void _wasgo_Skin_wrapper_clear_binds();
int _wasgo_Skin_wrapper_get_bind_bone(int p_bind_index);
int _wasgo_Skin_wrapper_get_bind_count();
WasGo::WasGoId _wasgo_Skin_wrapper_get_bind_name(int p_bind_index);
WasGo::WasGoId _wasgo_Skin_wrapper_get_bind_pose(int p_bind_index);
void _wasgo_Skin_wrapper_set_bind_bone(int p_bind_index, int p_bone);
void _wasgo_Skin_wrapper_set_bind_count(int p_bind_count);
void _wasgo_Skin_wrapper_set_bind_name(int p_bind_index, WasGo::WasGoId p_name);
void _wasgo_Skin_wrapper_set_bind_pose(int p_bind_index, WasGo::WasGoId p_pose);
WasGo::WasGoId _wasgo_Sky_wrapper_get_radiance_size();
void _wasgo_Sky_wrapper_set_radiance_size(WasGo::WasGoId p_size);
float _wasgo_SliderJoint_wrapper_get_param(WasGo::WasGoId p_param);
void _wasgo_SliderJoint_wrapper_set_param(WasGo::WasGoId p_param, float p_value);
void _wasgo_Spatial_wrapper_force_update_transform();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_global_transform();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_parent_spatial();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_rotation();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_rotation_degrees();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_scale();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_transform();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_translation();
WasGo::WasGoId _wasgo_Spatial_wrapper_get_world();
int _wasgo_Spatial_wrapper_is_scale_disabled();
int _wasgo_Spatial_wrapper_is_set_as_toplevel();
void _wasgo_Spatial_wrapper_set_as_toplevel(bool p_enable);
void _wasgo_Spatial_wrapper_set_disable_scale(bool p_disable);
void _wasgo_Spatial_wrapper_set_global_transform(WasGo::WasGoId p_global);
void _wasgo_Spatial_wrapper_set_ignore_transform_notification(bool p_enabled);
void _wasgo_Spatial_wrapper_set_rotation(WasGo::WasGoId p_euler);
void _wasgo_Spatial_wrapper_set_rotation_degrees(WasGo::WasGoId p_euler_degrees);
void _wasgo_Spatial_wrapper_set_scale(WasGo::WasGoId p_scale);
void _wasgo_Spatial_wrapper_set_transform(WasGo::WasGoId p_local);
void _wasgo_Spatial_wrapper_set_translation(WasGo::WasGoId p_translation);
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_albedo();
float _wasgo_SpatialMaterial_wrapper_get_alpha_scissor_threshold();
float _wasgo_SpatialMaterial_wrapper_get_anisotropy();
float _wasgo_SpatialMaterial_wrapper_get_ao_light_affect();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_ao_texture_channel();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_billboard_mode();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_blend_mode();
float _wasgo_SpatialMaterial_wrapper_get_clearcoat();
float _wasgo_SpatialMaterial_wrapper_get_clearcoat_gloss();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_cull_mode();
int _wasgo_SpatialMaterial_wrapper_get_depth_deep_parallax_flip_binormal();
int _wasgo_SpatialMaterial_wrapper_get_depth_deep_parallax_flip_tangent();
int _wasgo_SpatialMaterial_wrapper_get_depth_deep_parallax_max_layers();
int _wasgo_SpatialMaterial_wrapper_get_depth_deep_parallax_min_layers();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_depth_draw_mode();
float _wasgo_SpatialMaterial_wrapper_get_depth_scale();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_detail_blend_mode();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_detail_uv();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_diffuse_mode();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_distance_fade();
float _wasgo_SpatialMaterial_wrapper_get_distance_fade_max_distance();
float _wasgo_SpatialMaterial_wrapper_get_distance_fade_min_distance();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_emission();
float _wasgo_SpatialMaterial_wrapper_get_emission_energy();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_emission_operator();
int _wasgo_SpatialMaterial_wrapper_get_feature(WasGo::WasGoId p_feature);
int _wasgo_SpatialMaterial_wrapper_get_flag(WasGo::WasGoId p_flag);
float _wasgo_SpatialMaterial_wrapper_get_grow();
float _wasgo_SpatialMaterial_wrapper_get_line_width();
float _wasgo_SpatialMaterial_wrapper_get_metallic();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_metallic_texture_channel();
float _wasgo_SpatialMaterial_wrapper_get_normal_scale();
int _wasgo_SpatialMaterial_wrapper_get_particles_anim_h_frames();
int _wasgo_SpatialMaterial_wrapper_get_particles_anim_loop();
int _wasgo_SpatialMaterial_wrapper_get_particles_anim_v_frames();
float _wasgo_SpatialMaterial_wrapper_get_point_size();
float _wasgo_SpatialMaterial_wrapper_get_proximity_fade_distance();
float _wasgo_SpatialMaterial_wrapper_get_refraction();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_refraction_texture_channel();
float _wasgo_SpatialMaterial_wrapper_get_rim();
float _wasgo_SpatialMaterial_wrapper_get_rim_tint();
float _wasgo_SpatialMaterial_wrapper_get_roughness();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_roughness_texture_channel();
float _wasgo_SpatialMaterial_wrapper_get_specular();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_specular_mode();
float _wasgo_SpatialMaterial_wrapper_get_subsurface_scattering_strength();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_texture(WasGo::WasGoId p_param);
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_transmission();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_uv1_offset();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_uv1_scale();
float _wasgo_SpatialMaterial_wrapper_get_uv1_triplanar_blend_sharpness();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_uv2_offset();
WasGo::WasGoId _wasgo_SpatialMaterial_wrapper_get_uv2_scale();
float _wasgo_SpatialMaterial_wrapper_get_uv2_triplanar_blend_sharpness();
int _wasgo_SpatialMaterial_wrapper_is_depth_deep_parallax_enabled();
int _wasgo_SpatialMaterial_wrapper_is_grow_enabled();
int _wasgo_SpatialMaterial_wrapper_is_proximity_fade_enabled();
void _wasgo_SpatialMaterial_wrapper_set_albedo(WasGo::WasGoId p_albedo);
void _wasgo_SpatialMaterial_wrapper_set_alpha_scissor_threshold(float p_threshold);
void _wasgo_SpatialMaterial_wrapper_set_anisotropy(float p_anisotropy);
void _wasgo_SpatialMaterial_wrapper_set_ao_light_affect(float p_amount);
void _wasgo_SpatialMaterial_wrapper_set_ao_texture_channel(WasGo::WasGoId p_channel);
void _wasgo_SpatialMaterial_wrapper_set_billboard_mode(WasGo::WasGoId p_mode);
void _wasgo_SpatialMaterial_wrapper_set_blend_mode(WasGo::WasGoId p_blend_mode);
void _wasgo_SpatialMaterial_wrapper_set_clearcoat(float p_clearcoat);
void _wasgo_SpatialMaterial_wrapper_set_clearcoat_gloss(float p_clearcoat_gloss);
void _wasgo_SpatialMaterial_wrapper_set_cull_mode(WasGo::WasGoId p_cull_mode);
void _wasgo_SpatialMaterial_wrapper_set_depth_deep_parallax(bool p_enable);
void _wasgo_SpatialMaterial_wrapper_set_depth_deep_parallax_flip_binormal(bool p_flip);
void _wasgo_SpatialMaterial_wrapper_set_depth_deep_parallax_flip_tangent(bool p_flip);
void _wasgo_SpatialMaterial_wrapper_set_depth_deep_parallax_max_layers(int p_layer);
void _wasgo_SpatialMaterial_wrapper_set_depth_deep_parallax_min_layers(int p_layer);
void _wasgo_SpatialMaterial_wrapper_set_depth_draw_mode(WasGo::WasGoId p_depth_draw_mode);
void _wasgo_SpatialMaterial_wrapper_set_depth_scale(float p_depth_scale);
void _wasgo_SpatialMaterial_wrapper_set_detail_blend_mode(WasGo::WasGoId p_detail_blend_mode);
void _wasgo_SpatialMaterial_wrapper_set_detail_uv(WasGo::WasGoId p_detail_uv);
void _wasgo_SpatialMaterial_wrapper_set_diffuse_mode(WasGo::WasGoId p_diffuse_mode);
void _wasgo_SpatialMaterial_wrapper_set_distance_fade(WasGo::WasGoId p_mode);
void _wasgo_SpatialMaterial_wrapper_set_distance_fade_max_distance(float p_distance);
void _wasgo_SpatialMaterial_wrapper_set_distance_fade_min_distance(float p_distance);
void _wasgo_SpatialMaterial_wrapper_set_emission(WasGo::WasGoId p_emission);
void _wasgo_SpatialMaterial_wrapper_set_emission_energy(float p_emission_energy);
void _wasgo_SpatialMaterial_wrapper_set_emission_operator(WasGo::WasGoId p_operator);
void _wasgo_SpatialMaterial_wrapper_set_feature(WasGo::WasGoId p_feature, bool p_enable);
void _wasgo_SpatialMaterial_wrapper_set_flag(WasGo::WasGoId p_flag, bool p_enable);
void _wasgo_SpatialMaterial_wrapper_set_grow(float p_amount);
void _wasgo_SpatialMaterial_wrapper_set_grow_enabled(bool p_enable);
void _wasgo_SpatialMaterial_wrapper_set_line_width(float p_line_width);
void _wasgo_SpatialMaterial_wrapper_set_metallic(float p_metallic);
void _wasgo_SpatialMaterial_wrapper_set_metallic_texture_channel(WasGo::WasGoId p_channel);
void _wasgo_SpatialMaterial_wrapper_set_normal_scale(float p_normal_scale);
void _wasgo_SpatialMaterial_wrapper_set_particles_anim_h_frames(int p_frames);
void _wasgo_SpatialMaterial_wrapper_set_particles_anim_loop(bool p_loop);
void _wasgo_SpatialMaterial_wrapper_set_particles_anim_v_frames(int p_frames);
void _wasgo_SpatialMaterial_wrapper_set_point_size(float p_point_size);
void _wasgo_SpatialMaterial_wrapper_set_proximity_fade(bool p_enabled);
void _wasgo_SpatialMaterial_wrapper_set_proximity_fade_distance(float p_distance);
void _wasgo_SpatialMaterial_wrapper_set_refraction(float p_refraction);
void _wasgo_SpatialMaterial_wrapper_set_refraction_texture_channel(WasGo::WasGoId p_channel);
void _wasgo_SpatialMaterial_wrapper_set_rim(float p_rim);
void _wasgo_SpatialMaterial_wrapper_set_rim_tint(float p_rim_tint);
void _wasgo_SpatialMaterial_wrapper_set_roughness(float p_roughness);
void _wasgo_SpatialMaterial_wrapper_set_roughness_texture_channel(WasGo::WasGoId p_channel);
void _wasgo_SpatialMaterial_wrapper_set_specular(float p_specular);
void _wasgo_SpatialMaterial_wrapper_set_specular_mode(WasGo::WasGoId p_specular_mode);
void _wasgo_SpatialMaterial_wrapper_set_subsurface_scattering_strength(float p_strength);
void _wasgo_SpatialMaterial_wrapper_set_texture(WasGo::WasGoId p_param, WasGo::WasGoId p_texture);
void _wasgo_SpatialMaterial_wrapper_set_transmission(WasGo::WasGoId p_transmission);
void _wasgo_SpatialMaterial_wrapper_set_uv1_offset(WasGo::WasGoId p_offset);
void _wasgo_SpatialMaterial_wrapper_set_uv1_scale(WasGo::WasGoId p_scale);
void _wasgo_SpatialMaterial_wrapper_set_uv1_triplanar_blend_sharpness(float p_sharpness);
void _wasgo_SpatialMaterial_wrapper_set_uv2_offset(WasGo::WasGoId p_offset);
void _wasgo_SpatialMaterial_wrapper_set_uv2_scale(WasGo::WasGoId p_scale);
void _wasgo_SpatialMaterial_wrapper_set_uv2_triplanar_blend_sharpness(float p_sharpness);
WasGo::WasGoId _wasgo_SpatialVelocityTracker_wrapper_get_tracked_linear_velocity();
int _wasgo_SpatialVelocityTracker_wrapper_is_tracking_physics_step();
void _wasgo_SpatialVelocityTracker_wrapper_reset(WasGo::WasGoId p_position);
void _wasgo_SpatialVelocityTracker_wrapper_set_track_physics_step(bool p_enable);
void _wasgo_SpatialVelocityTracker_wrapper_update_position(WasGo::WasGoId p_position);
float _wasgo_SphereMesh_wrapper_get_height();
int _wasgo_SphereMesh_wrapper_get_is_hemisphere();
int _wasgo_SphereMesh_wrapper_get_radial_segments();
float _wasgo_SphereMesh_wrapper_get_radius();
int _wasgo_SphereMesh_wrapper_get_rings();
void _wasgo_SphereMesh_wrapper_set_height(float p_height);
void _wasgo_SphereMesh_wrapper_set_is_hemisphere(bool p_is_hemisphere);
void _wasgo_SphereMesh_wrapper_set_radial_segments(int p_radial_segments);
void _wasgo_SphereMesh_wrapper_set_radius(float p_radius);
void _wasgo_SphereMesh_wrapper_set_rings(int p_rings);
float _wasgo_SphereShape_wrapper_get_radius();
void _wasgo_SphereShape_wrapper_set_radius(float p_radius);
void _wasgo_SpringArm_wrapper_add_excluded_object(WasGo::WasGoId p_RID);
void _wasgo_SpringArm_wrapper_clear_excluded_objects();
int _wasgo_SpringArm_wrapper_get_collision_mask();
float _wasgo_SpringArm_wrapper_get_hit_length();
float _wasgo_SpringArm_wrapper_get_length();
float _wasgo_SpringArm_wrapper_get_margin();
WasGo::WasGoId _wasgo_SpringArm_wrapper_get_shape();
int _wasgo_SpringArm_wrapper_remove_excluded_object(WasGo::WasGoId p_RID);
void _wasgo_SpringArm_wrapper_set_collision_mask(int p_mask);
void _wasgo_SpringArm_wrapper_set_length(float p_length);
void _wasgo_SpringArm_wrapper_set_margin(float p_margin);
void _wasgo_SpringArm_wrapper_set_shape(WasGo::WasGoId p_shape);
int _wasgo_Sprite_wrapper_get_frame();
WasGo::WasGoId _wasgo_Sprite_wrapper_get_frame_coords();
int _wasgo_Sprite_wrapper_get_hframes();
WasGo::WasGoId _wasgo_Sprite_wrapper_get_normal_map();
WasGo::WasGoId _wasgo_Sprite_wrapper_get_offset();
WasGo::WasGoId _wasgo_Sprite_wrapper_get_rect();
WasGo::WasGoId _wasgo_Sprite_wrapper_get_region_rect();
WasGo::WasGoId _wasgo_Sprite_wrapper_get_texture();
int _wasgo_Sprite_wrapper_get_vframes();
int _wasgo_Sprite_wrapper_is_centered();
int _wasgo_Sprite_wrapper_is_flipped_h();
int _wasgo_Sprite_wrapper_is_flipped_v();
int _wasgo_Sprite_wrapper_is_pixel_opaque(WasGo::WasGoId p_pos);
int _wasgo_Sprite_wrapper_is_region();
int _wasgo_Sprite_wrapper_is_region_filter_clip_enabled();
void _wasgo_Sprite_wrapper_set_centered(bool p_centered);
void _wasgo_Sprite_wrapper_set_flip_h(bool p_flip_h);
void _wasgo_Sprite_wrapper_set_flip_v(bool p_flip_v);
void _wasgo_Sprite_wrapper_set_frame(int p_frame);
void _wasgo_Sprite_wrapper_set_frame_coords(WasGo::WasGoId p_coords);
void _wasgo_Sprite_wrapper_set_hframes(int p_hframes);
void _wasgo_Sprite_wrapper_set_normal_map(WasGo::WasGoId p_normal_map);
void _wasgo_Sprite_wrapper_set_offset(WasGo::WasGoId p_offset);
void _wasgo_Sprite_wrapper_set_region(bool p_enabled);
void _wasgo_Sprite_wrapper_set_region_filter_clip(bool p_enabled);
void _wasgo_Sprite_wrapper_set_region_rect(WasGo::WasGoId p_rect);
void _wasgo_Sprite_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_Sprite_wrapper_set_vframes(int p_vframes);
int _wasgo_Sprite3D_wrapper_get_frame();
WasGo::WasGoId _wasgo_Sprite3D_wrapper_get_frame_coords();
int _wasgo_Sprite3D_wrapper_get_hframes();
WasGo::WasGoId _wasgo_Sprite3D_wrapper_get_region_rect();
WasGo::WasGoId _wasgo_Sprite3D_wrapper_get_texture();
int _wasgo_Sprite3D_wrapper_get_vframes();
int _wasgo_Sprite3D_wrapper_is_region();
void _wasgo_Sprite3D_wrapper_set_frame(int p_frame);
void _wasgo_Sprite3D_wrapper_set_frame_coords(WasGo::WasGoId p_coords);
void _wasgo_Sprite3D_wrapper_set_hframes(int p_hframes);
void _wasgo_Sprite3D_wrapper_set_region(bool p_enabled);
void _wasgo_Sprite3D_wrapper_set_region_rect(WasGo::WasGoId p_rect);
void _wasgo_Sprite3D_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_Sprite3D_wrapper_set_vframes(int p_vframes);
WasGo::WasGoId _wasgo_SpriteBase3D_wrapper_generate_triangle_mesh();
WasGo::WasGoId _wasgo_SpriteBase3D_wrapper_get_alpha_cut_mode();
WasGo::WasGoId _wasgo_SpriteBase3D_wrapper_get_axis();
WasGo::WasGoId _wasgo_SpriteBase3D_wrapper_get_billboard_mode();
int _wasgo_SpriteBase3D_wrapper_get_draw_flag(WasGo::WasGoId p_flag);
WasGo::WasGoId _wasgo_SpriteBase3D_wrapper_get_item_rect();
WasGo::WasGoId _wasgo_SpriteBase3D_wrapper_get_modulate();
WasGo::WasGoId _wasgo_SpriteBase3D_wrapper_get_offset();
float _wasgo_SpriteBase3D_wrapper_get_opacity();
float _wasgo_SpriteBase3D_wrapper_get_pixel_size();
int _wasgo_SpriteBase3D_wrapper_is_centered();
int _wasgo_SpriteBase3D_wrapper_is_flipped_h();
int _wasgo_SpriteBase3D_wrapper_is_flipped_v();
void _wasgo_SpriteBase3D_wrapper_set_alpha_cut_mode(WasGo::WasGoId p_mode);
void _wasgo_SpriteBase3D_wrapper_set_axis(WasGo::WasGoId p_axis);
void _wasgo_SpriteBase3D_wrapper_set_billboard_mode(WasGo::WasGoId p_mode);
void _wasgo_SpriteBase3D_wrapper_set_centered(bool p_centered);
void _wasgo_SpriteBase3D_wrapper_set_draw_flag(WasGo::WasGoId p_flag, bool p_enabled);
void _wasgo_SpriteBase3D_wrapper_set_flip_h(bool p_flip_h);
void _wasgo_SpriteBase3D_wrapper_set_flip_v(bool p_flip_v);
void _wasgo_SpriteBase3D_wrapper_set_modulate(WasGo::WasGoId p_modulate);
void _wasgo_SpriteBase3D_wrapper_set_offset(WasGo::WasGoId p_offset);
void _wasgo_SpriteBase3D_wrapper_set_opacity(float p_opacity);
void _wasgo_SpriteBase3D_wrapper_set_pixel_size(float p_pixel_size);
void _wasgo_SpriteFrames_wrapper_add_animation(WasGo::WasGoId p_anim);
void _wasgo_SpriteFrames_wrapper_add_frame(WasGo::WasGoId p_anim, WasGo::WasGoId p_frame, int p_at_position);
void _wasgo_SpriteFrames_wrapper_clear(WasGo::WasGoId p_anim);
void _wasgo_SpriteFrames_wrapper_clear_all();
int _wasgo_SpriteFrames_wrapper_get_animation_loop(WasGo::WasGoId p_anim);
WasGo::WasGoId _wasgo_SpriteFrames_wrapper_get_animation_names();
float _wasgo_SpriteFrames_wrapper_get_animation_speed(WasGo::WasGoId p_anim);
WasGo::WasGoId _wasgo_SpriteFrames_wrapper_get_frame(WasGo::WasGoId p_anim, int p_idx);
int _wasgo_SpriteFrames_wrapper_get_frame_count(WasGo::WasGoId p_anim);
int _wasgo_SpriteFrames_wrapper_has_animation(WasGo::WasGoId p_anim);
void _wasgo_SpriteFrames_wrapper_remove_animation(WasGo::WasGoId p_anim);
void _wasgo_SpriteFrames_wrapper_remove_frame(WasGo::WasGoId p_anim, int p_idx);
void _wasgo_SpriteFrames_wrapper_rename_animation(WasGo::WasGoId p_anim, WasGo::WasGoId p_newname);
void _wasgo_SpriteFrames_wrapper_set_animation_loop(WasGo::WasGoId p_anim, bool p_loop);
void _wasgo_SpriteFrames_wrapper_set_animation_speed(WasGo::WasGoId p_anim, float p_speed);
void _wasgo_SpriteFrames_wrapper_set_frame(WasGo::WasGoId p_anim, int p_idx, WasGo::WasGoId p_txt);
float _wasgo_StaticBody_wrapper_get_bounce();
WasGo::WasGoId _wasgo_StaticBody_wrapper_get_constant_angular_velocity();
WasGo::WasGoId _wasgo_StaticBody_wrapper_get_constant_linear_velocity();
float _wasgo_StaticBody_wrapper_get_friction();
WasGo::WasGoId _wasgo_StaticBody_wrapper_get_physics_material_override();
void _wasgo_StaticBody_wrapper_set_bounce(float p_bounce);
void _wasgo_StaticBody_wrapper_set_constant_angular_velocity(WasGo::WasGoId p_vel);
void _wasgo_StaticBody_wrapper_set_constant_linear_velocity(WasGo::WasGoId p_vel);
void _wasgo_StaticBody_wrapper_set_friction(float p_friction);
void _wasgo_StaticBody_wrapper_set_physics_material_override(WasGo::WasGoId p_physics_material_override);
float _wasgo_StaticBody2D_wrapper_get_bounce();
float _wasgo_StaticBody2D_wrapper_get_constant_angular_velocity();
WasGo::WasGoId _wasgo_StaticBody2D_wrapper_get_constant_linear_velocity();
float _wasgo_StaticBody2D_wrapper_get_friction();
WasGo::WasGoId _wasgo_StaticBody2D_wrapper_get_physics_material_override();
void _wasgo_StaticBody2D_wrapper_set_bounce(float p_bounce);
void _wasgo_StaticBody2D_wrapper_set_constant_angular_velocity(float p_vel);
void _wasgo_StaticBody2D_wrapper_set_constant_linear_velocity(WasGo::WasGoId p_vel);
void _wasgo_StaticBody2D_wrapper_set_friction(float p_friction);
void _wasgo_StaticBody2D_wrapper_set_physics_material_override(WasGo::WasGoId p_physics_material_override);
int _wasgo_StreamPeer_wrapper_get_16();
int _wasgo_StreamPeer_wrapper_get_32();
int _wasgo_StreamPeer_wrapper_get_64();
int _wasgo_StreamPeer_wrapper_get_8();
int _wasgo_StreamPeer_wrapper_get_available_bytes();
WasGo::WasGoId _wasgo_StreamPeer_wrapper_get_data(int p_bytes);
float _wasgo_StreamPeer_wrapper_get_double();
float _wasgo_StreamPeer_wrapper_get_float();
WasGo::WasGoId _wasgo_StreamPeer_wrapper_get_partial_data(int p_bytes);
WasGo::WasGoId _wasgo_StreamPeer_wrapper_get_string(int p_bytes);
int _wasgo_StreamPeer_wrapper_get_u16();
int _wasgo_StreamPeer_wrapper_get_u32();
int _wasgo_StreamPeer_wrapper_get_u64();
int _wasgo_StreamPeer_wrapper_get_u8();
WasGo::WasGoId _wasgo_StreamPeer_wrapper_get_utf8_string(int p_bytes);
WasGo::WasGoId _wasgo_StreamPeer_wrapper_get_var(bool p_allow_objects);
int _wasgo_StreamPeer_wrapper_is_big_endian_enabled();
void _wasgo_StreamPeer_wrapper_put_16(int p_value);
void _wasgo_StreamPeer_wrapper_put_32(int p_value);
void _wasgo_StreamPeer_wrapper_put_64(int p_value);
void _wasgo_StreamPeer_wrapper_put_8(int p_value);
WasGo::WasGoId _wasgo_StreamPeer_wrapper_put_data(WasGo::WasGoId p_data);
void _wasgo_StreamPeer_wrapper_put_double(float p_value);
void _wasgo_StreamPeer_wrapper_put_float(float p_value);
WasGo::WasGoId _wasgo_StreamPeer_wrapper_put_partial_data(WasGo::WasGoId p_data);
void _wasgo_StreamPeer_wrapper_put_string(WasGo::WasGoId p_value);
void _wasgo_StreamPeer_wrapper_put_u16(int p_value);
void _wasgo_StreamPeer_wrapper_put_u32(int p_value);
void _wasgo_StreamPeer_wrapper_put_u64(int p_value);
void _wasgo_StreamPeer_wrapper_put_u8(int p_value);
void _wasgo_StreamPeer_wrapper_put_utf8_string(WasGo::WasGoId p_value);
void _wasgo_StreamPeer_wrapper_put_var(WasGo::WasGoId p_value, bool p_full_objects);
void _wasgo_StreamPeer_wrapper_set_big_endian(bool p_enable);
void _wasgo_StreamPeerBuffer_wrapper_clear();
WasGo::WasGoId _wasgo_StreamPeerBuffer_wrapper_duplicate();
WasGo::WasGoId _wasgo_StreamPeerBuffer_wrapper_get_data_array();
int _wasgo_StreamPeerBuffer_wrapper_get_position();
int _wasgo_StreamPeerBuffer_wrapper_get_size();
void _wasgo_StreamPeerBuffer_wrapper_resize(int p_size);
void _wasgo_StreamPeerBuffer_wrapper_seek(int p_position);
void _wasgo_StreamPeerBuffer_wrapper_set_data_array(WasGo::WasGoId p_data);
WasGo::WasGoId _wasgo_StreamPeerSSL_wrapper_accept_stream(WasGo::WasGoId p_stream, WasGo::WasGoId p_private_key, WasGo::WasGoId p_certificate, WasGo::WasGoId p_chain);
WasGo::WasGoId _wasgo_StreamPeerSSL_wrapper_connect_to_stream(WasGo::WasGoId p_stream, bool p_validate_certs, WasGo::WasGoId p_for_hostname, WasGo::WasGoId p_valid_certificate);
void _wasgo_StreamPeerSSL_wrapper_disconnect_from_stream();
WasGo::WasGoId _wasgo_StreamPeerSSL_wrapper_get_status();
int _wasgo_StreamPeerSSL_wrapper_is_blocking_handshake_enabled();
void _wasgo_StreamPeerSSL_wrapper_poll();
void _wasgo_StreamPeerSSL_wrapper_set_blocking_handshake_enabled(bool p_enabled);
WasGo::WasGoId _wasgo_StreamPeerTCP_wrapper_connect_to_host(WasGo::WasGoId p_host, int p_port);
void _wasgo_StreamPeerTCP_wrapper_disconnect_from_host();
WasGo::WasGoId _wasgo_StreamPeerTCP_wrapper_get_connected_host();
int _wasgo_StreamPeerTCP_wrapper_get_connected_port();
WasGo::WasGoId _wasgo_StreamPeerTCP_wrapper_get_status();
int _wasgo_StreamPeerTCP_wrapper_is_connected_to_host();
void _wasgo_StreamPeerTCP_wrapper_set_no_delay(bool p_enabled);
WasGo::WasGoId _wasgo_StreamTexture_wrapper_get_load_path();
WasGo::WasGoId _wasgo_StreamTexture_wrapper_load(WasGo::WasGoId p_path);
void _wasgo_StyleBox_wrapper_draw(WasGo::WasGoId p_canvas_item, WasGo::WasGoId p_rect);
WasGo::WasGoId _wasgo_StyleBox_wrapper_get_center_size();
WasGo::WasGoId _wasgo_StyleBox_wrapper_get_current_item_drawn();
float _wasgo_StyleBox_wrapper_get_default_margin(WasGo::WasGoId p_margin);
float _wasgo_StyleBox_wrapper_get_margin(WasGo::WasGoId p_margin);
WasGo::WasGoId _wasgo_StyleBox_wrapper_get_minimum_size();
WasGo::WasGoId _wasgo_StyleBox_wrapper_get_offset();
void _wasgo_StyleBox_wrapper_set_default_margin(WasGo::WasGoId p_margin, float p_offset);
int _wasgo_StyleBox_wrapper_test_mask(WasGo::WasGoId p_point, WasGo::WasGoId p_rect);
int _wasgo_StyleBoxFlat_wrapper_get_aa_size();
WasGo::WasGoId _wasgo_StyleBoxFlat_wrapper_get_bg_color();
int _wasgo_StyleBoxFlat_wrapper_get_border_blend();
WasGo::WasGoId _wasgo_StyleBoxFlat_wrapper_get_border_color();
int _wasgo_StyleBoxFlat_wrapper_get_border_width(WasGo::WasGoId p_margin);
int _wasgo_StyleBoxFlat_wrapper_get_border_width_min();
int _wasgo_StyleBoxFlat_wrapper_get_corner_detail();
int _wasgo_StyleBoxFlat_wrapper_get_corner_radius(WasGo::WasGoId p_corner);
float _wasgo_StyleBoxFlat_wrapper_get_expand_margin(WasGo::WasGoId p_margin);
WasGo::WasGoId _wasgo_StyleBoxFlat_wrapper_get_shadow_color();
WasGo::WasGoId _wasgo_StyleBoxFlat_wrapper_get_shadow_offset();
int _wasgo_StyleBoxFlat_wrapper_get_shadow_size();
int _wasgo_StyleBoxFlat_wrapper_is_anti_aliased();
int _wasgo_StyleBoxFlat_wrapper_is_draw_center_enabled();
void _wasgo_StyleBoxFlat_wrapper_set_aa_size(int p_size);
void _wasgo_StyleBoxFlat_wrapper_set_anti_aliased(bool p_anti_aliased);
void _wasgo_StyleBoxFlat_wrapper_set_bg_color(WasGo::WasGoId p_color);
void _wasgo_StyleBoxFlat_wrapper_set_border_blend(bool p_blend);
void _wasgo_StyleBoxFlat_wrapper_set_border_color(WasGo::WasGoId p_color);
void _wasgo_StyleBoxFlat_wrapper_set_border_width(WasGo::WasGoId p_margin, int p_width);
void _wasgo_StyleBoxFlat_wrapper_set_border_width_all(int p_width);
void _wasgo_StyleBoxFlat_wrapper_set_corner_detail(int p_detail);
void _wasgo_StyleBoxFlat_wrapper_set_corner_radius(WasGo::WasGoId p_corner, int p_radius);
void _wasgo_StyleBoxFlat_wrapper_set_corner_radius_all(int p_radius);
void _wasgo_StyleBoxFlat_wrapper_set_corner_radius_individual(int p_radius_top_left, int p_radius_top_right, int p_radius_bottom_right, int p_radius_bottom_left);
void _wasgo_StyleBoxFlat_wrapper_set_draw_center(bool p_draw_center);
void _wasgo_StyleBoxFlat_wrapper_set_expand_margin(WasGo::WasGoId p_margin, float p_size);
void _wasgo_StyleBoxFlat_wrapper_set_expand_margin_all(float p_size);
void _wasgo_StyleBoxFlat_wrapper_set_expand_margin_individual(float p_size_left, float p_size_top, float p_size_right, float p_size_bottom);
void _wasgo_StyleBoxFlat_wrapper_set_shadow_color(WasGo::WasGoId p_color);
void _wasgo_StyleBoxFlat_wrapper_set_shadow_offset(WasGo::WasGoId p_offset);
void _wasgo_StyleBoxFlat_wrapper_set_shadow_size(int p_size);
WasGo::WasGoId _wasgo_StyleBoxLine_wrapper_get_color();
float _wasgo_StyleBoxLine_wrapper_get_grow_begin();
float _wasgo_StyleBoxLine_wrapper_get_grow_end();
int _wasgo_StyleBoxLine_wrapper_get_thickness();
int _wasgo_StyleBoxLine_wrapper_is_vertical();
void _wasgo_StyleBoxLine_wrapper_set_color(WasGo::WasGoId p_color);
void _wasgo_StyleBoxLine_wrapper_set_grow_begin(float p_offset);
void _wasgo_StyleBoxLine_wrapper_set_grow_end(float p_offset);
void _wasgo_StyleBoxLine_wrapper_set_thickness(int p_thickness);
void _wasgo_StyleBoxLine_wrapper_set_vertical(bool p_vertical);
float _wasgo_StyleBoxTexture_wrapper_get_expand_margin_size(WasGo::WasGoId p_margin);
WasGo::WasGoId _wasgo_StyleBoxTexture_wrapper_get_h_axis_stretch_mode();
float _wasgo_StyleBoxTexture_wrapper_get_margin_size(WasGo::WasGoId p_margin);
WasGo::WasGoId _wasgo_StyleBoxTexture_wrapper_get_modulate();
WasGo::WasGoId _wasgo_StyleBoxTexture_wrapper_get_normal_map();
WasGo::WasGoId _wasgo_StyleBoxTexture_wrapper_get_region_rect();
WasGo::WasGoId _wasgo_StyleBoxTexture_wrapper_get_texture();
WasGo::WasGoId _wasgo_StyleBoxTexture_wrapper_get_v_axis_stretch_mode();
int _wasgo_StyleBoxTexture_wrapper_is_draw_center_enabled();
void _wasgo_StyleBoxTexture_wrapper_set_draw_center(bool p_enable);
void _wasgo_StyleBoxTexture_wrapper_set_expand_margin_all(float p_size);
void _wasgo_StyleBoxTexture_wrapper_set_expand_margin_individual(float p_size_left, float p_size_top, float p_size_right, float p_size_bottom);
void _wasgo_StyleBoxTexture_wrapper_set_expand_margin_size(WasGo::WasGoId p_margin, float p_size);
void _wasgo_StyleBoxTexture_wrapper_set_h_axis_stretch_mode(WasGo::WasGoId p_mode);
void _wasgo_StyleBoxTexture_wrapper_set_margin_size(WasGo::WasGoId p_margin, float p_size);
void _wasgo_StyleBoxTexture_wrapper_set_modulate(WasGo::WasGoId p_color);
void _wasgo_StyleBoxTexture_wrapper_set_normal_map(WasGo::WasGoId p_normal_map);
void _wasgo_StyleBoxTexture_wrapper_set_region_rect(WasGo::WasGoId p_region);
void _wasgo_StyleBoxTexture_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_StyleBoxTexture_wrapper_set_v_axis_stretch_mode(WasGo::WasGoId p_mode);
void _wasgo_SurfaceTool_wrapper_add_bones(WasGo::WasGoId p_bones);
void _wasgo_SurfaceTool_wrapper_add_color(WasGo::WasGoId p_color);
void _wasgo_SurfaceTool_wrapper_add_index(int p_index);
void _wasgo_SurfaceTool_wrapper_add_normal(WasGo::WasGoId p_normal);
void _wasgo_SurfaceTool_wrapper_add_smooth_group(bool p_smooth);
void _wasgo_SurfaceTool_wrapper_add_tangent(WasGo::WasGoId p_tangent);
void _wasgo_SurfaceTool_wrapper_add_triangle_fan(WasGo::WasGoId p_vertices, WasGo::WasGoId p_uvs, WasGo::WasGoId p_colors, WasGo::WasGoId p_uv2s, WasGo::WasGoId p_normals, WasGo::WasGoId p_tangents);
void _wasgo_SurfaceTool_wrapper_add_uv(WasGo::WasGoId p_uv);
void _wasgo_SurfaceTool_wrapper_add_uv2(WasGo::WasGoId p_uv2);
void _wasgo_SurfaceTool_wrapper_add_vertex(WasGo::WasGoId p_vertex);
void _wasgo_SurfaceTool_wrapper_add_weights(WasGo::WasGoId p_weights);
void _wasgo_SurfaceTool_wrapper_append_from(WasGo::WasGoId p_existing, int p_surface, WasGo::WasGoId p_transform);
void _wasgo_SurfaceTool_wrapper_begin(WasGo::WasGoId p_primitive);
void _wasgo_SurfaceTool_wrapper_clear();
WasGo::WasGoId _wasgo_SurfaceTool_wrapper_commit(WasGo::WasGoId p_existing, int p_flags);
WasGo::WasGoId _wasgo_SurfaceTool_wrapper_commit_to_arrays();
void _wasgo_SurfaceTool_wrapper_create_from(WasGo::WasGoId p_existing, int p_surface);
void _wasgo_SurfaceTool_wrapper_create_from_blend_shape(WasGo::WasGoId p_existing, int p_surface, WasGo::WasGoId p_blend_shape);
void _wasgo_SurfaceTool_wrapper_deindex();
void _wasgo_SurfaceTool_wrapper_generate_normals(bool p_flip);
void _wasgo_SurfaceTool_wrapper_generate_tangents();
void _wasgo_SurfaceTool_wrapper_index();
void _wasgo_SurfaceTool_wrapper_set_material(WasGo::WasGoId p_material);
int _wasgo_TCP_Server_wrapper_is_connection_available();
int _wasgo_TCP_Server_wrapper_is_listening();
WasGo::WasGoId _wasgo_TCP_Server_wrapper_listen(int p_port, WasGo::WasGoId p_bind_address);
void _wasgo_TCP_Server_wrapper_stop();
WasGo::WasGoId _wasgo_TCP_Server_wrapper_take_connection();
void _wasgo_Texture_wrapper_draw(WasGo::WasGoId p_canvas_item, WasGo::WasGoId p_position, WasGo::WasGoId p_modulate, bool p_transpose, WasGo::WasGoId p_normal_map);
void _wasgo_Texture_wrapper_draw_rect(WasGo::WasGoId p_canvas_item, WasGo::WasGoId p_rect, bool p_tile, WasGo::WasGoId p_modulate, bool p_transpose, WasGo::WasGoId p_normal_map);
void _wasgo_Texture_wrapper_draw_rect_region(WasGo::WasGoId p_canvas_item, WasGo::WasGoId p_rect, WasGo::WasGoId p_src_rect, WasGo::WasGoId p_modulate, bool p_transpose, WasGo::WasGoId p_normal_map, bool p_clip_uv);
WasGo::WasGoId _wasgo_Texture_wrapper_get_data();
int _wasgo_Texture_wrapper_get_flags();
int _wasgo_Texture_wrapper_get_height();
WasGo::WasGoId _wasgo_Texture_wrapper_get_size();
int _wasgo_Texture_wrapper_get_width();
int _wasgo_Texture_wrapper_has_alpha();
void _wasgo_Texture_wrapper_set_flags(int p_flags);
WasGo::WasGoId _wasgo_TextureButton_wrapper_get_click_mask();
WasGo::WasGoId _wasgo_TextureButton_wrapper_get_disabled_texture();
int _wasgo_TextureButton_wrapper_get_expand();
WasGo::WasGoId _wasgo_TextureButton_wrapper_get_focused_texture();
WasGo::WasGoId _wasgo_TextureButton_wrapper_get_hover_texture();
WasGo::WasGoId _wasgo_TextureButton_wrapper_get_normal_texture();
WasGo::WasGoId _wasgo_TextureButton_wrapper_get_pressed_texture();
WasGo::WasGoId _wasgo_TextureButton_wrapper_get_stretch_mode();
void _wasgo_TextureButton_wrapper_set_click_mask(WasGo::WasGoId p_mask);
void _wasgo_TextureButton_wrapper_set_disabled_texture(WasGo::WasGoId p_texture);
void _wasgo_TextureButton_wrapper_set_expand(bool p_p_expand);
void _wasgo_TextureButton_wrapper_set_focused_texture(WasGo::WasGoId p_texture);
void _wasgo_TextureButton_wrapper_set_hover_texture(WasGo::WasGoId p_texture);
void _wasgo_TextureButton_wrapper_set_normal_texture(WasGo::WasGoId p_texture);
void _wasgo_TextureButton_wrapper_set_pressed_texture(WasGo::WasGoId p_texture);
void _wasgo_TextureButton_wrapper_set_stretch_mode(WasGo::WasGoId p_p_mode);
void _wasgo_TextureLayered_wrapper_create(int p_width, int p_height, int p_depth, WasGo::WasGoId p_format, int p_flags);
int _wasgo_TextureLayered_wrapper_get_depth();
int _wasgo_TextureLayered_wrapper_get_flags();
WasGo::WasGoId _wasgo_TextureLayered_wrapper_get_format();
int _wasgo_TextureLayered_wrapper_get_height();
WasGo::WasGoId _wasgo_TextureLayered_wrapper_get_layer_data(int p_layer);
int _wasgo_TextureLayered_wrapper_get_width();
void _wasgo_TextureLayered_wrapper_set_data_partial(WasGo::WasGoId p_image, int p_x_offset, int p_y_offset, int p_layer, int p_mipmap);
void _wasgo_TextureLayered_wrapper_set_flags(int p_flags);
void _wasgo_TextureLayered_wrapper_set_layer_data(WasGo::WasGoId p_image, int p_layer);
float _wasgo_TextureProgress_wrapper_get_fill_degrees();
int _wasgo_TextureProgress_wrapper_get_fill_mode();
int _wasgo_TextureProgress_wrapper_get_nine_patch_stretch();
WasGo::WasGoId _wasgo_TextureProgress_wrapper_get_over_texture();
WasGo::WasGoId _wasgo_TextureProgress_wrapper_get_progress_texture();
WasGo::WasGoId _wasgo_TextureProgress_wrapper_get_radial_center_offset();
float _wasgo_TextureProgress_wrapper_get_radial_initial_angle();
int _wasgo_TextureProgress_wrapper_get_stretch_margin(WasGo::WasGoId p_margin);
WasGo::WasGoId _wasgo_TextureProgress_wrapper_get_tint_over();
WasGo::WasGoId _wasgo_TextureProgress_wrapper_get_tint_progress();
WasGo::WasGoId _wasgo_TextureProgress_wrapper_get_tint_under();
WasGo::WasGoId _wasgo_TextureProgress_wrapper_get_under_texture();
void _wasgo_TextureProgress_wrapper_set_fill_degrees(float p_mode);
void _wasgo_TextureProgress_wrapper_set_fill_mode(int p_mode);
void _wasgo_TextureProgress_wrapper_set_nine_patch_stretch(bool p_stretch);
void _wasgo_TextureProgress_wrapper_set_over_texture(WasGo::WasGoId p_tex);
void _wasgo_TextureProgress_wrapper_set_progress_texture(WasGo::WasGoId p_tex);
void _wasgo_TextureProgress_wrapper_set_radial_center_offset(WasGo::WasGoId p_mode);
void _wasgo_TextureProgress_wrapper_set_radial_initial_angle(float p_mode);
void _wasgo_TextureProgress_wrapper_set_stretch_margin(WasGo::WasGoId p_margin, int p_value);
void _wasgo_TextureProgress_wrapper_set_tint_over(WasGo::WasGoId p_tint);
void _wasgo_TextureProgress_wrapper_set_tint_progress(WasGo::WasGoId p_tint);
void _wasgo_TextureProgress_wrapper_set_tint_under(WasGo::WasGoId p_tint);
void _wasgo_TextureProgress_wrapper_set_under_texture(WasGo::WasGoId p_tex);
WasGo::WasGoId _wasgo_TextureRect_wrapper_get_stretch_mode();
WasGo::WasGoId _wasgo_TextureRect_wrapper_get_texture();
int _wasgo_TextureRect_wrapper_has_expand();
int _wasgo_TextureRect_wrapper_is_flipped_h();
int _wasgo_TextureRect_wrapper_is_flipped_v();
void _wasgo_TextureRect_wrapper_set_expand(bool p_enable);
void _wasgo_TextureRect_wrapper_set_flip_h(bool p_enable);
void _wasgo_TextureRect_wrapper_set_flip_v(bool p_enable);
void _wasgo_TextureRect_wrapper_set_stretch_mode(WasGo::WasGoId p_stretch_mode);
void _wasgo_TextureRect_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_Theme_wrapper_clear();
void _wasgo_Theme_wrapper_clear_color(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
void _wasgo_Theme_wrapper_clear_constant(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
void _wasgo_Theme_wrapper_clear_font(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
void _wasgo_Theme_wrapper_clear_icon(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
void _wasgo_Theme_wrapper_clear_stylebox(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_color(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_color_list(WasGo::WasGoId p_node_type);
int _wasgo_Theme_wrapper_get_constant(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_constant_list(WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_default_font();
WasGo::WasGoId _wasgo_Theme_wrapper_get_font(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_font_list(WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_icon(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_icon_list(WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_stylebox(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_stylebox_list(WasGo::WasGoId p_node_type);
WasGo::WasGoId _wasgo_Theme_wrapper_get_stylebox_types();
WasGo::WasGoId _wasgo_Theme_wrapper_get_type_list(WasGo::WasGoId p_node_type);
int _wasgo_Theme_wrapper_has_color(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
int _wasgo_Theme_wrapper_has_constant(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
int _wasgo_Theme_wrapper_has_font(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
int _wasgo_Theme_wrapper_has_icon(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
int _wasgo_Theme_wrapper_has_stylebox(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type);
void _wasgo_Theme_wrapper_set_color(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type, WasGo::WasGoId p_color);
void _wasgo_Theme_wrapper_set_constant(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type, int p_constant);
void _wasgo_Theme_wrapper_set_default_font(WasGo::WasGoId p_font);
void _wasgo_Theme_wrapper_set_font(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type, WasGo::WasGoId p_font);
void _wasgo_Theme_wrapper_set_icon(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type, WasGo::WasGoId p_texture);
void _wasgo_Theme_wrapper_set_stylebox(WasGo::WasGoId p_name, WasGo::WasGoId p_node_type, WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_Thread_wrapper_get_id();
int _wasgo_Thread_wrapper_is_active();
WasGo::WasGoId _wasgo_Thread_wrapper_start(WasGo::WasGoId p_instance, WasGo::WasGoId p_method, WasGo::WasGoId p_userdata, WasGo::WasGoId p_priority);
WasGo::WasGoId _wasgo_Thread_wrapper_wait_to_finish();
WasGo::WasGoId _wasgo_TileMap_wrapper_get_cell_size();
WasGo::WasGoId _wasgo_TileMap_wrapper_get_custom_transform();
WasGo::WasGoId _wasgo_TileMap_wrapper_get_half_offset();
WasGo::WasGoId _wasgo_TileMap_wrapper_get_mode();
WasGo::WasGoId _wasgo_TileMap_wrapper_get_tileset();
void _wasgo_TileMap_wrapper_set_cell_size(WasGo::WasGoId p_size);
void _wasgo_TileMap_wrapper_set_custom_transform(WasGo::WasGoId p_custom_transform);
void _wasgo_TileMap_wrapper_set_half_offset(WasGo::WasGoId p_half_offset);
void _wasgo_TileMap_wrapper_set_mode(WasGo::WasGoId p_mode);
void _wasgo_TileMap_wrapper_set_tileset(WasGo::WasGoId p_tileset);
float _wasgo_Timer_wrapper_get_time_left();
WasGo::WasGoId _wasgo_Timer_wrapper_get_timer_process_mode();
float _wasgo_Timer_wrapper_get_wait_time();
int _wasgo_Timer_wrapper_has_autostart();
int _wasgo_Timer_wrapper_is_one_shot();
int _wasgo_Timer_wrapper_is_paused();
int _wasgo_Timer_wrapper_is_stopped();
void _wasgo_Timer_wrapper_set_autostart(bool p_enable);
void _wasgo_Timer_wrapper_set_one_shot(bool p_enable);
void _wasgo_Timer_wrapper_set_paused(bool p_paused);
void _wasgo_Timer_wrapper_set_timer_process_mode(WasGo::WasGoId p_mode);
void _wasgo_Timer_wrapper_set_wait_time(float p_time_sec);
void _wasgo_Timer_wrapper_start(float p_time_sec);
void _wasgo_Timer_wrapper_stop();
WasGo::WasGoId _wasgo_TouchScreenButton_wrapper_get_action();
WasGo::WasGoId _wasgo_TouchScreenButton_wrapper_get_bitmask();
WasGo::WasGoId _wasgo_TouchScreenButton_wrapper_get_shape();
WasGo::WasGoId _wasgo_TouchScreenButton_wrapper_get_texture();
WasGo::WasGoId _wasgo_TouchScreenButton_wrapper_get_texture_pressed();
WasGo::WasGoId _wasgo_TouchScreenButton_wrapper_get_visibility_mode();
int _wasgo_TouchScreenButton_wrapper_is_passby_press_enabled();
int _wasgo_TouchScreenButton_wrapper_is_pressed();
int _wasgo_TouchScreenButton_wrapper_is_shape_centered();
int _wasgo_TouchScreenButton_wrapper_is_shape_visible();
void _wasgo_TouchScreenButton_wrapper_set_action(WasGo::WasGoId p_action);
void _wasgo_TouchScreenButton_wrapper_set_bitmask(WasGo::WasGoId p_bitmask);
void _wasgo_TouchScreenButton_wrapper_set_passby_press(bool p_enabled);
void _wasgo_TouchScreenButton_wrapper_set_shape(WasGo::WasGoId p_shape);
void _wasgo_TouchScreenButton_wrapper_set_shape_centered(bool p_bool);
void _wasgo_TouchScreenButton_wrapper_set_shape_visible(bool p_bool);
void _wasgo_TouchScreenButton_wrapper_set_texture(WasGo::WasGoId p_texture);
void _wasgo_TouchScreenButton_wrapper_set_texture_pressed(WasGo::WasGoId p_texture_pressed);
void _wasgo_TouchScreenButton_wrapper_set_visibility_mode(WasGo::WasGoId p_mode);
void _wasgo_Translation_wrapper_add_message(WasGo::WasGoId p_src_message, WasGo::WasGoId p_xlated_message);
void _wasgo_Translation_wrapper_erase_message(WasGo::WasGoId p_src_message);
WasGo::WasGoId _wasgo_Translation_wrapper_get_locale();
WasGo::WasGoId _wasgo_Translation_wrapper_get_message(WasGo::WasGoId p_src_message);
int _wasgo_Translation_wrapper_get_message_count();
WasGo::WasGoId _wasgo_Translation_wrapper_get_message_list();
void _wasgo_Translation_wrapper_set_locale(WasGo::WasGoId p_locale);
void _wasgo_TreeItem_wrapper_add_button(int p_column, WasGo::WasGoId p_button, int p_button_idx, bool p_disabled, WasGo::WasGoId p_tooltip);
WasGo::WasGoId _wasgo_TreeItem_wrapper_call_recursive(WasGo::WasGoId p_method);
void _wasgo_TreeItem_wrapper_clear_custom_bg_color(int p_column);
void _wasgo_TreeItem_wrapper_clear_custom_color(int p_column);
void _wasgo_TreeItem_wrapper_deselect(int p_column);
void _wasgo_TreeItem_wrapper_erase_button(int p_column, int p_button_idx);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_button(int p_column, int p_button_idx);
int _wasgo_TreeItem_wrapper_get_button_count(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_button_tooltip(int p_column, int p_button_idx);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_cell_mode(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_children();
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_custom_bg_color(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_custom_color(int p_column);
int _wasgo_TreeItem_wrapper_get_custom_minimum_height();
int _wasgo_TreeItem_wrapper_get_expand_right(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_icon(int p_column);
int _wasgo_TreeItem_wrapper_get_icon_max_width(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_icon_modulate(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_icon_region(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_metadata(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_next();
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_next_visible(bool p_wrap);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_parent();
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_prev();
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_prev_visible(bool p_wrap);
float _wasgo_TreeItem_wrapper_get_range(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_range_config(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_suffix(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_text(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_text_align(int p_column);
WasGo::WasGoId _wasgo_TreeItem_wrapper_get_tooltip(int p_column);
int _wasgo_TreeItem_wrapper_is_button_disabled(int p_column, int p_button_idx);
int _wasgo_TreeItem_wrapper_is_checked(int p_column);
int _wasgo_TreeItem_wrapper_is_collapsed();
int _wasgo_TreeItem_wrapper_is_custom_set_as_button(int p_column);
int _wasgo_TreeItem_wrapper_is_editable(int p_column);
int _wasgo_TreeItem_wrapper_is_folding_disabled();
int _wasgo_TreeItem_wrapper_is_selectable(int p_column);
int _wasgo_TreeItem_wrapper_is_selected(int p_column);
void _wasgo_TreeItem_wrapper_move_to_bottom();
void _wasgo_TreeItem_wrapper_move_to_top();
void _wasgo_TreeItem_wrapper_remove_child(WasGo::WasGoId p_child);
void _wasgo_TreeItem_wrapper_select(int p_column);
void _wasgo_TreeItem_wrapper_set_button(int p_column, int p_button_idx, WasGo::WasGoId p_button);
void _wasgo_TreeItem_wrapper_set_button_disabled(int p_column, int p_button_idx, bool p_disabled);
void _wasgo_TreeItem_wrapper_set_cell_mode(int p_column, WasGo::WasGoId p_mode);
void _wasgo_TreeItem_wrapper_set_checked(int p_column, bool p_checked);
void _wasgo_TreeItem_wrapper_set_collapsed(bool p_enable);
void _wasgo_TreeItem_wrapper_set_custom_as_button(int p_column, bool p_enable);
void _wasgo_TreeItem_wrapper_set_custom_bg_color(int p_column, WasGo::WasGoId p_color, bool p_just_outline);
void _wasgo_TreeItem_wrapper_set_custom_color(int p_column, WasGo::WasGoId p_color);
void _wasgo_TreeItem_wrapper_set_custom_draw(int p_column, WasGo::WasGoId p_object, WasGo::WasGoId p_callback);
void _wasgo_TreeItem_wrapper_set_custom_minimum_height(int p_height);
void _wasgo_TreeItem_wrapper_set_disable_folding(bool p_disable);
void _wasgo_TreeItem_wrapper_set_editable(int p_column, bool p_enabled);
void _wasgo_TreeItem_wrapper_set_expand_right(int p_column, bool p_enable);
void _wasgo_TreeItem_wrapper_set_icon(int p_column, WasGo::WasGoId p_texture);
void _wasgo_TreeItem_wrapper_set_icon_max_width(int p_column, int p_width);
void _wasgo_TreeItem_wrapper_set_icon_modulate(int p_column, WasGo::WasGoId p_modulate);
void _wasgo_TreeItem_wrapper_set_icon_region(int p_column, WasGo::WasGoId p_region);
void _wasgo_TreeItem_wrapper_set_metadata(int p_column, WasGo::WasGoId p_meta);
void _wasgo_TreeItem_wrapper_set_range(int p_column, float p_value);
void _wasgo_TreeItem_wrapper_set_range_config(int p_column, float p_min, float p_max, float p_step, bool p_expr);
void _wasgo_TreeItem_wrapper_set_selectable(int p_column, bool p_selectable);
void _wasgo_TreeItem_wrapper_set_suffix(int p_column, WasGo::WasGoId p_text);
void _wasgo_TreeItem_wrapper_set_text(int p_column, WasGo::WasGoId p_text);
void _wasgo_TreeItem_wrapper_set_text_align(int p_column, WasGo::WasGoId p_text_align);
void _wasgo_TreeItem_wrapper_set_tooltip(int p_column, WasGo::WasGoId p_tooltip);
float _wasgo_Tween_wrapper_get_speed_scale();
WasGo::WasGoId _wasgo_Tween_wrapper_get_tween_process_mode();
int _wasgo_Tween_wrapper_is_active();
int _wasgo_Tween_wrapper_is_repeat();
int _wasgo_Tween_wrapper_remove(WasGo::WasGoId p_object, WasGo::WasGoId p_key);
int _wasgo_Tween_wrapper_reset(WasGo::WasGoId p_object, WasGo::WasGoId p_key);
int _wasgo_Tween_wrapper_reset_all();
int _wasgo_Tween_wrapper_resume(WasGo::WasGoId p_object, WasGo::WasGoId p_key);
int _wasgo_Tween_wrapper_resume_all();
void _wasgo_Tween_wrapper_set_active(bool p_active);
void _wasgo_Tween_wrapper_set_repeat(bool p_repeat);
void _wasgo_Tween_wrapper_set_speed_scale(float p_speed);
void _wasgo_Tween_wrapper_set_tween_process_mode(WasGo::WasGoId p_mode);
int _wasgo_Tween_wrapper_start();
int _wasgo_Tween_wrapper_stop(WasGo::WasGoId p_object, WasGo::WasGoId p_key);
int _wasgo_Tween_wrapper_stop_all();
int _wasgo_UDPServer_wrapper_get_max_pending_connections();
int _wasgo_UDPServer_wrapper_is_connection_available();
int _wasgo_UDPServer_wrapper_is_listening();
WasGo::WasGoId _wasgo_UDPServer_wrapper_listen(int p_port, WasGo::WasGoId p_bind_address);
WasGo::WasGoId _wasgo_UDPServer_wrapper_poll();
void _wasgo_UDPServer_wrapper_set_max_pending_connections(int p_max_pending_connections);
void _wasgo_UDPServer_wrapper_stop();
WasGo::WasGoId _wasgo_UDPServer_wrapper_take_connection();
void _wasgo_UndoRedo_wrapper_add_do_method(WasGo::WasGoId p_object, WasGo::WasGoId p_method);
void _wasgo_UndoRedo_wrapper_add_do_property(WasGo::WasGoId p_object, WasGo::WasGoId p_property, WasGo::WasGoId p_value);
void _wasgo_UndoRedo_wrapper_add_do_reference(WasGo::WasGoId p_object);
void _wasgo_UndoRedo_wrapper_add_undo_method(WasGo::WasGoId p_object, WasGo::WasGoId p_method);
void _wasgo_UndoRedo_wrapper_add_undo_property(WasGo::WasGoId p_object, WasGo::WasGoId p_property, WasGo::WasGoId p_value);
void _wasgo_UndoRedo_wrapper_add_undo_reference(WasGo::WasGoId p_object);
void _wasgo_UndoRedo_wrapper_clear_history(bool p_increase_version);
void _wasgo_UndoRedo_wrapper_commit_action();
void _wasgo_UndoRedo_wrapper_create_action(WasGo::WasGoId p_name, WasGo::WasGoId p_merge_mode);
WasGo::WasGoId _wasgo_UndoRedo_wrapper_get_current_action_name();
int _wasgo_UndoRedo_wrapper_get_version();
int _wasgo_UndoRedo_wrapper_has_redo();
int _wasgo_UndoRedo_wrapper_has_undo();
int _wasgo_UndoRedo_wrapper_is_commiting_action();
int _wasgo_UndoRedo_wrapper_redo();
int _wasgo_UndoRedo_wrapper_undo();
float _wasgo_VehicleBody_wrapper_get_brake();
float _wasgo_VehicleBody_wrapper_get_engine_force();
float _wasgo_VehicleBody_wrapper_get_steering();
void _wasgo_VehicleBody_wrapper_set_brake(float p_brake);
void _wasgo_VehicleBody_wrapper_set_engine_force(float p_engine_force);
void _wasgo_VehicleBody_wrapper_set_steering(float p_steering);
float _wasgo_VehicleWheel_wrapper_get_brake();
float _wasgo_VehicleWheel_wrapper_get_damping_compression();
float _wasgo_VehicleWheel_wrapper_get_damping_relaxation();
float _wasgo_VehicleWheel_wrapper_get_engine_force();
float _wasgo_VehicleWheel_wrapper_get_friction_slip();
float _wasgo_VehicleWheel_wrapper_get_radius();
float _wasgo_VehicleWheel_wrapper_get_roll_influence();
float _wasgo_VehicleWheel_wrapper_get_rpm();
float _wasgo_VehicleWheel_wrapper_get_skidinfo();
float _wasgo_VehicleWheel_wrapper_get_steering();
float _wasgo_VehicleWheel_wrapper_get_suspension_max_force();
float _wasgo_VehicleWheel_wrapper_get_suspension_rest_length();
float _wasgo_VehicleWheel_wrapper_get_suspension_stiffness();
float _wasgo_VehicleWheel_wrapper_get_suspension_travel();
int _wasgo_VehicleWheel_wrapper_is_in_contact();
int _wasgo_VehicleWheel_wrapper_is_used_as_steering();
int _wasgo_VehicleWheel_wrapper_is_used_as_traction();
void _wasgo_VehicleWheel_wrapper_set_brake(float p_brake);
void _wasgo_VehicleWheel_wrapper_set_damping_compression(float p_length);
void _wasgo_VehicleWheel_wrapper_set_damping_relaxation(float p_length);
void _wasgo_VehicleWheel_wrapper_set_engine_force(float p_engine_force);
void _wasgo_VehicleWheel_wrapper_set_friction_slip(float p_length);
void _wasgo_VehicleWheel_wrapper_set_radius(float p_length);
void _wasgo_VehicleWheel_wrapper_set_roll_influence(float p_roll_influence);
void _wasgo_VehicleWheel_wrapper_set_steering(float p_steering);
void _wasgo_VehicleWheel_wrapper_set_suspension_max_force(float p_length);
void _wasgo_VehicleWheel_wrapper_set_suspension_rest_length(float p_length);
void _wasgo_VehicleWheel_wrapper_set_suspension_stiffness(float p_length);
void _wasgo_VehicleWheel_wrapper_set_suspension_travel(float p_length);
void _wasgo_VehicleWheel_wrapper_set_use_as_steering(bool p_enable);
void _wasgo_VehicleWheel_wrapper_set_use_as_traction(bool p_enable);
int _wasgo_VideoPlayer_wrapper_get_audio_track();
int _wasgo_VideoPlayer_wrapper_get_buffering_msec();
WasGo::WasGoId _wasgo_VideoPlayer_wrapper_get_bus();
WasGo::WasGoId _wasgo_VideoPlayer_wrapper_get_stream();
WasGo::WasGoId _wasgo_VideoPlayer_wrapper_get_stream_name();
float _wasgo_VideoPlayer_wrapper_get_stream_position();
WasGo::WasGoId _wasgo_VideoPlayer_wrapper_get_video_texture();
float _wasgo_VideoPlayer_wrapper_get_volume();
float _wasgo_VideoPlayer_wrapper_get_volume_db();
int _wasgo_VideoPlayer_wrapper_has_autoplay();
int _wasgo_VideoPlayer_wrapper_has_expand();
int _wasgo_VideoPlayer_wrapper_is_paused();
int _wasgo_VideoPlayer_wrapper_is_playing();
void _wasgo_VideoPlayer_wrapper_play();
void _wasgo_VideoPlayer_wrapper_set_audio_track(int p_track);
void _wasgo_VideoPlayer_wrapper_set_autoplay(bool p_enabled);
void _wasgo_VideoPlayer_wrapper_set_buffering_msec(int p_msec);
void _wasgo_VideoPlayer_wrapper_set_bus(WasGo::WasGoId p_bus);
void _wasgo_VideoPlayer_wrapper_set_expand(bool p_enable);
void _wasgo_VideoPlayer_wrapper_set_paused(bool p_paused);
void _wasgo_VideoPlayer_wrapper_set_stream(WasGo::WasGoId p_stream);
void _wasgo_VideoPlayer_wrapper_set_stream_position(float p_position);
void _wasgo_VideoPlayer_wrapper_set_volume(float p_volume);
void _wasgo_VideoPlayer_wrapper_set_volume_db(float p_db);
void _wasgo_VideoPlayer_wrapper_stop();
WasGo::WasGoId _wasgo_Viewport_wrapper_find_world();
WasGo::WasGoId _wasgo_Viewport_wrapper_find_world_2d();
WasGo::WasGoId _wasgo_Viewport_wrapper_get_canvas_transform();
WasGo::WasGoId _wasgo_Viewport_wrapper_get_final_transform();
WasGo::WasGoId _wasgo_Viewport_wrapper_get_global_canvas_transform();
WasGo::WasGoId _wasgo_Viewport_wrapper_get_size();
WasGo::WasGoId _wasgo_Viewport_wrapper_get_visible_rect();
WasGo::WasGoId _wasgo_Viewport_wrapper_get_world();
WasGo::WasGoId _wasgo_Viewport_wrapper_get_world_2d();
int _wasgo_Viewport_wrapper_has_transparent_background();
void _wasgo_Viewport_wrapper_set_canvas_transform(WasGo::WasGoId p_xform);
void _wasgo_Viewport_wrapper_set_global_canvas_transform(WasGo::WasGoId p_xform);
void _wasgo_Viewport_wrapper_set_size(WasGo::WasGoId p_size);
void _wasgo_Viewport_wrapper_set_transparent_background(bool p_enable);
void _wasgo_Viewport_wrapper_set_use_arvr(bool p_use);
void _wasgo_Viewport_wrapper_set_world(WasGo::WasGoId p_world);
void _wasgo_Viewport_wrapper_set_world_2d(WasGo::WasGoId p_world_2d);
int _wasgo_Viewport_wrapper_use_arvr();
WasGo::WasGoId _wasgo_ViewportTexture_wrapper_get_viewport_path_in_scene();
void _wasgo_ViewportTexture_wrapper_set_viewport_path_in_scene(WasGo::WasGoId p_path);
int _wasgo_VisibilityEnabler_wrapper_is_enabler_enabled(WasGo::WasGoId p_enabler);
void _wasgo_VisibilityEnabler_wrapper_set_enabler(WasGo::WasGoId p_enabler, bool p_enabled);
int _wasgo_VisibilityEnabler2D_wrapper_is_enabler_enabled(WasGo::WasGoId p_enabler);
void _wasgo_VisibilityEnabler2D_wrapper_set_enabler(WasGo::WasGoId p_enabler, bool p_enabled);
WasGo::WasGoId _wasgo_VisibilityNotifier_wrapper_get_aabb();
int _wasgo_VisibilityNotifier_wrapper_is_on_screen();
void _wasgo_VisibilityNotifier_wrapper_set_aabb(WasGo::WasGoId p_rect);
WasGo::WasGoId _wasgo_VisibilityNotifier2D_wrapper_get_rect();
int _wasgo_VisibilityNotifier2D_wrapper_is_on_screen();
void _wasgo_VisibilityNotifier2D_wrapper_set_rect(WasGo::WasGoId p_rect);
void _wasgo_VisualServer_wrapper_black_bars_set_images(WasGo::WasGoId p_left, WasGo::WasGoId p_top, WasGo::WasGoId p_right, WasGo::WasGoId p_bottom);
void _wasgo_VisualServer_wrapper_black_bars_set_margins(int p_left, int p_top, int p_right, int p_bottom);
WasGo::WasGoId _wasgo_VisualServer_wrapper_camera_create();
void _wasgo_VisualServer_wrapper_camera_set_cull_mask(WasGo::WasGoId p_camera, int p_layers);
void _wasgo_VisualServer_wrapper_camera_set_environment(WasGo::WasGoId p_camera, WasGo::WasGoId p_env);
void _wasgo_VisualServer_wrapper_camera_set_frustum(WasGo::WasGoId p_camera, float p_size, WasGo::WasGoId p_offset, float p_z_near, float p_z_far);
void _wasgo_VisualServer_wrapper_camera_set_orthogonal(WasGo::WasGoId p_camera, float p_size, float p_z_near, float p_z_far);
void _wasgo_VisualServer_wrapper_camera_set_perspective(WasGo::WasGoId p_camera, float p_fovy_degrees, float p_z_near, float p_z_far);
void _wasgo_VisualServer_wrapper_camera_set_transform(WasGo::WasGoId p_camera, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_camera_set_use_vertical_aspect(WasGo::WasGoId p_camera, bool p_enable);
WasGo::WasGoId _wasgo_VisualServer_wrapper_canvas_create();
void _wasgo_VisualServer_wrapper_canvas_item_add_circle(WasGo::WasGoId p_item, WasGo::WasGoId p_pos, float p_radius, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_canvas_item_add_clip_ignore(WasGo::WasGoId p_item, bool p_ignore);
void _wasgo_VisualServer_wrapper_canvas_item_add_line(WasGo::WasGoId p_item, WasGo::WasGoId p_from, WasGo::WasGoId p_to, WasGo::WasGoId p_color, float p_width, bool p_antialiased);
void _wasgo_VisualServer_wrapper_canvas_item_add_mesh(WasGo::WasGoId p_item, WasGo::WasGoId p_mesh, WasGo::WasGoId p_transform, WasGo::WasGoId p_modulate, WasGo::WasGoId p_texture, WasGo::WasGoId p_normal_map);
void _wasgo_VisualServer_wrapper_canvas_item_add_multimesh(WasGo::WasGoId p_item, WasGo::WasGoId p_mesh, WasGo::WasGoId p_texture, WasGo::WasGoId p_normal_map);
void _wasgo_VisualServer_wrapper_canvas_item_add_nine_patch(WasGo::WasGoId p_item, WasGo::WasGoId p_rect, WasGo::WasGoId p_source, WasGo::WasGoId p_texture, WasGo::WasGoId p_topleft, WasGo::WasGoId p_bottomright, WasGo::WasGoId p_x_axis_mode, WasGo::WasGoId p_y_axis_mode, bool p_draw_center, WasGo::WasGoId p_modulate, WasGo::WasGoId p_normal_map);
void _wasgo_VisualServer_wrapper_canvas_item_add_particles(WasGo::WasGoId p_item, WasGo::WasGoId p_particles, WasGo::WasGoId p_texture, WasGo::WasGoId p_normal_map);
void _wasgo_VisualServer_wrapper_canvas_item_add_polygon(WasGo::WasGoId p_item, WasGo::WasGoId p_points, WasGo::WasGoId p_colors, WasGo::WasGoId p_uvs, WasGo::WasGoId p_texture, WasGo::WasGoId p_normal_map, bool p_antialiased);
void _wasgo_VisualServer_wrapper_canvas_item_add_polyline(WasGo::WasGoId p_item, WasGo::WasGoId p_points, WasGo::WasGoId p_colors, float p_width, bool p_antialiased);
void _wasgo_VisualServer_wrapper_canvas_item_add_primitive(WasGo::WasGoId p_item, WasGo::WasGoId p_points, WasGo::WasGoId p_colors, WasGo::WasGoId p_uvs, WasGo::WasGoId p_texture, float p_width, WasGo::WasGoId p_normal_map);
void _wasgo_VisualServer_wrapper_canvas_item_add_rect(WasGo::WasGoId p_item, WasGo::WasGoId p_rect, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_canvas_item_add_set_transform(WasGo::WasGoId p_item, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_canvas_item_add_texture_rect(WasGo::WasGoId p_item, WasGo::WasGoId p_rect, WasGo::WasGoId p_texture, bool p_tile, WasGo::WasGoId p_modulate, bool p_transpose, WasGo::WasGoId p_normal_map);
void _wasgo_VisualServer_wrapper_canvas_item_add_texture_rect_region(WasGo::WasGoId p_item, WasGo::WasGoId p_rect, WasGo::WasGoId p_texture, WasGo::WasGoId p_src_rect, WasGo::WasGoId p_modulate, bool p_transpose, WasGo::WasGoId p_normal_map, bool p_clip_uv);
void _wasgo_VisualServer_wrapper_canvas_item_add_triangle_array(WasGo::WasGoId p_item, WasGo::WasGoId p_indices, WasGo::WasGoId p_points, WasGo::WasGoId p_colors, WasGo::WasGoId p_uvs, WasGo::WasGoId p_bones, WasGo::WasGoId p_weights, WasGo::WasGoId p_texture, int p_count, WasGo::WasGoId p_normal_map, bool p_antialiased, bool p_antialiasing_use_indices);
void _wasgo_VisualServer_wrapper_canvas_item_clear(WasGo::WasGoId p_item);
WasGo::WasGoId _wasgo_VisualServer_wrapper_canvas_item_create();
void _wasgo_VisualServer_wrapper_canvas_item_set_clip(WasGo::WasGoId p_item, bool p_clip);
void _wasgo_VisualServer_wrapper_canvas_item_set_copy_to_backbuffer(WasGo::WasGoId p_item, bool p_enabled, WasGo::WasGoId p_rect);
void _wasgo_VisualServer_wrapper_canvas_item_set_custom_rect(WasGo::WasGoId p_item, bool p_use_custom_rect, WasGo::WasGoId p_rect);
void _wasgo_VisualServer_wrapper_canvas_item_set_distance_field_mode(WasGo::WasGoId p_item, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_item_set_draw_behind_parent(WasGo::WasGoId p_item, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_item_set_draw_index(WasGo::WasGoId p_item, int p_index);
void _wasgo_VisualServer_wrapper_canvas_item_set_light_mask(WasGo::WasGoId p_item, int p_mask);
void _wasgo_VisualServer_wrapper_canvas_item_set_material(WasGo::WasGoId p_item, WasGo::WasGoId p_material);
void _wasgo_VisualServer_wrapper_canvas_item_set_modulate(WasGo::WasGoId p_item, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_canvas_item_set_parent(WasGo::WasGoId p_item, WasGo::WasGoId p_parent);
void _wasgo_VisualServer_wrapper_canvas_item_set_self_modulate(WasGo::WasGoId p_item, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_canvas_item_set_sort_children_by_y(WasGo::WasGoId p_item, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_item_set_transform(WasGo::WasGoId p_item, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_canvas_item_set_use_parent_material(WasGo::WasGoId p_item, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_item_set_visible(WasGo::WasGoId p_item, bool p_visible);
void _wasgo_VisualServer_wrapper_canvas_item_set_z_as_relative_to_parent(WasGo::WasGoId p_item, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_item_set_z_index(WasGo::WasGoId p_item, int p_z_index);
void _wasgo_VisualServer_wrapper_canvas_light_attach_to_canvas(WasGo::WasGoId p_light, WasGo::WasGoId p_canvas);
WasGo::WasGoId _wasgo_VisualServer_wrapper_canvas_light_create();
void _wasgo_VisualServer_wrapper_canvas_light_occluder_attach_to_canvas(WasGo::WasGoId p_occluder, WasGo::WasGoId p_canvas);
WasGo::WasGoId _wasgo_VisualServer_wrapper_canvas_light_occluder_create();
void _wasgo_VisualServer_wrapper_canvas_light_occluder_set_enabled(WasGo::WasGoId p_occluder, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_light_occluder_set_light_mask(WasGo::WasGoId p_occluder, int p_mask);
void _wasgo_VisualServer_wrapper_canvas_light_occluder_set_polygon(WasGo::WasGoId p_occluder, WasGo::WasGoId p_polygon);
void _wasgo_VisualServer_wrapper_canvas_light_occluder_set_transform(WasGo::WasGoId p_occluder, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_canvas_light_set_color(WasGo::WasGoId p_light, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_canvas_light_set_enabled(WasGo::WasGoId p_light, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_light_set_energy(WasGo::WasGoId p_light, float p_energy);
void _wasgo_VisualServer_wrapper_canvas_light_set_height(WasGo::WasGoId p_light, float p_height);
void _wasgo_VisualServer_wrapper_canvas_light_set_item_cull_mask(WasGo::WasGoId p_light, int p_mask);
void _wasgo_VisualServer_wrapper_canvas_light_set_item_shadow_cull_mask(WasGo::WasGoId p_light, int p_mask);
void _wasgo_VisualServer_wrapper_canvas_light_set_layer_range(WasGo::WasGoId p_light, int p_min_layer, int p_max_layer);
void _wasgo_VisualServer_wrapper_canvas_light_set_mode(WasGo::WasGoId p_light, WasGo::WasGoId p_mode);
void _wasgo_VisualServer_wrapper_canvas_light_set_scale(WasGo::WasGoId p_light, float p_scale);
void _wasgo_VisualServer_wrapper_canvas_light_set_shadow_buffer_size(WasGo::WasGoId p_light, int p_size);
void _wasgo_VisualServer_wrapper_canvas_light_set_shadow_color(WasGo::WasGoId p_light, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_canvas_light_set_shadow_enabled(WasGo::WasGoId p_light, bool p_enabled);
void _wasgo_VisualServer_wrapper_canvas_light_set_shadow_filter(WasGo::WasGoId p_light, WasGo::WasGoId p_filter);
void _wasgo_VisualServer_wrapper_canvas_light_set_shadow_gradient_length(WasGo::WasGoId p_light, float p_length);
void _wasgo_VisualServer_wrapper_canvas_light_set_shadow_smooth(WasGo::WasGoId p_light, float p_smooth);
void _wasgo_VisualServer_wrapper_canvas_light_set_texture(WasGo::WasGoId p_light, WasGo::WasGoId p_texture);
void _wasgo_VisualServer_wrapper_canvas_light_set_texture_offset(WasGo::WasGoId p_light, WasGo::WasGoId p_offset);
void _wasgo_VisualServer_wrapper_canvas_light_set_transform(WasGo::WasGoId p_light, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_canvas_light_set_z_range(WasGo::WasGoId p_light, int p_min_z, int p_max_z);
WasGo::WasGoId _wasgo_VisualServer_wrapper_canvas_occluder_polygon_create();
void _wasgo_VisualServer_wrapper_canvas_occluder_polygon_set_cull_mode(WasGo::WasGoId p_occluder_polygon, WasGo::WasGoId p_mode);
void _wasgo_VisualServer_wrapper_canvas_occluder_polygon_set_shape(WasGo::WasGoId p_occluder_polygon, WasGo::WasGoId p_shape, bool p_closed);
void _wasgo_VisualServer_wrapper_canvas_occluder_polygon_set_shape_as_lines(WasGo::WasGoId p_occluder_polygon, WasGo::WasGoId p_shape);
void _wasgo_VisualServer_wrapper_canvas_set_item_mirroring(WasGo::WasGoId p_canvas, WasGo::WasGoId p_item, WasGo::WasGoId p_mirroring);
void _wasgo_VisualServer_wrapper_canvas_set_modulate(WasGo::WasGoId p_canvas, WasGo::WasGoId p_color);
WasGo::WasGoId _wasgo_VisualServer_wrapper_directional_light_create();
void _wasgo_VisualServer_wrapper_draw(bool p_swap_buffers, float p_frame_step);
WasGo::WasGoId _wasgo_VisualServer_wrapper_environment_create();
void _wasgo_VisualServer_wrapper_environment_set_adjustment(WasGo::WasGoId p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, WasGo::WasGoId p_ramp);
void _wasgo_VisualServer_wrapper_environment_set_ambient_light(WasGo::WasGoId p_env, WasGo::WasGoId p_color, float p_energy, float p_sky_contibution);
void _wasgo_VisualServer_wrapper_environment_set_background(WasGo::WasGoId p_env, WasGo::WasGoId p_bg);
void _wasgo_VisualServer_wrapper_environment_set_bg_color(WasGo::WasGoId p_env, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_environment_set_bg_energy(WasGo::WasGoId p_env, float p_energy);
void _wasgo_VisualServer_wrapper_environment_set_canvas_max_layer(WasGo::WasGoId p_env, int p_max_layer);
void _wasgo_VisualServer_wrapper_environment_set_dof_blur_far(WasGo::WasGoId p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, WasGo::WasGoId p_quality);
void _wasgo_VisualServer_wrapper_environment_set_dof_blur_near(WasGo::WasGoId p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, WasGo::WasGoId p_quality);
void _wasgo_VisualServer_wrapper_environment_set_fog(WasGo::WasGoId p_env, bool p_enable, WasGo::WasGoId p_color, WasGo::WasGoId p_sun_color, float p_sun_amount);
void _wasgo_VisualServer_wrapper_environment_set_fog_depth(WasGo::WasGoId p_env, bool p_enable, float p_depth_begin, float p_depth_end, float p_depth_curve, bool p_transmit, float p_transmit_curve);
void _wasgo_VisualServer_wrapper_environment_set_fog_height(WasGo::WasGoId p_env, bool p_enable, float p_min_height, float p_max_height, float p_height_curve);
void _wasgo_VisualServer_wrapper_environment_set_glow(WasGo::WasGoId p_env, bool p_enable, int p_level_flags, float p_intensity, float p_strength, float p_bloom_threshold, WasGo::WasGoId p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, bool p_bicubic_upscale);
void _wasgo_VisualServer_wrapper_environment_set_sky(WasGo::WasGoId p_env, WasGo::WasGoId p_sky);
void _wasgo_VisualServer_wrapper_environment_set_sky_custom_fov(WasGo::WasGoId p_env, float p_scale);
void _wasgo_VisualServer_wrapper_environment_set_sky_orientation(WasGo::WasGoId p_env, WasGo::WasGoId p_orientation);
void _wasgo_VisualServer_wrapper_environment_set_ssao(WasGo::WasGoId p_env, bool p_enable, float p_radius, float p_intensity, float p_radius2, float p_intensity2, float p_bias, float p_light_affect, float p_ao_channel_affect, WasGo::WasGoId p_color, WasGo::WasGoId p_quality, WasGo::WasGoId p_blur, float p_bilateral_sharpness);
void _wasgo_VisualServer_wrapper_environment_set_ssr(WasGo::WasGoId p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance, bool p_roughness);
void _wasgo_VisualServer_wrapper_environment_set_tonemap(WasGo::WasGoId p_env, WasGo::WasGoId p_tone_mapper, float p_exposure, float p_white, bool p_auto_exposure, float p_min_luminance, float p_max_luminance, float p_auto_exp_speed, float p_auto_exp_grey);
void _wasgo_VisualServer_wrapper_finish();
void _wasgo_VisualServer_wrapper_force_draw(bool p_swap_buffers, float p_frame_step);
void _wasgo_VisualServer_wrapper_force_sync();
void _wasgo_VisualServer_wrapper_free_rid(WasGo::WasGoId p_rid);
int _wasgo_VisualServer_wrapper_get_render_info(WasGo::WasGoId p_info);
WasGo::WasGoId _wasgo_VisualServer_wrapper_get_test_cube();
WasGo::WasGoId _wasgo_VisualServer_wrapper_get_test_texture();
WasGo::WasGoId _wasgo_VisualServer_wrapper_get_video_adapter_name();
WasGo::WasGoId _wasgo_VisualServer_wrapper_get_video_adapter_vendor();
WasGo::WasGoId _wasgo_VisualServer_wrapper_get_white_texture();
WasGo::WasGoId _wasgo_VisualServer_wrapper_gi_probe_create();
float _wasgo_VisualServer_wrapper_gi_probe_get_bias(WasGo::WasGoId p_probe);
WasGo::WasGoId _wasgo_VisualServer_wrapper_gi_probe_get_bounds(WasGo::WasGoId p_probe);
float _wasgo_VisualServer_wrapper_gi_probe_get_cell_size(WasGo::WasGoId p_probe);
WasGo::WasGoId _wasgo_VisualServer_wrapper_gi_probe_get_dynamic_data(WasGo::WasGoId p_probe);
int _wasgo_VisualServer_wrapper_gi_probe_get_dynamic_range(WasGo::WasGoId p_probe);
float _wasgo_VisualServer_wrapper_gi_probe_get_energy(WasGo::WasGoId p_probe);
float _wasgo_VisualServer_wrapper_gi_probe_get_normal_bias(WasGo::WasGoId p_probe);
float _wasgo_VisualServer_wrapper_gi_probe_get_propagation(WasGo::WasGoId p_probe);
WasGo::WasGoId _wasgo_VisualServer_wrapper_gi_probe_get_to_cell_xform(WasGo::WasGoId p_probe);
int _wasgo_VisualServer_wrapper_gi_probe_is_compressed(WasGo::WasGoId p_probe);
int _wasgo_VisualServer_wrapper_gi_probe_is_interior(WasGo::WasGoId p_probe);
void _wasgo_VisualServer_wrapper_gi_probe_set_bias(WasGo::WasGoId p_probe, float p_bias);
void _wasgo_VisualServer_wrapper_gi_probe_set_bounds(WasGo::WasGoId p_probe, WasGo::WasGoId p_bounds);
void _wasgo_VisualServer_wrapper_gi_probe_set_cell_size(WasGo::WasGoId p_probe, float p_range);
void _wasgo_VisualServer_wrapper_gi_probe_set_compress(WasGo::WasGoId p_probe, bool p_enable);
void _wasgo_VisualServer_wrapper_gi_probe_set_dynamic_data(WasGo::WasGoId p_probe, WasGo::WasGoId p_data);
void _wasgo_VisualServer_wrapper_gi_probe_set_dynamic_range(WasGo::WasGoId p_probe, int p_range);
void _wasgo_VisualServer_wrapper_gi_probe_set_energy(WasGo::WasGoId p_probe, float p_energy);
void _wasgo_VisualServer_wrapper_gi_probe_set_interior(WasGo::WasGoId p_probe, bool p_enable);
void _wasgo_VisualServer_wrapper_gi_probe_set_normal_bias(WasGo::WasGoId p_probe, float p_bias);
void _wasgo_VisualServer_wrapper_gi_probe_set_propagation(WasGo::WasGoId p_probe, float p_propagation);
void _wasgo_VisualServer_wrapper_gi_probe_set_to_cell_xform(WasGo::WasGoId p_probe, WasGo::WasGoId p_xform);
int _wasgo_VisualServer_wrapper_has_changed();
int _wasgo_VisualServer_wrapper_has_feature(WasGo::WasGoId p_feature);
int _wasgo_VisualServer_wrapper_has_os_feature(WasGo::WasGoId p_feature);
void _wasgo_VisualServer_wrapper_immediate_begin(WasGo::WasGoId p_immediate, WasGo::WasGoId p_primitive, WasGo::WasGoId p_texture);
void _wasgo_VisualServer_wrapper_immediate_clear(WasGo::WasGoId p_immediate);
void _wasgo_VisualServer_wrapper_immediate_color(WasGo::WasGoId p_immediate, WasGo::WasGoId p_color);
WasGo::WasGoId _wasgo_VisualServer_wrapper_immediate_create();
void _wasgo_VisualServer_wrapper_immediate_end(WasGo::WasGoId p_immediate);
WasGo::WasGoId _wasgo_VisualServer_wrapper_immediate_get_material(WasGo::WasGoId p_immediate);
void _wasgo_VisualServer_wrapper_immediate_normal(WasGo::WasGoId p_immediate, WasGo::WasGoId p_normal);
void _wasgo_VisualServer_wrapper_immediate_set_material(WasGo::WasGoId p_immediate, WasGo::WasGoId p_material);
void _wasgo_VisualServer_wrapper_immediate_tangent(WasGo::WasGoId p_immediate, WasGo::WasGoId p_tangent);
void _wasgo_VisualServer_wrapper_immediate_uv(WasGo::WasGoId p_immediate, WasGo::WasGoId p_tex_uv);
void _wasgo_VisualServer_wrapper_immediate_uv2(WasGo::WasGoId p_immediate, WasGo::WasGoId p_tex_uv);
void _wasgo_VisualServer_wrapper_immediate_vertex(WasGo::WasGoId p_immediate, WasGo::WasGoId p_vertex);
void _wasgo_VisualServer_wrapper_immediate_vertex_2d(WasGo::WasGoId p_immediate, WasGo::WasGoId p_vertex);
void _wasgo_VisualServer_wrapper_init();
void _wasgo_VisualServer_wrapper_instance_attach_object_instance_id(WasGo::WasGoId p_instance, int p_id);
void _wasgo_VisualServer_wrapper_instance_attach_skeleton(WasGo::WasGoId p_instance, WasGo::WasGoId p_skeleton);
WasGo::WasGoId _wasgo_VisualServer_wrapper_instance_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_instance_create2(WasGo::WasGoId p_base, WasGo::WasGoId p_scenario);
void _wasgo_VisualServer_wrapper_instance_geometry_set_as_instance_lod(WasGo::WasGoId p_instance, WasGo::WasGoId p_as_lod_of_instance);
void _wasgo_VisualServer_wrapper_instance_geometry_set_cast_shadows_setting(WasGo::WasGoId p_instance, WasGo::WasGoId p_shadow_casting_setting);
void _wasgo_VisualServer_wrapper_instance_geometry_set_draw_range(WasGo::WasGoId p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin);
void _wasgo_VisualServer_wrapper_instance_geometry_set_flag(WasGo::WasGoId p_instance, WasGo::WasGoId p_flag, bool p_enabled);
void _wasgo_VisualServer_wrapper_instance_geometry_set_material_override(WasGo::WasGoId p_instance, WasGo::WasGoId p_material);
void _wasgo_VisualServer_wrapper_instance_set_base(WasGo::WasGoId p_instance, WasGo::WasGoId p_base);
void _wasgo_VisualServer_wrapper_instance_set_blend_shape_weight(WasGo::WasGoId p_instance, int p_shape, float p_weight);
void _wasgo_VisualServer_wrapper_instance_set_custom_aabb(WasGo::WasGoId p_instance, WasGo::WasGoId p_aabb);
void _wasgo_VisualServer_wrapper_instance_set_exterior(WasGo::WasGoId p_instance, bool p_enabled);
void _wasgo_VisualServer_wrapper_instance_set_extra_visibility_margin(WasGo::WasGoId p_instance, float p_margin);
void _wasgo_VisualServer_wrapper_instance_set_layer_mask(WasGo::WasGoId p_instance, int p_mask);
void _wasgo_VisualServer_wrapper_instance_set_scenario(WasGo::WasGoId p_instance, WasGo::WasGoId p_scenario);
void _wasgo_VisualServer_wrapper_instance_set_surface_material(WasGo::WasGoId p_instance, int p_surface, WasGo::WasGoId p_material);
void _wasgo_VisualServer_wrapper_instance_set_transform(WasGo::WasGoId p_instance, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_instance_set_use_lightmap(WasGo::WasGoId p_instance, WasGo::WasGoId p_lightmap_instance, WasGo::WasGoId p_lightmap);
void _wasgo_VisualServer_wrapper_instance_set_visible(WasGo::WasGoId p_instance, bool p_visible);
WasGo::WasGoId _wasgo_VisualServer_wrapper_instances_cull_aabb(WasGo::WasGoId p_aabb, WasGo::WasGoId p_scenario);
WasGo::WasGoId _wasgo_VisualServer_wrapper_instances_cull_convex(WasGo::WasGoId p_convex, WasGo::WasGoId p_scenario);
WasGo::WasGoId _wasgo_VisualServer_wrapper_instances_cull_ray(WasGo::WasGoId p_from, WasGo::WasGoId p_to, WasGo::WasGoId p_scenario);
int _wasgo_VisualServer_wrapper_is_render_loop_enabled();
void _wasgo_VisualServer_wrapper_light_directional_set_blend_splits(WasGo::WasGoId p_light, bool p_enable);
void _wasgo_VisualServer_wrapper_light_directional_set_shadow_depth_range_mode(WasGo::WasGoId p_light, WasGo::WasGoId p_range_mode);
void _wasgo_VisualServer_wrapper_light_directional_set_shadow_mode(WasGo::WasGoId p_light, WasGo::WasGoId p_mode);
void _wasgo_VisualServer_wrapper_light_omni_set_shadow_detail(WasGo::WasGoId p_light, WasGo::WasGoId p_detail);
void _wasgo_VisualServer_wrapper_light_omni_set_shadow_mode(WasGo::WasGoId p_light, WasGo::WasGoId p_mode);
void _wasgo_VisualServer_wrapper_light_set_bake_mode(WasGo::WasGoId p_light, WasGo::WasGoId p_bake_mode);
void _wasgo_VisualServer_wrapper_light_set_color(WasGo::WasGoId p_light, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_light_set_cull_mask(WasGo::WasGoId p_light, int p_mask);
void _wasgo_VisualServer_wrapper_light_set_negative(WasGo::WasGoId p_light, bool p_enable);
void _wasgo_VisualServer_wrapper_light_set_param(WasGo::WasGoId p_light, WasGo::WasGoId p_param, float p_value);
void _wasgo_VisualServer_wrapper_light_set_projector(WasGo::WasGoId p_light, WasGo::WasGoId p_texture);
void _wasgo_VisualServer_wrapper_light_set_reverse_cull_face_mode(WasGo::WasGoId p_light, bool p_enabled);
void _wasgo_VisualServer_wrapper_light_set_shadow(WasGo::WasGoId p_light, bool p_enabled);
void _wasgo_VisualServer_wrapper_light_set_shadow_color(WasGo::WasGoId p_light, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_light_set_use_gi(WasGo::WasGoId p_light, bool p_enabled);
WasGo::WasGoId _wasgo_VisualServer_wrapper_lightmap_capture_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_lightmap_capture_get_bounds(WasGo::WasGoId p_capture);
float _wasgo_VisualServer_wrapper_lightmap_capture_get_energy(WasGo::WasGoId p_capture);
WasGo::WasGoId _wasgo_VisualServer_wrapper_lightmap_capture_get_octree(WasGo::WasGoId p_capture);
int _wasgo_VisualServer_wrapper_lightmap_capture_get_octree_cell_subdiv(WasGo::WasGoId p_capture);
WasGo::WasGoId _wasgo_VisualServer_wrapper_lightmap_capture_get_octree_cell_transform(WasGo::WasGoId p_capture);
void _wasgo_VisualServer_wrapper_lightmap_capture_set_bounds(WasGo::WasGoId p_capture, WasGo::WasGoId p_bounds);
void _wasgo_VisualServer_wrapper_lightmap_capture_set_energy(WasGo::WasGoId p_capture, float p_energy);
void _wasgo_VisualServer_wrapper_lightmap_capture_set_octree(WasGo::WasGoId p_capture, WasGo::WasGoId p_octree);
void _wasgo_VisualServer_wrapper_lightmap_capture_set_octree_cell_subdiv(WasGo::WasGoId p_capture, int p_subdiv);
void _wasgo_VisualServer_wrapper_lightmap_capture_set_octree_cell_transform(WasGo::WasGoId p_capture, WasGo::WasGoId p_xform);
WasGo::WasGoId _wasgo_VisualServer_wrapper_make_sphere_mesh(int p_latitudes, int p_longitudes, float p_radius);
WasGo::WasGoId _wasgo_VisualServer_wrapper_material_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_material_get_param(WasGo::WasGoId p_material, WasGo::WasGoId p_parameter);
WasGo::WasGoId _wasgo_VisualServer_wrapper_material_get_param_default(WasGo::WasGoId p_material, WasGo::WasGoId p_parameter);
WasGo::WasGoId _wasgo_VisualServer_wrapper_material_get_shader(WasGo::WasGoId p_shader_material);
void _wasgo_VisualServer_wrapper_material_set_line_width(WasGo::WasGoId p_material, float p_width);
void _wasgo_VisualServer_wrapper_material_set_next_pass(WasGo::WasGoId p_material, WasGo::WasGoId p_next_material);
void _wasgo_VisualServer_wrapper_material_set_param(WasGo::WasGoId p_material, WasGo::WasGoId p_parameter, WasGo::WasGoId p_value);
void _wasgo_VisualServer_wrapper_material_set_render_priority(WasGo::WasGoId p_material, int p_priority);
void _wasgo_VisualServer_wrapper_material_set_shader(WasGo::WasGoId p_shader_material, WasGo::WasGoId p_shader);
void _wasgo_VisualServer_wrapper_mesh_add_surface_from_arrays(WasGo::WasGoId p_mesh, WasGo::WasGoId p_primitive, WasGo::WasGoId p_arrays, WasGo::WasGoId p_blend_shapes, int p_compress_format);
void _wasgo_VisualServer_wrapper_mesh_clear(WasGo::WasGoId p_mesh);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_create();
int _wasgo_VisualServer_wrapper_mesh_get_blend_shape_count(WasGo::WasGoId p_mesh);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_get_blend_shape_mode(WasGo::WasGoId p_mesh);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_get_custom_aabb(WasGo::WasGoId p_mesh);
int _wasgo_VisualServer_wrapper_mesh_get_surface_count(WasGo::WasGoId p_mesh);
void _wasgo_VisualServer_wrapper_mesh_remove_surface(WasGo::WasGoId p_mesh, int p_index);
void _wasgo_VisualServer_wrapper_mesh_set_blend_shape_count(WasGo::WasGoId p_mesh, int p_amount);
void _wasgo_VisualServer_wrapper_mesh_set_blend_shape_mode(WasGo::WasGoId p_mesh, WasGo::WasGoId p_mode);
void _wasgo_VisualServer_wrapper_mesh_set_custom_aabb(WasGo::WasGoId p_mesh, WasGo::WasGoId p_aabb);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_aabb(WasGo::WasGoId p_mesh, int p_surface);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_array(WasGo::WasGoId p_mesh, int p_surface);
int _wasgo_VisualServer_wrapper_mesh_surface_get_array_index_len(WasGo::WasGoId p_mesh, int p_surface);
int _wasgo_VisualServer_wrapper_mesh_surface_get_array_len(WasGo::WasGoId p_mesh, int p_surface);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_arrays(WasGo::WasGoId p_mesh, int p_surface);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_blend_shape_arrays(WasGo::WasGoId p_mesh, int p_surface);
int _wasgo_VisualServer_wrapper_mesh_surface_get_format(WasGo::WasGoId p_mesh, int p_surface);
int _wasgo_VisualServer_wrapper_mesh_surface_get_format_offset(int p_format, int p_vertex_len, int p_index_len, int p_array_index);
int _wasgo_VisualServer_wrapper_mesh_surface_get_format_stride(int p_format, int p_vertex_len, int p_index_len);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_index_array(WasGo::WasGoId p_mesh, int p_surface);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_material(WasGo::WasGoId p_mesh, int p_surface);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_primitive_type(WasGo::WasGoId p_mesh, int p_surface);
WasGo::WasGoId _wasgo_VisualServer_wrapper_mesh_surface_get_skeleton_aabb(WasGo::WasGoId p_mesh, int p_surface);
void _wasgo_VisualServer_wrapper_mesh_surface_set_material(WasGo::WasGoId p_mesh, int p_surface, WasGo::WasGoId p_material);
void _wasgo_VisualServer_wrapper_mesh_surface_update_region(WasGo::WasGoId p_mesh, int p_surface, int p_offset, WasGo::WasGoId p_data);
void _wasgo_VisualServer_wrapper_multimesh_allocate(WasGo::WasGoId p_multimesh, int p_instances, WasGo::WasGoId p_transform_format, WasGo::WasGoId p_color_format, WasGo::WasGoId p_custom_data_format);
WasGo::WasGoId _wasgo_VisualServer_wrapper_multimesh_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_multimesh_get_aabb(WasGo::WasGoId p_multimesh);
int _wasgo_VisualServer_wrapper_multimesh_get_instance_count(WasGo::WasGoId p_multimesh);
WasGo::WasGoId _wasgo_VisualServer_wrapper_multimesh_get_mesh(WasGo::WasGoId p_multimesh);
int _wasgo_VisualServer_wrapper_multimesh_get_visible_instances(WasGo::WasGoId p_multimesh);
WasGo::WasGoId _wasgo_VisualServer_wrapper_multimesh_instance_get_color(WasGo::WasGoId p_multimesh, int p_index);
WasGo::WasGoId _wasgo_VisualServer_wrapper_multimesh_instance_get_custom_data(WasGo::WasGoId p_multimesh, int p_index);
WasGo::WasGoId _wasgo_VisualServer_wrapper_multimesh_instance_get_transform(WasGo::WasGoId p_multimesh, int p_index);
WasGo::WasGoId _wasgo_VisualServer_wrapper_multimesh_instance_get_transform_2d(WasGo::WasGoId p_multimesh, int p_index);
void _wasgo_VisualServer_wrapper_multimesh_instance_set_color(WasGo::WasGoId p_multimesh, int p_index, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_multimesh_instance_set_custom_data(WasGo::WasGoId p_multimesh, int p_index, WasGo::WasGoId p_custom_data);
void _wasgo_VisualServer_wrapper_multimesh_instance_set_transform(WasGo::WasGoId p_multimesh, int p_index, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_multimesh_instance_set_transform_2d(WasGo::WasGoId p_multimesh, int p_index, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_multimesh_set_as_bulk_array(WasGo::WasGoId p_multimesh, WasGo::WasGoId p_array);
void _wasgo_VisualServer_wrapper_multimesh_set_mesh(WasGo::WasGoId p_multimesh, WasGo::WasGoId p_mesh);
void _wasgo_VisualServer_wrapper_multimesh_set_visible_instances(WasGo::WasGoId p_multimesh, int p_visible);
WasGo::WasGoId _wasgo_VisualServer_wrapper_omni_light_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_particles_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_particles_get_current_aabb(WasGo::WasGoId p_particles);
int _wasgo_VisualServer_wrapper_particles_get_emitting(WasGo::WasGoId p_particles);
int _wasgo_VisualServer_wrapper_particles_is_inactive(WasGo::WasGoId p_particles);
void _wasgo_VisualServer_wrapper_particles_request_process(WasGo::WasGoId p_particles);
void _wasgo_VisualServer_wrapper_particles_restart(WasGo::WasGoId p_particles);
void _wasgo_VisualServer_wrapper_particles_set_amount(WasGo::WasGoId p_particles, int p_amount);
void _wasgo_VisualServer_wrapper_particles_set_custom_aabb(WasGo::WasGoId p_particles, WasGo::WasGoId p_aabb);
void _wasgo_VisualServer_wrapper_particles_set_draw_order(WasGo::WasGoId p_particles, WasGo::WasGoId p_order);
void _wasgo_VisualServer_wrapper_particles_set_draw_pass_mesh(WasGo::WasGoId p_particles, int p_pass, WasGo::WasGoId p_mesh);
void _wasgo_VisualServer_wrapper_particles_set_draw_passes(WasGo::WasGoId p_particles, int p_count);
void _wasgo_VisualServer_wrapper_particles_set_emission_transform(WasGo::WasGoId p_particles, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_particles_set_emitting(WasGo::WasGoId p_particles, bool p_emitting);
void _wasgo_VisualServer_wrapper_particles_set_explosiveness_ratio(WasGo::WasGoId p_particles, float p_ratio);
void _wasgo_VisualServer_wrapper_particles_set_fixed_fps(WasGo::WasGoId p_particles, int p_fps);
void _wasgo_VisualServer_wrapper_particles_set_fractional_delta(WasGo::WasGoId p_particles, bool p_enable);
void _wasgo_VisualServer_wrapper_particles_set_lifetime(WasGo::WasGoId p_particles, float p_lifetime);
void _wasgo_VisualServer_wrapper_particles_set_one_shot(WasGo::WasGoId p_particles, bool p_one_shot);
void _wasgo_VisualServer_wrapper_particles_set_pre_process_time(WasGo::WasGoId p_particles, float p_time);
void _wasgo_VisualServer_wrapper_particles_set_process_material(WasGo::WasGoId p_particles, WasGo::WasGoId p_material);
void _wasgo_VisualServer_wrapper_particles_set_randomness_ratio(WasGo::WasGoId p_particles, float p_ratio);
void _wasgo_VisualServer_wrapper_particles_set_speed_scale(WasGo::WasGoId p_particles, float p_scale);
void _wasgo_VisualServer_wrapper_particles_set_use_local_coordinates(WasGo::WasGoId p_particles, bool p_enable);
WasGo::WasGoId _wasgo_VisualServer_wrapper_reflection_probe_create();
void _wasgo_VisualServer_wrapper_reflection_probe_set_as_interior(WasGo::WasGoId p_probe, bool p_enable);
void _wasgo_VisualServer_wrapper_reflection_probe_set_cull_mask(WasGo::WasGoId p_probe, int p_layers);
void _wasgo_VisualServer_wrapper_reflection_probe_set_enable_box_projection(WasGo::WasGoId p_probe, bool p_enable);
void _wasgo_VisualServer_wrapper_reflection_probe_set_enable_shadows(WasGo::WasGoId p_probe, bool p_enable);
void _wasgo_VisualServer_wrapper_reflection_probe_set_extents(WasGo::WasGoId p_probe, WasGo::WasGoId p_extents);
void _wasgo_VisualServer_wrapper_reflection_probe_set_intensity(WasGo::WasGoId p_probe, float p_intensity);
void _wasgo_VisualServer_wrapper_reflection_probe_set_interior_ambient(WasGo::WasGoId p_probe, WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_reflection_probe_set_interior_ambient_energy(WasGo::WasGoId p_probe, float p_energy);
void _wasgo_VisualServer_wrapper_reflection_probe_set_interior_ambient_probe_contribution(WasGo::WasGoId p_probe, float p_contrib);
void _wasgo_VisualServer_wrapper_reflection_probe_set_max_distance(WasGo::WasGoId p_probe, float p_distance);
void _wasgo_VisualServer_wrapper_reflection_probe_set_origin_offset(WasGo::WasGoId p_probe, WasGo::WasGoId p_offset);
void _wasgo_VisualServer_wrapper_reflection_probe_set_update_mode(WasGo::WasGoId p_probe, WasGo::WasGoId p_mode);
void _wasgo_VisualServer_wrapper_request_frame_drawn_callback(WasGo::WasGoId p_where, WasGo::WasGoId p_method, WasGo::WasGoId p_userdata);
WasGo::WasGoId _wasgo_VisualServer_wrapper_scenario_create();
void _wasgo_VisualServer_wrapper_scenario_set_debug(WasGo::WasGoId p_scenario, WasGo::WasGoId p_debug_mode);
void _wasgo_VisualServer_wrapper_scenario_set_environment(WasGo::WasGoId p_scenario, WasGo::WasGoId p_environment);
void _wasgo_VisualServer_wrapper_scenario_set_fallback_environment(WasGo::WasGoId p_scenario, WasGo::WasGoId p_environment);
void _wasgo_VisualServer_wrapper_scenario_set_reflection_atlas_size(WasGo::WasGoId p_scenario, int p_size, int p_subdiv);
void _wasgo_VisualServer_wrapper_set_boot_image(WasGo::WasGoId p_image, WasGo::WasGoId p_color, bool p_scale, bool p_use_filter);
void _wasgo_VisualServer_wrapper_set_debug_generate_wireframes(bool p_generate);
void _wasgo_VisualServer_wrapper_set_default_clear_color(WasGo::WasGoId p_color);
void _wasgo_VisualServer_wrapper_set_render_loop_enabled(bool p_enabled);
void _wasgo_VisualServer_wrapper_set_shader_time_scale(float p_scale);
WasGo::WasGoId _wasgo_VisualServer_wrapper_shader_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_shader_get_code(WasGo::WasGoId p_shader);
WasGo::WasGoId _wasgo_VisualServer_wrapper_shader_get_default_texture_param(WasGo::WasGoId p_shader, WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_VisualServer_wrapper_shader_get_param_list(WasGo::WasGoId p_shader);
void _wasgo_VisualServer_wrapper_shader_set_code(WasGo::WasGoId p_shader, WasGo::WasGoId p_code);
void _wasgo_VisualServer_wrapper_shader_set_default_texture_param(WasGo::WasGoId p_shader, WasGo::WasGoId p_name, WasGo::WasGoId p_texture);
void _wasgo_VisualServer_wrapper_skeleton_allocate(WasGo::WasGoId p_skeleton, int p_bones, bool p_is_2d_skeleton);
WasGo::WasGoId _wasgo_VisualServer_wrapper_skeleton_bone_get_transform(WasGo::WasGoId p_skeleton, int p_bone);
WasGo::WasGoId _wasgo_VisualServer_wrapper_skeleton_bone_get_transform_2d(WasGo::WasGoId p_skeleton, int p_bone);
void _wasgo_VisualServer_wrapper_skeleton_bone_set_transform(WasGo::WasGoId p_skeleton, int p_bone, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_skeleton_bone_set_transform_2d(WasGo::WasGoId p_skeleton, int p_bone, WasGo::WasGoId p_transform);
WasGo::WasGoId _wasgo_VisualServer_wrapper_skeleton_create();
int _wasgo_VisualServer_wrapper_skeleton_get_bone_count(WasGo::WasGoId p_skeleton);
WasGo::WasGoId _wasgo_VisualServer_wrapper_sky_create();
void _wasgo_VisualServer_wrapper_sky_set_texture(WasGo::WasGoId p_sky, WasGo::WasGoId p_cube_map, int p_radiance_size);
WasGo::WasGoId _wasgo_VisualServer_wrapper_spot_light_create();
void _wasgo_VisualServer_wrapper_sync();
void _wasgo_VisualServer_wrapper_texture_allocate(WasGo::WasGoId p_texture, int p_width, int p_height, int p_depth_3d, WasGo::WasGoId p_format, WasGo::WasGoId p_type, int p_flags);
void _wasgo_VisualServer_wrapper_texture_bind(WasGo::WasGoId p_texture, int p_number);
WasGo::WasGoId _wasgo_VisualServer_wrapper_texture_create();
WasGo::WasGoId _wasgo_VisualServer_wrapper_texture_create_from_image(WasGo::WasGoId p_image, int p_flags);
WasGo::WasGoId _wasgo_VisualServer_wrapper_texture_debug_usage();
WasGo::WasGoId _wasgo_VisualServer_wrapper_texture_get_data(WasGo::WasGoId p_texture, int p_cube_side);
int _wasgo_VisualServer_wrapper_texture_get_depth(WasGo::WasGoId p_texture);
int _wasgo_VisualServer_wrapper_texture_get_flags(WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_VisualServer_wrapper_texture_get_format(WasGo::WasGoId p_texture);
int _wasgo_VisualServer_wrapper_texture_get_height(WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_VisualServer_wrapper_texture_get_path(WasGo::WasGoId p_texture);
int _wasgo_VisualServer_wrapper_texture_get_texid(WasGo::WasGoId p_texture);
WasGo::WasGoId _wasgo_VisualServer_wrapper_texture_get_type(WasGo::WasGoId p_texture);
int _wasgo_VisualServer_wrapper_texture_get_width(WasGo::WasGoId p_texture);
void _wasgo_VisualServer_wrapper_texture_set_data(WasGo::WasGoId p_texture, WasGo::WasGoId p_image, int p_layer);
void _wasgo_VisualServer_wrapper_texture_set_data_partial(WasGo::WasGoId p_texture, WasGo::WasGoId p_image, int p_src_x, int p_src_y, int p_src_w, int p_src_h, int p_dst_x, int p_dst_y, int p_dst_mip, int p_layer);
void _wasgo_VisualServer_wrapper_texture_set_flags(WasGo::WasGoId p_texture, int p_flags);
void _wasgo_VisualServer_wrapper_texture_set_path(WasGo::WasGoId p_texture, WasGo::WasGoId p_path);
void _wasgo_VisualServer_wrapper_texture_set_shrink_all_x2_on_set_data(bool p_shrink);
void _wasgo_VisualServer_wrapper_texture_set_size_override(WasGo::WasGoId p_texture, int p_width, int p_height, int p_depth);
void _wasgo_VisualServer_wrapper_textures_keep_original(bool p_enable);
void _wasgo_VisualServer_wrapper_viewport_attach_camera(WasGo::WasGoId p_viewport, WasGo::WasGoId p_camera);
void _wasgo_VisualServer_wrapper_viewport_attach_canvas(WasGo::WasGoId p_viewport, WasGo::WasGoId p_canvas);
void _wasgo_VisualServer_wrapper_viewport_attach_to_screen(WasGo::WasGoId p_viewport, WasGo::WasGoId p_rect, int p_screen);
WasGo::WasGoId _wasgo_VisualServer_wrapper_viewport_create();
void _wasgo_VisualServer_wrapper_viewport_detach(WasGo::WasGoId p_viewport);
int _wasgo_VisualServer_wrapper_viewport_get_render_info(WasGo::WasGoId p_viewport, WasGo::WasGoId p_info);
WasGo::WasGoId _wasgo_VisualServer_wrapper_viewport_get_texture(WasGo::WasGoId p_viewport);
void _wasgo_VisualServer_wrapper_viewport_remove_canvas(WasGo::WasGoId p_viewport, WasGo::WasGoId p_canvas);
void _wasgo_VisualServer_wrapper_viewport_set_active(WasGo::WasGoId p_viewport, bool p_active);
void _wasgo_VisualServer_wrapper_viewport_set_canvas_stacking(WasGo::WasGoId p_viewport, WasGo::WasGoId p_canvas, int p_layer, int p_sublayer);
void _wasgo_VisualServer_wrapper_viewport_set_canvas_transform(WasGo::WasGoId p_viewport, WasGo::WasGoId p_canvas, WasGo::WasGoId p_offset);
void _wasgo_VisualServer_wrapper_viewport_set_clear_mode(WasGo::WasGoId p_viewport, WasGo::WasGoId p_clear_mode);
void _wasgo_VisualServer_wrapper_viewport_set_debug_draw(WasGo::WasGoId p_viewport, WasGo::WasGoId p_draw);
void _wasgo_VisualServer_wrapper_viewport_set_disable_3d(WasGo::WasGoId p_viewport, bool p_disabled);
void _wasgo_VisualServer_wrapper_viewport_set_disable_environment(WasGo::WasGoId p_viewport, bool p_disabled);
void _wasgo_VisualServer_wrapper_viewport_set_global_canvas_transform(WasGo::WasGoId p_viewport, WasGo::WasGoId p_transform);
void _wasgo_VisualServer_wrapper_viewport_set_hdr(WasGo::WasGoId p_viewport, bool p_enabled);
void _wasgo_VisualServer_wrapper_viewport_set_hide_canvas(WasGo::WasGoId p_viewport, bool p_hidden);
void _wasgo_VisualServer_wrapper_viewport_set_hide_scenario(WasGo::WasGoId p_viewport, bool p_hidden);
void _wasgo_VisualServer_wrapper_viewport_set_msaa(WasGo::WasGoId p_viewport, WasGo::WasGoId p_msaa);
void _wasgo_VisualServer_wrapper_viewport_set_parent_viewport(WasGo::WasGoId p_viewport, WasGo::WasGoId p_parent_viewport);
void _wasgo_VisualServer_wrapper_viewport_set_render_direct_to_screen(WasGo::WasGoId p_viewport, bool p_enabled);
void _wasgo_VisualServer_wrapper_viewport_set_scenario(WasGo::WasGoId p_viewport, WasGo::WasGoId p_scenario);
void _wasgo_VisualServer_wrapper_viewport_set_shadow_atlas_quadrant_subdivision(WasGo::WasGoId p_viewport, int p_quadrant, int p_subdivision);
void _wasgo_VisualServer_wrapper_viewport_set_shadow_atlas_size(WasGo::WasGoId p_viewport, int p_size);
void _wasgo_VisualServer_wrapper_viewport_set_size(WasGo::WasGoId p_viewport, int p_width, int p_height);
void _wasgo_VisualServer_wrapper_viewport_set_transparent_background(WasGo::WasGoId p_viewport, bool p_enabled);
void _wasgo_VisualServer_wrapper_viewport_set_update_mode(WasGo::WasGoId p_viewport, WasGo::WasGoId p_update_mode);
void _wasgo_VisualServer_wrapper_viewport_set_usage(WasGo::WasGoId p_viewport, WasGo::WasGoId p_usage);
void _wasgo_VisualServer_wrapper_viewport_set_use_arvr(WasGo::WasGoId p_viewport, bool p_use_arvr);
void _wasgo_VisualServer_wrapper_viewport_set_use_debanding(WasGo::WasGoId p_viewport, bool p_debanding);
void _wasgo_VisualServer_wrapper_viewport_set_use_fxaa(WasGo::WasGoId p_viewport, bool p_fxaa);
void _wasgo_VisualServer_wrapper_viewport_set_vflip(WasGo::WasGoId p_viewport, bool p_enabled);
void _wasgo_VisualShader_wrapper_add_node(WasGo::WasGoId p_type, WasGo::WasGoId p_node, WasGo::WasGoId p_position, int p_id);
int _wasgo_VisualShader_wrapper_can_connect_nodes(WasGo::WasGoId p_type, int p_from_node, int p_from_port, int p_to_node, int p_to_port);
WasGo::WasGoId _wasgo_VisualShader_wrapper_connect_nodes(WasGo::WasGoId p_type, int p_from_node, int p_from_port, int p_to_node, int p_to_port);
void _wasgo_VisualShader_wrapper_connect_nodes_forced(WasGo::WasGoId p_type, int p_from_node, int p_from_port, int p_to_node, int p_to_port);
void _wasgo_VisualShader_wrapper_disconnect_nodes(WasGo::WasGoId p_type, int p_from_node, int p_from_port, int p_to_node, int p_to_port);
WasGo::WasGoId _wasgo_VisualShader_wrapper_get_graph_offset();
WasGo::WasGoId _wasgo_VisualShader_wrapper_get_node(WasGo::WasGoId p_type, int p_id);
WasGo::WasGoId _wasgo_VisualShader_wrapper_get_node_connections(WasGo::WasGoId p_type);
WasGo::WasGoId _wasgo_VisualShader_wrapper_get_node_list(WasGo::WasGoId p_type);
WasGo::WasGoId _wasgo_VisualShader_wrapper_get_node_position(WasGo::WasGoId p_type, int p_id);
int _wasgo_VisualShader_wrapper_get_valid_node_id(WasGo::WasGoId p_type);
int _wasgo_VisualShader_wrapper_is_node_connection(WasGo::WasGoId p_type, int p_from_node, int p_from_port, int p_to_node, int p_to_port);
void _wasgo_VisualShader_wrapper_remove_node(WasGo::WasGoId p_type, int p_id);
void _wasgo_VisualShader_wrapper_set_graph_offset(WasGo::WasGoId p_offset);
void _wasgo_VisualShader_wrapper_set_mode(WasGo::WasGoId p_mode);
void _wasgo_VisualShader_wrapper_set_node_position(WasGo::WasGoId p_type, int p_id, WasGo::WasGoId p_position);
WasGo::WasGoId _wasgo_VisualShaderNode_wrapper_get_default_input_values();
WasGo::WasGoId _wasgo_VisualShaderNode_wrapper_get_input_port_default_value(int p_port);
int _wasgo_VisualShaderNode_wrapper_get_output_port_for_preview();
void _wasgo_VisualShaderNode_wrapper_set_default_input_values(WasGo::WasGoId p_values);
void _wasgo_VisualShaderNode_wrapper_set_input_port_default_value(int p_port, WasGo::WasGoId p_value);
void _wasgo_VisualShaderNode_wrapper_set_output_port_for_preview(int p_port);
int _wasgo_VisualShaderNodeBooleanConstant_wrapper_get_constant();
void _wasgo_VisualShaderNodeBooleanConstant_wrapper_set_constant(bool p_value);
WasGo::WasGoId _wasgo_VisualShaderNodeColorConstant_wrapper_get_constant();
void _wasgo_VisualShaderNodeColorConstant_wrapper_set_constant(WasGo::WasGoId p_value);
WasGo::WasGoId _wasgo_VisualShaderNodeColorFunc_wrapper_get_function();
void _wasgo_VisualShaderNodeColorFunc_wrapper_set_function(WasGo::WasGoId p_func);
WasGo::WasGoId _wasgo_VisualShaderNodeColorOp_wrapper_get_operator();
void _wasgo_VisualShaderNodeColorOp_wrapper_set_operator(WasGo::WasGoId p_op);
WasGo::WasGoId _wasgo_VisualShaderNodeCompare_wrapper_get_comparison_type();
WasGo::WasGoId _wasgo_VisualShaderNodeCompare_wrapper_get_condition();
WasGo::WasGoId _wasgo_VisualShaderNodeCompare_wrapper_get_function();
void _wasgo_VisualShaderNodeCompare_wrapper_set_comparison_type(WasGo::WasGoId p_type);
void _wasgo_VisualShaderNodeCompare_wrapper_set_condition(WasGo::WasGoId p_condition);
void _wasgo_VisualShaderNodeCompare_wrapper_set_function(WasGo::WasGoId p_func);
WasGo::WasGoId _wasgo_VisualShaderNodeCubeMap_wrapper_get_cube_map();
WasGo::WasGoId _wasgo_VisualShaderNodeCubeMap_wrapper_get_source();
WasGo::WasGoId _wasgo_VisualShaderNodeCubeMap_wrapper_get_texture_type();
void _wasgo_VisualShaderNodeCubeMap_wrapper_set_cube_map(WasGo::WasGoId p_value);
void _wasgo_VisualShaderNodeCubeMap_wrapper_set_source(WasGo::WasGoId p_value);
void _wasgo_VisualShaderNodeCubeMap_wrapper_set_texture_type(WasGo::WasGoId p_value);
WasGo::WasGoId _wasgo_VisualShaderNodeExpression_wrapper_get_expression();
void _wasgo_VisualShaderNodeExpression_wrapper_set_expression(WasGo::WasGoId p_expression);
void _wasgo_VisualShaderNodeGroupBase_wrapper_add_input_port(int p_id, int p_type, WasGo::WasGoId p_name);
void _wasgo_VisualShaderNodeGroupBase_wrapper_add_output_port(int p_id, int p_type, WasGo::WasGoId p_name);
void _wasgo_VisualShaderNodeGroupBase_wrapper_clear_input_ports();
void _wasgo_VisualShaderNodeGroupBase_wrapper_clear_output_ports();
int _wasgo_VisualShaderNodeGroupBase_wrapper_get_free_input_port_id();
int _wasgo_VisualShaderNodeGroupBase_wrapper_get_free_output_port_id();
int _wasgo_VisualShaderNodeGroupBase_wrapper_get_input_port_count();
WasGo::WasGoId _wasgo_VisualShaderNodeGroupBase_wrapper_get_inputs();
int _wasgo_VisualShaderNodeGroupBase_wrapper_get_output_port_count();
WasGo::WasGoId _wasgo_VisualShaderNodeGroupBase_wrapper_get_outputs();
WasGo::WasGoId _wasgo_VisualShaderNodeGroupBase_wrapper_get_size();
int _wasgo_VisualShaderNodeGroupBase_wrapper_has_input_port(int p_id);
int _wasgo_VisualShaderNodeGroupBase_wrapper_has_output_port(int p_id);
int _wasgo_VisualShaderNodeGroupBase_wrapper_is_valid_port_name(WasGo::WasGoId p_name);
void _wasgo_VisualShaderNodeGroupBase_wrapper_remove_input_port(int p_id);
void _wasgo_VisualShaderNodeGroupBase_wrapper_remove_output_port(int p_id);
void _wasgo_VisualShaderNodeGroupBase_wrapper_set_input_port_name(int p_id, WasGo::WasGoId p_name);
void _wasgo_VisualShaderNodeGroupBase_wrapper_set_input_port_type(int p_id, int p_type);
void _wasgo_VisualShaderNodeGroupBase_wrapper_set_inputs(WasGo::WasGoId p_inputs);
void _wasgo_VisualShaderNodeGroupBase_wrapper_set_output_port_name(int p_id, WasGo::WasGoId p_name);
void _wasgo_VisualShaderNodeGroupBase_wrapper_set_output_port_type(int p_id, int p_type);
void _wasgo_VisualShaderNodeGroupBase_wrapper_set_outputs(WasGo::WasGoId p_outputs);
void _wasgo_VisualShaderNodeGroupBase_wrapper_set_size(WasGo::WasGoId p_size);
WasGo::WasGoId _wasgo_VisualShaderNodeInput_wrapper_get_input_name();
WasGo::WasGoId _wasgo_VisualShaderNodeInput_wrapper_get_input_real_name();
void _wasgo_VisualShaderNodeInput_wrapper_set_input_name(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_VisualShaderNodeIs_wrapper_get_function();
void _wasgo_VisualShaderNodeIs_wrapper_set_function(WasGo::WasGoId p_func);
float _wasgo_VisualShaderNodeScalarConstant_wrapper_get_constant();
void _wasgo_VisualShaderNodeScalarConstant_wrapper_set_constant(float p_value);
WasGo::WasGoId _wasgo_VisualShaderNodeScalarDerivativeFunc_wrapper_get_function();
void _wasgo_VisualShaderNodeScalarDerivativeFunc_wrapper_set_function(WasGo::WasGoId p_func);
WasGo::WasGoId _wasgo_VisualShaderNodeScalarFunc_wrapper_get_function();
void _wasgo_VisualShaderNodeScalarFunc_wrapper_set_function(WasGo::WasGoId p_func);
WasGo::WasGoId _wasgo_VisualShaderNodeScalarOp_wrapper_get_operator();
void _wasgo_VisualShaderNodeScalarOp_wrapper_set_operator(WasGo::WasGoId p_op);
WasGo::WasGoId _wasgo_VisualShaderNodeTexture_wrapper_get_source();
WasGo::WasGoId _wasgo_VisualShaderNodeTexture_wrapper_get_texture();
WasGo::WasGoId _wasgo_VisualShaderNodeTexture_wrapper_get_texture_type();
void _wasgo_VisualShaderNodeTexture_wrapper_set_source(WasGo::WasGoId p_value);
void _wasgo_VisualShaderNodeTexture_wrapper_set_texture(WasGo::WasGoId p_value);
void _wasgo_VisualShaderNodeTexture_wrapper_set_texture_type(WasGo::WasGoId p_value);
WasGo::WasGoId _wasgo_VisualShaderNodeTextureUniform_wrapper_get_color_default();
WasGo::WasGoId _wasgo_VisualShaderNodeTextureUniform_wrapper_get_texture_type();
void _wasgo_VisualShaderNodeTextureUniform_wrapper_set_color_default(WasGo::WasGoId p_type);
void _wasgo_VisualShaderNodeTextureUniform_wrapper_set_texture_type(WasGo::WasGoId p_type);
WasGo::WasGoId _wasgo_VisualShaderNodeTransformConstant_wrapper_get_constant();
void _wasgo_VisualShaderNodeTransformConstant_wrapper_set_constant(WasGo::WasGoId p_value);
WasGo::WasGoId _wasgo_VisualShaderNodeTransformFunc_wrapper_get_function();
void _wasgo_VisualShaderNodeTransformFunc_wrapper_set_function(WasGo::WasGoId p_func);
WasGo::WasGoId _wasgo_VisualShaderNodeTransformMult_wrapper_get_operator();
void _wasgo_VisualShaderNodeTransformMult_wrapper_set_operator(WasGo::WasGoId p_op);
WasGo::WasGoId _wasgo_VisualShaderNodeTransformVecMult_wrapper_get_operator();
void _wasgo_VisualShaderNodeTransformVecMult_wrapper_set_operator(WasGo::WasGoId p_op);
WasGo::WasGoId _wasgo_VisualShaderNodeUniform_wrapper_get_uniform_name();
void _wasgo_VisualShaderNodeUniform_wrapper_set_uniform_name(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_VisualShaderNodeUniformRef_wrapper_get_uniform_name();
void _wasgo_VisualShaderNodeUniformRef_wrapper_set_uniform_name(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_VisualShaderNodeVec3Constant_wrapper_get_constant();
void _wasgo_VisualShaderNodeVec3Constant_wrapper_set_constant(WasGo::WasGoId p_value);
WasGo::WasGoId _wasgo_VisualShaderNodeVectorDerivativeFunc_wrapper_get_function();
void _wasgo_VisualShaderNodeVectorDerivativeFunc_wrapper_set_function(WasGo::WasGoId p_func);
WasGo::WasGoId _wasgo_VisualShaderNodeVectorFunc_wrapper_get_function();
void _wasgo_VisualShaderNodeVectorFunc_wrapper_set_function(WasGo::WasGoId p_func);
WasGo::WasGoId _wasgo_VisualShaderNodeVectorOp_wrapper_get_operator();
void _wasgo_VisualShaderNodeVectorOp_wrapper_set_operator(WasGo::WasGoId p_op);
int _wasgo_WasGoState_wrapper_get_heap_size();
WasGo::WasGoId _wasgo_WasGoState_wrapper_get_properties();
int _wasgo_WasGoState_wrapper_get_stack_size();
WasGo::WasGoId _wasgo_WasGoState_wrapper_get_wasm_script();
void _wasgo_WasGoState_wrapper_set_heap_size(int p_p_heap_size);
void _wasgo_WasGoState_wrapper_set_properties(WasGo::WasGoId p_p_properties);
void _wasgo_WasGoState_wrapper_set_stack_size(int p_p_stack_size);
void _wasgo_WasGoState_wrapper_set_wasm_script(WasGo::WasGoId p_p_wasm_script);
WasGo::WasGoId _wasgo_WasmResource_wrapper_get_buf();
WasGo::WasGoId _wasgo_WeakRef_wrapper_get_ref();
WasGo::WasGoId _wasgo_World_wrapper_get_direct_space_state();
WasGo::WasGoId _wasgo_World_wrapper_get_environment();
WasGo::WasGoId _wasgo_World_wrapper_get_fallback_environment();
WasGo::WasGoId _wasgo_World_wrapper_get_scenario();
WasGo::WasGoId _wasgo_World_wrapper_get_space();
void _wasgo_World_wrapper_set_environment(WasGo::WasGoId p_env);
void _wasgo_World_wrapper_set_fallback_environment(WasGo::WasGoId p_env);
WasGo::WasGoId _wasgo_World2D_wrapper_get_canvas();
WasGo::WasGoId _wasgo_World2D_wrapper_get_direct_space_state();
WasGo::WasGoId _wasgo_World2D_wrapper_get_space();
WasGo::WasGoId _wasgo_WorldEnvironment_wrapper_get_environment();
void _wasgo_WorldEnvironment_wrapper_set_environment(WasGo::WasGoId p_env);
WasGo::WasGoId _wasgo_X509Certificate_wrapper_load(WasGo::WasGoId p_path);
WasGo::WasGoId _wasgo_X509Certificate_wrapper_save(WasGo::WasGoId p_path);
int _wasgo_XMLParser_wrapper_get_attribute_count();
WasGo::WasGoId _wasgo_XMLParser_wrapper_get_attribute_name(int p_idx);
WasGo::WasGoId _wasgo_XMLParser_wrapper_get_attribute_value(int p_idx);
int _wasgo_XMLParser_wrapper_get_current_line();
WasGo::WasGoId _wasgo_XMLParser_wrapper_get_named_attribute_value(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_XMLParser_wrapper_get_named_attribute_value_safe(WasGo::WasGoId p_name);
WasGo::WasGoId _wasgo_XMLParser_wrapper_get_node_data();
WasGo::WasGoId _wasgo_XMLParser_wrapper_get_node_name();
int _wasgo_XMLParser_wrapper_get_node_offset();
WasGo::WasGoId _wasgo_XMLParser_wrapper_get_node_type();
int _wasgo_XMLParser_wrapper_has_attribute(WasGo::WasGoId p_name);
int _wasgo_XMLParser_wrapper_is_empty();
WasGo::WasGoId _wasgo_XMLParser_wrapper_open(WasGo::WasGoId p_file);
WasGo::WasGoId _wasgo_XMLParser_wrapper_open_buffer(WasGo::WasGoId p_buffer);
WasGo::WasGoId _wasgo_XMLParser_wrapper_read();
WasGo::WasGoId _wasgo_XMLParser_wrapper_seek(int p_position);
void _wasgo_XMLParser_wrapper_skip_section();
int _wasgo_YSort_wrapper_is_sort_enabled();
void _wasgo_YSort_wrapper_set_sort_enabled(bool p_enabled);
}
#endif